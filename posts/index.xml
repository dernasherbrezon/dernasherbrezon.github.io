<rss version="2.0" xmlns:yandex="http://news.yandex.ru"
  xmlns:media="http://search.yahoo.com/mrss/"
  xmlns:turbo="http://turbo.yandex.ru" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>dernasherbrezon</title>
    <link>https://dernasherbrezon.com/posts/</link>
    <description>Блог о программировании на Java</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ru</language>
    <lastBuildDate>Sat, 07 Jan 2023 16:33:18 +0100</lastBuildDate>
    
        <atom:link href="https://dernasherbrezon.com/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item turbo="true">
      <title>sx127x</title>
      <link>https://dernasherbrezon.com/posts/sx127x/</link>
      <pubDate>Sat, 07 Jan 2023 16:33:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/sx127x/</guid>
      <description>Один из фундаментальных вопросов, на который каждый программист должен периодически отвечать - &amp;ldquo;стоит ли взять готовую библиотеку или написать свою?&amp;rdquo;. Однозначно ответить на этот вопрос раз и навсегда не получится. Надо каждый раз садится и разбираться в каждом конкретном случае. Вот и мне недавно выпал этот случай.
В прошлом посте я писал как уменьшил потребление тока LoRa до 16мА. Однако, для этого мне пришлось модифицировать уже существующую библиотеку arduino-LoRa. Для того, чтобы провести эксперимент и проверить теорию, этого вполне достаточно, но для полноценного инженерного решения нужно что-то более основательное.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>sx127x</h1></header>
      		<div class='container entry-content'>
  <p>Один из фундаментальных вопросов, на который каждый программист должен периодически отвечать - &ldquo;стоит ли взять готовую библиотеку или написать свою?&rdquo;. Однозначно ответить на этот вопрос раз и навсегда не получится. Надо каждый раз садится и разбираться в каждом конкретном случае. Вот и мне недавно выпал этот случай.</p>
<p>В <a href="https://dernasherbrezon.com/posts/lora-deep-sleep/">прошлом посте</a> я писал как уменьшил потребление тока LoRa до 16мА. Однако, для этого мне пришлось модифицировать уже существующую библиотеку <a href="https://github.com/sandeepmistry/arduino-LoRa">arduino-LoRa</a>. Для того, чтобы провести эксперимент и проверить теорию, этого вполне достаточно, но для полноценного инженерного решения нужно что-то более основательное.</p>
<p>И тут возникает тот самый вопрос: стоит ли взять готовую библиотеку или написать свою?</p>
<h2 id="существующие-библиотеки">Существующие библиотеки</h2>
<p>Я проверил: <a href="https://github.com/sandeepmistry/arduino-LoRa">arduino-LoRa</a>, <a href="https://github.com/jgromes/RadioLib">RadioLib</a>, <a href="https://github.com/fifteenhex/sx127x">sx127x by fifteenhex</a>, <a href="https://github.com/morransmith/sx127x">sx127x by morransmith</a>, <a href="https://github.com/Inteform/esp32-lora-library">esp32-lora-library</a>, <a href="https://github.com/nopnop2002/esp-idf-sx127x">esp-idf-sx127x</a> и оказалось, что ни одна из них не удовлетворяет моим требованиям! Все они подразумевают, что в начале работы с модулем, его нужно перевести в режим сна и обратно в режим ожидания. Это сбросит все данные, которые до этого лежали в FIFO буфере. Но при загрузке из режима глубокого сна этот буфер содержит принятое сообщение! Прежде, чем бросаться писать свою собственную библиотеку я мог бы сделать pull request с тем, что мне нужно. Но и тут я не уверен в результате: моё изменение слишком низкоуровневое и противоречит концепции многих библиотек.</p>
<p>Вообще просмотрев существующие библиотеки для arduino и ESP32, мне показалось, что их написали любители, которые плохо разбираются в программировании. Взять, например, <a href="https://github.com/sandeepmistry/arduino-LoRa">arduino-LoRa</a>. Библиотека, в которой нет ни одной строчки комментария, имеет 1300+ звёзд на Github и де-факто является стандартной библиотекой для работы с LoRa. Помимо этого, в ней смешана инициализация SPI, работа с отдельными пинами и, собственно, логика управления чипом sx127x. Удивительно, но только один метод из более чем 30, возвращает код ошибки. Остальные возвращают void.</p>
<p>В этом плане <a href="https://github.com/jgromes/RadioLib">RadioLib</a> написана чуть лучше. В ней есть отдельная сущность Module, которая абстрагирует работу с SPI. Однако, делает это не до конца.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++"><span style="color:#66d9ef">int16_t</span> SX127x<span style="color:#f92672">::</span>begin(<span style="color:#66d9ef">uint8_t</span> chipVersion, <span style="color:#66d9ef">uint8_t</span> syncWord, <span style="color:#66d9ef">uint16_t</span> preambleLength) {
  <span style="color:#75715e">// set module properties
</span><span style="color:#75715e"></span>  _mod<span style="color:#f92672">-&gt;</span>init(RADIOLIB_USE_SPI);
  Module<span style="color:#f92672">::</span>pinMode(_mod<span style="color:#f92672">-&gt;</span>getIrq(), INPUT);
  Module<span style="color:#f92672">::</span>pinMode(_mod<span style="color:#f92672">-&gt;</span>getGpio(), INPUT);
  ...
}
</code></pre></div><p>Метод <code>pinMode</code> - не является частью протокола SPI и зачем он был добавлен в <code>Module</code> остаётся загадкой. Вообще, управление пинами - не является частью спецификации чипа sx127x и, соответственно, не должно быть внутри библиотеки.</p>
<p>Помимо этого, RadioLib - крайне запутанная библиотека. Несмотря на то, что есть физическая абстракция SPI интерфейса под названием <code>Module</code>, в ней так же есть отдельная сущность <code>PhysicalLayer</code>. Вся эта иерархия классов в RadioLib явно переусложнена. Например, вот так выглядит наследование:</p>
<pre><code>PhysicalLayer -&gt; SX127x -&gt; SX1278 -&gt; SX1276
</code></pre><p>Из этого следует, что при инициализации нужно знать модель чипа и в зависимости от неё создавать класс SX1278 или SX1276.</p>
<p>Всего этого оказалось достаточно, чтобы начать разрабатывать свою библиотеку. И не зря, ибо вскрылось множество откровенно странных вещей во многих реализациях.</p>
<h2 id="sx127x">sx127x</h2>
<p>Если честно, то я не сразу придумал название библиотеки, зато с самого начала знал, как она должна работать:</p>
<ul>
<li>Библиотека должна переводить документацию на чип в C код. Она не должна строить никаких предположений о том, как её будут использовать и в каком порядке вызывать методы. При таком подходе работа с ней будет чуть более многословной, зато функции можно будет комбинировать как нужно и вызывать хоть из отдельных потоков, хоть из тасков. В моём случае я смогу инициализировать доступ к чипу не перетирая данные при выходе из глубокого сна.</li>
<li>Библиотека должны быть написана на С и быть документированной. Желательно с отсылками в документацию на чип. Из С++ вызвать С не проблема, а вот из С вызывать С++ очень сложно. Да и С мне нравится больше.</li>
<li>Библиотека не должна зависить от других библиотек. SPI интерфейс есть в стандартной библиотеке ESP, а это единственное, что должно быть нужно.</li>
</ul>
<p>В результате у меня всё получилось:</p>
<p><a href="https://github.com/dernasherbrezon/sx127x">https://github.com/dernasherbrezon/sx127x</a></p>
<h2 id="детали-реализации">Детали реализации</h2>
<p>Когда я только начал работать над библиотекой, я лишь в общих чертах представлял работу чипа. Если вкратце, то нужно инициализировать SPI устройство и через SPI установить нужные регистры. Этих регистров очень много и в зависимости от режима работы (LoRa или FSK) одни и те же регистры значат разное. Однако, по мере работы над библиотекой и чтением документации я узнавал всё больше и всё больше удивлялся насколько стандартные библиотеки непродуманы.</p>
<h3 id="header-mode">Header mode</h3>
<p>Оказывается, в протоколе LoRa есть такое понятие как &ldquo;явный заголовок&rdquo; и &ldquo;неявный заголовок&rdquo;. &ldquo;Явный заголовок&rdquo; - это режим работы, при котором в каждое сообщение отправляемое в сеть добавляется заголовок. Приёмник в свою очередь получает такой заголовок и понимает параметры сообщения:</p>
<ul>
<li>длина сообщения</li>
<li>используется контрольная сумма или нет</li>
<li>параметры для FEC декодирования</li>
</ul>
<p><img src="/img/sx127x/1.png" alt=""></p>
<p>Получается на приёмнике эти параметры конфигурировать не надо!</p>
<p>В режиме неявного заголовка он не передаётся и подразумевается, что передатчик и приёмник заранее довогорились о параметрах и передавать их не нужно. Зачем же нужен такой режим? Ну во-первых, для того, чтобы быстрее передать сообщение. В некоторых странах есть ограничение на время в течении которого можно передавать сигнал в ISM band (частоты на которых обычно работает LoRa). Чем быстрее сообщение передастся, тем больше данных можно передать за единицу времени. Во-вторых, передавая быстро сообщение, можно экономить энергию.</p>
<p>В sx127x сделана явная поддержка обоих режимов:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#75715e">/**
</span><span style="color:#75715e"> * @brief Set implicit header.
</span><span style="color:#75715e"> *
</span><span style="color:#75715e"> * sx127x can send packets for explicit header or without it (implicit). In implicit mode receiver should be configured with pre-defined values using this function.
</span><span style="color:#75715e"> * In explicit mode, all information is sent in the header. Thus no configuration needed.
</span><span style="color:#75715e"> *
</span><span style="color:#75715e"> * @param header Pre-defined packet information. If NULL, then assume explicit header in RX mode. For TX explicit mode please use sx127x_set_tx_explcit_header function.
</span><span style="color:#75715e"> * @param device Pointer to variable to hold the device handle
</span><span style="color:#75715e"> * @return
</span><span style="color:#75715e"> *         - ESP_ERR_INVALID_ARG   if parameter is invalid
</span><span style="color:#75715e"> *         - ESP_OK                on success
</span><span style="color:#75715e"> */</span>
esp_err_t <span style="color:#a6e22e">sx127x_set_implicit_header</span>(sx127x_implicit_header_t <span style="color:#f92672">*</span>header, sx127x <span style="color:#f92672">*</span>device);
</code></pre></div><h3 id="tx-power">TX power</h3>
<p>В LoRa чипах конфигурирование мощности передатчика достаточно запутанное. В чипе есть два пина, к которым может подключаться антенна:</p>
<ul>
<li>RFO</li>
<li>PA_BOOST</li>
</ul>
<p><img src="/img/sx127x/2.png" alt=""></p>
<p>Через RFO можно добится усиление мощности в 15dbm, а через PA_BOOST - 20dbm. При этом в официальной документации рекомендуют ограничивать максимальное потребление тока для разного уровня усиления. Я долго пытался понять зачем это нужно и придумал следующее объяснение. Усилитель мощности потребляет ток, чтобы входящий сигнал увеличить в Х раз. Мощность исходящего сигнала зависит не только от тока и напряжения, но и от сопротивления. Теперь можно представить ситуацию при которой антенна, импеданс которой 50 Ом, заржавела. Или контакт между антенной и чипом заржавел. Или подключили антенну на 75 Ом. Тогда, для того, чтобы получить те же самые 20dbm при том же напряжении 3.3В нужно подать гораздо больший ток. Если потребление тока не ограничивать, то вся система станет потреблять больше энергии в лучшем случае. А в худшем, чип или контакты могут перегореть. В библиотеке sx127x при конфигурировании мощности усилителя одновременно ограничивается максимальное потребление тока. Тем не менее потребление тока можно переопределить с помощью специального метода:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#75715e">/**
</span><span style="color:#75715e"> * @brief Configure overload current protection (OCP) for PA.
</span><span style="color:#75715e"> *
</span><span style="color:#75715e"> * @param onoff Enable or disable OCP
</span><span style="color:#75715e"> * @param milliamps Maximum current in milliamps
</span><span style="color:#75715e"> * @param device Pointer to variable to hold the device handle
</span><span style="color:#75715e"> * @return
</span><span style="color:#75715e"> *         - ESP_ERR_INVALID_ARG   if parameter is invalid
</span><span style="color:#75715e"> *         - ESP_OK                on success
</span><span style="color:#75715e"> */</span>
esp_err_t <span style="color:#a6e22e">sx127x_set_ocp</span>(sx127x_ocp_t onoff, uint8_t milliamps, sx127x <span style="color:#f92672">*</span>device);
</code></pre></div><h3 id="обработка-прерываний">Обработка прерываний</h3>
<p>Обработка прерываний, как оказалось, одна из самых сложных концепций, которая реализована из рук вон плохо исключительно во всех библиотеках. Кроме sx127x. LoRa чип очень активно использует прерывания. Когда чип получает сообщение, то генерируется прерывание. Когда сообщение отправлено, то тоже генерируется прерывание. Когда frequency hopping требует переключения частоты, то тоже генерируется прерывание. Вообще в LoRa чипах около 12-ти типов прерываний. Для того, чтобы получать эти прерывания, отдельные пины чипа должны быть подключены в процессору. К сожалению, в стандартных платах TTGO и Heltec подключен только один пин DIO0 - минимально необходимый для отправки и получения данных.</p>
<p>В большинстве библиотек механизм прерываний спрятан внутри библиотеки. Это крайне плохой дизайн по нескольким причинам:</p>
<ul>
<li>Нет способа обрабатывать прерывания асинхронно с помощью тасков FreeRTOS. Обычно реализация выглядит так:</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++">start <span style="color:#f92672">=</span> Module<span style="color:#f92672">::</span>micros();
<span style="color:#66d9ef">while</span>(<span style="color:#f92672">!</span>Module<span style="color:#f92672">::</span>digitalRead(_mod<span style="color:#f92672">-&gt;</span>getIrq())) {
  Module<span style="color:#f92672">::</span>yield();
  <span style="color:#66d9ef">if</span>(Module<span style="color:#f92672">::</span>micros() <span style="color:#f92672">-</span> start <span style="color:#f92672">&gt;</span> timeout) {
    clearIRQFlags();
    <span style="color:#66d9ef">return</span>(ERR_TX_TIMEOUT);
  }
}
</code></pre></div><p>SPI шина постоянно загружена поллингом, процессор работает на максимальной скорости и потребляет энергию, все остальные задачи заблокированы. В коде выше по сути даже и не обрабатывается прерывание, а просто читается регистр, чтобы понять завершилась ли передача данных.</p>
<ul>
<li>Получается сильно связанный код между логикой работы чипа и обработкой прерываний в конкретном фреймворке. Причём в arduino-LoRa callback функция вызывается в ISR. Если функция будет долго работать или выводить в Serial, то приложение упадёт.</li>
</ul>
<p>В sx127x я решил убрать любое упоминание прерываний, ISR и задач FreeRTOS. Для того, чтобы сконфигурировать прерывание от чипа библиотека не нужна. Достаточно написать:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">ESP_ERROR_CHECK(gpio_isr_handler_add((gpio_num_t)DIO0, handle_interrupt_fromisr, (<span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>)device));
</code></pre></div><p>Как будет реализован обработчик прерывания должно решать преложение. Это может быть тот же самый бесконечный цикл. Или отдельный таск в FreeRTOS. Или что-нибудь ещё. Главное, чтобы в этом цикле вызывалась функция <code>sx127x_handle_interrupt</code> - именно она обработает регистр прерываний, поймёт какое именно прерывание произошло и вызовет соответствующий callback.</p>
<h3 id="обработка-ошибок">Обработка ошибок</h3>
<p>Отправка или получение данных через SPI может закончится ошибкой. Это либо таймаут, либо неправильный аргумент при формировании сообщения, либо что-то ещё. При работе с LoRa чипом почти каждый метод - это отправка и получение небольших сообщений через SPI. Вот и получается, что каждый метод в теории может вернуть ошибку.</p>
<p>Поскольку моя библиотека написана на С, то я решил ничего не придумывать, а сделать общепризнанную обработку ошибок через возвращаемые коды. Именно поэтому почти каждая функция возвращает значение <code>esp_err_t</code>. А если функция должна вернуть значение, то оно возвращается через параметр-указатель.</p>
<p>Как это не приходится признавать, но обработка ошибок всегда увеличивает размер кода и уменьшает читаемость. Единственное, что тут можно сделать - это попытаться смягчить боль. Например, делать обработку ошибок единообразной.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">esp_err_t code <span style="color:#f92672">=</span> sx127x_set_bandwidth(bw, device);
<span style="color:#66d9ef">if</span> (code <span style="color:#f92672">!=</span> ESP_OK) {
  <span style="color:#66d9ef">return</span> code;
}
code <span style="color:#f92672">=</span> sx127x_set_implicit_header(NULL, device);
<span style="color:#66d9ef">if</span> (code <span style="color:#f92672">!=</span> ESP_OK) {
  <span style="color:#66d9ef">return</span> code;
}
</code></pre></div><h3 id="документация">Документация</h3>
<p>Я заметил одну странную особенность: написание документации способствует написанию лучшего кода. Именно во время написания документации ко всем функциям я начал понимать, где функция лишняя, где наоборот нужно добавить параметров, где нет единообразия, а где нужно всё переделать. Оказалось это упраженение помогает взглянуть на проект издалека и понять, что можно улучшить.</p>
<p>Я прочитал много кода из стандартной библиотеки ESP и считаю, что она имеет очень хорошую документацию. А поскольку моя библиотека поддерживается только ESP, то было вполне логично оформить документацию в том же стиле.</p>
<p><img src="/img/sx127x/3.png" alt=""></p>
<h3 id="дистрибуция">Дистрибуция</h3>
<p>Библиотека, которую сложно подключить, никому не нужна. Именно поэтому стоит задуматься и над тем, как другие разработчики будут её использовать.</p>
<p>С этим у меня возникли определённые сложности. Дело в том, что до этого я имел дело только с PlatformIO. А там библиотека для ESP могла легко зависить от Arduino API. В теории с этим нет проблем, так как espressif выпустил слой совместимости между ESP и Arduino, но всё это выглядит неаккуратно.</p>
<p>В итоге я переписал библиотеку следующим образом:</p>
<ul>
<li>она не зависит от Arduino API</li>
<li>примеры использования зависят только от ESP API</li>
<li>структура кода соответствует <a href="https://docs.espressif.com/projects/esp-idf/en/latest/esp32/api-guides/build-system.html#example-project">ESP component</a></li>
</ul>
<p>В итоге её можно использовать либо как компонент в esp-idf, либо как обычную библиотеку из PlatformIO registry:</p>
<p><a href="https://registry.platformio.org/libraries/dernasherbrezon/sx127x">https://registry.platformio.org/libraries/dernasherbrezon/sx127x</a></p>
<h2 id="планы">Планы</h2>
<p>Удивительно, но факт: после всей той работы, что я проделал, библиотеку есть куда улучшать.</p>
<p>Во-первых, можно добавить поддержку FSK и OOK модуляций. Правда, они значительно усложняют работу с чипом. Я пока не придумал как на уровне API сделать удобной работу в разных режимах.</p>
<p>Во-вторых, можно добавить поддержку других типов прерываний. У меня есть только платы TTGO и Heltec, поэтому я могу протестировать только прерывания на пине DIO0, но если купить отдельный модуль, то можно использовать все пины и все типы прерываний. Вот будет потеха.</p>
<p>В-третьих, можно абстрагировать работу с SPI в отдельный файл. Это позволит использовать библиотеку и с RaspberryPI, и с Arduino, и с любым другим чипом. Для этого нужно было бы всего лишь имплементировать SPI конкретной платформы.</p>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Оптимизация энергопотребления LoRa</title>
      <link>https://dernasherbrezon.com/posts/lora-deep-sleep/</link>
      <pubDate>Sat, 10 Dec 2022 21:17:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/lora-deep-sleep/</guid>
      <description>Последние несколько месяцев я работаю над уменьшением энергопотребления в проекте lora-at. Идея заключается в том, чтобы сделать энергонезависимый приёмник, положить его на балконе и 24/7 принимать сигналы со спутников. Легче сказать, чем сделать. Особенно для того, кто никогда не оптимизировал код по низкое энергопотребление и не проектировал электрические цепи. Конечно, можно поставить самую большую солнечную панель, принимать сигналы только днём и не заморачиваться. Но мне такой подход показался недостойным звания инженера, поэтому я принял вызов и принялся проектировать.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Оптимизация энергопотребления LoRa</h1></header>
      		<div class='container entry-content'>
  <p>Последние несколько месяцев я работаю над уменьшением энергопотребления в проекте <a href="https://github.com/dernasherbrezon/lora-at">lora-at</a>. Идея заключается в том, чтобы сделать энергонезависимый приёмник, положить его на балконе и 24/7 принимать сигналы со спутников. Легче сказать, чем сделать. Особенно для того, кто никогда не оптимизировал код по низкое энергопотребление и не проектировал электрические цепи. Конечно, можно поставить самую большую солнечную панель, принимать сигналы только днём и не заморачиваться. Но мне такой подход показался недостойным звания инженера, поэтому я принял вызов и принялся проектировать.</p>
<h2 id="общая-схема">Общая схема</h2>
<p>Прежде чем оптимизировать энергопотребление, необходимо понять электрическую схему работы и алгоритм программы.</p>
<p><img src="/img/lora-deep-sleep/1.png" alt=""></p>
<p>Принцип работы достаточно простой:</p>
<ul>
<li>Солнечная панель 6В подключается к специальному контроллеру</li>
<li>Этот контроллер должен делать следующее:
<ul>
<li>заряжать батарею</li>
<li>следить за напряжением зарядки и уровнем разрядки батареи</li>
<li>отключать батарею от нагрузки при сильной разрядке</li>
<li>следить за током потребления с солнечной панели (MPTT)</li>
</ul>
</li>
<li>Li-ion батарея должна работать ночью, когда солнца нет и панель не вырабатывает достаточно энергии.</li>
<li>ESP32 плата с приёмником LoRa</li>
<li>(Опционально) делитель напряжения для мониторинга заряда батареи.</li>
</ul>
<p>Поскольку схема достаточно стандартная, то в интернете можно найти <a href="https://www.youtube.com/watch?v=WdP4nVQX-j0">множество разлиичных гидов</a> и описаний.</p>
<h2 id="алгоритм-работы-программы">Алгоритм работы программы</h2>
<p>С программной частью дела на такие радужные и что-то сложнее, чем &ldquo;hello world&rdquo; найти очень сложно. Основным и единственным способом уменьшить энергопотребление - это переход процессора в режим глубокого сна (deep sleep). При этом отключается большинство модулей процессора и энергопотребление минимально - 10 микроампер.</p>
<p><img src="/img/lora-deep-sleep/4.png" alt=""></p>
<p>При этом обычная линейная программа в таком режиме полностью меняется. Я пришёл к следующему алгоритму:</p>
<p><img src="/img/lora-deep-sleep/2.png" alt=""></p>
<p>Во-первых, мне нужно, чтобы прошивка поддерживала как работу в режиме глубокого сна, так и через AT команды. Они крайне удобны для отладки. Однако, в режиме глубокого сна последовательная шина недоступна. Чтобы это обойти я создал специальный таймер неактивности. Если в течении некоторого времени нет команд, то процессор переходит в режим глубокого сна. В этом режиме он периодически просыпается, получает по bluetooth время следующего наблюдения и уходит в спячку. Поскольку цикл бодрствования достаточно короткий, то успеть послать AT команду практически нереально. Чтобы послать AT команду устройству в режиме глубокого сна, нужно подойти и перезагрузить ESP32 вручную. Это немного неудобно, но с этим можно жить во время отладки. Либо на время отключить режим глубокого сна.</p>
<p>Во-вторых, используется bluetooth для связи с RaspberryPI. Этот протокол не самый энергоэффективный и логичнее было бы использовать тот же LoRa, чтобы отправлять данные. Но, к сожалению, в RaspberryPI нет модуля LoRa. А отдельный стоит <a href="https://thepihut.com/products/sx1262-lora-hat-for-raspberry-pi-868mhz-for-europe-asia-africa">достаточно дорого</a>. Хорошая новость заключается в том, что и ESP32 и RaspberryPI поддерживают энергоэффективную версию bluetooth - bluetooth low energy (BLE), которую логично использовать. Интеграция по bluetooth заслуживает отдельную статью.</p>
<h2 id="измерение-энергопотребления">Измерение энергопотребления</h2>
<p>В этот момент меня настигли вайбы лабораторных работ по физике в университете. За одним исключением - на этот раз мне действительно интересно узнать физику процесса. Для измерений я использовал USB тестер A3-B, который обозревал в одной из <a href="https://dernasherbrezon.com/posts/smart-usb-meter-a3-b/">предыдущих статей</a>. Результаты получились следующие:</p>
<ul>
<li>в режиме глубокого сна - 6 мА</li>
<li>в режиме приёма сигнала - 86 мА</li>
</ul>
<p>В среднем за день все спутники с LoRa передатчиком пролетают за 313 минут. Тогда всё остальное время глубокого сна будет 1127 минут. Итого:</p>
<pre><code>323 мин * 86 мА + 1127 мин * 6 мА = 575.66 мАч
</code></pre><p>Или в пересчёте на мощность:</p>
<pre><code>575.66 мАч * 3.3 В = 1.8997 Втч
</code></pre><p>1.8997 Втч потребления за сутки. Не очень понятно - это много или мало. Чтобы это понять, надо оценить теоретическую мощность, которую можно получить от солнечных панелей.</p>
<h2 id="теоретическая-мощность">Теоретическая мощность</h2>
<p>В <a href="https://www.youtube.com/watch?v=WdP4nVQX-j0">этом видео</a> очень хорошо объяснено, как посчитать теоретическую мощность от солнечных панелей. В моём случае входные параметры следующие:</p>
<ul>
<li>город - Лондон</li>
<li>солнечная панель 6В 1Вт площадью 11см * 6см. Да, я взял самую маленькую солнечную панель на 6В. Зато 3 штуки по скидке.</li>
<li>условная эффективность таких панелей - 15%</li>
<li>эффективность контроллера и понижения напряжения будем считать ещё 5%</li>
<li>направление панели - строго вверх</li>
<li>месяц - декабрь. Самый пасмурный месяц в году с минимальной продолжительностью солнечного дня.</li>
</ul>
<p>Итого:</p>
<pre><code>600 Втч/м2 * (15% - 5%) = 60 Втч/м2 = 0.006 Втч/см2
</code></pre><p>В пересчёта на мою солнечную панель:</p>
<pre><code>0.006 Втч/см2 * (11см * 6см) = 0.396 Втч
</code></pre><p>Расчёты крайне усреднённые и в один солнечный день может быть в два раза больше энергии, а в другой день - в два раза меньше. Тем не менее  получается, что моей солнечной панели не хватит ( 0.396 Втч &lt; 1.8997 Втч ).</p>
<p>Раз на целый день не хватит, то может быть на чуть-чуть хватит? Для этого я открыл вот <a href="https://en.tutiempo.net/solar-radiation/london.html">этот сайт</a> посмотреть сколько теоретически я могу получить энергии с разбивкой по часам.</p>
<p><img src="/img/lora-deep-sleep/3.png" alt=""></p>
<p>Итак, в 12 дня я смогу получить 221 Втч/м2.</p>
<pre><code>221 Втч/м2 * (15% - 5%) = 22.1 Втч/м2 = 0.00221 Втч/см2 * (11см * 6см) = 0.14586 Втч
</code></pre><p>А среднее потребление ESP32:</p>
<pre><code>1.8997 Втч / 24 = 0.07915 Втч
</code></pre><p>Получается, что энергии будет хватать. Таким образом вся станция будет запускаться часов в 11-12, работать от силы час или два и выключаться до следующего дня. Батарея при этом будет постоянно находится в разряженном состоянии и лишь немного заряжаться на 0.06671 Вт, чтобы потом опять разрядится.</p>
<h2 id="оптимизация-энергопотребления">Оптимизация энергопотребления</h2>
<p>Самые очевидные способы, которые приходят в голову без google:</p>
<ul>
<li>подключить ещё одну маленькую панель. 0.396 Втч * 2 = 0.792Втч - тоже не ахти.</li>
<li>переехать в Дубай</li>
<li>уменьшить количество наблюдений спутников</li>
<li>оптимизировать код</li>
</ul>
<p>Третий и четвёртый пункты выглядят очень заманчиво. Итак, если оставить только одно наблюдение в день:</p>
<pre><code>10 мин * 86 мА + 1430 мин * 6 мА = 860 мАмин + 8580 мАмин = 157.33 мАч * 3.3В = 519.2 Втч
</code></pre><p>То есть даже для одно наблюдения в день одной солнечной панели будет недостаточно. Нужно как минимум две.</p>
<p>Пришло время оптимизировать код.</p>
<h2 id="оптимизация-кода">Оптимизация кода</h2>
<p>В таблице ниже я собрал все техники, которые смог найти в интернете.</p>
<table>
	<thead>
		<tr>
			<th>Метод</th>
			<th>Потребление</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td>По-умолчанию пустой проект</td>
			<td>70мА</td>
		</tr>
		<tr>
			<td>Включённый LoRa приёмник</td>
			<td>86мА</td>
		</tr>
		<tr>
			<td>Пустой проект с пониженной частотой - 80Мгц<br/>Минимальная частота для работы bluetooth</td>
			<td>30мА</td>
		</tr>
		<tr>
			<td>Включённый LoRa приёмник с пониженной частотой ESP32</td>
			<td>46мА</td>
		</tr>
		<tr>
			<td>Глубокий сон</td>
			<td>6мА</td>
		</tr>
		<tr>
			<td><a href="https://github.com/Heltec-Aaron-Lee/WiFi_Kit_series/issues/6#issuecomment-403254130">Использовать питание через JST коннектор</a>, а не 5В USB</td>
			<td>Видимо токи маленькие и <a href="https://www.youtube.com/watch?v=LUB8RWzzLWc">померить мультиметром не получится</a></td>
		</tr>
		<tr>
			<td>Включённый LoRa приёмник с ESP32 в глубоком сне</td>
			<td>16мА</td>
		</tr>
	</tbody>
</table>
<p>Итак, самый интересный метод - последний. Я случайно наткнулся на него в <a href="https://learn.circuit.rocks/esp32-lora-gateway-battery-optimized">этой статье</a>. Дело в том, что ESP32 может выходить из глубокого сна с помощью нескольких способов - по таймеру, по изменению напряжения на внешнем пине, либо по прерыванию. При этом, когда приёмник LoRa получает сообщение, он тоже генерирует прерывание! Алгоритм работы в таком случае следующий:</p>
<p><img src="/img/lora-deep-sleep/5.png" alt=""></p>
<p>Соответствующая конфигурация:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">pinMode(RST, INPUT_PULLUP);
esp_sleep_enable_ext0_wakeup((gpio_num_t)DIO0, RISING);
</code></pre></div><p>Приёмник LoRa продолжит работать, даже если ESP32 уходит в спящий режим. Потребление в активном режиме сократится с 86мА до 16мА - больше, чем в 5 раз!</p>
<pre><code>323 мин * 16 мА + 1127 мин * 6 мА = 5168 мАмин + 6762 мАмин =
= 198.83 мАч * 3.3В = 656.15 Втч
</code></pre><p>Двух маленьких панелей будет достаточно, чтобы принять все пролетающие спутники.</p>
<p>К сожалению, ни одна из существующих библиотек не позволяет прочитать сообщение из LoRa после выхода из сна. Мне пришлось взять <a href="https://github.com/sandeepmistry/arduino-LoRa">arduino-LoRa</a> и модифицировать её.</p>
<h2 id="послесловие">Послесловие</h2>
<p>А потом я вышел на балкон и понял, что он выходит на север&hellip;</p>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>AMSAT-UK 2022</title>
      <link>https://dernasherbrezon.com/posts/amsat-uk-2022/</link>
      <pubDate>Fri, 28 Oct 2022 20:52:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/amsat-uk-2022/</guid>
      <description>В этом году я съездил на AMSAT-UK 2022 и выступил там с речью. Рассказал о том, как увеличивал количество данных, получаемых со спутников, разные трюки и планы.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>AMSAT-UK 2022</h1></header>
      		<div class='container entry-content'>
  
<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube.com/embed/NFOE_tfVzTU" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>

<p>В этом году я съездил на <a href="https://ukamsat.files.wordpress.com/2022/09/colloquium-2022.pdf">AMSAT-UK 2022</a> и выступил там с речью. Рассказал о том, как увеличивал количество данных, получаемых со спутников, разные трюки и планы.</p>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Датчик BH1750</title>
      <link>https://dernasherbrezon.com/posts/bh1750/</link>
      <pubDate>Fri, 05 Aug 2022 23:25:18 +0000</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/bh1750/</guid>
      <description>Введение Анализируя графики моей солнечной панели, я обнаружил, что мощность иногда падает практически до нуля. В попытках разобраться в чём же дело, я придумал несколько гипотез. Одна из гипотез заключалась в том, что облако пролетает над солнечной панелью и вызывает резкие изменения в показаниях. Для того, чтобы доказать эту гипотезу, я решил поставить датчик освещённости и в течении дня собирать данные. Если это действительно облако, то освещённость будет падать.
В качестве датчика освещённости я выбрал крайне распространённый BH1750.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Датчик BH1750</h1></header>
      		<div class='container entry-content'>
  <h2 id="введение">Введение</h2>
<p>Анализируя графики моей солнечной панели, я обнаружил, что мощность иногда падает практически до нуля. В попытках разобраться в чём же дело, я придумал несколько гипотез. Одна из гипотез заключалась в том, что облако пролетает над солнечной панелью и вызывает резкие изменения в показаниях. Для того, чтобы доказать эту гипотезу, я решил поставить датчик освещённости и в течении дня собирать данные. Если это действительно облако, то освещённость будет падать.</p>
<p>В качестве датчика освещённости я выбрал крайне распространённый BH1750.</p>
<p><img src="/img/bh1750/bh1750.jpg" alt=""></p>
<p>Под рукой у меня оказался raspberrypi и я решил подключить его обычными проводами.</p>
<h2 id="конфигурирование-raspberrypi">Конфигурирование raspberrypi</h2>
<p>Внутри датчика есть АЦП, который преобразует освещённость в цифровое значение в люксах и может отдавать по протоколу <a href="https://en.wikipedia.org/wiki/I%C2%B2C">I2C</a>. В raspberrypi необходимо включить поддержку I2C в системном меню:</p>
<pre><code>sudo raspi-config
</code></pre><p>Далее выбрать <code>Interface Options -&gt; I2C -&gt; Enable</code>.</p>
<p><img src="/img/bh1750/raspi-config.png" alt=""></p>
<p>Если всё прошло успешно и датчик подключён правильно, то можно проверить состояние командой:</p>
<pre><code>i2cdetect -y 1
</code></pre><p><img src="/img/bh1750/i2cdetect.png" alt=""></p>
<p>Если такой программы нет, то её можно установить:</p>
<pre><code>sudo apt-get install -y i2c-tools
</code></pre><p>На скриншоте выше видно, что датчик подключен корректно и доступен по стандартному адресу 0x23. По I2C можно подключить несколько разных устройств паралелльно и у каждого будет свой адрес.</p>
<h2 id="считывание-данных">Считывание данных</h2>
<p>Если поискать в Интернет программы для работы с таким датчиком, то почти все результаты будут для Arduino. Мне удалось <a href="https://github.com/adafruit/Adafruit_CircuitPython_BH1750">найти программу</a> написаннную на разновидности Python - CircuitPython. После небольших приседаний мне удалось заставить её работать, но это же Python! Хочется чего-нибудь более легковесного.</p>
<p>Спустя некоторое время мне удалось найти <a href="https://github.com/torvalds/linux/blob/master/drivers/iio/light/bh1750.c">драйвер для этого датчика</a> в ядре Linux! Но по-умолчанию, этот драйвер не включен в raspberrypi, а значит придётся пересобирать модуль для ядра и вручную его подгружать. Не очень приятная процедура.</p>
<p>Именно поэтому я решил разобраться, а как же работает I2C, прочитать спецификацию на датчик и самому считывать данные.</p>
<h2 id="работа-с-i2c-в-linux">Работа с I2C в Linux</h2>
<p>Оказывается работать с I2C в Linux достаточно просто. Для этого есть специальный I2C адаптер-драйвер, который создаёт устройство <code>/dev/i2c-1</code>. С этим устройством можно работать напрямую из userspace. Доступ будет разграничен и синхронизирован. Крайне удобно. В документации к Linux kernel есть <a href="https://www.kernel.org/doc/html/latest/i2c/dev-interface.html">отличный туториал</a>. Основная идея заключается в том, что все I2C-специфичные команды уже реализованы в библиотеке i2c и вызываются вот так:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">i2c_smbus_write_word_data(file, reg, <span style="color:#ae81ff">0x6543</span>);
</code></pre></div><p>Или</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">res <span style="color:#f92672">=</span> i2c_smbus_read_word_data(file, reg);
</code></pre></div><h2 id="чтение-спецификации">Чтение спецификации</h2>
<p>При реализации своей программы я подглядывал в ядро линукс и в реализацию от Adafruit. Удивительно, но обе реализации неполностью используют возможности датчика!</p>
<p>BH1750 позволяет получать данные в двух режимах:</p>
<ul>
<li>одноразовое получение. Алгоритм следующий:
<ul>
<li>отправить команду выбора режима</li>
<li>подождать заданное время</li>
<li>прочитать данные</li>
<li>датчик автоматически отключит питание и перейдёт в спящий режим</li>
</ul>
</li>
<li>При постоянном получении можно считывать данные следующим образом:
<ul>
<li>отправить команду выбора режима</li>
<li>подождать заданное время</li>
<li>прочитать данные</li>
<li>подождать заданное время</li>
<li>прочитать данные</li>
</ul>
</li>
</ul>
<p>При этом датчик не переходит в выключенное состояние. Чтобы его выключить, необходимо послать специальную POWER_DOWN команду.</p>
<p>Для каждого из этих способов есть 3 способа измерения освещённости:</p>
<ul>
<li>низкое разрешение. Достаточно подождать примерно 20мс, чтобы получить данные. Погрешность 4 люкс</li>
<li>высокое разрешение. Тут уже надо ждать 120-180мс, но данные будут более точные. Погрешность 1 люкс</li>
<li>высокое разрешение 2. Если честно, то я так и не понял, чем этот режим отличается от &ldquo;высокое разрешение&rdquo;, кроме того, что этот режим позволяет измерять в 2 раза более точно. Погрешность 0.5 люкс</li>
</ul>
<p>Идея такого разделения достаточно проста - если ожидается яркий свет, то лучше выбрать низкое разрешение. Ведь в 16 бит поместится больше данных. Если ожидаются сумерки или не очень освещённое помещение, где важна точность, то лучше выбрать высокое разрешение.</p>
<p>Но можно шагнуть ещё дальше. Можно настроить время экспонирования датчика. Если важна точность, то можно увеличить время эспонирования, но при этом получить ещё более точные данные. Например, в режиме &ldquo;высокое разрешение 2&rdquo; можно получить погрешность 0.11 люкс. Почти в 5 раз меньше!</p>
<h2 id="реализация">Реализация</h2>
<p>Собрав всю эту информацию воедино, я сделал:</p>
<p><a href="https://github.com/dernasherbrezon/bh1750">https://github.com/dernasherbrezon/bh1750</a></p>
<p>Этот репозиторий содержит основные файлы bh1750.c и bh1750.h, которые можно смело копировать в собственные проекты. А также небольшую тестовую программу в main.c.</p>
<h2 id="сравнение-с-аналогами">Сравнение с аналогами</h2>
<p>Сравнивать потребление CPU бессмысленно, потому что само измерение занимает вечность - 180мс. А вот потребление памяти оказалось интересным:</p>
<pre><code>PID USER      PR  NI    VIRT    RES    SHR S  %CPU  %MEM     TIME+ COMMAND
1342 pi        20   0   15772   8196   5104 S   0.0   0.9   0:00.23 python3
1315 pi        20   0    1964    380    312 S   0.0   0.0   0:00.01 bh1750
</code></pre><p>Версия на питоне занимает в 20 раз больше памяти!</p>
<p>Ещё я попробовал сравнить потребление электричества, но цифры оказались приблизительно одинаковыми.</p>
<p>Теоретически датчик должен потреблять больше энергии в режиме постоянного получения данных. Но из-за того, что он потребляет примерно 7 мА, то его влияние сложно оценить на фоне больших скачков от 270 до 300 мА raspberrypi. Возможно, подключив его к Arduino или esp32 в режиме Deep sleep, можно ощутить разницу.</p>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Отладка приложений в Debian</title>
      <link>https://dernasherbrezon.com/posts/debian-debug/</link>
      <pubDate>Fri, 01 Jul 2022 22:19:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/debian-debug/</guid>
      <description>Последние несколько месяцев я вожусь с sdr-modem и пытаюсь запустить его в связке с r2cloud. И вот, когда я уже думал, что все тесты прошли, билд на github actions собирается, оно падает с segmentation fault. Но я не стал падать духом и решил воспользоваться случаем, чтобы изучить отладку приложений в Debian.
Основы Итак, для того, чтобы отладка показала хоть что-то полезное, необходимо скомпилировать приложение с отладочной информацией. В противном случае будет что-то вроде этого:</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Отладка приложений в Debian</h1></header>
      		<div class='container entry-content'>
  <p>Последние несколько месяцев я вожусь с <a href="https://github.com/dernasherbrezon/sdr-modem">sdr-modem</a> и пытаюсь запустить его в связке с <a href="https://github.com/dernasherbrezon/r2cloud">r2cloud</a>. И вот, когда я уже думал, что все тесты прошли, билд на github actions собирается, оно падает с segmentation fault. Но я не стал падать духом и решил воспользоваться случаем, чтобы изучить отладку приложений в Debian.</p>
<h2 id="основы">Основы</h2>
<p>Итак, для того, чтобы отладка показала хоть что-то полезное, необходимо скомпилировать приложение с отладочной информацией. В противном случае будет что-то вроде этого:</p>
<pre><code>Thread 1 (Thread 0x76f035a0 (LWP 3706)):
#0  0x76ddca3c in __GI___pthread_timedjoin_ex (threadid=1991734368, thread_return=0x0, abstime=&lt;optimized out&gt;, block=&lt;optimized out&gt;) at pthread_join_common.c:89
#1  0x00014958 in main ()
</code></pre><p>Для того чтобы добавить отладочную информацию, надо скомпилировать приложение с параметром &ldquo;-g&rdquo;.</p>
<h2 id="сборка-deb-пакета">Сборка .deb пакета</h2>
<p>Но не всё так просто. Дело в том, что приложение с отладочной информацией может занимтаь почти в 6 раз больше места! Для примера я скомпилировал sdr-modem с отладочной информацией:</p>
<pre><code>:~/git/sdr-modem $ ls -lh obj-arm-linux-gnueabihf/sdr_modem
-rwxr-xr-x 1 pi pi 591K Jun 29 16:23 obj-arm-linux-gnueabihf/sdr_modem
</code></pre><p>И без:</p>
<pre><code>:~/git/sdr-modem $ ls -lh debian/sdr-modem/usr/bin/sdr_modem
-rwxr-xr-x 1 pi pi 103K Jun 29 16:24 debian/sdr-modem/usr/bin/sdr_modem
</code></pre><p>Распространять такие приложения достаточно накладно, поэтому в Debian решили выносить её в отдельный .deb пакет. При сборке debhelper определяет, что пакет собирается cmake, и запускает команду <a href="https://sourceware.org/binutils/docs/binutils/strip.html">strip</a>. Эта команда удаляет из всех запускаемых и библиотечных файлов отладочную информацию и помещает её в отдельные файлы. Эти файлы пакуются в отдельные .deb пакеты и могут устанавливаться отдельно.</p>
<pre><code>Get:1 http://r2cloud.s3.amazonaws.com buster/main armhf sdr-modem-dbgsym armhf 1.0.69-69~buster [195 kB]
Get:2 http://r2cloud.s3.amazonaws.com buster/main armhf sdr-modem armhf 1.0.69-69~buster [48.5 kB]
</code></pre><p>В сжатом виде бинарники занимают уже 48кбайт и 195кбайт. Так как отладочная информация нужна не всем и только в случае ошибок в программе, такой подход позволяет существенно сэкономить место на диске и ускорить установку.</p>
<p>В моём примере вся отладочная информация будет запакована в <code>sdr-modem-dbgsym</code> и будет находиться в папке:</p>
<pre><code>/usr/lib/debug/.build-id/92/7243e5cc114d15d2eb698954100cae604baca8.debug
</code></pre><p>Это специальный путь, который понимает gdb. <code>927243e5cc114d15d2eb698954100cae604baca8</code> - это build-id - специальный уникальный идентификатор сборки. Он прописывается в бинарник, и по нему gdb будет искать отладочные файлы.</p>
<pre><code>file /usr/bin/sdr_modem
/usr/bin/sdr_modem: ELF 32-bit LSB executable, ARM, EABI5 version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux-armhf.so.3, for GNU/Linux 3.2.0, BuildID[sha1]=927243e5cc114d15d2eb698954100cae604baca8, stripped
</code></pre><h2 id="gdb">GDB</h2>
<p>Если gdb не сможет распознать stacktrace ошибки, то достаточно установить дебаг-пакет и запустить ещё раз:</p>
<pre><code>sudo apt install sdr-modem-dbgsym
gdb /usr/bin/sdr_modem sdrmodem.coredump
</code></pre><p>После этого debug информация будет подхвачена:</p>
<pre><code>(gdb) thread apply all bt

Thread 1 (Thread 0x76fd05a0 (LWP 19529)):
#0  0x76ea9a3c in __GI___pthread_timedjoin_ex (threadid=1992574048, thread_return=thread_return@entry=0x0, abstime=abstime@entry=0x0, block=block@entry=true) at pthread_join_common.c:89
#1  0x76ea9884 in __pthread_join (threadid=&lt;optimized out&gt;, thread_return=thread_return@entry=0x0) at pthread_join.c:24
#2  0x00016ba8 in tcp_server_join_thread (server=&lt;optimized out&gt;) at /home/pi/actions-runner/_work/sdr-modem/sdr-modem/src/tcp_server.c:813
#3  0x00014990 in main (argc=&lt;optimized out&gt;, argv=&lt;optimized out&gt;) at /home/pi/actions-runner/_work/sdr-modem/sdr-modem/src/main.c:40
</code></pre><p>В данном примере видно, что поток <code>Thread 1</code> ожидает завершения другого в файле <code>tcp_server.c</code> и строке 813. Правда, отладочная информацию содержит полный путь до файла во время компиляции. Чтобы сделать аккуратно, можно добавить <a href="https://gcc.gnu.org/onlinedocs/gcc/Debugging-Options.html">debug-prefix-map</a> опцию во флаги компиляции:</p>
<pre><code>-fdebug-prefix-map=$(pwd)=.
</code></pre><p>Результат получится следующий:</p>
<pre><code>Thread 1 (Thread 0x76fd05a0 (LWP 19529)):
#0  0x76ea9a3c in __GI___pthread_timedjoin_ex (threadid=1992574048, thread_return=thread_return@entry=0x0, abstime=abstime@entry=0x0, block=block@entry=true) at pthread_join_common.c:89
#1  0x76ea9884 in __pthread_join (threadid=&lt;optimized out&gt;, thread_return=thread_return@entry=0x0) at pthread_join.c:24
#2  0x00016ba8 in tcp_server_join_thread (server=&lt;optimized out&gt;) at ./src/tcp_server.c:813
#3  0x00014990 in main (argc=&lt;optimized out&gt;, argv=&lt;optimized out&gt;) at ./src/main.c:40
</code></pre><h2 id="особенности">Особенности</h2>
<p>Если проект скомпилирован без отладочной информации, то debhelper всё равно создаст отдельный пакет! Он будет содержать всё те же файлы, но gdb не сможет загрузить отладочную информацию:</p>
<pre><code>Reading symbols from /usr/lib/debug/.build-id/92/7243e5cc114d15d2eb698954100cae604baca8.debug...(no debugging symbols found)...done.
</code></pre>
</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Привязка systemd сервиса к устройству</title>
      <link>https://dernasherbrezon.com/posts/systemd-udev/</link>
      <pubDate>Sat, 21 May 2022 21:54:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/systemd-udev/</guid>
      <description>В одном из постов про поворотное устройство я вскользь упомянул настройку rotctrld. rotctrld - это небольшой демон, который открывает TCP порт и позволяет отправлять команды в tty-устройство. Я написал небольшой systemd конфиг, чтобы демон стартовал и рестартовал во время загрузки raspberrypi.
[Unit] Description=rotctrld Service [Service] WorkingDirectory=/home/pi/r2cloud/ ExecStart=rotctld --model=1401 --port=4533 --listen-addr=127.0.0.1 --rot-file=/dev/ttyUSB0 Restart=always User=pi Group=pi [Install] WantedBy=multi-user.target Однако, со временем стали всплывать достаточно неприятные моменты в обслуживании. Например, поворотное устройство иногда определялось как /dev/ttyUSB1.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Привязка systemd сервиса к устройству</h1></header>
      		<div class='container entry-content'>
  <p>В одном из <a href="https://dernasherbrezon.com/posts/rotator-for-r2cloud/">постов про поворотное устройство</a> я вскользь упомянул настройку rotctrld. rotctrld - это небольшой демон, который открывает TCP порт и позволяет отправлять команды в tty-устройство. Я написал небольшой systemd конфиг, чтобы демон стартовал и рестартовал во время загрузки raspberrypi.</p>
<pre><code>[Unit]
Description=rotctrld Service

[Service]
WorkingDirectory=/home/pi/r2cloud/
ExecStart=rotctld --model=1401 --port=4533 --listen-addr=127.0.0.1 --rot-file=/dev/ttyUSB0
Restart=always
User=pi
Group=pi

[Install]
WantedBy=multi-user.target
</code></pre><p>Однако, со временем стали всплывать достаточно неприятные моменты в обслуживании. Например, поворотное устройство иногда определялось как <code>/dev/ttyUSB1</code>. Тогда приходилось либо перетыкать его в другой порт, либо логиниться на устройство, менять конфиг systemd и рестартовать.</p>
<p>Или вот ещё один пример, при старте системы устройство не подключено. systemd пытается стартовать демон несколько раз и, несмотря на <code>Restart=always</code>, отчаивается. Даже если я подключил устройство позднее, демон уже может не работать. Чтобы это решить, я сначала подключал устройство, а затем стартовал raspberrypi.</p>
<p>Это всё крайне неудобно, поэтому я решил разобраться с этим.</p>
<h2 id="udev">UDEV</h2>
<p>Для того чтобы устройство определялось под одним и тем же именем, нужно привязать идентификатор USB устройства к названию девайса.</p>
<p>Идентификатор USB устройства можно получить с помощью команды <code>lsusb</code>:</p>
<pre><code>pi@rasp-bullseye:~ $ lsusb
Bus 001 Device 004: ID 067b:2303 Prolific Technology, Inc. PL2303 Serial Port / Mobile Action MA-8910P
Bus 001 Device 003: ID 0424:ec00 Microchip Technology, Inc. (formerly SMSC) SMSC9512/9514 Fast Ethernet Adapter
Bus 001 Device 002: ID 0424:9514 Microchip Technology, Inc. (formerly SMSC) SMC9514 Hub
Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub
</code></pre><p>Поворотное устройство определяется как <code>Prolific Technology, Inc. PL2303 Serial Port</code> с идентификатором  <code>067b:2303</code>.</p>
<p>Далее необходимо создать конфиг udev <code>/etc/udev/rules.d/99-usb-rotator.rules</code>, который содержит следующее:</p>
<pre><code>SUBSYSTEM==&quot;tty&quot;, ATTRS{idVendor}==&quot;067b&quot;, ATTRS{idProduct}==&quot;2303&quot;, SYMLINK+=&quot;ttyRotator&quot;, TAG+=&quot;systemd&quot;, ENV{SYSTEMD_WANTS}=&quot;rotctrld.service&quot;
</code></pre><p>В нём написано, что нужно создать symlink <code>/dev/ttyRotator</code> для устройства <code>067b:2303</code>. Ещё в этом правиле написано стартовать <code>rotctrld.service</code>, при появлении устройства. Крайне полезная вещь!</p>
<h2 id="systemd">systemd</h2>
<p>Последним штрихом будет остановка сервиса, если устройство отключено. Для этого необходимо добавить следующую строчку в rotctrld сервис:</p>
<pre><code>[unit]
...
StopWhenUnneeded=true
</code></pre><p>А ещё необходимо переключить сервис на использование симлинка:</p>
<pre><code>ExecStart=rotctld --model=1401 --port=4533 --listen-addr=127.0.0.1 --rot-file=/dev/ttyRotator
</code></pre><h2 id="результаты">Результаты</h2>
<p>В результате при подключении поворотного устройства в логах будет следующее:</p>
<pre><code>May 21 21:36:29 rasp-bullseye kernel: pl2303 1-1.2:1.0: pl2303 converter detected
May 21 21:36:29 rasp-bullseye kernel: usb 1-1.2: pl2303 converter now attached to ttyUSB0
May 21 21:36:29 rasp-bullseye mtp-probe[849]: checking bus 1, device 6: &quot;/sys/devices/platform/soc/3f980000.usb/usb1/1-1/1-1.2&quot;
May 21 21:36:29 rasp-bullseye mtp-probe[849]: bus: 1, device: 6 was not an MTP device
May 21 21:36:29 rasp-bullseye systemd[1]: Started rotctrld Service.
</code></pre><p>А при отключении:</p>
<pre><code>May 21 21:36:04 rasp-bullseye kernel: usb 1-1.2: USB disconnect, device number 5
May 21 21:36:04 rasp-bullseye kernel: pl2303 ttyUSB1: pl2303 converter now disconnected from ttyUSB1
May 21 21:36:04 rasp-bullseye kernel: pl2303 1-1.2:1.0: device disconnected
May 21 21:36:04 rasp-bullseye systemd[1]: Stopping rotctrld Service...
May 21 21:36:04 rasp-bullseye systemd[1]: rotctrld.service: Succeeded.
May 21 21:36:04 rasp-bullseye systemd[1]: Stopped rotctrld Service.
</code></pre><p>Казалось бы, небольшие изменения в конфигурации, но насколько они делают жизнь проще! А ещё я крайне удивлён мощью systemd. Несмотря на всю критику, он позволяет сделать подобную функциональность всего с помощью пары строчек в конфигурации.</p>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Отслеживание спутников с помощью Javascript и D3</title>
      <link>https://dernasherbrezon.com/posts/satellite-d3/</link>
      <pubDate>Wed, 27 Apr 2022 22:19:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/satellite-d3/</guid>
      <description>В следующем месяце я планирую поехать на фестиваль Electromagnetic field. Ну, а чтобы не ехать с пустыми руками, я решил взять с собой поворотное устройство и сделать стенд, на котором будет работать r2cloud. Просто поворачивающейся антенны мне показалось недостаточно, поэтому я придумал дать доступ к r2cloud, где каждый желающий может посмотреть за каким спутником ведётся наблюдение, какие данные получены, какие спутники на подлёте. К сожалению, в r2cloud нет понятия ролей и нельзя создать пользователя с правами &amp;ldquo;только чтение&amp;rdquo;.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Отслеживание спутников с помощью Javascript и D3</h1></header>
      		<div class='container entry-content'>
  <p>В следующем месяце я планирую поехать на фестиваль <a href="https://www.emfcamp.org">Electromagnetic field</a>. Ну, а чтобы не ехать с пустыми руками, я решил взять с собой <a href="https://dernasherbrezon.com/posts/rotator-for-r2cloud/">поворотное устройство</a> и сделать стенд, на котором будет работать r2cloud. Просто поворачивающейся антенны мне показалось недостаточно, поэтому я придумал дать доступ к r2cloud, где каждый желающий может посмотреть за каким спутником ведётся наблюдение, какие данные получены, какие спутники на подлёте. К сожалению, в r2cloud нет понятия ролей и нельзя создать пользователя с правами &ldquo;только чтение&rdquo;. Вот тут-то у меня и родилась идея сделать режим презентации.</p>
<p>Этот режим должен работать следующим образом:</p>
<ul>
<li>по-умолчанию должен быть выключен</li>
<li>должен включаться в настройках</li>
<li>быть доступен без логина и пароля</li>
<li>показывать последние 5 наблюдений</li>
<li>показывать полную информацию о каждом наблюдении - данные, спектрограмму, TLE</li>
<li>показывать следующие 5 запланированных наблюдений</li>
<li>показывать текущее положение спутников на карте Земли и область их видимости</li>
</ul>
<p>Первые пару пунктов легко сделать дополнительной настройкой:</p>
<p><img src="/img/satellite-d3/config.png" alt=""></p>
<p>Однако, последний пункт - самый сложный. Как отрисовать карту Земли с проекциями всех координат? Как вообще нарисовать карту Земли?</p>
<h2 id="анализ-требований">Анализ требований</h2>
<p>При анализе требований я решил пойти с конца. Я точно знаю, что приложение должно уметь работать без интернета, а значит никаких Google Maps, Open Street Map, MapBox и др. Для того, чтобы нарисовать карту Земли, мне достаточно одного самого крупного масштаба. В идеале карта должна быть похожа на <a href="http://gpredict.oz9aec.net">gpredict</a>:</p>
<p><img src="/img/satellite-d3/gpredict.png" alt=""></p>
<p>Следующее требование - работа в браузере. <a href="https://github.com/dernasherbrezon/r2cloud-ui">r2cloud-ui</a> вполне подходит для этого и совсем не хочется создавать отдельное приложение. А значит режим презентации должен быть написан на javascript.</p>
<h2 id="выбор-технологий">Выбор технологий</h2>
<p>Беглый поиск в Google показал, что проще всего использовать библиотеку <a href="https://d3js.org">d3</a>. В ней есть модуль для работы с ГИС данными - <a href="https://github.com/d3/d3-geo">d3-geo</a>.</p>
<pre><code>npm install d3
</code></pre><p>С их помощью можно преобразовывать координаты спутника в координаты точки на карте:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript"><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">projection</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">d3</span>.<span style="color:#a6e22e">geoMercator</span>().<span style="color:#a6e22e">fitExtent</span>( [ [<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>], [<span style="color:#a6e22e">width</span>, <span style="color:#a6e22e">height</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">120</span>], ], <span style="color:#a6e22e">land</span>)
<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">centerXY</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">projection</span>([<span style="color:#a6e22e">longitudeDeg</span>, <span style="color:#a6e22e">latitudeDeg</span>])
</code></pre></div><p>При этом в d3-geo есть поддержка как стандартных проекций:</p>
<ul>
<li>geoMercator</li>
<li>geoMiller</li>
<li>geoNaturalEarth2</li>
</ul>
<p>Так и совсем странных:</p>
<ul>
<li>geoAitoff</li>
<li>geoArmadillo</li>
<li>geoBromley</li>
</ul>
<p><img src="/img/satellite-d3/armadillo.png" alt=""></p>
<p>Я решил не выпендриваться и взял стандартную проекцию - Меркатор. Эта проекция используется в Google Maps и Open Street Map.</p>
<p>Ещё d3 поддерживает <a href="https://geojson.org">GeoJSON</a> - JSON формат описания географических объектов.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">{
  <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;Feature&#34;</span>,
  <span style="color:#f92672">&#34;geometry&#34;</span>: {
    <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;Point&#34;</span>,
    <span style="color:#f92672">&#34;coordinates&#34;</span>: [<span style="color:#ae81ff">125.6</span>, <span style="color:#ae81ff">10.1</span>]
  },
  <span style="color:#f92672">&#34;properties&#34;</span>: {
    <span style="color:#f92672">&#34;name&#34;</span>: <span style="color:#e6db74">&#34;Dinagat Islands&#34;</span>
  }
}
</code></pre></div><p>С его помощью можно описывать границы континентов или государств. Есть <a href="https://github.com/simonepri/geo-maps/blob/master/info/earth-coastlines.md">множество</a> <a href="https://datahub.io/core/geo-countries">сайтов</a>, где можно бесплатно скачать все береговые линии Земли. Но, зачастую, такие файлы слишком детализированы для моих нужд. Мне же необходимо отобразить все континенты на небольшом изображении 800x600 без возможности увеличения. Можно попробовать использовать менее детализированные GeoJSON файлы, но они содержат дополнительную метаинформацию, которая мне тоже не нужна. На помощь приходит другой формат - <a href="https://github.com/topojson/topojson">topoJSON</a>. Это небольшое расширение GeoJSON, которое позволяет задавать геометрии небольшими сегментами и линиями. Он как раз призван создавать файлы чуть меньшего размера по сравнению с GeoJSON за счёт выкидывания всего ненужного.</p>
<pre><code>npm install topojson-client
</code></pre><p>В итоге из достаточно детализированного GeoJSON файла размером 33Мб я смог получить карту размером 16Кб. Да, некоторые острова стали выглядеть очень условно, некоторые детали совсем потерялись, но этого вполне достаточно для нужд проекта:</p>
<p><img src="/img/satellite-d3/mercator.png" alt=""></p>
<h2 id="расчёт-траекторий-спутников">Расчёт траекторий спутников</h2>
<p>Следующим шагом будет расчёт траекторий спутников. Нужно определить широту, долготу и область видимости спутника. Область видимости - это такая область Земли, в которой можно наблюдать за спутником или получать сигнал. Чем выше находится спутник, тем больше его область видимости.</p>
<p>Тут есть небольшая тонкость. На сервере я рассчитываю положение спутника с помощью библиотеки <a href="https://www.orekit.org">orekit</a>. С её помощью можно рассчитать траектории и передать готовый результат в браузер. Либо передавать с сервера TLE и рассчитывать все координаты на клиентской стороне. У каждого способа есть свои плюсы и минусы.</p>
<p>Расчёт на сервере:</p>
<p><strong>+</strong> расчёт будет производить та же библиотека, что и для запуска наблюдений</p>
<p><strong>+</strong> расчёт можно закэшировать и считать один раз для нескольких клиентов</p>
<p><strong>—</strong> raspberrypi достаточно слабый. Если делать расчёт траекторий каждые 10 секунд, то это может сильно повлиять на декодирование данных и приём сигнала</p>
<p>Расчёт на клиенте:</p>
<p><strong>+</strong> браузер возьмёт на себя расчёт траекторий и позволит снизить нагрузку на сервер</p>
<p><strong>—</strong> библиотека расчёта будет отличаться от серверной. А это значит, что любая ошибка в расчётах на сервере не сможет быть отловлена на клиенте. И наоборот.</p>
<p>Я решил всё-таки делать расчёт на клиенте, чтобы уменьшить нагрузку на сервер.</p>
<p>Для этого я использовал библиотеку <a href="https://github.com/shashwatak/satellite-js">satellite.js</a>. Она создана на основе <a href="https://github.com/brandon-rhodes/python-sgp4">python-sgp4</a>, которая основана на достаточно старой модели Земли, не поддерживает leap seconds и прочие параметры из справочников. Тем не менее на практике оказалось, что разница совсем небольшая - доли секунды. И для того, чтобы показать спутник на небольшой карте, такой точности вполне достаточно.</p>
<pre><code>npm install satellite.js
</code></pre><h2 id="реализация">Реализация</h2>
<p>Код, необходимый для инициализации Земли в SVG, я уже привёл выше. К сожалению, Антарктида в проекции Меркатора занимает ну очень много места, а станций слежения там не предвидится. Для того чтобы удалить Антарктиду, я просто расширил SVG на 120 пикселей по высоте и Антарктида перестала помещаться:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript"><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">projection</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">d3</span>.<span style="color:#a6e22e">geoMercator</span>().<span style="color:#a6e22e">fitExtent</span>( [ [<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>], [<span style="color:#a6e22e">width</span>, <span style="color:#a6e22e">height</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">120</span>], ], <span style="color:#a6e22e">land</span>)
</code></pre></div><p>Далее, координаты спутников рассчитываются следующим образом:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript"><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">satrec</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">satellite</span>.<span style="color:#a6e22e">twoline2satrec</span>(<span style="color:#a6e22e">tle</span>.<span style="color:#a6e22e">line2</span>, <span style="color:#a6e22e">tle</span>.<span style="color:#a6e22e">line3</span>)
<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">positionAndVelocity</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">satellite</span>.<span style="color:#a6e22e">propagate</span>(<span style="color:#a6e22e">satrec</span>, <span style="color:#a6e22e">currentDate</span>);
<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">positionGd</span>    <span style="color:#f92672">=</span> <span style="color:#a6e22e">satellite</span>.<span style="color:#a6e22e">eciToGeodetic</span>(<span style="color:#a6e22e">positionAndVelocity</span>.<span style="color:#a6e22e">position</span>, <span style="color:#a6e22e">gmst</span>)
<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">longitudeDeg</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">satellite</span>.<span style="color:#a6e22e">degreesLong</span>(<span style="color:#a6e22e">positionGd</span>.<span style="color:#a6e22e">longitude</span>)
<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">latitudeDeg</span>  <span style="color:#f92672">=</span> <span style="color:#a6e22e">satellite</span>.<span style="color:#a6e22e">degreesLat</span>(<span style="color:#a6e22e">positionGd</span>.<span style="color:#a6e22e">latitude</span>)
<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">centerXY</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">projection</span>([<span style="color:#a6e22e">longitudeDeg</span>, <span style="color:#a6e22e">latitudeDeg</span>])
</code></pre></div><p>Область видимости спутника - это сферический угол, который определяется высотой спутника и радиусом Земли:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript"><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">coreAngle</span> <span style="color:#f92672">=</span> Math.<span style="color:#a6e22e">acos</span>(<span style="color:#ae81ff">6.378135E3</span> <span style="color:#f92672">/</span> (<span style="color:#ae81ff">6.378135E3</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">positionGd</span>.<span style="color:#a6e22e">height</span>)) <span style="color:#f92672">/</span> <span style="color:#ae81ff">1.74532925E-2</span>
</code></pre></div><p>Чтобы рассчитать координаты получившегося эллипса, необходимо вспомнить немного <a href="https://ru.wikipedia.org/wiki/%D0%A1%D1%84%D0%B5%D1%80%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B0%D1%8F_%D1%82%D1%80%D0%B8%D0%B3%D0%BE%D0%BD%D0%BE%D0%BC%D0%B5%D1%82%D1%80%D0%B8%D1%8F">сферической геометрии</a>. Либо использовать <code>geoCircle</code>:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript"><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">circle</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">d3</span>.<span style="color:#a6e22e">geoCircle</span>().<span style="color:#a6e22e">center</span>([<span style="color:#a6e22e">longitudeDeg</span>, <span style="color:#a6e22e">latitudeDeg</span>]).<span style="color:#a6e22e">radius</span>( <span style="color:#a6e22e">coreAngle</span> )()
</code></pre></div><p>Несмотря на то, что метод задания радиуса этого круга называется &ldquo;радиус&rdquo;, нужно передавать именно угол в градусах.</p>
<p><img src="/img/satellite-d3/satellites.png" alt=""></p>
<h2 id="ux">UX</h2>
<p>Всё самое сложное позади и можно немного &ldquo;поиграться со шрифтами&rdquo;. А именно - улучшить UX. Во-первых, каждое наблюдение должно отличаться по цвету от всех остальных. Для этого я <a href="https://stackoverflow.com/a/52171480/659097">откуда-то</a> скопировал функцию вычисления хэша строки:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript"><span style="color:#a6e22e">hashcode</span>(<span style="color:#a6e22e">str</span>, <span style="color:#a6e22e">seed</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>) {
    <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">h1</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0xdeadbeef</span> <span style="color:#f92672">^</span> <span style="color:#a6e22e">seed</span>;
    <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">h2</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x41c6ce57</span> <span style="color:#f92672">^</span> <span style="color:#a6e22e">seed</span>;
    <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">let</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>, <span style="color:#a6e22e">ch</span>; <span style="color:#a6e22e">i</span> <span style="color:#f92672">&lt;</span> <span style="color:#a6e22e">str</span>.<span style="color:#a6e22e">length</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span>) {
        <span style="color:#a6e22e">ch</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">str</span>.<span style="color:#a6e22e">charCodeAt</span>(<span style="color:#a6e22e">i</span>);
        <span style="color:#a6e22e">h1</span> <span style="color:#f92672">=</span> Math.<span style="color:#a6e22e">imul</span>(<span style="color:#a6e22e">h1</span> <span style="color:#f92672">^</span> <span style="color:#a6e22e">ch</span>, <span style="color:#ae81ff">2654435761</span>);
        <span style="color:#a6e22e">h2</span> <span style="color:#f92672">=</span> Math.<span style="color:#a6e22e">imul</span>(<span style="color:#a6e22e">h2</span> <span style="color:#f92672">^</span> <span style="color:#a6e22e">ch</span>, <span style="color:#ae81ff">1597334677</span>);
    }
    <span style="color:#a6e22e">h1</span> <span style="color:#f92672">=</span> Math.<span style="color:#a6e22e">imul</span>(<span style="color:#a6e22e">h1</span> <span style="color:#f92672">^</span> (<span style="color:#a6e22e">h1</span><span style="color:#f92672">&gt;&gt;&gt;</span><span style="color:#ae81ff">16</span>), <span style="color:#ae81ff">2246822507</span>) <span style="color:#f92672">^</span> Math.<span style="color:#a6e22e">imul</span>(<span style="color:#a6e22e">h2</span> <span style="color:#f92672">^</span> (<span style="color:#a6e22e">h2</span><span style="color:#f92672">&gt;&gt;&gt;</span><span style="color:#ae81ff">13</span>), <span style="color:#ae81ff">3266489909</span>);
    <span style="color:#a6e22e">h2</span> <span style="color:#f92672">=</span> Math.<span style="color:#a6e22e">imul</span>(<span style="color:#a6e22e">h2</span> <span style="color:#f92672">^</span> (<span style="color:#a6e22e">h2</span><span style="color:#f92672">&gt;&gt;&gt;</span><span style="color:#ae81ff">16</span>), <span style="color:#ae81ff">2246822507</span>) <span style="color:#f92672">^</span> Math.<span style="color:#a6e22e">imul</span>(<span style="color:#a6e22e">h1</span> <span style="color:#f92672">^</span> (<span style="color:#a6e22e">h1</span><span style="color:#f92672">&gt;&gt;&gt;</span><span style="color:#ae81ff">13</span>), <span style="color:#ae81ff">3266489909</span>);
    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">4294967296</span> <span style="color:#f92672">*</span> (<span style="color:#ae81ff">2097151</span> <span style="color:#f92672">&amp;</span> <span style="color:#a6e22e">h2</span>) <span style="color:#f92672">+</span> (<span style="color:#a6e22e">h1</span><span style="color:#f92672">&gt;&gt;&gt;</span><span style="color:#ae81ff">0</span>);
}
</code></pre></div><p>И на основе хэша вычисляю случайный цвет:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript"><span style="color:#a6e22e">getRandomColor</span>(<span style="color:#a6e22e">hash</span>) {
  <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">colour</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;#&#39;</span>;
  <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">3</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span>) {
    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">value</span> <span style="color:#f92672">=</span> (<span style="color:#a6e22e">hash</span> <span style="color:#f92672">&gt;&gt;</span> (<span style="color:#a6e22e">i</span> <span style="color:#f92672">*</span> <span style="color:#ae81ff">8</span>)) <span style="color:#f92672">&amp;</span> <span style="color:#ae81ff">0xFF</span>;
    <span style="color:#a6e22e">colour</span> <span style="color:#f92672">+=</span> (<span style="color:#e6db74">&#39;00&#39;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">value</span>.<span style="color:#a6e22e">toString</span>(<span style="color:#ae81ff">16</span>)).<span style="color:#a6e22e">substr</span>(<span style="color:#f92672">-</span><span style="color:#ae81ff">2</span>);
  }
  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">colour</span>;
}
</code></pre></div><p>В качестве строки для хэша я использовал Id наблюдения. Таким образом цвет области видимости спутника всегда будет один и тот же даже после перезагрузки страницы.</p>
<p>Следующим неплохим улучшением будет подсвечивания всей области видимости при наведении курсора. Это можно сделать с помощью javascript, а можно с помощью CSS! Для этого к элементу path нужно добавить CSS класс:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">&lt;<span style="color:#f92672">path</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;satelliteCircle&#34;</span>&gt;
</code></pre></div><p>И соответствующий стиль:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-css" data-lang="css">.<span style="color:#a6e22e">satelliteCircle</span>:<span style="color:#a6e22e">hover</span> {
	stroke: rgba(<span style="color:#ae81ff">255</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0.4</span>);
}
</code></pre></div><p>При наведении курсора мыши, вся область будет выделяться полупрозрачной красной линией.</p>
<p>Ещё неплохо было бы добавить название спутника и время до начала наблюдения. Для этого внутрь элемента path необходимо добавить title:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">&lt;<span style="color:#f92672">path</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;satelliteCircle&#34;</span> <span style="color:#a6e22e">:fill</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;cur.color&#34;</span> <span style="color:#a6e22e">fill-opacity</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;0.2&#34;</span> <span style="color:#a6e22e">:d</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;cur.path&#34;</span>&gt;
	&lt;<span style="color:#f92672">title</span>&gt;{{ cur.name }}&amp;#xA;&lt;<span style="color:#f92672">br</span>&gt;{{ cur.timeHint }}&lt;/<span style="color:#f92672">title</span>&gt;
&lt;/<span style="color:#f92672">path</span>&gt;
</code></pre></div><p><code>timeHint</code> вычисляется следующим образом:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript"><span style="color:#a6e22e">moment</span>(<span style="color:#a6e22e">vm</span>.<span style="color:#a6e22e">observations</span>[<span style="color:#a6e22e">i</span>].<span style="color:#a6e22e">start</span>).<span style="color:#a6e22e">fromNow</span>()
</code></pre></div><p>Элементы <code>&amp;#xA;&lt;br&gt;</code> позволяют сделать подсказку на нескольких строчках. Причём старые браузеры смогут понять тэг <code>br</code>, а новые - спецсимвол <code>&amp;#xA;</code>.  Всё это было благополучно найдено в Google и работает.</p>
<p>После всех манипуляций с vuejs, получилось вот такое SVG изображение, которое обновляется каждые 10 секунд. Особенно впечатляет, как d3-geo обрабатывает области видимости спутников вокруг полюсов:</p>
<p><img src="/img/satellite-d3/satellites2.png" alt=""></p>
<p>Полный код можно найти тут: <a href="https://github.com/dernasherbrezon/r2cloud-ui/blob/master/src/components/pages/presentationMode.vue">presentationMode.vue</a>.</p>
<p>Если честно, то мне понравился получившийся результат. Если продраться через многочисленную рекламу самого популярного сайта для отслеживания спутников <a href="https://www.n2yo.com/">n2yo.com</a>, то можно увидеть достаточно посредственную реализацию:</p>
<p><img src="/img/satellite-d3/n2yo.png" alt=""></p>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Оптимизация приёма AX.25</title>
      <link>https://dernasherbrezon.com/posts/ber-ax25-optimization/</link>
      <pubDate>Tue, 15 Mar 2022 19:48:18 +0000</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/ber-ax25-optimization/</guid>
      <description>Введение Итак, после того, как измерена BER кривая для AX.25 декодера, можно попробовать её оптимизировать.
Оптимизация заранее известного заголовка Просмотрев несколько десятков протоколов различных спутников от UNISAT-7 до FIREBIRD 4, я обнаружил, что они всегда шлют один и тот же AX.25 заголовок. Заранее зная такой заголовок, можно игнорировать его в принятом фрейме и попытаться исправить ошибки получения. Алгоритм тогда будет выглядеть следующим образом:
 найти флаги начала и окончания HDLC фрейма посчитать контрольную сумму если сумма совпала, то фрейм корректно получен если сумма не совпала, то подставить заранее известный заголовок в начало фрейма посчитать контрольную сумму ещё раз если сумма совпала, то фрейм удалось восстановить если не совпала, то ничего не поделаешь - фрейм утерян  При таком алгоритме спутник может слать как известные заголовки, так и нет.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Оптимизация приёма AX.25</h1></header>
      		<div class='container entry-content'>
  <h2 id="введение">Введение</h2>
<p>Итак, после того, как <a href="https://dernasherbrezon.com/posts/ber-ax25/">измерена BER кривая для AX.25 декодера</a>, можно попробовать её оптимизировать.</p>
<h2 id="оптимизация-заранее-известного-заголовка">Оптимизация заранее известного заголовка</h2>
<p>Просмотрев несколько десятков протоколов различных спутников от UNISAT-7 до FIREBIRD 4, я обнаружил, что они всегда шлют один и тот же AX.25 заголовок. Заранее зная такой заголовок, можно игнорировать его в принятом фрейме и попытаться исправить ошибки получения. Алгоритм тогда будет выглядеть следующим образом:</p>
<ul>
<li>найти флаги начала и окончания HDLC фрейма</li>
<li>посчитать контрольную сумму</li>
<li>если сумма совпала, то фрейм корректно получен</li>
<li>если сумма не совпала, то подставить заранее известный заголовок в начало фрейма</li>
<li>посчитать контрольную сумму ещё раз</li>
<li>если сумма совпала, то фрейм удалось восстановить</li>
<li>если не совпала, то ничего не поделаешь - фрейм утерян</li>
</ul>
<p>При таком алгоритме спутник может слать как известные заголовки, так и нет. Вероятность исправления ошибок в известных заголовках будет выше.</p>
<p>Вообще такой подход работает отлично для приёма данных со спутников. Они часто шлют данные один ко многим и имеют один и тот же заголовок AX.25. Поскольку целью проекта r2cloud является получение как можно больше данных из космоса, то такую оптимизацию неплохо было бы иметь.</p>
<h2 id="использование-синхрослова">Использование синхрослова</h2>
<p>Одним из слабых мест HDLC являются начальные и конечные тэги - 0b01111110. Если хотя бы один бит в принятом тэге неправильный, то весь фрейм будет отброшен. Даже если полезные данные не содержат ошибок. Декодер просто не сможет найти начало фрейма. В хорошо продуманных протоколах используется синхрослово, за которым идут полезные данные. Синхрослово - это заранее известная последовательность бит, которую отправляют перед каждым фреймом. Это слово позволяет:</p>
<ul>
<li>найти начало фрейма</li>
<li>не выполнять дорогостоящих и сложных вычислений вроде коррекции ошибок или проверки контрольной суммы</li>
<li>делать неточный поиск. Это позволяет найти начало фрейма даже если в принятом синхрослове есть несколько бит ошибок</li>
</ul>
<p>Для HDLC таким синхрословом может быть начальный тэг 0b01111110. Проблема заключается в том, что большинство спутников использует G3RUH скремблер. Вообще <a href="https://ru.wikipedia.org/wiki/%D0%A1%D0%BA%D1%80%D0%B5%D0%BC%D0%B1%D0%BB%D0%B5%D1%80">скремблированые данных</a> перед отправкой - полезная штука. Однако, в AX25 он применяется и к тэгам! Это значит, что каждый фрейм каждый раз будет иметь разные биты вместо 0b01111110. И это не очень подходит для приёма HDLC.</p>
<p>Однако, я не стал отчаиваться и придумал следующий алгоритм:</p>
<ul>
<li>взять реальный сигнал со спутника</li>
<li>декодировать его старым алгоритмом</li>
<li>собрать статистику для каждого успешно декодированного фрейма:
<ul>
<li>внутреннее состояние дескремблера</li>
<li>вывод демодулятора до того, как он будет пропущен через дескремблер</li>
</ul>
</li>
</ul>
<p>Зная такую статистику для каждого фрейма можно понять состояние скремблера в момент передачи данных со спутника. Если оно одно и то же, то принятые данные можно отмотать назад и получить синхрослово. Да, это звучит так же сложно, как и <a href="https://github.com/dernasherbrezon/jradio/blob/master/src/main/java/ru/r2cloud/jradio/blocks/HdlcReceiver.java#L164">реализовано в jradio</a>.</p>
<p>Однако, алгоритм на удивление работает и я могу искать начало HDLC фреймов даже если они были пропущены через скремблер!</p>
<h2 id="проверка">Проверка</h2>
<p>Я реализовал оба алгоритма и прогнал на искусственном тесте <a href="">Ax24G3ruhBer</a>:</p>














<img src="/img/ber-ax25-optimization/header.png">

<p>В тесте отправляются фреймы размером 131 байт. Если учесть, что заголовок занимает 16 байт, то улучшить приём можно примерно на 12%. На графике видно улучшение, но небольшое. В среднем на 8%.</p>
<p>Если же использовать поиск синхрослова и заранее известный заголовок, то улучшить приём можно в среднем на 14% процентов. А при достаточно сильном сигнале вплоть до 50%.</p>
<h2 id="проверка-оптимизаций-на-реальных-сигналах">Проверка оптимизаций на реальных сигналах</h2>
<p>После тестирования оптимизаций на модели, я решил проверить работу на реальных сигналах со спутников. Вот пример сигнала со спутника UNISAT-7:</p>
<p><img src="/img/ber-ax25-optimization/unisat7.jpg" alt=""></p>
<p>На спектрограмме отчётливо виден сигнал со спутника - он идёт вдоль зелёной линии. Однако, его мощности недостаточно, чтобы декодировать все пакеты. До оптимизаций мой декодер мог получить только 3 фрейма, после оптимизаций - 4.</p>
<p>Я также сравнил результаты с декодером из gr_satellites. Этот декодер лёг в основу моего до всех оптимизаций. Я запускал его следующей командой:</p>
<pre><code>gr_satellites 47945 --rawfile output.raw.gz-doppler.cf32 --samp_rate 48000 --iq
</code></pre><p>В результате мне удалось получить только один фрейм.</p>
<h2 id="выводы">Выводы</h2>
<p>HDLC не так-то просто оптимизировать. Мне потребовалось несколько недель и действительно очень много кода, чтобы немного улучшить приём. Тем не менее мой метод нельзя сделать универсальным и декодер необходимо конфигурировать для каждого спутника отдельно.</p>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Расчёт вероятности ошибки для AX.25</title>
      <link>https://dernasherbrezon.com/posts/ber-ax25/</link>
      <pubDate>Sat, 19 Feb 2022 22:13:18 +0000</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/ber-ax25/</guid>
      <description>Введение Обычно вероятность ошибки используется для сравнения различных типов модуляции между собой. Однако, на практике помимо демодулятора используются дополнительные блоки:
 формирование фреймов канального уровня контроль и коррекция ошибок  И каждый из этих блоков может как уменьшить вероятность декодирования фрейма, так и увеличить. Все алгоритмы контроля и коррекции ошибок предназначены для того, чтобы увеличить вероятность декодирования фрейма. А вот формирование самих фреймов может сильно повлиять на возможности получения данных.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Расчёт вероятности ошибки для AX.25</h1></header>
      		<div class='container entry-content'>
  <h2 id="введение">Введение</h2>
<p>Обычно <a href="https://en.wikipedia.org/wiki/Bit_error_rate">вероятность ошибки</a> используется для сравнения различных типов модуляции между собой. Однако, на практике помимо демодулятора используются дополнительные блоки:</p>
<ul>
<li>формирование фреймов <a href="https://ru.wikipedia.org/wiki/%D0%9A%D0%B0%D0%BD%D0%B0%D0%BB%D1%8C%D0%BD%D1%8B%D0%B9_%D1%83%D1%80%D0%BE%D0%B2%D0%B5%D0%BD%D1%8C">канального уровня</a></li>
<li><a href="https://ru.wikipedia.org/wiki/%D0%9A%D0%BE%D0%BD%D1%82%D1%80%D0%BE%D0%BB%D1%8C_%D0%BE%D1%88%D0%B8%D0%B1%D0%BE%D0%BA#%D0%A3%D0%BF%D1%80%D0%B5%D0%B6%D0%B4%D0%B0%D1%8E%D1%89%D0%B0%D1%8F_%D0%BA%D0%BE%D1%80%D1%80%D0%B5%D0%BA%D1%86%D0%B8%D1%8F_%D0%BE%D1%88%D0%B8%D0%B1%D0%BE%D0%BA">контроль и коррекция ошибок</a></li>
</ul>
<p>И каждый из этих блоков может как уменьшить вероятность декодирования фрейма, так и увеличить. Все алгоритмы контроля и коррекции ошибок предназначены для того, чтобы увеличить вероятность декодирования фрейма. А вот формирование самих фреймов может сильно повлиять на возможности получения данных.</p>
<p>Одним из самых распространённых протоколов канального уровня является HDLC. Также он используется в стеке AX.25, который в свою очередь используется в большинстве кубсатов для связи с наземными станциями. Увеличение количества принимаемых данных из космоса - одна из основных задач моего проекта <a href="https://github.com/dernasherbrezon/r2cloud">r2cloud</a>, поэтому мне интересно было померить насколько AX.25 хорош.</p>
<h2 id="описание-стенда">Описание стенда</h2>
<p>Итак, для того, чтобы посчитать количество ошибочно принятых бит, я создал класс <a href="https://github.com/dernasherbrezon/jradio/blob/master/src/test/java/ru/r2cloud/jradio/Ax25G3ruhBer.java">Ax25G3ruhBer</a>. Он работает следующим образом:</p>
<ul>
<li>для каждого Eb/No</li>
<li>сгенерировать паузу, равную <code>sampleRate / 8</code>. Во время паузы в демодулятор будет приходить только <a href="https://ru.wikipedia.org/wiki/%D0%90%D0%B4%D0%B4%D0%B8%D1%82%D0%B8%D0%B2%D0%BD%D1%8B%D0%B9_%D0%B1%D0%B5%D0%BB%D1%8B%D0%B9_%D0%B3%D0%B0%D1%83%D1%81%D1%81%D0%BE%D0%B2%D1%81%D0%BA%D0%B8%D0%B9_%D1%88%D1%83%D0%BC">белый гауссовский шум</a>.</li>
<li>сформировать фрейм, смодулировать его в GMSK сигнал</li>
<li>добавить к GMSK сигналу шум</li>
<li>сгенерировать шум и полезный сигнал для оставшихся 99 фреймов.</li>
<li>пропустить полученный сигнал через демодулятор</li>
<li>посчитать количество успешных бит из общего количество переданных бит.</li>
</ul>
<p>Этот алгоритм значительно проще, чем <a href="https://dernasherbrezon.com/posts/jradio-ber-fsk/">алгоритм вычисления ошибки для FSK</a>, так как количество переданных и полученных бит легко посчитать.</p>
<h2 id="результаты">Результаты</h2>
<p>Результаты представлены на графике ниже. Я так же добавил теоретический минимум FSK модуляции. Так как AX.25 зачастую используется поверх FSK модуляции и в нём нет блоков коррекции ошибок, то его теоретический минимум не может быть меньше минимума FSK.</p>














<img src="/img/ber-ax25/ber-ax25.png">

<h2 id="анализ">Анализ</h2>
<p>Многие графики обрываются. Это может значить несколько вещей:</p>
<ul>
<li>Либо не было проведено достаточно симуляций, чтобы получить статистически значимых результатов</li>
<li>Либо ошибки в тесте. AX.25 не может быть лучше теоретического предела FSK модуляции</li>
</ul>
<p>BER кривая FSK вычислялась по формуле. Её результат записывался во float, поэтому очень маленькие значения просто округлились до 0. Это объясняет, почему жёлтая кривая обрывается.</p>
<p>Опыты, в которых была проверка контрольной суммы, при низком уровне сигнала совсем не декодируются, а начиная с какого-то значения декодируются все. Это вполне объяснимо, так как ошибка даже в одном бите детектируется контрольной суммой и весь фрейм отбрасывается. При этом опыты, в которых проверка контрольной суммы отключена, показывают плавное уменьшение количества ошибок. Это вполне ожидаемо и как раз показывает, что демодулятор распознаёт фреймы, но они отбрасываются из-за ошибок контрольной суммы.</p>
<p>Ещё интересный и очевидный факт - количество декодируемых фреймов зависит от их длины. Для длины в 20 байт минимальный уровень сигнала должен быть 9дБ, а для 131 байт - 11дБ. 131 байт я взял не случайно, а вычислил на основе средней длины AX.25 фрейма всех поддерживаемых спутников в <a href="https://github.com/dernasherbrezon/jradio">jradio</a>.</p>
<p>Резкий переход между ни одним полученным фреймом и всеми полученными фреймами, мне показался достаточно странным. Я попробовал построить спектограмму сигнала для первых 10 фреймов:</p>
<p><img src="/img/ber-ax25/simulation.png" alt=""></p>
<p>Оказывается, шум на самом деле не настоящий. Вернее он настоящий, но из-за того, что блок генерации шума стартует всегда с одного и того же seed, получается, что шум повторяется через какие-то интервалы. Это как раз видно на спектограмме - повторяющиеся паттерны:</p>
<p><img src="/img/ber-ax25/simulation2.png" alt=""></p>
<h2 id="результаты-2">Результаты 2</h2>
<p>Я решил провести ещё раз опыт на основе полученных результатов со следующими модификациями:</p>
<ul>
<li>выбрать разный начальный seed псевдослучайного генератора</li>
<li>добавить 3 байта преамбулы - 0xAA для того, чтобы синхронизировать демодулятор и скрэмблер</li>
</ul>














<img src="/img/ber-ax25/ber-ax25-2.png">

<h2 id="анализ-2">Анализ 2</h2>
<ul>
<li>графики ожидаемо хуже теоретического минимума FSK модуляции.</li>
<li>При Eb/N0=13дБ фреймы лучше не декодируются.</li>
<li>размер фрейма перестал влиять на результаты.</li>
</ul>
<p>Судя по результатам теста, демодулятор работает не так как ожидается. При полном отсутствии шума, все фреймы должны были декодироваться, ну или большая их часть. А в моём случае совсем наоборот.</p>
<h2 id="результаты-3">Результаты 3</h2>
<p>Одной из причин такого поведения может быть внутреннее состояние демодулятора. Внутри демодулятора есть множество циклов обратной связи. Эти циклы корректируют поведение блоков в зависимости от выходных данных. Внутри каждого цикла есть некое состояние, которое описывает обратную связь. Если на вход демодулятора подаётся шум, то такой цикл обратной связи будет находиться в &ldquo;свободном поиске&rdquo; и внутреннее состояние может плавать от +Х до -Х. Если же, сигнал, то цикл будет стремиться к некоему локальному минимуму и состояние будет стремиться к какому-нибудь числу. В итоге он достигнет равновесия и будет корректировать выходные данные. Но время, которое нужно для того, чтобы цикл пришёл в нужное равновесие лежит в каком-то интервале. Собственно, передавая достаточно длинную преамбулу в начале каждого пакета, можно заставить демодулятор синхронизироваться с потоком данных и улучшить декодирование.</p>
<p>Я попробовал преамбулы нескольких длин: 3, 6 и 9 байт. Каждый байт такой преамбулы - это 0x7e. В итоге получилось следующее:</p>














<img src="/img/ber-ax25/ber-ax25-4.png">

<h2 id="анализ-3">Анализ 3</h2>
<p>На графике явно видно, что, чем длиннее преамбула, тем больше данных декодировано. Преамбула длиной 9 байт показывает наилучшие показатели.</p>
<p>По-прежнему демодулятор не может приблизиться к теоретическому пределу FSK, хотя кривые в чём-то повторяют BER кривую теории.</p>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Антенна Aurel GP 433</title>
      <link>https://dernasherbrezon.com/posts/aurel-gp-433/</link>
      <pubDate>Fri, 21 Jan 2022 12:10:18 +0000</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/aurel-gp-433/</guid>
      <description>Недавно я получил в подарок вот такую замечательную антенну - Aurel GP 433:
Она работает на частоте 433МГц в ISM диапазоне и позволяет получать сигналы со спутников, смодулированные с помощью технологии LoRa.
С её помощью мне удалось принять несколько пакетов со спутника NORBI. Он как раз передаёт на частоте 433Мгц. Далее мне захотелось понять характеристики антенны на частоте 401Мгц. На ней передают недавно запущенные спутники семейства FOSSASAT.
Для этого я измерил коэффициент обратных потерь для разных частот.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Антенна Aurel GP 433</h1></header>
      		<div class='container entry-content'>
  <p>Недавно я получил в подарок вот такую замечательную антенну - Aurel GP 433:</p>
<p><img src="/img/Aurel-GP-433/antenna.jpg" alt=""></p>
<p>Она работает на частоте 433МГц в <a href="https://en.wikipedia.org/wiki/ISM_radio_band">ISM диапазоне</a> и позволяет получать сигналы со спутников, смодулированные с помощью технологии <a href="https://en.wikipedia.org/wiki/LoRa">LoRa</a>.</p>
<p>С её помощью мне удалось принять несколько пакетов со спутника <a href="https://db.satnogs.org/satellite/DNNN-7162-2135-4056-8903">NORBI</a>. Он как раз передаёт на частоте 433Мгц. Далее мне захотелось понять характеристики антенны на частоте 401Мгц. На ней передают недавно запущенные спутники семейства <a href="https://db.satnogs.org/search/?q=FOSSASAT">FOSSASAT</a>.</p>
<p>Для этого я измерил коэффициент обратных потерь для разных частот. Получившийся график ниже (чем меньше, тем лучше):</p>














<img src="/img/Aurel-GP-433/aurelgp433.png">

<p>Разница между 433Мгц и 401Мгц около 10Дб! Это достаточно много и, мне кажется, шансов принять сигнал на эту антенну крайне мало.</p>
<h2 id="получение-данных-для-графика">Получение данных для графика</h2>
<p>Отдельно хочется описать схему получения данных для графика.</p>
<h3 id="nanovna-h4">NanoVNA H4</h3>
<p>Для измерений я использовал <a href="https://www.amazon.co.uk/Nanovna-H4-10k-1-5GHz-Touchscreen-Measuring-Parameters/dp/B08P4Z44ZV">NanoVNA H4</a>. Инструкций по настройке и использованию подобных устройств в Интернете достаточно много, поэтому я не буду на этом останавливаться.</p>
<h3 id="nanovna-saver">nanovna-saver</h3>
<p>NanoVNA H4 выводит классный график на экран, но для того, чтобы получить цифры, нужно использовать специальную программу. Я взял <a href="https://github.com/NanoVNA-Saver/nanovna-saver">nanovna-saver</a>. Во-первых, она заработала у меня на MacOS. А во-вторых, она позволяет экспортировать значения в текстовый файл. Возможно, в Интернете есть командные утилиты, которые могут просто считать данные в консоль, но с наскоку мне не удалось их найти.</p>
<h3 id="обработка-файла">Обработка файла</h3>
<p>nanovna-saver экспортирует файлы в формате <a href="https://ibis.org/connector/touchstone_spec11.pdf">Touchstone</a>. Это такой древний формат файлов, который используется для хранения измерений различных сетей. Несмотря на свою простоту и изначальную проприетарность, он стал стандартом де-факто в индустрии.</p>
<p>Формат его следующий:</p>
<pre><code># HZ S RI R 50
20000000 -0.760943531 0.559754431
24800000 -0.045752331 0.932080805
</code></pre><p>Сначала идёт заголовок с описанием данных, которые хранятся в файле. В моём примере это:</p>
<ul>
<li><code>HZ</code> - единица измерения частоты. Герц. Может быть еще MHZ, KHZ и так далее.</li>
<li><code>S</code> - тип данных. &ldquo;S&rdquo; - &ldquo;Scattering parameters&rdquo;.</li>
<li><code>RI</code> - формат данных. В данном случае - это real и imag (реальная и мнимая часть) комплексного числа. Это комплексное число описывает отражённую волну.</li>
<li><code>R 50</code> - измерения для импеданса в 50 Ом.</li>
</ul>
<p>Каждая строчка содержит частоту, вещественную часть и мнимую часть волны. Для того, чтобы получить магнитуду нужно выполнить:</p>
<pre><code>20 * LOG10(SQRT(real*real + imag*imag))
</code></pre>
</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Динамические графики в Hugo</title>
      <link>https://dernasherbrezon.com/posts/dynamic-charts-hugo/</link>
      <pubDate>Mon, 10 Jan 2022 12:14:18 +0000</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/dynamic-charts-hugo/</guid>
      <description>У Вас никогда не было желания подвигать мышкой на графике в интернете? Вот есть какой-нибудь график, и прям хочется навести курсор на минимальное значение или максимальное? Или посмотреть, как быстро менялось значение по времени просто сравнив начало и конец? У меня постоянно. Проблема в том, что большинство графиков в интернете - это картинки. Картинки, которые сгенерированы в Excel, да ещё и в ужасном разрешении.
Да, что говорить - я сам создаю такие графики.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Динамические графики в Hugo</h1></header>
      		<div class='container entry-content'>
  <p>У Вас никогда не было желания подвигать мышкой на графике в интернете? Вот есть какой-нибудь график, и прям хочется навести курсор на минимальное значение или максимальное? Или посмотреть, как быстро менялось значение по времени просто сравнив начало и конец? У меня постоянно. Проблема в том, что большинство графиков в интернете - это картинки. Картинки, которые сгенерированы в Excel, да ещё и в ужасном разрешении.</p>
<p>Да, что говорить - я сам создаю такие графики. Вот взять, например, мой последний <a href="https://dernasherbrezon.com/posts/smart-usb-meter-a3-b/">пост про USB тестер</a>:</p>
<p><img src="/img/smart-usb-meter-a3-b/r2lora-tinygs-old.png" alt=""></p>
<p>График хороший: в нём есть заголовок, оси, подписаны единицы измерения. Формально им можно пользоваться и, наверное, делать какие-то выводы. Но вот смотришь на него и возникает какое-то чувство ущербности и неполноценности.</p>
<p>Хочется добавить прозрачности, какого-то динамизма. <a href="https://www.businessinsider.com/apple-changes-angle-of-laptop-screen-displayed-in-stores-to-76-degrees-2015-8?r=US&amp;IR=T">Как в магазинах Apple</a>: поставить ноутбук так, чтобы его хотелось открыть и повертеть в руках.</p>
<h2 id="требования">Требования</h2>
<p>Несмотря на то, что мой блог статический и сгенерирован с помощью <a href="https://gohugo.io">Hugo</a>, в него вполне можно добавить динамизма с помощью javascript. Что же хочется?</p>
<ul>
<li>динамический график. При наведении курсора на график, должны отображаться значения по оси Х и У.</li>
<li>данные должны хранится отдельно от статьи. Некоторые графики могут содержать достаточно большое количество точек и мне не хотелось бы &ldquo;как-есть&rdquo; копировать данные прямо в Markdown файл. Это только засорит статью и её будет сложно редактировать. Поэтому данные необходимо хранить в отдельных файлах.</li>
<li>включение поддержки графиков должно быть явным. Большинство статей без графиков, поэтому загружать дополнительный javascript на них не имеет смысла.</li>
<li>возможность задать график через конфигурацию, ну или с минимальным количеством javascript.</li>
</ul>
<p>По-умолчанию Hugo не поддерживает такие вещи. Но всё это можно сделать самому! Для этого я взял:</p>
<ul>
<li><a href="https://gohugo.io/content-management/shortcodes/">Hugo shortcodes</a></li>
<li><a href="https://www.chartjs.org">chartjs</a></li>
<li>немного терпения</li>
</ul>
<h2 id="hugo-shortcodes">Hugo shortcodes</h2>
<p>Hugo shortcodes - это, по сути, обычные теги. Такие, например, есть в <a href="https://dernasherbrezon.com/posts/jsp-tagfile/">JSP</a> или во <a href="https://dernasherbrezon.com/posts/creating-vuejs-component/">VueJS</a>. Я создал shortcode <a href="https://github.com/dernasherbrezon/dernasherbrezon.github.io/blob/master/hugo/layouts/shortcodes/chartjs.html">chartjs</a> со следующими параметрами:</p>
<ul>
<li>&ldquo;url&rdquo; - локально лежащий json файл с данными.</li>
<li>&ldquo;id&rdquo; - уникальный id графика. Используется в html тэгах и названиях javascript объектах.</li>
<li>&ldquo;title&rdquo; - заголовок графика.</li>
<li>&ldquo;datasource&rdquo; - поле в json объекте, которое будет использоваться в качестве значений по оси Y.</li>
<li>&ldquo;datasourceLabel&rdquo; - человеко-читаемое название данных.</li>
<li>&ldquo;datasource2&rdquo; - на случай, если нужно отобразить два графика. Необязательное поле.</li>
<li>&ldquo;datasource2Label&rdquo; - человеко-читаемое название данных для второго графика. Необязательное поле.</li>
<li>&ldquo;yAxisLabel&rdquo; - название оси Y</li>
<li>&ldquo;yAxisUnit&rdquo; - единицы измерения по оси Y. Ох, сколько же графиков не имеют этих базовых параметров.</li>
<li>&ldquo;xAxis&rdquo; - оле в json объекте, которое будет использоваться в качестве значений по оси X. Необязательное поле. По-умолчанию будет браться индекс объекта json.</li>
<li>&ldquo;xAxisLabel&rdquo; - человеко-читаемое значение оси Х. Необязательное поле.</li>
<li>&ldquo;xAxisUnit&rdquo; - единица измерения.</li>
<li>&ldquo;staticSrc&rdquo; - график отрендеренный в статичную картинку. Об этом чуть далее.</li>
</ul>
<p>Самое сложное было - это разобраться с синтаксисом движка шаблонов Hugo. Как Вам такое:</p>
<pre><code>{{ $dataC := getJSON $url }}
</code></pre><p>Или такое:</p>
<pre><code>{{ $id | safeJS }}
</code></pre><p>Сам компонент достаточно простой. Он выводит необходимые html теги и настраивает chartjs согласно документации. От себя я лишь добавил шаблонизацию, какие-то стили отображения графика и кнопку &ldquo;Скачать&rdquo;. Если на неё кликнуть, то можно скачать график в виде картинки.</p>
<p>В результате в посте нужно написать следующее:</p>
<pre><code>{{&lt; chartjs url=&quot;/static/img/smart-usb-meter-a3-b/r2lora-tinygs.json&quot; id=&quot;r2loraTinygs&quot; title=&quot;tinyGS vs r2lora&quot; datasource=&quot;r2loraCurrent&quot; datasourceLabel=&quot;r2lora&quot; datasource2=&quot;tinygsCurrent&quot; datasource2Label=&quot;tinyGS&quot; yAxisLabel=&quot;Ток&quot; yAxisUnit=&quot;мA&quot; staticSrc=&quot;/img/smart-usb-meter-a3-b/r2lora-tinygs2.png&quot; &gt;}}
</code></pre><p>Чтобы получилась вот такая красота:</p>














<img src="/img/smart-usb-meter-a3-b/r2lora-tinygs2.png">

<p>Сама библиотека chartjs подключается один в раз в заголовочной файле <code>head/extra.html</code>:</p>
<pre><code>{{- if eq .Params.chartjs true -}}
&lt;script src=&quot;{{ print &quot;/js/chart.min.js&quot; | relURL }}&quot;&gt;&lt;/script&gt;
{{- end -}}
</code></pre><p>А для того, чтобы добавлять её только в те посты, где графики нужны, необходимо указать в параметрах поста:</p>
<pre><code>chartjs: true
</code></pre><h2 id="telegram">Telegram</h2>
<p>И вся эта красота не работает в <a href="https://instantview.telegram.org">Telegram instant view</a>. Это такой специальный сервис Telegram, который берёт исходную страницу, парсит html и конвертирует в специальный внутренний формат, чтобы выводить прямо в клиенте. Это позволяет открыть и прочитать статью без загрузки с сайта. Поскольку мой блог некоммерческий, мне хочется, чтобы читатели смогли получить доступ к информации быстро и просто. Однако, очевидно, что Telegram не поддерживает javascript ни в каком виде. Да и обычные html теги не все поддерживаются.</p>
<p>Можно просто удалить все графики:</p>
<pre><code>@remove: $body//canvas
</code></pre><p>Но тогда статья просто потеряет смысл.</p>
<p>Вместо этого я придумал следующее:</p>
<ul>
<li>удалить canvas из instant view. Он всё равно не поддерживается.</li>
<li>добавить параметр &ldquo;staticSrc&rdquo; к компоненту chartjs, который будет рендерится в обычную картинку внутри тега <code>&lt;noscript&gt;</code>. Если в браузере отключён javascript или он не поддерживается по каким-либо причинам, то вместо <code>&lt;noscript&gt;</code> будет отображаться его содержимое.</li>
<li>в instant view сделать правило, которое удалит родительский <code>&lt;noscript&gt;</code> и покажет всё то, что есть внутри.</li>
</ul>
<p>В итоге правила преобразования html поста в instant view стали содержать следующее (очередной птичий язык):</p>
<pre><code>@remove: $body//canvas
@remove: //a[@class=&quot;downloadChart&quot;]
@detach: //noscript/img
</code></pre><p><img src="/img/dynamic-charts-hugo/instant-view.png" alt=""></p>
<h2 id="rss">RSS</h2>
<p>Да, мой блог ещё доступен по RSS. Например, Яндекс использует RSS, чтобы делать свои <a href="https://yandex.ru/dev/turbo/">турбо-страницы</a>. По сути - это такие же специальные страницы, как и Telegram instant view, только для Яндекса. Если ничего специального не сделать, то в RSS попадёт портянка javascript, который просто не будет работать.</p>
<p>Для того чтобы починить RSS, нужно сделать следующее:</p>
<ul>
<li>убедиться, что страницы Hugo ещё можно рендерить в RSS. Для этого в config.toml должна быть строчка <code>page = ['HTML', 'RSS']</code></li>
<li>Создать shortcode, специфичный для конкретного формата. В моём примере - это <code>chartjs.rss.xml</code>. В нём необходимо выводить статичный график, который уже был сконфигурирован для Telegram.</li>
</ul>
<pre><code>{{ $staticSrc := .Get &quot;staticSrc&quot; }}
&lt;img src=&quot;{{ $staticSrc }}&quot;&gt;
</code></pre><p>После всех этих манипуляций, RSS будет содержать статичные картинки:</p>
<p><img src="/img/dynamic-charts-hugo/rss.png" alt=""></p>
<p>После всех этих манипуляций блог стал выглядеть чуть более приятным. Хотя бы для меня самого. А это уже неплохо!</p>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>USB тестер A3-B</title>
      <link>https://dernasherbrezon.com/posts/smart-usb-meter-a3-b/</link>
      <pubDate>Thu, 06 Jan 2022 18:30:18 +0000</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/smart-usb-meter-a3-b/</guid>
      <description>Совсем недавно я приобрёл USB тестер A3-B.
Это устройство позволяет измерять ток и напряжение, протекающее между USB-входом и USB-выходом. Одним концом можно воткнуть в зарядное устройство, другим в устройство и измерять ток потребления. Применений этому можно найти уйму:
 измерять потребление тока в разных режимах:  сна активной работы простоя   измерять потребление во времени. Дисплей умеет переключаться в режим построения графика и показывать, как меняется потребление в течении некоторого времени.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>USB тестер A3-B</h1></header>
      		<div class='container entry-content'>
  <p>Совсем недавно я приобрёл USB тестер A3-B.</p>
<p>Это устройство позволяет измерять ток и напряжение, протекающее между USB-входом и USB-выходом. Одним концом можно воткнуть в зарядное устройство, другим в устройство и измерять ток потребления. Применений этому можно найти уйму:</p>
<ul>
<li>измерять потребление тока в разных режимах:
<ul>
<li>сна</li>
<li>активной работы</li>
<li>простоя</li>
</ul>
</li>
<li>измерять потребление во времени. Дисплей умеет переключаться в режим построения графика и показывать, как меняется потребление в течении некоторого времени.</li>
<li>измерять общее потребление за промежуток времени.</li>
<li>определять тип зарядки: быстрая, медленная.</li>
<li>определять качество зарядного устройства. На некоторых устройствах может быть написано 10Ватт, но при этом они фактически выдают 5Ватт.</li>
</ul>
<p>Мне такое устройство прежде всего интересно тем, что может измерять потребление тока ESP32 и Raspberry PI. Некоторые мои станции работают от солнечных панелей и оптимизация потребления тока - вполне насущная проблема.</p>
<p>Ещё, как разработчику r2lora и r2cloud, мне важно оптимизировать свой собственный код на низкое потребление электричества. И такое устройство как раз помогает в этом.</p>
<p>Но сами по себе показатели сложно считывать с экрана. И вот тут на помощь приходит bluetooth.</p>
<blockquote>
<p>Всё сразу становится лучше, если к этому добавить bluetooth.</p>
<p>Леонард Хофстедтер</p>
</blockquote>
<p>Через bluetooth можно получить все параметры, которые отображаются на экране. А так как они в цифровом виде, то их можно программно обработать и построить красивые графики.</p>
<h2 id="bluetooth">Bluetooth</h2>
<p><a href="https://www.amazon.co.uk/dp/B07DCS11GM">На карточке товара</a> написано, что A3-B поддерживает bluetooth и подключится к нему можно только из-под приложения на android. То есть теоретически данные получить всё же можно. Осталось понять как.</p>
<p>И тут на помощь приходит github. Оказывается, умельцы уже давно разобрались в протоколе и смогли написать кучу программ. Для начала нужно найти устройство и привязать его:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">bluetoothctl scan on
</code></pre></div><p>Эта команда выдаст всевозможные bluetooth устройства в округе:</p>
<p><img src="/img/smart-usb-meter-a3-b/discovery.png" alt=""></p>
<p>A3-B опознаётся как 2 устройства: E-test BLE и E-test SPP. BLE - это <a href="https://ru.wikipedia.org/wiki/Bluetooth_%D1%81_%D0%BD%D0%B8%D0%B7%D0%BA%D0%B8%D0%BC_%D1%8D%D0%BD%D0%B5%D1%80%D0%B3%D0%BE%D0%BF%D0%BE%D1%82%D1%80%D0%B5%D0%B1%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5%D0%BC">bluetooth low energy</a>. SPP - это профиль <a href="https://en.wikipedia.org/wiki/List_of_Bluetooth_profiles#Serial_Port_Profile_(SPP)">serial port profile</a>. Вся коммуникация будет идти через serial port, поэтому нужно подключатся к SPP устройству.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">sudo rfcomm bind <span style="color:#ae81ff">0</span> B3:BA:D5:A7:1F:E1 <span style="color:#ae81ff">2</span>
</code></pre></div><p>Эта команда создаст устройство <code>/dev/rfcomm0</code>, привяжет к нему bluetooth устройство и выберет порт номер 2. Номер порта - это очень важно. Устройство по-умолчанию предоставляет несколько портов. Но только по порту 2 можно получать данные. Вполне возможно остальные порты используются для перепрошивки устройства.</p>
<p>Проверить соединение можно с помощью проекта <a href="https://github.com/rfinnie/rdserialtool">rdserialtool</a>:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">./rdserialtool  --debug --device um24c --serial-device /dev/rfcomm0
</code></pre></div><p>Если подключение прошло успешно, то в консоли будет следующее:</p>
<pre><code>2022-01-06 14:29:21,918 INFO: rdserialtool 0.2.1
2022-01-06 14:29:21,918 INFO: Copyright (C) 2019 Ryan Finnie
2022-01-06 14:29:21,919 INFO: 
2022-01-06 14:29:21,919 INFO: Connecting to UM24C /dev/rfcomm0
2022-01-06 14:29:21,919 DEBUG: Serial: Connecting to /dev/rfcomm0
2022-01-06 14:29:21,920 INFO: Connection established
2022-01-06 14:29:21,921 INFO: 
2022-01-06 14:29:22,221 DEBUG: Serial: SEND begin (b'\xf0')
2022-01-06 14:29:22,222 DEBUG: Serial: SEND end (1 bytes)
2022-01-06 14:29:22,222 DEBUG: Serial: RECV begin
2022-01-06 14:29:26,688 DEBUG: Serial: RECV end (b'\tc\x01\xf6\x002\x00\x00\x00\xfb\x00\x18\x00K\x00\x00\x00\x00\x01\x93\x00\x00\x07\xe0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x012\x00\x00\x00\x00\x00\x00\x01\x93\x00\x00\x07\xe0\x00\x03\x00\x003\xb8\x00\x01\x00\x03\x00\x05\x00\x00\x03\xec\x00\x00\xff\xf1')
2022-01-06 14:29:26,690 DEBUG: Start: 0x0963, end: 0xfff1
2022-01-06 14:29:26,692 DEBUG: DUMP: b'\tc\x01\xf5\x002\x00\x00\x00\xfb\x00\x18\x00K\x00\x00\x00\x00\x01\x93\x00\x00\x07\xe0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x012\x00\x00\x00\x00\x00\x00\x01\x93\x00\x00\x07\xe0\x00\x03\x00\x003\xb8\x00\x01\x00\x03\x00\x05\x00\x00\x03\xec\x00\x00\xff\xf1'
USB:  5.02V,  0.050A,  0.251W,  100.4Ω
Data:  3.06V(+),  0.00V(-), charging mode: Unknown / Normal
Recording (on) :    0.403Ah,    2.016Wh,  13240 sec at &gt;= 0.03A
Data groups:
    *0:    0.403Ah,    2.016Wh       5:    0.000Ah,    0.000Wh
     1:    0.000Ah,    0.000Wh       6:    0.000Ah,    0.000Wh
     2:    0.000Ah,    0.000Wh       7:    0.000Ah,    0.000Wh
     3:    0.000Ah,    0.000Wh       8:    0.000Ah,    0.000Wh
     4:    0.000Ah,    0.000Wh       9:    0.000Ah,    0.000Wh
UM24C, temperature:  24C ( 75F)
Screen: 0/6, brightness: 5/5, timeout: 3 min
Collection time: 2022-01-06 14:29:26.689485
</code></pre><p>Правда, этот проект выводит либо слишком много данных, либо данные в формате json. Поэтому я взял другой проект - <a href="https://github.com/davatorium/um25c-client">um25c-client</a>. Он подключается к устройству и каждую секунду выводит текущее значение напряжения и тока. Эти данные очень удобно импортировать в .csv и анализировать.</p>
<h2 id="анализ-всего-вокруг">Анализ всего вокруг</h2>
<p>Большинство устройств подключается по USB, поэтому можно померить буквально весь мир! Я начал с достаточно безобидных вещей. Мышка <a href="https://www.razer.com/gaming-mice/razer-naga-x/RZ01-03590100-R3U1">Razer Naga X</a>. Среднее потребление около 110мА:</p>














<img src="/img/smart-usb-meter-a3-b/razernaga2.png">

<p>Raspberry PI 3b. Среднее потребление в режиме ожидания 300мА.</p>














<img src="/img/smart-usb-meter-a3-b/raspberrypi3b2.png">

<p>Далее, сравнение потребления проекта <a href="https://github.com/dernasherbrezon/r2lora">r2lora</a> и <a href="http://tinygs.com">tinyGS</a>. Оба работают на одной и той же плате <a href="http://www.lilygo.cn/prod_view.aspx?TypeId=50060&amp;Id=1326&amp;FId=t3:50060:3">TTGO LoRa32</a>:</p>














<img src="/img/smart-usb-meter-a3-b/r2lora-tinygs2.png">

<p>Проект r2lora значительно проще, чем tinyGS, поэтому и потребление энергии меньше. Ещё я отказался от сложного UI с несколькими экранами, часами и пр. Если сделать яркость экрана tinyGS равной 0, то получатся следующие значения:</p>














<img src="/img/smart-usb-meter-a3-b/tinygs-idle-black2.png">

<p>Помогло, но не сильно. Среднее потребление около 100мА.</p>














<img src="/img/smart-usb-meter-a3-b/firmware2.png">

<p>Загрузка новой прошивки потребляет около 30мА. Забавно.</p>














<img src="/img/smart-usb-meter-a3-b/wifi2.png">

<p>Кстати, во время первоначального соединения по WiFi потребление тока вырастает до ~150мА. Причём как для r2lora, так и tinyGS. Как только IP адрес получен, то потребление резко возвращается к нормальному.</p>
<p>Ещё я померил потребление в режиме приёма сигнала по протоколу LoRa. Оно совсем не меняется, либо меняется в рамках погрешности.</p>
<p>А вот, кстати, интересный график потребления энергии во время подключения ESP32 к Raspberry PI по USB:</p>














<img src="/img/smart-usb-meter-a3-b/full2.png">

<p>Сразу при подключении потребление резко подскакивает до 500мА. Потом идёт подключение ESP32 к WiFi точке доступа, а потом нормальная работа. При этом напряжение с 5.140В подскакивает до 5.160В и нормализируется до 5.140В.</p>
<h2 id="выводы">Выводы</h2>
<p>A3-B позволяет не только теоретизировать о потреблении энергии, но и запечатлеть потребление во времени и делать различные выводы на основе фактических данных.</p>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Создание FOTA компонента</title>
      <link>https://dernasherbrezon.com/posts/fota-for-r2lora/</link>
      <pubDate>Sun, 02 Jan 2022 21:04:18 +0000</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/fota-for-r2lora/</guid>
      <description>Эта статья продолжает цикл разработки проекта r2lora. Предыдущие статьи:
 Создание проекта на основе ESP32 Настройка проекта в PlatformIO  FOTA - это сокращение от Firmware-Over-The-Air (обновление по воздуху). Это специальный компонент, который обновляет приложение, если доступна новая версия.
Дизайн Автообновление можно сделать несколькими способами:
 Специальный компонент начинает слушать TCP/UDP порт. Для обновления нужно отправить прошивку на этот порт с любого другого устройства работающего в сети. По сути push-обновление. Специальный компонент периодически проверяет центральный сервер на наличие новой версии.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Создание FOTA компонента</h1></header>
      		<div class='container entry-content'>
  <p>Эта статья продолжает цикл разработки проекта <a href="https://github.com/dernasherbrezon/r2lora">r2lora</a>. Предыдущие статьи:</p>
<ul>
<li><a href="https://dernasherbrezon.com/posts/programming-esp32/">Создание проекта на основе ESP32</a></li>
<li><a href="https://dernasherbrezon.com/posts/configuring-platformio/">Настройка проекта в PlatformIO</a></li>
</ul>
<p>FOTA - это сокращение от <a href="https://ru.wikipedia.org/wiki/%D0%9E%D0%B1%D0%BD%D0%BE%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5_%D0%BF%D0%BE_%D0%B2%D0%BE%D0%B7%D0%B4%D1%83%D1%85%D1%83">Firmware-Over-The-Air</a> (обновление по воздуху). Это специальный компонент, который обновляет приложение, если доступна новая версия.</p>
<h2 id="дизайн">Дизайн</h2>
<p>Автообновление можно сделать несколькими способами:</p>
<ul>
<li>Специальный компонент начинает слушать TCP/UDP порт. Для обновления нужно отправить прошивку на этот порт с любого другого устройства работающего в сети. По сути push-обновление.</li>
<li>Специальный компонент периодически проверяет центральный сервер на наличие новой версии. Если такая есть, то он скачивает её.</li>
</ul>
<p>Первый способ реализован в стандартной библиотеке <a href="https://github.com/jandrassy/ArduinoOTA">ArduinoOTA</a>. Она используется повсеместно и стала стандартом де-факто в мире микроконтроллеров. Из плюсов можно отметить простоту работы: устройство начинает обновление, как только кто-то извне отправил новую версию. Не нужно создавать сложную инфраструктуру хранения и доставки обновлений: достаточно отправить прошивку с любого устройства находящегося в сети.</p>
<p>Но у этого подхода есть серьёзный недостаток: нужен ещё один внешний сервер (для автоматизации) или пользователь (ручное) для того, чтобы закачивать прошивку.</p>
<p>Я выбрал второй вариант. Он больше всего походит на классический способ обновления пакетов в Debian, Ubuntu и других операционных системах. APT или любой другой менеджер периодически проверяет сервер на наличие обновлений, скачивает и устанавливает их. Так работают все обновления безопасности почти во всех операционных системах. Из недостатков - нужно хранить прошивки на центральном сервере и FOTA-компонент должен периодически проверять доступность новой версии. В моём случае это не такая большая проблема, так как я уже поддерживаю собственный APT репозиторий. И добавление FOTA репозитория не так уж сложно.</p>
<h2 id="fota-репозиторий">FOTA репозиторий</h2>
<p>Я не стал городить сложную структуру репозитория, как это сделано в APT. FOTA репозиторий состоит из двух логических файлов:</p>
<ul>
<li>r2lora.json - файл-индекс с текущими версиями прошивок под каждую плату</li>
<li>непосредственно сами файлы прошивок</li>
</ul>
<p>Файл-индекс имеет следующую структуру:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">[
    {
        <span style="color:#f92672">&#34;board&#34;</span>: <span style="color:#e6db74">&#34;ttgo-lora32-v2&#34;</span>,
        <span style="color:#f92672">&#34;version&#34;</span>: <span style="color:#e6db74">&#34;1.1&#34;</span>,
        <span style="color:#f92672">&#34;filename&#34;</span>: <span style="color:#e6db74">&#34;/fotatest/ttgo-lora32-v2-1.1.bin.zz&#34;</span>,
        <span style="color:#f92672">&#34;size&#34;</span>: <span style="color:#ae81ff">203984</span>,
        <span style="color:#f92672">&#34;md5Checksum&#34;</span>: <span style="color:#e6db74">&#34;6c0931332848636087c599a1ad9c06a8&#34;</span>
    }
]
</code></pre></div><p>В нём находится массив json-объектов, описывающих каждую плату. Из-за того, что каждая плата отличается друг от друга, репозиторий должен хранить прошивки одной и той же версии для каждой из плат. Каждая прошивка описывается следующими обязательными полями:</p>
<table>
<thead>
<tr>
<th>
Название
</th>
<th>
Описание
</th>
<th>
Пример
</th>
</tr>
</thead>
<tbody>
<tr>
<td>
board
</td>
<td>
Имя платы. Должно совпадать с именем платы в PlatformIO
</td>
<td>
ttgo-lora32-v2
</td>
</tr>
<tr>
<td>
version
</td>
<td>
Версия приложения. Если текущая версия приложения не совпадает с версией в репозитории, то скачивается версия из репозитория.
</td>
<td>
1.1
</td>
</tr>
<tr>
<td>
filename
</td>
<td>
Путь до файла внутри репозитория. Все файлы должны быть сжаты с помощью zlib.
</td>
<td>
/fota/ttgo-lora32-v2-1.1.bin.zz
</td>
</tr>
<tr>
<td>
size
</td>
<td>
Размер файла прошивки в байтах ДО сжатия. Позволяет правильно рисовать прогресс бар при обновлении.
</td>
<td>
203984
</td>
</tr>
<tr>
<td>
md5Checksum
</td>
<td>
Контрольная сумма файла прошивки ДО сжатия. Алгоритм: MD5
</td>
<td>
6c0931332848636087c599a1ad9c06a8
</td>
</tr>
</tbody>
</table>
<p>Все прошивки отлично сжимаются почти в 2 раза, поэтому по-умолчанию репозиторий может содержать только сжатые прошивки. При этом экономится не только место на моём S3 и сеть, но и увеличивается скорость скачивания новых версий. Это особенно актуально на таких маломощных устройствах как ESP32.</p>
<p>Доступ к FOTA репозиторию осуществляется с помощью HTTP, поэтому его можно развернуть где угодно. В моём случае - это Amazon S3.</p>
<h2 id="алгоритм-работы">Алгоритм работы</h2>
<p>Первым делом <a href="https://github.com/dernasherbrezon/r2lora/blob/main/lib/fota/Fota.cpp#L13">FOTA компонент</a> скачивает файл-индекс.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++"><span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span><span style="color:#66d9ef">this</span><span style="color:#f92672">-&gt;</span>client<span style="color:#f92672">-&gt;</span>begin(hostname, port, <span style="color:#66d9ef">this</span><span style="color:#f92672">-&gt;</span>indexFile)) {
  log_e(<span style="color:#e6db74">&#34;unable to begin&#34;</span>);
  <span style="color:#66d9ef">return</span> FOTA_UNKNOWN_ERROR;
}
<span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span><span style="color:#66d9ef">this</span><span style="color:#f92672">-&gt;</span>lastModified.isEmpty()) {
  <span style="color:#66d9ef">this</span><span style="color:#f92672">-&gt;</span>client<span style="color:#f92672">-&gt;</span>addHeader(<span style="color:#e6db74">&#34;If-Modified-Since&#34;</span>, <span style="color:#66d9ef">this</span><span style="color:#f92672">-&gt;</span>lastModified);
}
<span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>headers[] <span style="color:#f92672">=</span> {<span style="color:#e6db74">&#34;Last-Modified&#34;</span>};
<span style="color:#66d9ef">this</span><span style="color:#f92672">-&gt;</span>client<span style="color:#f92672">-&gt;</span>collectHeaders(headers, <span style="color:#ae81ff">1</span>);
<span style="color:#66d9ef">int</span> code <span style="color:#f92672">=</span> <span style="color:#66d9ef">this</span><span style="color:#f92672">-&gt;</span>client<span style="color:#f92672">-&gt;</span>GET();
</code></pre></div><p>При этом я запоминаю время последнего обновления файла. Если файл не поменялся, то сервер должен вернуть HTTP 304. И тогда я немного сэкономлю на трафике и разборе json-файла. Для доступа к репозиторию я использую стандартный <code>HTTPClient</code> из <code>HTTPClient.h</code>, который поставляется вместе с фреймворком Arduino.</p>
<p>Далее компонент должен найти информацию о прошивке для текущей платы. PlatformIO передаёт имя платы при компиляции через параметр <code>ARDUINO_VARIANT</code>.</p>
<p>Если информация найдена и версия не совпадает с текущей, то FOTA скачает файл прошивки с сервера. Правда, алгоритм скачивания достаточно хитрый. Дело в том, что файл полностью не поместится в памяти, поэтому надо скачивать небольшим буфером и сразу записывать в правильный раздел. Для работы с обновлениями есть специальный класс <code>Update</code> из <code>Update.h</code>. Он записывает новую версию в специальную партицию на флеш памяти, проверяет контрольную сумму полученного файла и устанавливает новую партицию в качестве загрузочной.</p>
<p>Помимо этого, FOTA компонент поддерживает специальный callback метод. По мере скачивания файла, которое может занять некоторое время, я обновляю прогресс бар.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++"><span style="color:#66d9ef">if</span> (<span style="color:#66d9ef">this</span><span style="color:#f92672">-&gt;</span>onUpdateFunc) {
  Update.onProgress(<span style="color:#66d9ef">this</span><span style="color:#f92672">-&gt;</span>onUpdateFunc);
}
</code></pre></div><p>Эта лямбда-функция на вход получает текущее количество скачанных байт и общее количество байт. Вывод на экран при этом достаточно тривиальный:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++">updater<span style="color:#f92672">-&gt;</span>setOnUpdate([](size_t current, size_t total) {
  display<span style="color:#f92672">-&gt;</span>setStatus(<span style="color:#e6db74">&#34;UPDATING&#34;</span>);
  display<span style="color:#f92672">-&gt;</span>setProgress((<span style="color:#66d9ef">uint8_t</span>)((<span style="color:#66d9ef">float</span>)current <span style="color:#f92672">*</span> <span style="color:#ae81ff">100</span> <span style="color:#f92672">/</span> total));
  display<span style="color:#f92672">-&gt;</span>update();
});
</code></pre></div><p>Как только файл полностью скачен и контрольная сумма проверена, необходимо перезагрузить плату:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++"><span style="color:#66d9ef">if</span> (reboot) {
  log_i(<span style="color:#e6db74">&#34;update completed. rebooting&#34;</span>);
  ESP.restart();
} <span style="color:#66d9ef">else</span> {
  log_i(<span style="color:#e6db74">&#34;update completed&#34;</span>);
}
</code></pre></div><h2 id="zlib">zlib</h2>
<p>Отдельно хочется остановиться на архивировании/разархивировании. В ESP32 нет поддержки <a href="https://zlib.net">zlib</a>. Поэтому надо либо самому портировать zlib на ESP32, либо искать более легковесную альтернативу. И она есть - <a href="https://github.com/richgel999/miniz">miniz</a>. Но самое замечательное заключается в том, что ROM уже содержит реализацию основных функций miniz. Так что на размер прошивки использование miniz не влияет.</p>
<p>Разархивирование потока данных состоит из нескольких шагов. Во-первых, нужно инициализировать вспомогательные структуры для miniz:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++">tinfl_init(<span style="color:#66d9ef">this</span><span style="color:#f92672">-&gt;</span>inflator);
</code></pre></div><p>Во-вторых, нужно создать два промежуточных буфера.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++"><span style="color:#66d9ef">uint8_t</span> <span style="color:#f92672">*</span>nextCompressedBuffer <span style="color:#f92672">=</span> <span style="color:#66d9ef">this</span><span style="color:#f92672">-&gt;</span>compressedBuffer;
<span style="color:#66d9ef">uint8_t</span> <span style="color:#f92672">*</span>nextUncompressedBuffer <span style="color:#f92672">=</span> <span style="color:#66d9ef">this</span><span style="color:#f92672">-&gt;</span>uncompressedBuffer;
</code></pre></div><p>В один буфер необходимо записывать сжатые данные, а в другой буфер miniz будет помещать разархивированные данные. Тут важно выделить не меньше 32768 байт для выходного массива. В документации это не описано, но почему-то miniz требует буфер именного такого размера. Если выделить меньше, то разархивация будет падать со статусом -1.</p>
<p>Далее интересно: нужно следить, чтобы во входящем буфере было достаточно данных для работы, и при этом, чтобы в исходящем буфере было место для новых данных.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++">size_t inBytes <span style="color:#f92672">=</span> actuallyRead;
size_t outBytes <span style="color:#f92672">=</span> availableOut;
status <span style="color:#f92672">=</span> tinfl_decompress(inflator, (<span style="color:#66d9ef">const</span> mz_uint8 <span style="color:#f92672">*</span>)nextCompressedBuffer, <span style="color:#f92672">&amp;</span>inBytes,
                          <span style="color:#66d9ef">this</span><span style="color:#f92672">-&gt;</span>uncompressedBuffer, nextUncompressedBuffer, <span style="color:#f92672">&amp;</span>outBytes,
                          flags);
actuallyRead <span style="color:#f92672">-=</span> inBytes;
nextCompressedBuffer <span style="color:#f92672">=</span> nextCompressedBuffer <span style="color:#f92672">+</span> inBytes;

availableOut <span style="color:#f92672">-=</span> outBytes;
nextUncompressedBuffer <span style="color:#f92672">=</span> nextUncompressedBuffer <span style="color:#f92672">+</span> outBytes;
</code></pre></div><p>Как только исходящий буфер полностью заполнен, можно записывать на флэш:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++">size_t actuallyWrote <span style="color:#f92672">=</span> Update.write(<span style="color:#66d9ef">this</span><span style="color:#f92672">-&gt;</span>uncompressedBuffer, bytesInTheOutput);
</code></pre></div><p>Однако, когда я запустил тест, то получил следующую ошибку:</p>
<pre><code>[I][Fota.cpp:191] downloadAndApplyFirmware(): downloading new firmware: 203984 bytes
***ERROR*** A stack overflow in task loopTask has been detected.
abort() was called at PC 0x40088a50 on core 1

ELF file SHA256: 0000000000000000

Backtrace: 0x400887bc:0x3ffaee10 0x40088a39:0x3ffaee30 0x40088a50:0x3ffaee50 0x4008a633:0x3ffaee70 0x4008c1fc:0x3ffaee90 0x4008c1b2:0x00a42700
  #0  0x400887bc:0x3ffaee10 in invoke_abort at /home/runner/work/esp32-arduino-lib-builder/esp32-arduino-lib-builder/esp-idf/components/esp32/panic.c:715
  #1  0x40088a39:0x3ffaee30 in abort at /home/runner/work/esp32-arduino-lib-builder/esp32-arduino-lib-builder/esp-idf/components/esp32/panic.c:715
  #2  0x40088a50:0x3ffaee50 in vApplicationStackOverflowHook at /home/runner/work/esp32-arduino-lib-builder/esp32-arduino-lib-builder/esp-idf/components/esp32/panic.c:715
  #3  0x4008a633:0x3ffaee70 in vTaskSwitchContext at /home/runner/work/esp32-arduino-lib-builder/esp32-arduino-lib-builder/esp-idf/components/freertos/tasks.c:3507
  #4  0x4008c1fc:0x3ffaee90 in _frxt_dispatch at /home/runner/work/esp32-arduino-lib-builder/esp32-arduino-lib-builder/esp-idf/components/freertos/portasm.S:406
  #5  0x4008c1b2:0x00a42700 in _frxt_int_exit at /home/runner/work/esp32-arduino-lib-builder/esp32-arduino-lib-builder/esp-idf/components/freertos/portasm.S:206
</code></pre><p>Казалось бы, причём тут <code>stack overflow</code>? У меня даже рекурсии нет. Оказывается, нельзя написать вот так:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++">tinfl_decompressor inflator;
</code></pre></div><p>Это создаст структуру на стеке вызова функции. И размер этой структуры больше, чем доступная память стека. Микроконтроллеры. По той же причине нельзя написать:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++"><span style="color:#66d9ef">uint8_t</span> uncompressedBuffer[<span style="color:#ae81ff">32768</span>];
</code></pre></div><p>Иначе получится:</p>
<pre><code>[E][WiFiClient.cpp:62] fillBuffer(): Not enough memory to allocate buffer
[E][WiFiClient.cpp:439] read(): fail on fd 61, errno: 11, &quot;No more processes&quot;
Guru Meditation Error: Core  1 panic'ed (LoadProhibited). Exception was unhandled.
</code></pre><p>Решается это просто - нужно выделять объекты в heap с помощью malloc или new.</p>
<p>После того как я исправил все эти исключения, то обнаружил, что zlib - это не то же самое, что и gzip. У них разные заголовки. Поэтому создать прошивку следующей командой просто не получится:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">gzip firmware.bin
</code></pre></div><p>miniz не сможет распаковать. Внутри всё тот же Deflate, но заголовки файлов отличаются. Можно воспользоваться разными хаками и подменять заголовок gzip, но мне показалось это ненадёжным. Я нашёл специальную программу <a href="https://zlib.net/pigz/">pigz</a>, которая может создавать zlib-файлы:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">pigz --zlib firmware.bin
</code></pre></div><p>Немного неудобно, но работает.</p>
<h2 id="тестирование">Тестирование</h2>
<p>Код нужно тестировать, и FOTA не исключение. Но как протестировать обновление самого себя? Ведь после обновления нужно перезагрузить программу и результат теста определённо пропадёт. Тут я пошёл на некоторые уступки и отошёл от классического юнит-тестирования:</p>
<ul>
<li>в метод <code>loop</code> я добавил параметр <code>bool reboot</code>. Он нужен только для тестирования.</li>
<li>метод <code>loop</code> начал возвращать статус код. С одной стороны большинство программ на С и так возвращают статус-код. С другой стороны, он тут не нужен и используется в тестах, чтобы понять тип ошибки.</li>
</ul>
<p>Ещё одной сложностью тестирования FOTA является сильная привязка к разной инфраструктуре. Нужно убедиться, что HTTP клиент правильно инициализирован и действительно скачивает прошивку. Нужно убедиться, что zlib распаковывает файл и контрольная сумма совпадает. &ldquo;Раз нужно тестировать инфраструктуру, то нужно поднять инфраструктуру!&rdquo; - подумал я и создал:</p>
<ul>
<li>специальные версии прошивок для каждой из плат, которые ничего не делают.</li>
<li>залил их на S3</li>
<li>добавил множество файлов-индексов с разными возможными ошибками</li>
</ul>
<p>Пример юнит-теста ниже:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++"><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">test_non_existing_file</span>() {
  Fota fota;
  fota.init(<span style="color:#e6db74">&#34;1.0&#34;</span>, <span style="color:#e6db74">&#34;apt.r2server.ru&#34;</span>, <span style="color:#ae81ff">80</span>, <span style="color:#e6db74">&#34;/fotatest/missingfile.json&#34;</span>, <span style="color:#ae81ff">24</span> <span style="color:#f92672">*</span> <span style="color:#ae81ff">60</span> <span style="color:#f92672">*</span> <span style="color:#ae81ff">60</span> <span style="color:#f92672">*</span> <span style="color:#ae81ff">1000</span>, ARDUINO_VARIANT);
  TEST_ASSERT_EQUAL(FOTA_INVALID_SERVER_RESPONSE, fota.loop(false));
}
</code></pre></div><p>FOTA инициализируется и пытается проверить обновление. <code>missingfile.json</code> - это заранее созданный файл с ожидаемой ошибкой, который я загрузил на S3.</p>
<p>Ещё одним неудобством стало подключение к WiFi перед выполнением теста. Ведь для того, чтобы скачать с S3 нужно полностью инициализированное подключение к Интернету. PlatformIO позволяет передавать переменные среды в билд:</p>
<pre><code>build_flags = -DWIFI_SSID=\&quot;${sysenv.WIFI_SSID}\&quot; -DWIFI_PASSWORD=\&quot;${sysenv.WIFI_PASSWORD}\&quot;
</code></pre><p>В коде они используются следующим образом:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++"><span style="color:#75715e">#ifndef WIFI_SSID
</span><span style="color:#75715e">#define WIFI_SSID &#34;&#34;
</span><span style="color:#75715e">#endif
</span><span style="color:#75715e"></span>
<span style="color:#75715e">#ifndef WIFI_PASSWORD
</span><span style="color:#75715e">#define WIFI_PASSWORD &#34;&#34;
</span><span style="color:#75715e">#endif
</span><span style="color:#75715e"></span>
WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
<span style="color:#66d9ef">while</span> (WiFi.status() <span style="color:#f92672">!=</span> WL_CONNECTED) {
  delay(<span style="color:#ae81ff">500</span>);
}
</code></pre></div><p>Если при сборке теста в переменных окружения были логин и пароль для локальной точки доступа, то они будут вкомпилированы в прошивку теста и использованы перед выполнением всех тестов.</p>
<p>Финальным штрихом будет отключение этого теста по-умолчанию. Я не рассчитываю, что любой желающий собрать проект будет тестировать FOTA, да и мне выполнять тест каждый раз при сборке совсем не хочется. Для этого в PlatformIO есть поддержка отключаемых тестов!</p>
<pre><code>test_ignore = fota, testfirmware
</code></pre><p><code>testfirmware</code> - это ещё один тест, который на самом деле не тест, а та самая программа, которая ничего не делает и используется для тестирования FOTA.</p>
<p>Это всё звучит очень сложно, но и сам компонент достаточно сложный и делает много вещей, которые как раз хотелось бы проверять автоматически. А уж сколько ошибок я нашёл с помощью этих тестов! Зато теперь обновление работает идеально.</p>

<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube.com/embed/_DowEhVwboI" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>


</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Настройка проекта в PlatformIO</title>
      <link>https://dernasherbrezon.com/posts/configuring-platformio/</link>
      <pubDate>Sat, 01 Jan 2022 20:30:18 +0000</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/configuring-platformio/</guid>
      <description>В предыдущей статье я описал общий дизайн r2lora и выбрал инструменты для разработки. Теперь можно остановится на конфигурировании проекта и разбиении его на отдельные модули. PlatformIO отлично интегрирован с множеством различных инструментов и позволяет делать сложные вещи почти так же просто, как и в Java.
Управление зависимостями Бич любой разработки на C/C++ - это управление зависимостями. В языке и экосистеме просто нет стандартного способа для этого. Каждый делает это по-своему. Есть широко известный в узких кругах Conan.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Настройка проекта в PlatformIO</h1></header>
      		<div class='container entry-content'>
  <p>В <a href="https://dernasherbrezon.com/posts/programming-esp32/">предыдущей статье</a> я описал общий дизайн r2lora и выбрал инструменты для разработки. Теперь можно остановится на конфигурировании проекта и разбиении его на отдельные модули. <a href="https://platformio.org">PlatformIO</a> отлично интегрирован с множеством различных инструментов и позволяет делать сложные вещи почти так же просто, как и в Java.</p>
<h2 id="управление-зависимостями">Управление зависимостями</h2>
<p>Бич любой разработки на C/C++ - это управление зависимостями. В языке и экосистеме просто нет стандартного способа для этого. Каждый делает это по-своему. Есть широко известный в узких кругах <a href="https://dernasherbrezon.com/posts/dynamic-libraries-rpath/">Conan</a>. Но в нём нет множества библиотек. Есть библиотеки в операционных системах, но они не подходят для микроконтроллеров и их версии определяются операционными системами, а не приложениями.</p>
<p>В PlatformIO есть свой репозиторий библиотек, который удобным образом интегрирован в платформу.</p>
<p><img src="/img/configuring-platformio/libs.png" alt=""></p>
<p>Здесь можно отфильтровать библиотеки по типу микроконтроллера, фреймворку, назначению и многим другим параметрам. Это необычайно полезно, потому что существует великое множество различных микроконтроллеров. И все они разные. Разная архитектура, разные наборы регистров, разные объёмы памяти. И то, что PlatformIO изначально это учитывает, позволяет хоть как-то бороться с хаосом.</p>
<p>Для того чтобы добавить зависимость в проект нужно написать следующее:</p>
<pre><code>[env]
lib_deps = 
	jgromes/RadioLib@^4.6.0
	prampec/IotWebConf@^3.2.0
	bblanchon/ArduinoJson@^6.18.5
	thingpulse/ESP8266 and ESP32 OLED driver for SSD1306 displays@^4.2.1
</code></pre><p>Это добавит 4 библиотеки:</p>
<ul>
<li><a href="https://github.com/jgromes/RadioLib">jgromes/RadioLib</a> - библиотека для работы с чипом LoRa. Она предоставляет универсальный интерфейс для отправки и получения данных, а также скрывает некоторые особенности реализации самих чипов.</li>
<li><a href="https://github.com/prampec/IotWebConf">prampec/IotWebConf</a> - библиотека для конфигурирования. Она поднимает точку доступа, хранит конфигурацию системы в постоянной памяти и полностью отвечает за начальную конфигурацию системы.</li>
<li><a href="https://github.com/bblanchon/ArduinoJson">bblanchon/ArduinoJson</a> - сериализация и десериализация JSON.</li>
<li><a href="https://github.com/ThingPulse/esp8266-oled-ssd1306">thingpulse/ESP8266 and ESP32 OLED driver for SSD1306 displays</a> - удобная библиотека для работы со встроенным дисплеем.</li>
</ul>
<p>Все зависимости просто скачиваются из git репозитория и складываются в специальную папку внутри проекта. По сути это очень похоже на работу с зависимостями в npm. Эти зависимости компилируются как часть проекта в единый бинарник - firmware.bin, который прошивается в микроконтроллер. Если какие-то библиотечные функции не используются, то они и не попадают в финальный дистрибутив. Это особенно актуально для микроконтроллеров, так как размер памяти там обычно маленький. Для примера плата <a href="https://docs.platformio.org/en/latest/boards/espressif32/ttgo-lora32-v2.html">TTGO LoRa32-OLED V2</a> имеет всего 4мб встроенной флеш памяти и 320кб оперативной. И это считается очень много.</p>
<h2 id="платы">Платы</h2>
<p>Если говорить о платах, то в PlatformIO есть специальная сущность - &ldquo;board&rdquo; (плата). Каждая плата характеризуется типом процессора, частотой работы, размером оперативной памяти и многими другими параметрами. Если в проекте планируется поддержка разных плат, то их достаточно объявить в конфигурации и тогда PlatformIO будет собирать отдельную прошивку для каждой из них.</p>
<pre><code>[env:ttgo-lora32-v2]
platform = espressif32
board = ttgo-lora32-v2
build_flags = 
    ${env.build_flags}
	-DPIN_CS=18
	-DPIN_DI0=26
	-DPIN_RST=23
	-DPIN_OLED_SDA=21
	-DPIN_OLED_SCL=22
</code></pre><p>В примере выше я объявил некоторую конфигурацию (&ldquo;ttgo-lora32-v2&rdquo;), которую нужно использовать для сборки приложения под плату ttgo-lora32-v2 с дополнительными флагами компиляции. <code>${env.build_flags}</code> наследует общую конфигурацию <code>build_flags</code> из объявления <code>env</code>. Остальные параметры специфичны для конкретной платы. Из-за того, что каждая плата имеет фиксированные номера пинов, то их можно объявить прямо в конфигурации.</p>
<p>r2lora поддерживает все платы, в которых используется LoRa чип:</p>
<ul>
<li><a href="https://docs.platformio.org/en/latest/boards/espressif32/ttgo-lora32-v2.html">ttgo-lora32-v2</a></li>
<li><a href="https://docs.platformio.org/en/latest/boards/espressif32/ttgo-lora32-v1.html">ttgo-lora32-v1</a></li>
<li><a href="https://docs.platformio.org/en/latest/boards/espressif32/ttgo-lora32-v21.html">ttgo-lora32-v21</a></li>
<li><a href="https://docs.platformio.org/en/latest/boards/espressif32/heltec_wifi_lora_32.html">heltec_wifi_lora_32</a></li>
<li><a href="https://docs.platformio.org/en/latest/boards/espressif32/heltec_wifi_lora_32_V2.html">heltec_wifi_lora_32_V2</a></li>
<li><a href="https://docs.platformio.org/en/latest/boards/espressif32/ttgo-t-beam.html">ttgo-t-beam</a></li>
</ul>
<p>Никто не мешает прикрутить <a href="https://www.amazon.co.uk/SX1278-DRF1278F-Arduino-wireless-module/dp/B079QZXP5D">LoRa чип</a> вручную к плате. В таком случае достаточно будет объявить новый env и прописать каждый из пинов.</p>
<p>Для каждой платы может быть собственный набор библиотек и своя собственная папка для сборки:</p>
<p><img src="/img/configuring-platformio/envs.png" alt=""></p>
<h2 id="платформа-и-фреймворк">Платформа и фреймворк</h2>
<p>Помимо плат, в PlatformIO есть понятие платформы и фреймворка. Платформа обычно соответствует типу микроконтроллера. В случае с ESP32 - это espressif32. Иногда микроконтроллер может поддерживать разные архитектуры, тогда каждая из них имеет свой id платформы. Ближайший аналог - это arm64 или armhf. За тем исключением, что платформа описывает конкретный чип. Нечто похожее я пытался сделать, когда компилировал приложения <a href="https://dernasherbrezon.com/posts/apt-for-cpu/">для конкретных процессоров</a>.</p>
<p>Все платы, которые содержат LoRa чипы основаны на ESP32, поэтому <code>platform = espressif32</code>.</p>
<p>Фреймворк - это нечто вроде SDK, который обычно предоставляет производитель микроконтроллеров. Обычно с помощью одного SDK можно разрабатывать под разные модели микроконтроллеров. Иногда есть универсальные SDK. Для ESP32 можно разрабатывать как с помощью <code>framework = espidf</code>, так и <code>framework = arduino</code>. Я выбрал arduino, так как с помощью Arduino API написано множество библиотек. Несмотря на то, что ESP32 несовместим напрямую в Arduino, существует промежуточный слой <code>framework-arduinoespressif32</code>, который конвертирует Arduino API в вызовы ESP32. Немного неоптимально, но ESP32 достаточно мощный, и никто сильно этим не заморачивается.</p>
<h2 id="структура-проекта">Структура проекта</h2>
<p>При использовании <code>framework = arduino</code> проект должен быть структурирован следующим образом:</p>
<p><img src="/img/configuring-platformio/project.png" alt=""></p>
<p>Внутри папки <code>src</code> находятся исходники и входная точка в программу. Обычно это main с методами <code>void loop()</code> и <code>void setup()</code>. Можно программировать на С или С++. Однако, если некоторые библиотеки написаны на С++ и не поддерживают подключение из С, то придётся писать на С++ (sigh!).</p>
<p>Есть ещё папка <code>lib</code>. Она должна содержать небольшие компоненты приложения, которые нужно оттестировать. Выглядит это так:</p>
<ul>
<li>PlatformIO будет брать каждую подпапку внутри <code>lib</code> и компилировать</li>
<li>линковать с тестами</li>
<li>собирать firmware.bin</li>
<li>прошивать на плату и получать результаты выполнения теста</li>
</ul>
<h2 id="тестирование-проекта">Тестирование проекта</h2>
<p>PlatformIO позволяет запускать тесты прямо на микроконтроллере! Тесты можно разбить на отдельные Test Suite и внутри каждого сделать несколько юнит тестов. Каждый Test Suite - это отдельная прошивка, которая имеет одну точку входа и заливается на микроконтроллер стандартным способом.</p>
<p>В скриншоте выше я сделал несколько Test Suite:</p>
<ul>
<li>api - тестирование REST API интерфейса</li>
<li>embedded (lora) - тестирование LoRa модуля. Достаточно стартовать приём и остановить. Проверяется правильная конфигурация пинов и использование чипа</li>
<li>fota - тестирование <a href="https://ru.wikipedia.org/wiki/%D0%9E%D0%B1%D0%BD%D0%BE%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5_%D0%BF%D0%BE_%D0%B2%D0%BE%D0%B7%D0%B4%D1%83%D1%85%D1%83">Firmware-Over-The-Air (FOTA)</a>. Относительно сложный тест, который по-умолчанию не запускается. Он скачивает новую прошивку из S3 и применяет её.</li>
<li>util - тестирование небольшого вспомогательного класса.</li>
</ul>
<p>Я не стал заморачиваться с 80% покрытием кода тестами (его ещё и не подсчитать просто так!), поэтому постарался по-максимуму оттестировать код. А уж, что не получилось, то не получилось.</p>
<p>Каждый Test Suite содержит несколько юнит тестов. Для написания юнит тестов используется библиотека <a href="https://github.com/ThrowTheSwitch/Unity">unity</a>. Поскольку юнит тест должен выполняться один раз, то метод loop не должен делать ничего полезного. Например, он может моргать светодиодом:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++"><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">loop</span>() {
  digitalWrite(<span style="color:#ae81ff">13</span>, HIGH);
  delay(<span style="color:#ae81ff">100</span>);
  digitalWrite(<span style="color:#ae81ff">13</span>, LOW);
  delay(<span style="color:#ae81ff">500</span>);
}
</code></pre></div><p>Вся логика должна находится в методе setup:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++"><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">setup</span>() {
  <span style="color:#75715e">// NOTE!!! Wait for &gt;2 secs
</span><span style="color:#75715e"></span>  <span style="color:#75715e">// if board doesn&#39;t support software reset via Serial.DTR/RTS
</span><span style="color:#75715e"></span>  delay(<span style="color:#ae81ff">2000</span>);

  UNITY_BEGIN();
  RUN_TEST(test_success_start);
  RUN_TEST(test_no_request);
  RUN_TEST(test_invalid_json);
  RUN_TEST(test_begin_failed);
  RUN_TEST(test_success_stop_even_if_not_running);
  RUN_TEST(test_pull);
  RUN_TEST(test_frames_after_stop);
  RUN_TEST(test_cant_tx_during_receive);
  RUN_TEST(test_invalid_tx_request);
  RUN_TEST(test_empty_tx_request);
  RUN_TEST(test_invalid_lora_tx_code);
  RUN_TEST(test_invalid_tx_data_request);
  RUN_TEST(test_success_tx);
  UNITY_END();
}
</code></pre></div><p>В примере выше я добавляю в Test Suite несколько юнит тестов. Каждый юнит тест это отдельная функция:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++"><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">test_success_start</span>(<span style="color:#66d9ef">void</span>) {
  ApiHandler handler(<span style="color:#f92672">&amp;</span>web, <span style="color:#f92672">&amp;</span>mock, NULL, NULL);
  String output;
  <span style="color:#66d9ef">int</span> code <span style="color:#f92672">=</span> handler.handleStart(VALID_RX_REQUEST, <span style="color:#f92672">&amp;</span>output);
  TEST_ASSERT_EQUAL_INT(<span style="color:#ae81ff">200</span>, code);
  assertStatus(<span style="color:#f92672">&amp;</span>output, <span style="color:#e6db74">&#34;SUCCESS&#34;</span>);
}
</code></pre></div><p>Здесь не должно быть ничего неожиданного. Обычное тестирование какое можно встретить даже в Java проекте.</p>
<p>Можно запускать как отдельные Test Suite, так и все вместе.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">pio test --test-port /dev/ttyACM0 -e ttgo-lora32-v2 -f fota
</code></pre></div><p>В результате PlatformIO выведет на экран разную статистику:</p>
<p><img src="/img/configuring-platformio/unittests.png" alt=""></p>
<p>Более детальную документацию можно найти на сайте проекта: <a href="https://docs.platformio.org/en/latest//plus/unit-testing.html">unit testing</a>.</p>
<h2 id="далее">Далее</h2>
<p>После того как структура проекта достаточно понятна, можно приступать непосредственно в реализации. О чём я постараюсь написать в следующей статье.</p>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Создание проекта на основе ESP32</title>
      <link>https://dernasherbrezon.com/posts/programming-esp32/</link>
      <pubDate>Fri, 31 Dec 2021 01:30:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/programming-esp32/</guid>
      <description>В последнее время всё популярнее становится протокол передачи данных LoRa. Уже несколько спутников вовсю его используют и существует целая сеть приёма сигналов - tinyGS. Конечно же, пропустить такое я не мог и начал исследовать как подключить протокол LoRa к r2cloud. К сожалению, это закрытый протокол, поэтому демодулировать его стандартным rtl-sdr не получится. Для получения сигнала нужно использовать специальный чип, который на выходе уже выдаст готовый пакет. Эти чипы достаточно дешёвые, но напрямую к Raspberrypi не подключаются, а используются в основном в связке с ESP32.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Создание проекта на основе ESP32</h1></header>
      		<div class='container entry-content'>
  <p>В последнее время всё популярнее становится протокол передачи данных <a href="https://ru.wikipedia.org/wiki/LoRa">LoRa</a>. Уже несколько спутников вовсю его используют и существует целая сеть приёма сигналов - <a href="https://tinygs.com">tinyGS</a>. Конечно же, пропустить такое я не мог и начал исследовать как подключить протокол LoRa к <a href="https://github.com/dernasherbrezon/r2cloud">r2cloud</a>. К сожалению, это закрытый протокол, поэтому демодулировать его стандартным rtl-sdr не получится. Для получения сигнала нужно использовать специальный чип, который на выходе уже выдаст готовый пакет. Эти чипы достаточно дешёвые, но напрямую к Raspberrypi не подключаются, а используются в основном в связке с ESP32. Из всего этого и родился мой новый проект - <a href="https://github.com/dernasherbrezon/r2lora">r2lora</a>.</p>
<h2 id="постановка-задачи">Постановка задачи</h2>
<p>Итак, нужно дать доступ к чипу LoRa из r2cloud. Желательно, чтобы интерфейс доступа был универсальный и подходил не только для проекта r2cloud. Это позволит другим проектам, не связанным с приёмом спутниковых сигналов, использовать проект, улучшать и вносить изменения.</p>
<p>Есть несколько вариантов:</p>
<ul>
<li>Полностью реализовать функционал r2cloud на ESP32. Сюда входит: составление расписания пролётов, получение параметров спутников, авто-обновление, отправка на центральный сервер. Это достаточно трудоёмкий процесс - ведь придётся переписать очень много уже готового и оттестированного кода. Опять же, непонятно хватит ли мощности ESP32 для расчёта орбит спутников.</li>
<li>Написать минимальное приложение для управления чипом и контролировать приём сигнала из r2cloud.</li>
</ul>
<p>Я решил пойти вторым путём. Во-первых, в r2cloud уже есть поддержка получения данных из внешних источников (plutosdr и sdr-server). Поэтому для добавления LoRa будет достаточно написать ещё один модуль. Во-вторых, логики на ESP32 будет минимальное количество. Чем меньше кода, тем меньше ошибок. В-третьих, такой дизайн позволит переиспользовать проект не только для приёма сигналов со спутников.</p>
<h2 id="дизайн">Дизайн</h2>
<p>В общем виде дизайн r2lora выглядит следующим образом:</p>
<p><img src="/img/programming-esp32/design.png" alt=""></p>
<p>Клиенты взаимодействуют с сервисом с помощью REST API, в котором доступно несколько методов:</p>
<ul>
<li>начать получение данных</li>
<li>получить все принятые пакеты данных. Нужно запускать периодически для скачивания принятых пакетов.</li>
<li>окончить получение данных</li>
<li>передать данные</li>
<li>получить статус приложения</li>
</ul>
<p>Я выбрал именно поллинг данных вместо вебсокетов, так как его наиболее просто реализовать на ESP32. А также потому, что он очень надёжный. При использовании вебсокетов пришлось бы реализовывать алгоритмы переподключения и дедубликации данных.</p>
<p>Помимо основного функционала, необходимо реализовать вспомогательный. Компонент &ldquo;Configurator&rdquo; предназначен для того, чтобы создать начальную конфигурацию устройства. Он работает следующим образом:</p>
<ul>
<li>Если устройство ещё не сконфигурировано, то необходимо поднять собственную точку доступа.</li>
<li>Для того чтобы выполнить начальную конфигурацию, пользователь должен подключится к этой точке доступа, настроить логин, пароль к локальной WiFi точке доступа.</li>
<li>Отсоединится</li>
<li>После чего, устройство отключит собственную точку доступа и попытается подключиться к локальной</li>
<li>Если подключение удалось, то приложение стартует WebServer и начинает слушать команды от пользователя</li>
</ul>
<p>Если устройство уже сконфигурировано, то оно сразу должно подключатся к локальной точке доступа. Если же подключение не удалось, то оно должно возвращаться в начальное состояние и поднимать собственную точку.</p>
<p>Ещё одним обязательным компонентом является <a href="https://ru.wikipedia.org/wiki/%D0%9E%D0%B1%D0%BD%D0%BE%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5_%D0%BF%D0%BE_%D0%B2%D0%BE%D0%B7%D0%B4%D1%83%D1%85%D1%83">Firmware-Over-The-Air (FOTA)</a>. Все приложения содержат ошибки, одним из способов уменьшения их влияния является автообновление. FOTA позволяет автоматически скачивать прошивку с центрального сервера и обновлять устройство.</p>
<h2 id="выбор-инструментов">Выбор инструментов</h2>
<p>Для разработки под ESP32 есть несколько инструментов: <a href="https://www.arduino.cc/en/software">Arduino IDE</a>, <a href="https://platformio.org">PlatformIO</a> и <a href="https://github.com/espressif/esp-idf">ESP-IDF</a>. На самом деле стандартом де-факто постепенно стал PlatformIO. Он позволяет не только разрабатывать проект на C/C++, но и собирать проект, управлять сторонними библиотеками, запускать тесты, анализировать код и многое другое.</p>
<p>PlatformIO - это просто плагин к Visual Studio Code. Для установки достаточно скачать VSCode и установить плагин.</p>
<p><img src="/img/programming-esp32/platformio.png" alt=""></p>
<p>Помимо IDE, PlatformIO предоставляет CLI. С помощью него можно делать всё то же самое, что и в IDE, но в консоли. Дизайн PlatformIO очень похож на cmake, который лишь вызывает gcc с нужными параметрами, генерирует makefile, собирает приложение и пр. PlatformIO скачивает многочисленные Python-зависимости и делегирует сборку тому же ESP-IDF. При этом он отлично интегрирует множество несвязанных инструментов между собой позволяя сосредоточится на разработке приложения, а не конфигурировании.</p>
<p>На самом деле PlatformIO покрывает 100% всех потребностей. За несколько месяцев разработки я не испытывал никаких неудобств, и всё было под рукой.</p>
<p>В следующей статье я постараюсь описать структуру проекта, процесс разработки приложения и раскрыть некоторые особенности программирования под микроконтроллеры.</p>
<p>Далее: <a href="https://dernasherbrezon.com/posts/configuring-platformio/">настройка проекта</a></p>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Счётчики и датчики</title>
      <link>https://dernasherbrezon.com/posts/gauge-and-counter-explained/</link>
      <pubDate>Mon, 22 Nov 2021 17:13:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/gauge-and-counter-explained/</guid>
      <description>Любой, кто хотя бы раз сталкивался с системами мониторинга, знает, что существует два типа метрик: счётчики (counter) и датчики (gauge). Но не многие знают, зачем именно сделаны эти два типа.
Датчики Тип &amp;ldquo;датчик&amp;rdquo; используется для измерения текущего состояния. Обычно это число, которое может как увеличиваться, так и уменьшаться. Например, это могут быть измерения температуры, количество подключенных пользователей, load average и так далее. По сути, измерение любого стохастического процесса, про которого заранее ничего неизвестно.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Счётчики и датчики</h1></header>
      		<div class='container entry-content'>
  <p>Любой, кто хотя бы раз сталкивался с системами мониторинга, знает, что существует два типа метрик: счётчики (counter) и датчики (gauge). Но не многие знают, зачем именно сделаны эти два типа.</p>
<h3 id="датчики">Датчики</h3>
<p>Тип &ldquo;датчик&rdquo; используется для измерения текущего состояния. Обычно это число, которое может как увеличиваться, так и уменьшаться. Например, это могут быть измерения температуры, количество подключенных пользователей, load average и так далее. По сути, измерение любого стохастического процесса, про которого заранее ничего неизвестно.</p>
<p><img src="/img/gauge-and-counter-explained/1.png" alt=""></p>
<h3 id="счётчики">Счётчики</h3>
<p>Тип &ldquo;счётчик&rdquo; обычно используется для метрик, значения которых <a href="https://ru.wikipedia.org/wiki/%D0%9C%D0%BE%D0%BD%D0%BE%D1%82%D0%BE%D0%BD%D0%BD%D0%B0%D1%8F_%D1%84%D1%83%D0%BD%D0%BA%D1%86%D0%B8%D1%8F">постепенно увеличиваются</a>. Примером таких метрик может быть количество байт, посланных по сети, количество обработанных запросов и так далее.</p>
<p><img src="/img/gauge-and-counter-explained/2.png" alt=""></p>
<h3 id="практическое-использование">Практическое использование</h3>
<p>Из этих определений по-прежнему непонятно зачем нужен тип &ldquo;счётчик&rdquo;. Зачем хранить общее количество переданных байт, если, зачастую, интересна скорость передачи данных по сети? А скорость передачи можно посчитать во время съёма информации и записать в базу с типом &ldquo;датчик&rdquo;.</p>
<p>А всё дело в способе отображения значений на графике. Допустим, есть метрика &ldquo;Температура&rdquo; типа &ldquo;датчик&rdquo;. Если нужно нарисовать график по минутам, то получится что-то вроде этого:</p>
<p><img src="/img/gauge-and-counter-explained/temp.png" alt=""></p>
<p>Всё просто: у нас есть 4 измерения, которые были сделаны раз в минуту.</p>
<p>А что если нам нужно отобразить данные за месяц? В месяце почти 43800 минут. Значит у нас есть 43800 значений, которые нужно отобразить на экране. Если каждое значение на графике будет занимать один пиксел, то потребуется картинка шириной 43800 пикселей. Это слишком много, да и смысла смотреть на каждый из этих 43800 пикселей нет. Поэтому нужно уменьшить количество данных. Есть несколько алгоритмов прореживания данных:</p>
<ul>
<li>Выбрать среднее/минимальное/максимальное. Например, в rrdtool для этого <a href="https://oss.oetiker.ch/rrdtool/doc/rrdcreate.en.html">используется consolidation function (CF)</a>.</li>
<li><a href="https://ru.wikipedia.org/wiki/%D0%90%D0%BB%D0%B3%D0%BE%D1%80%D0%B8%D1%82%D0%BC_%D0%A0%D0%B0%D0%BC%D0%B5%D1%80%D0%B0_%E2%80%94_%D0%94%D1%83%D0%B3%D0%BB%D0%B0%D1%81%D0%B0_%E2%80%94_%D0%9F%D0%B5%D0%BA%D0%B5%D1%80%D0%B0">Алгоритм Рамера — Дугласа — Пекера</a>.</li>
</ul>
<p>В любом случае график будет отображать приближённые данные. И в таком случае всегда нужно знать каким образом был нарисован график. График максимальных температур всегда будет непохож на график средних температур. Ещё это иногда приводит к достаточно забавным результатам. Например, полтора пользователя на сайте.</p>
<p>А теперь допустим, есть метрика &ldquo;количество переданных байт&rdquo; типа &ldquo;счётчик&rdquo;. Если построить график как-есть, то получится не очень информативно:</p>
<p><img src="/img/gauge-and-counter-explained/3.png" alt=""></p>
<p>Общее количество переданных байт не очень интересно. Но, если взять производную, то получится скорость!</p>
<p><img src="/img/gauge-and-counter-explained/2.png" alt=""></p>
<p>В примере выше производная приводится к скорости байт в секунду, потому что это стандарт измерения скорости передачи данных. Но ничто не мешает посчитать количество переданных байт в минуту или в месяц. Тип &ldquo;счётчик&rdquo; как раз позволяет это сделать. Для этого достаточно вычесть начальное значение из конечного значения:</p>
<p><img src="/img/gauge-and-counter-explained/counter.png" alt=""></p>
<p>Этот тип метрик позволяет строить достаточно точные графики и делает это максимально быстро.</p>
<p>Единственный недостаток случается, когда система перезапускается, и счётчик сбрасывается. В таком случае приложение должно само решить как интерпретировать такие события. В r2cloud я просто <a href="https://github.com/dernasherbrezon/r2cloud/blob/master/src/main/java/ru/r2cloud/metrics/RRD4JReporter.java#L84">считываю последнее сохранённое значение</a> и добавляю его к входящему. Таким образом всегда получается монотонно возрастающие значения.</p>
<p>Таким образом, разделение метрик по разным типам позволяет в некоторых случаях отобразить результаты более точно.</p>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Оптимизация OpenCL на RaspberryPI</title>
      <link>https://dernasherbrezon.com/posts/tune-opencl-raspberrypi/</link>
      <pubDate>Sat, 06 Nov 2021 14:11:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/tune-opencl-raspberrypi/</guid>
      <description>Это третья статья в цикле про мои похождения в области распределённых вычислений. Первая статья была про то, зачем вообще нужен OpenCL и распределённые вычисления. Вторая статья про то, как настроить OpenCL для Raspberrypi, чем отличаются различные режимы работы и драйвера. Эта статья будет про оптимизацию OpenCL кода. Самое важное, что нужно понять: сможет ли GPU заменить или хотя бы приблизиться по производительности к CPU при выполнении Frequency Xlating FIR фильтра.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Оптимизация OpenCL на RaspberryPI</h1></header>
      		<div class='container entry-content'>
  <p>Это третья статья в цикле про мои похождения в области распределённых вычислений. <a href="https://dernasherbrezon.com/posts/opencl-raspberrypi/">Первая статья</a> была про то, зачем вообще нужен OpenCL и распределённые вычисления. <a href="https://dernasherbrezon.com/posts/install-opencl-raspberrypi/">Вторая статья</a> про то, как настроить OpenCL для Raspberrypi, чем отличаются различные режимы работы и драйвера. Эта статья будет про оптимизацию OpenCL кода. Самое важное, что нужно понять: сможет ли GPU заменить или хотя бы приблизиться по производительности к CPU при выполнении <a href="https://dernasherbrezon.com/posts/simd-for-dsp/">Frequency Xlating FIR фильтра</a>.</p>
<h2 id="измерения">Измерения</h2>
<p>Прежде, чем оптимизировать что-то, необходимо научиться измерять. А измерять скорость работы программы можно по-разному. Я пошёл самой простой дорогой:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">int</span> total_executions <span style="color:#f92672">=</span> <span style="color:#ae81ff">1000</span>;
clock_t begin <span style="color:#f92672">=</span> clock();
<span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;</span> total_executions; i<span style="color:#f92672">++</span>) {
    fir_filter_naive_process(input, input_len, <span style="color:#f92672">&amp;</span>output, <span style="color:#f92672">&amp;</span>output_len, filter);
}
clock_t end <span style="color:#f92672">=</span> clock();
<span style="color:#66d9ef">double</span> time_spent <span style="color:#f92672">=</span> (<span style="color:#66d9ef">double</span>) (end <span style="color:#f92672">-</span> begin) <span style="color:#f92672">/</span> CLOCKS_PER_SEC;
printf(<span style="color:#e6db74">&#34;average time: %f</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, time_spent <span style="color:#f92672">/</span> total_executions);
</code></pre></div><p>Вызвать критичный участок кода N раз, замерить общее время выполнения, поделить на количество вызовов, получить среднее время выполнения. Этого вполне достаточно, чтобы сравнивать скорость работы между разными реализациями. В дальнейшем измерения нужно будет немного усложнить, но для начала этого вполне хватит.</p>
<p>Я запустил тест <a href="https://github.com/dernasherbrezon/clDsp-test/blob/main/test/perf_fir_filter_naive.c">наивной реализации</a> и получил следующую цифру:</p>
<pre><code>average time: 0.050191
</code></pre><p>Это будет отправной точкой всех дальнейших оптимизаций.</p>
<h2 id="оптимизация-opencl">Оптимизация OpenCL</h2>
<p>Итак, самое сочное. Как оптимизировать OpenCL код? Я не имел ни малейшего понятия. Именно поэтому пришлось обратиться к Google, который выдал мне <a href="https://downloads.ti.com/mctools/esd/docs/opencl/optimization/host_code.html">отличнейший гайд</a> от TexasInstruments. Код, который там используется совсем не применим к нашей задаче, но идеи вполне можно попробовать.</p>
<h3 id="использование-1-work-item-для-1-work-group">Использование 1 work-item для 1 work-group</h3>
<p>Первым же советом Texas Instruments было забыть все эти разбиения на work-item и work-group и сделать по-простому: 1 work-item для 1 work-group. По сути они советуют в каждом QPU выполнять только один work-item. Но этот work-item может считать не одно значение, а сразу несколько. В этом есть смысл, так как входящие данные будут строго локализованы для каждого ядра, а значит и cache hit будет значительно выше. Для фильтра это так же имеет смысл, так как каждый следующий результат использует почти те же самые входящие данные, что и предыдущий.</p>
<p>Код kernel будет выглядеть следующим образом:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;</span> output_len; i<span style="color:#f92672">++</span>) {
    <span style="color:#66d9ef">int</span> output_offset <span style="color:#f92672">=</span> (get_global_id(<span style="color:#ae81ff">0</span>) <span style="color:#f92672">*</span> output_len <span style="color:#f92672">+</span> i) <span style="color:#f92672">*</span> <span style="color:#ae81ff">2</span>;
    <span style="color:#66d9ef">int</span> input_offset <span style="color:#f92672">=</span> output_offset <span style="color:#f92672">*</span> decimation;
    <span style="color:#66d9ef">float</span> real0 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0.0f</span>;
    <span style="color:#66d9ef">float</span> imag0 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0.0f</span>;
    <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> j <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; j <span style="color:#f92672">&lt;</span> taps_len; j<span style="color:#f92672">++</span>) {
        real0 <span style="color:#f92672">+=</span> (input[input_offset <span style="color:#f92672">+</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">*</span> j] <span style="color:#f92672">*</span> taps[<span style="color:#ae81ff">2</span> <span style="color:#f92672">*</span> j]) <span style="color:#f92672">-</span> (input[input_offset <span style="color:#f92672">+</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">*</span> j <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>] <span style="color:#f92672">*</span> taps[<span style="color:#ae81ff">2</span> <span style="color:#f92672">*</span> j <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>]);
        imag0 <span style="color:#f92672">+=</span> (input[input_offset <span style="color:#f92672">+</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">*</span> j] <span style="color:#f92672">*</span> taps[<span style="color:#ae81ff">2</span> <span style="color:#f92672">*</span> j <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>]) <span style="color:#f92672">+</span> (input[input_offset <span style="color:#f92672">+</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">*</span> j <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>] <span style="color:#f92672">*</span> taps[<span style="color:#ae81ff">2</span> <span style="color:#f92672">*</span> j]);
    }
    output[output_offset] <span style="color:#f92672">=</span> real0;
    output[output_offset <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>] <span style="color:#f92672">=</span> imag0;
}
</code></pre></div><p>Здесь видно, что каждый kernel будет считать <code>output_len</code> результатов. Тест производительности показал:</p>
<pre><code>average time: 0.050315
</code></pre><p>И&hellip; Скорость почти не поменялась. Как же так? Чтобы понять, как именно отработал kernel, нужно больше метрик. К счастью, VC4CL позволяет выводить внутренние метрики GPU. Для этого нужно выставить переменную <code>VC4CL_DEBUG</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">sudo VC4CL_DEBUG<span style="color:#f92672">=</span>perf  ./perf_fir_filter_naive
<span style="color:#f92672">[</span>VC4CL<span style="color:#f92672">](</span>VC4CL Queue Han<span style="color:#f92672">)</span>: Performance counters <span style="color:#66d9ef">for</span> kernel execution: fir_filter_process
<span style="color:#f92672">[</span>VC4CL<span style="color:#f92672">](</span>VC4CL Queue Han<span style="color:#f92672">)</span>: Elapsed time: 49195us
<span style="color:#f92672">[</span>VC4CL<span style="color:#f92672">](</span>VC4CL Queue Han<span style="color:#f92672">)</span>: Clock speed: <span style="color:#ae81ff">0</span>
<span style="color:#f92672">[</span>VC4CL<span style="color:#f92672">](</span>VC4CL Queue Han<span style="color:#f92672">)</span>: Instruction count: <span style="color:#ae81ff">373</span>
<span style="color:#f92672">[</span>VC4CL<span style="color:#f92672">](</span>VC4CL Queue Han<span style="color:#f92672">)</span>: Explicit uniform count: <span style="color:#ae81ff">5</span>
<span style="color:#f92672">[</span>VC4CL<span style="color:#f92672">](</span>VC4CL Queue Han<span style="color:#f92672">)</span>: QPUs used: <span style="color:#ae81ff">12</span>
<span style="color:#f92672">[</span>VC4CL<span style="color:#f92672">](</span>VC4CL Queue Han<span style="color:#f92672">)</span>: Kernel repetition count: <span style="color:#ae81ff">17</span>
<span style="color:#f92672">[</span>VC4CL<span style="color:#f92672">](</span>VC4CL Queue Han<span style="color:#f92672">)</span>: Execution cycles: <span style="color:#ae81ff">117059316</span>
<span style="color:#f92672">[</span>VC4CL<span style="color:#f92672">](</span>VC4CL Queue Han<span style="color:#f92672">)</span>: Idle cycles: <span style="color:#ae81ff">3367764868</span>
<span style="color:#f92672">[</span>VC4CL<span style="color:#f92672">](</span>VC4CL Queue Han<span style="color:#f92672">)</span>: Instruction cache lookups: <span style="color:#ae81ff">29264829</span>
<span style="color:#f92672">[</span>VC4CL<span style="color:#f92672">](</span>VC4CL Queue Han<span style="color:#f92672">)</span>: Instruction cache misses: <span style="color:#ae81ff">390</span>
<span style="color:#f92672">[</span>VC4CL<span style="color:#f92672">](</span>VC4CL Queue Han<span style="color:#f92672">)</span>: L2 cache hits: <span style="color:#ae81ff">20723</span>
<span style="color:#f92672">[</span>VC4CL<span style="color:#f92672">](</span>VC4CL Queue Han<span style="color:#f92672">)</span>: L2 cache misses: <span style="color:#ae81ff">11539</span>
<span style="color:#f92672">[</span>VC4CL<span style="color:#f92672">](</span>VC4CL Queue Han<span style="color:#f92672">)</span>: TMU cache misses: <span style="color:#ae81ff">31824</span>
<span style="color:#f92672">[</span>VC4CL<span style="color:#f92672">](</span>VC4CL Queue Han<span style="color:#f92672">)</span>: TMU stall cycles: <span style="color:#ae81ff">59361392</span>
<span style="color:#f92672">[</span>VC4CL<span style="color:#f92672">](</span>VC4CL Queue Han<span style="color:#f92672">)</span>: TMU words loaded: <span style="color:#ae81ff">31713024</span>
<span style="color:#f92672">[</span>VC4CL<span style="color:#f92672">](</span>VC4CL Queue Han<span style="color:#f92672">)</span>: Uniform cache lookups: <span style="color:#ae81ff">2880</span>
<span style="color:#f92672">[</span>VC4CL<span style="color:#f92672">](</span>VC4CL Queue Han<span style="color:#f92672">)</span>: Uniform cache misses: <span style="color:#ae81ff">48</span>
<span style="color:#f92672">[</span>VC4CL<span style="color:#f92672">](</span>VC4CL Queue Han<span style="color:#f92672">)</span>: VPM DMA read stall cycles: <span style="color:#ae81ff">0</span>
<span style="color:#f92672">[</span>VC4CL<span style="color:#f92672">](</span>VC4CL Queue Han<span style="color:#f92672">)</span>: VPM DMA write stall cycles: <span style="color:#ae81ff">0</span>
</code></pre></div><p>И для улучшенной версии:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">sudo VC4CL_DEBUG<span style="color:#f92672">=</span>perf  ./perf_fir_filter
<span style="color:#f92672">[</span>VC4CL<span style="color:#f92672">](</span>VC4CL Queue Han<span style="color:#f92672">)</span>: Performance counters <span style="color:#66d9ef">for</span> kernel execution: fir_filter_process
<span style="color:#f92672">[</span>VC4CL<span style="color:#f92672">](</span>VC4CL Queue Han<span style="color:#f92672">)</span>: Elapsed time: 49248us
<span style="color:#f92672">[</span>VC4CL<span style="color:#f92672">](</span>VC4CL Queue Han<span style="color:#f92672">)</span>: Clock speed: <span style="color:#ae81ff">0</span>
<span style="color:#f92672">[</span>VC4CL<span style="color:#f92672">](</span>VC4CL Queue Han<span style="color:#f92672">)</span>: Instruction count: <span style="color:#ae81ff">432</span>
<span style="color:#f92672">[</span>VC4CL<span style="color:#f92672">](</span>VC4CL Queue Han<span style="color:#f92672">)</span>: Explicit uniform count: <span style="color:#ae81ff">6</span>
<span style="color:#f92672">[</span>VC4CL<span style="color:#f92672">](</span>VC4CL Queue Han<span style="color:#f92672">)</span>: QPUs used: <span style="color:#ae81ff">12</span>
<span style="color:#f92672">[</span>VC4CL<span style="color:#f92672">](</span>VC4CL Queue Han<span style="color:#f92672">)</span>: Kernel repetition count: <span style="color:#ae81ff">1</span>
<span style="color:#f92672">[</span>VC4CL<span style="color:#f92672">](</span>VC4CL Queue Han<span style="color:#f92672">)</span>: Execution cycles: <span style="color:#ae81ff">113019828</span>
<span style="color:#f92672">[</span>VC4CL<span style="color:#f92672">](</span>VC4CL Queue Han<span style="color:#f92672">)</span>: Idle cycles: <span style="color:#ae81ff">1836058716</span>
<span style="color:#f92672">[</span>VC4CL<span style="color:#f92672">](</span>VC4CL Queue Han<span style="color:#f92672">)</span>: Instruction cache lookups: <span style="color:#ae81ff">28254957</span>
<span style="color:#f92672">[</span>VC4CL<span style="color:#f92672">](</span>VC4CL Queue Han<span style="color:#f92672">)</span>: Instruction cache misses: <span style="color:#ae81ff">234</span>
<span style="color:#f92672">[</span>VC4CL<span style="color:#f92672">](</span>VC4CL Queue Han<span style="color:#f92672">)</span>: L2 cache hits: <span style="color:#ae81ff">10484</span>
<span style="color:#f92672">[</span>VC4CL<span style="color:#f92672">](</span>VC4CL Queue Han<span style="color:#f92672">)</span>: L2 cache misses: <span style="color:#ae81ff">67396</span>
<span style="color:#f92672">[</span>VC4CL<span style="color:#f92672">](</span>VC4CL Queue Han<span style="color:#f92672">)</span>: TMU cache misses: <span style="color:#ae81ff">77622</span>
<span style="color:#f92672">[</span>VC4CL<span style="color:#f92672">](</span>VC4CL Queue Han<span style="color:#f92672">)</span>: TMU stall cycles: <span style="color:#ae81ff">63784900</span>
<span style="color:#f92672">[</span>VC4CL<span style="color:#f92672">](</span>VC4CL Queue Han<span style="color:#f92672">)</span>: TMU words loaded: <span style="color:#ae81ff">31713024</span>
<span style="color:#f92672">[</span>VC4CL<span style="color:#f92672">](</span>VC4CL Queue Han<span style="color:#f92672">)</span>: Uniform cache lookups: <span style="color:#ae81ff">203</span>
<span style="color:#f92672">[</span>VC4CL<span style="color:#f92672">](</span>VC4CL Queue Han<span style="color:#f92672">)</span>: Uniform cache misses: <span style="color:#ae81ff">24</span>
<span style="color:#f92672">[</span>VC4CL<span style="color:#f92672">](</span>VC4CL Queue Han<span style="color:#f92672">)</span>: VPM DMA read stall cycles: <span style="color:#ae81ff">0</span>
<span style="color:#f92672">[</span>VC4CL<span style="color:#f92672">](</span>VC4CL Queue Han<span style="color:#f92672">)</span>: VPM DMA write stall cycles: <span style="color:#ae81ff">0</span>
</code></pre></div><p>И, судя по метрикам, кэш наивной реализации гораздо более эффективен! L2 cache hits в 2 раза больше! Правда, на общий результат это не сильно повлияло.</p>
<h3 id="расширенные-типы">Расширенные типы</h3>
<p>Хорошо, а что насчёт расширенных типов? В OpenCL есть поддержка float8 и float16. Правда, я не совсем уверен, сможет ли VC4C правильно скомпилировать такой код. И даже если сможет, то будет ли он быстрее? В Videocore IV нет 256-битных SIMD регистров, поэтому одновременное умножение 8 разных float вряд ли возможно. С другой стороны в каждом QPU есть потоки и можно выполнять две операции параллельно. Единственный способ это проверить - написать и запустить код. В OpenCL есть забавный синтаксис для SIMD операций: можно обратится к чётным и нечётным элементам вектора. Перемножение комплексных чисел можно записать вот так:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">__global float8 <span style="color:#f92672">*</span>in <span style="color:#f92672">=</span> (__global float8<span style="color:#f92672">*</span>)(input <span style="color:#f92672">+</span> input_offset);
__global float8 <span style="color:#f92672">*</span>tap <span style="color:#f92672">=</span> (__global float8<span style="color:#f92672">*</span>)taps;
float4 real0 <span style="color:#f92672">=</span> (float4)(<span style="color:#ae81ff">0.0f</span>, <span style="color:#ae81ff">0.0f</span>, <span style="color:#ae81ff">0.0f</span>, <span style="color:#ae81ff">0.0f</span>);
float4 imag0 <span style="color:#f92672">=</span> (float4)(<span style="color:#ae81ff">0.0f</span>, <span style="color:#ae81ff">0.0f</span>, <span style="color:#ae81ff">0.0f</span>, <span style="color:#ae81ff">0.0f</span>);
<span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> j <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; j <span style="color:#f92672">&lt;</span> taps_len <span style="color:#f92672">/</span> <span style="color:#ae81ff">4</span>; j<span style="color:#f92672">++</span>) {
    real0 <span style="color:#f92672">+=</span> in<span style="color:#f92672">-&gt;</span>even <span style="color:#f92672">*</span> tap<span style="color:#f92672">-&gt;</span>even <span style="color:#f92672">-</span> in<span style="color:#f92672">-&gt;</span>odd <span style="color:#f92672">*</span> tap<span style="color:#f92672">-&gt;</span>odd;
    imag0 <span style="color:#f92672">+=</span> in<span style="color:#f92672">-&gt;</span>even <span style="color:#f92672">*</span> tap<span style="color:#f92672">-&gt;</span>odd <span style="color:#f92672">+</span> in<span style="color:#f92672">-&gt;</span>odd <span style="color:#f92672">*</span> tap<span style="color:#f92672">-&gt;</span>even;
    in<span style="color:#f92672">++</span>;
    tap<span style="color:#f92672">++</span>;
}
output[output_offset] <span style="color:#f92672">=</span> real0.s0 <span style="color:#f92672">+</span> real0.s1 <span style="color:#f92672">+</span> real0.s2 <span style="color:#f92672">+</span> real0.s3;
output[output_offset <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>] <span style="color:#f92672">=</span> imag0.s0 <span style="color:#f92672">+</span> imag0.s1 <span style="color:#f92672">+</span> imag0.s2 <span style="color:#f92672">+</span> imag0.s3;            
</code></pre></div><p>Правда, с этим кодом небольшая беда: он работает чуть хуже, чем портянка кода ниже: 0.017572 против 0.017017.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">__global float8 <span style="color:#f92672">*</span>in <span style="color:#f92672">=</span> (__global float8<span style="color:#f92672">*</span>)(input <span style="color:#f92672">+</span> input_offset);
__global float8 <span style="color:#f92672">*</span>tap <span style="color:#f92672">=</span> (__global float8<span style="color:#f92672">*</span>)taps;
<span style="color:#66d9ef">float</span> real0 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0.0f</span>;
<span style="color:#66d9ef">float</span> imag0 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0.0f</span>;
<span style="color:#66d9ef">float</span> real1 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0.0f</span>;
<span style="color:#66d9ef">float</span> imag1 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0.0f</span>;
<span style="color:#66d9ef">float</span> real2 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0.0f</span>;
<span style="color:#66d9ef">float</span> imag2 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0.0f</span>;
<span style="color:#66d9ef">float</span> real3 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0.0f</span>;
<span style="color:#66d9ef">float</span> imag3 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0.0f</span>;
<span style="color:#75715e">// taps_len guaranteed divided by 4
</span><span style="color:#75715e"></span><span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> j <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; j <span style="color:#f92672">&lt;</span> taps_len <span style="color:#f92672">/</span> <span style="color:#ae81ff">4</span>; j<span style="color:#f92672">++</span>) {
    real0 <span style="color:#f92672">+=</span> (in<span style="color:#f92672">-&gt;</span>s0 <span style="color:#f92672">*</span> tap<span style="color:#f92672">-&gt;</span>s0) <span style="color:#f92672">-</span> (in<span style="color:#f92672">-&gt;</span>s1 <span style="color:#f92672">*</span> tap<span style="color:#f92672">-&gt;</span>s1);
    imag0 <span style="color:#f92672">+=</span> (in<span style="color:#f92672">-&gt;</span>s0 <span style="color:#f92672">*</span> tap<span style="color:#f92672">-&gt;</span>s1) <span style="color:#f92672">+</span> (in<span style="color:#f92672">-&gt;</span>s1 <span style="color:#f92672">*</span> tap<span style="color:#f92672">-&gt;</span>s0);

    real1 <span style="color:#f92672">+=</span> (in<span style="color:#f92672">-&gt;</span>s2 <span style="color:#f92672">*</span> tap<span style="color:#f92672">-&gt;</span>s2) <span style="color:#f92672">-</span> (in<span style="color:#f92672">-&gt;</span>s3 <span style="color:#f92672">*</span> tap<span style="color:#f92672">-&gt;</span>s3);
    imag1 <span style="color:#f92672">+=</span> (in<span style="color:#f92672">-&gt;</span>s2 <span style="color:#f92672">*</span> tap<span style="color:#f92672">-&gt;</span>s3) <span style="color:#f92672">+</span> (in<span style="color:#f92672">-&gt;</span>s3 <span style="color:#f92672">*</span> tap<span style="color:#f92672">-&gt;</span>s2);

    real2 <span style="color:#f92672">+=</span> (in<span style="color:#f92672">-&gt;</span>s4 <span style="color:#f92672">*</span> tap<span style="color:#f92672">-&gt;</span>s4) <span style="color:#f92672">-</span> (in<span style="color:#f92672">-&gt;</span>s5 <span style="color:#f92672">*</span> tap<span style="color:#f92672">-&gt;</span>s5);
    imag2 <span style="color:#f92672">+=</span> (in<span style="color:#f92672">-&gt;</span>s4 <span style="color:#f92672">*</span> tap<span style="color:#f92672">-&gt;</span>s5) <span style="color:#f92672">+</span> (in<span style="color:#f92672">-&gt;</span>s5 <span style="color:#f92672">*</span> tap<span style="color:#f92672">-&gt;</span>s4);

    real3 <span style="color:#f92672">+=</span> (in<span style="color:#f92672">-&gt;</span>s6 <span style="color:#f92672">*</span> tap<span style="color:#f92672">-&gt;</span>s6) <span style="color:#f92672">-</span> (in<span style="color:#f92672">-&gt;</span>s7 <span style="color:#f92672">*</span> tap<span style="color:#f92672">-&gt;</span>s7);
    imag3 <span style="color:#f92672">+=</span> (in<span style="color:#f92672">-&gt;</span>s6 <span style="color:#f92672">*</span> tap<span style="color:#f92672">-&gt;</span>s7) <span style="color:#f92672">+</span> (in<span style="color:#f92672">-&gt;</span>s7 <span style="color:#f92672">*</span> tap<span style="color:#f92672">-&gt;</span>s6);

    in<span style="color:#f92672">++</span>;
    tap<span style="color:#f92672">++</span>;
}
</code></pre></div><p>Что же тут происходит?</p>
<ol>
<li>Все данные преобразовываются к типу float 8.</li>
<li>Вместо двух аккумуляторов <code>float real</code> и <code>float imag</code> используется 8. Не уверен, что это хорошая идея, так как в VideoCore IV есть только 4 регистра аккумулятора. Но с другой стороны, я не контролирую ассемблерный код, поэтому сложно сказать, как это будет скомпилировано.</li>
<li>Из-за того, что используется 8 аккумуляторов, точность вычислений повысится! См. <a href="https://en.wikipedia.org/wiki/Pairwise_summation">попарное суммирование</a>.</li>
<li>Одновременно делается 4 перемножения комплексных чисел. Это значит, что taps_len должен быть кратен 4. Пришлось менять код вызывающей программы и создавать массив размером кратным 4.</li>
</ol>
<p>Итак, 0.017017 даёт ускорение в ~2.9 раз. Неплохо!</p>
<p>А что, если попробовать float16? Надо же мыслить глобально! А вот там, всё наоборот: ручное перемножение занимает 0.014516, а через even-odd - 0.014259. Фантастика! Итоговое ускорение в ~3.5 раза.</p>
<h3 id="использование-mapunmap-вместо-копирования-данных">Использование map/unmap вместо копирования данных</h3>
<p>Следующая идея заключается в том, чтобы использовать более быстрые буферы (в случае с железками TexasInstruments - это MSMC), к которым OpenCL может дать доступ напрямую. В случае с явным копированием (функция <code>clEnqueueWriteBuffer</code>) данные будут копироваться из пользовательского процесса в буферы устройства. Если же использовать функции <code>clEnqueueMapBuffer</code> и <code>clEnqueueUnmapMemObject</code>, то необходимые для обработки данные можно создавать напрямую в памяти GPU. По идее, это должно сэкономить одно копирование данных.</p>
<p>Вместо:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">memcpy(filter<span style="color:#f92672">-&gt;</span>working_buffer <span style="color:#f92672">+</span> filter<span style="color:#f92672">-&gt;</span>history_offset, input, <span style="color:#66d9ef">sizeof</span>(<span style="color:#66d9ef">float</span> complex) <span style="color:#f92672">*</span> input_len);
ret <span style="color:#f92672">=</span> clEnqueueWriteBuffer(filter<span style="color:#f92672">-&gt;</span>command_queue, filter<span style="color:#f92672">-&gt;</span>input_obj, CL_TRUE, <span style="color:#ae81ff">0</span>, working_len <span style="color:#f92672">*</span> <span style="color:#66d9ef">sizeof</span>(<span style="color:#66d9ef">float</span> complex), filter<span style="color:#f92672">-&gt;</span>working_buffer, <span style="color:#ae81ff">0</span>, NULL, NULL);
</code></pre></div><p>Можно сразу делать:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">filter<span style="color:#f92672">-&gt;</span>working_buffer <span style="color:#f92672">=</span> clEnqueueMapBuffer(filter<span style="color:#f92672">-&gt;</span>command_queue, filter<span style="color:#f92672">-&gt;</span>input_obj, CL_TRUE, CL_MAP_WRITE, <span style="color:#ae81ff">0</span>, filter<span style="color:#f92672">-&gt;</span>working_len_total, <span style="color:#ae81ff">0</span>, NULL, NULL, <span style="color:#f92672">&amp;</span>ret);
memcpy(filter<span style="color:#f92672">-&gt;</span>working_buffer <span style="color:#f92672">+</span> filter<span style="color:#f92672">-&gt;</span>history_offset, input, <span style="color:#66d9ef">sizeof</span>(<span style="color:#66d9ef">float</span> complex) <span style="color:#f92672">*</span> input_len);
ret <span style="color:#f92672">=</span> clEnqueueUnmapMemObject(filter<span style="color:#f92672">-&gt;</span>command_queue, filter<span style="color:#f92672">-&gt;</span>input_obj, filter<span style="color:#f92672">-&gt;</span>working_buffer, <span style="color:#ae81ff">0</span>, NULL, NULL);
</code></pre></div><p>Экономится одно копирование памяти. Результат выполнения теста: 0.014397. Почти не отличается. А что же насчёт других типов памяти, которые поддерживает VC4CL? mailbox - это память по-умолчанию, VC4CL_MEMORY_CMA не работает:</p>
<pre><code>Message from syslogd@rasp-buster at Nov  6 23:22:25 ...
 kernel:[  655.225825] bde0: b1f8be04 b1f8bdf0 7f13db60 7f13d9cc b46130c0 00000000 b1f8be1c b1f8be08
</code></pre><p>А при VC4CL_MEMORY_VCSM просто нельзя выделить нужное количество памяти:</p>
<pre><code>clCreateBuffer: -61
</code></pre><h3 id="использование-локального-буфера">Использование локального буфера</h3>
<p>Ещё TexasInstruments советуют попробовать использовать локальные буфера. Работает это так: результат всех вычислений складывать в локальный буфер, а потом его полностью копировать из локальной памяти в глобальную. По их заверениям скорость может увеличиться в 3 раза. Код должен выглядеть следующим образом:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">__kernel <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">fir_filter_process</span>(__global <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">float</span> <span style="color:#f92672">*</span><span style="color:#66d9ef">restrict</span> input, __global <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">float</span> <span style="color:#f92672">*</span><span style="color:#66d9ef">restrict</span> taps, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> taps_len, __global <span style="color:#66d9ef">float</span> <span style="color:#f92672">*</span>output, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> decimation, local <span style="color:#66d9ef">float</span><span style="color:#f92672">*</span> temp) {
...
    <span style="color:#66d9ef">int</span> lid <span style="color:#f92672">=</span> get_local_id(<span style="color:#ae81ff">0</span>);
    <span style="color:#66d9ef">int</span> lsz <span style="color:#f92672">=</span> get_local_size(<span style="color:#ae81ff">0</span>);
	...
    temp[<span style="color:#ae81ff">2</span> <span style="color:#f92672">*</span> lid] <span style="color:#f92672">=</span> real0.s0 <span style="color:#f92672">+</span> real0.s1 <span style="color:#f92672">+</span> real0.s2 <span style="color:#f92672">+</span> real0.s3 <span style="color:#f92672">+</span> real0.s4 <span style="color:#f92672">+</span> real0.s5 <span style="color:#f92672">+</span> real0.s6 <span style="color:#f92672">+</span> real0.s7;
    temp[<span style="color:#ae81ff">2</span> <span style="color:#f92672">*</span> lid <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>] <span style="color:#f92672">=</span> imag0.s0 <span style="color:#f92672">+</span> imag0.s1 <span style="color:#f92672">+</span> imag0.s2 <span style="color:#f92672">+</span> imag0.s3 <span style="color:#f92672">+</span> imag0.s4 <span style="color:#f92672">+</span> imag0.s5 <span style="color:#f92672">+</span> imag0.s6 <span style="color:#f92672">+</span> imag0.s7;
    event_t ev <span style="color:#f92672">=</span> async_work_group_copy(<span style="color:#f92672">&amp;</span>output[get_global_id(<span style="color:#ae81ff">0</span>) <span style="color:#f92672">*</span> <span style="color:#ae81ff">2</span>], temp, lsz <span style="color:#f92672">*</span> <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">0</span>);
    wait_group_events(<span style="color:#ae81ff">1</span>, <span style="color:#f92672">&amp;</span>ev);
}	
</code></pre></div><p>В метод передаётся переменная <code>temp</code>, которая инициализирована в локальной памяти. После этого результат записывается в эту переменную, а потом методом <code>async_work_group_copy</code> копируется в глобальную память. В результате получается: 0.014826. То есть скорость выполнения почти не поменялась.</p>
<h3 id="использование-препроцессора">Использование препроцессора</h3>
<p>OpenCL поддерживает такую &ldquo;замечательную&rdquo; штуку из языка С как препроцессор. В моём случае, можно часть аргументов функции передать через препроцессор во время компиляции программы. Если <code>taps_len</code> достаточно небольшой, то компилятор сможет развернуть цикл и тем самым ускорить выполнение программы. В тесте у меня размер фильтра 2432, так что я не рассчитываю на какое-либо ускорение. После необходимых изменений, код стал выглядеть следующим образом:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#75715e">#ifndef TAPS_LEN
</span><span style="color:#75715e"></span>    <span style="color:#75715e">#define TAPS_LEN 3
</span><span style="color:#75715e">#endif
</span><span style="color:#75715e">#ifndef DECIMATION
</span><span style="color:#75715e"></span>    <span style="color:#75715e">#define DECIMATION 1
</span><span style="color:#75715e">#endif
</span><span style="color:#75715e"></span>
__kernel <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">fir_filter_process</span>(__global <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">float</span> <span style="color:#f92672">*</span><span style="color:#66d9ef">restrict</span> input, __global <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">float</span> <span style="color:#f92672">*</span><span style="color:#66d9ef">restrict</span> taps, __global <span style="color:#66d9ef">float</span> <span style="color:#f92672">*</span>output) {
...
}
</code></pre></div><p>А компиляция kernel теперь выглядит так:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">snprintf(source_str, MAX_SOURCE_SIZE, <span style="color:#e6db74">&#34;-DTAPS_LEN=%d -DDECIMATION=%d&#34;</span>, result<span style="color:#f92672">-&gt;</span>taps_len, result<span style="color:#f92672">-&gt;</span>decimation);
ret <span style="color:#f92672">=</span> clBuildProgram(program, <span style="color:#ae81ff">1</span>, <span style="color:#f92672">&amp;</span>result<span style="color:#f92672">-&gt;</span>device_id, source_str, NULL, NULL);
</code></pre></div><p>После запуска соответствующего теста, время составило: 0.014072. Чуть-чуть быстрее, но несущественно.</p>
<p>На этом я решил остановиться и закодировать алгоритм с помощью <a href="https://www.libvolk.org">volk</a>, чтобы было с чем сравнивать.</p>
<h2 id="cpu">CPU</h2>
<p>Итак, чтобы сравнивать производительность с CPU, нужно закодировать абсолютно тот же алгоритм. Я не стал повторять весь этот муторный путь с оптимизациями и наивными реализациями, а сразу <a href="https://github.com/dernasherbrezon/clDsp-test/blob/main/src/fir_filter_volk.c">написал код так</a>, как он работает в <a href="https://github.com/dernasherbrezon/sdr-server">sdr-server</a> (ну, почти так).</p>
<p>Тест производительности выглядит абсолютно так же, как и для OpenCL кода. Параметры фильтра, размер входящих данных. Результат запуска: 0.002152. Ну что я могу сказать? В ~6.5 раз быстрее. ARM ядро работает на частоте 1.2Ггц, а GPU - на частоте 400Мгц. В 3 раза медленнее. Но и параллелизм в GPU больше! 12 потоков против одного.</p>
<h2 id="100-cpu-во-время-работы-gpu">100% CPU во время работы GPU</h2>
<p>Во время запуска тестов я обнаружил, что CPU полностью загружен:</p>
<p><img src="/img/tune-opencl-raspberrypi/1.png" alt=""></p>
<p>Я бы ожидал, что процессор будет загружен на 20% или 10%, но это не так. Если запустить perf, то можно увидеть следующее:</p>
<p><img src="/img/tune-opencl-raspberrypi/2.png" alt=""></p>
<p>Почти всё время проводится вот в <a href="https://github.com/doe300/VC4CL/blob/4bf06c9032afa01ce148ce587d7b800e52529770/src/hal/V3D.cpp#L221">этом участке кода</a>:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++"><span style="color:#66d9ef">while</span>(true)
{
    <span style="color:#66d9ef">if</span>(((basePointer[V3D_SRQCS] <span style="color:#f92672">&gt;&gt;</span> <span style="color:#ae81ff">16</span>) <span style="color:#f92672">&amp;</span> <span style="color:#ae81ff">0xFF</span>) <span style="color:#f92672">==</span> numQPUs)
        <span style="color:#66d9ef">return</span> true;
    <span style="color:#66d9ef">if</span>(std<span style="color:#f92672">::</span>chrono<span style="color:#f92672">::</span>duration_cast<span style="color:#f92672">&lt;</span>std<span style="color:#f92672">::</span>chrono<span style="color:#f92672">::</span>milliseconds<span style="color:#f92672">&gt;</span>(
           std<span style="color:#f92672">::</span>chrono<span style="color:#f92672">::</span>high_resolution_clock<span style="color:#f92672">::</span>now() <span style="color:#f92672">-</span> start) <span style="color:#f92672">&gt;</span> timeout)
        <span style="color:#66d9ef">break</span>;
    <span style="color:#75715e">// TODO sleep some time?? so CPU is not fully used for waiting
</span><span style="color:#75715e"></span>    <span style="color:#75715e">// e.g. sleep for the theoretical execution time of the kernel (e.g. #instructions / QPU clock) and then
</span><span style="color:#75715e"></span>    <span style="color:#75715e">// begin active waiting
</span><span style="color:#75715e"></span>}
</code></pre></div><p>Если честно, то я не верю, что в чипе нет никакой синхронизации между GPU и CPU. Постоянно проверять результаты и вызывать достаточно дорогую функцию получения времени - не очень хорошая идея.</p>
<h2 id="выводы">Выводы</h2>
<p>Из хороших новостей: удалось ускорить код в ~3.5 раза.
Из плохих новостей: это всё равно в ~6.5 раз медленнее CPU.
Ещё из плохих новостей: 100% загрузка CPU сводит на нет всю идею экономии электроэнергии.</p>
<p>Дальше не имеет смысла исследовать, пока не будут решены найденные проблемы. Придётся засучить рукава и попробовать сделать пару pull request. Это же open source!</p>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Установка OpenCL на RaspberryPI</title>
      <link>https://dernasherbrezon.com/posts/install-opencl-raspberrypi/</link>
      <pubDate>Fri, 05 Nov 2021 18:13:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/install-opencl-raspberrypi/</guid>
      <description>В предыдущей статье я описал основные причины, почему OpenCL вообще нужен, как выглядит типичная программа и какие классы задач стоит считать на GPU. В этой же статье я постараюсь описать установку и настройку OpenCL для RaspberryPI.
VC4CL Проект VC4CL реализует OpenCL 1.2 API для Raspberrypi. Так как OpenCL компилирует kernel во время инициализации основной (host) программы, то нам понадобится компилятор!
Компилятор называется VC4C. Этот компилятор основан на LLVM. Он компилирует kernel в промежуточное представление SPIR-V, которое уже стандартными средствами LLVM проверяется и переводится в ассемблерный код для конкретного GPU.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Установка OpenCL на RaspberryPI</h1></header>
      		<div class='container entry-content'>
  <p>В <a href="https://dernasherbrezon.com/posts/opencl-raspberrypi/">предыдущей статье</a> я описал основные причины, почему OpenCL вообще нужен, как выглядит типичная программа и какие классы задач стоит считать на GPU. В этой же статье я постараюсь описать установку и настройку OpenCL для RaspberryPI.</p>
<h2 id="vc4cl">VC4CL</h2>
<p>Проект <a href="https://github.com/doe300/VC4CL">VC4CL</a> реализует OpenCL 1.2 API для Raspberrypi. Так как OpenCL компилирует kernel во время инициализации основной (host) программы, то нам понадобится компилятор!</p>
<p>Компилятор называется <a href="https://github.com/doe300/VC4C">VC4C</a>. Этот компилятор основан на LLVM. Он компилирует kernel в промежуточное представление <a href="https://en.wikipedia.org/wiki/Standard_Portable_Intermediate_Representation">SPIR-V</a>, которое уже стандартными средствами LLVM проверяется и переводится в ассемблерный код для конкретного GPU.</p>
<p>Именно поэтому первым делом нужно поставить LLVM и парочку необходимых зависимостей:</p>
<pre><code>sudo apt-get install llvm-9 opencl-headers ocl-icd-dev ocl-icd-opencl-dev clinfo
</code></pre><p>Далее, необходимо установить специальный транслятор, который будет переводить SPIR-V во внутренне представление LLVM. Здесь важно ставить версию, такую же как и LLVM. Например, для LLVM 9 нужно использовать ветку <code>llvm_release_90</code>:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">git clone --depth<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span> --branch llvm_release_90 https://github.com/KhronosGroup/SPIRV-LLVM-Translator.git
mkdir SPIRV-LLVM-Translator/build
cd SPIRV-LLVM-Translator/build
cmake ..
make
sudo make install
</code></pre></div><p>После этого собрать VC4C компилятор:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">git clone https://github.com/doe300/VC4C.git
mkdir VC4C/build
cd VC4C/build
cmake ..
make
sudo make install
</code></pre></div><p>Далее нужно собрать стандартную библиотеку. OpenCL предоставляет некоторые встроенные методы и функции, которые чем-то похожи на стандартную библиотеку. Соответственно, чтобы VC4C смог слинковать их с kernel, нужно собрать стандартную библиотеку. Она достаточно небольшая:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">git clone https://github.com/doe300/VC4CLStdLib.git
mkdir VC4CLStdLib/build
cd VC4CLStdLib/build
cmake ..
make
sudo make install
</code></pre></div><p>После этого, можно собрать VC4CL:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">git clone https://github.com/doe300/VC4CL.git
mkdir VC4CL/build
cd VC4CL/build
cmake ..
make
sudo make install
</code></pre></div><p>После того как установлены необходимые компоненты, можно проверить результат. Команда <code>sudo clinfo</code> должна выдать хотя бы одно доступное устройство:</p>
<p><img src="/img/install-opencl-raspberrypi/1.png" alt=""></p>
<h2 id="cldsp-test">clDsp-test</h2>
<p>Я создал небольшой проект на github - <a href="https://github.com/dernasherbrezon/clDsp-test">clDsp-test</a>. В нём я реализовал КИХ-фильтр, который является наиболее узким местом Frequency Xlating FIR filter. С помощью него я могу сравнить производительность CPU и GPU. Этот тест выбран неслучайно. Именно этот фильтр находится в центре <a href="https://github.com/dernasherbrezon/sdr-server/blob/main/src/xlating.c">sdr-server</a> и является наиболее узким местом системы.</p>
<p>Поддержка OpenCL подключается в проект следующим образом:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-cmake" data-lang="cmake">pkg_check_modules(<span style="color:#e6db74">PC_OpenCL</span> <span style="color:#e6db74">REQUIRED</span> <span style="color:#e6db74">OpenCL</span>)<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>include_directories(<span style="color:#f92672">${</span>PC_OpenCL_INCLUDE_DIRS<span style="color:#f92672">}</span>)<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>target_link_libraries(<span style="color:#e6db74">clDsp</span> <span style="color:#f92672">${</span>PC_OpenCL_LINK_LIBRARIES<span style="color:#f92672">}</span>)<span style="color:#960050;background-color:#1e0010">
</span></code></pre></div><p>Инициализация OpenCL происходит следующим образом:</p>
<ol>
<li>Сначала подключается заголовок:</li>
</ol>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#75715e">#define CL_TARGET_OPENCL_VERSION 120
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;CL/cl.h&gt;</span><span style="color:#75715e">
</span></code></pre></div><ol start="2">
<li>Потом происходит поиск устройства и инициализация:</li>
</ol>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">cl_int ret <span style="color:#f92672">=</span> clGetPlatformIDs(<span style="color:#ae81ff">1</span>, <span style="color:#f92672">&amp;</span>platform_id, <span style="color:#f92672">&amp;</span>ret_num_platforms);
ret <span style="color:#f92672">=</span> clGetDeviceIDs(platform_id, CL_DEVICE_TYPE_ALL, <span style="color:#ae81ff">1</span>, <span style="color:#f92672">&amp;</span>device_id, <span style="color:#f92672">&amp;</span>ret_num_devices);
context <span style="color:#f92672">=</span> clCreateContext(NULL, <span style="color:#ae81ff">1</span>, <span style="color:#f92672">&amp;</span>device_id, NULL, NULL, <span style="color:#f92672">&amp;</span>ret);
command_queue <span style="color:#f92672">=</span> clCreateCommandQueue(context, device_id, <span style="color:#ae81ff">0</span>, <span style="color:#f92672">&amp;</span>ret);
</code></pre></div><p>API OpenCL позволяет находить доступные устройства в рантайме и запускать код одновременно на нескольких устройствах.</p>
<ol start="3">
<li>Создание буферов обмена между хостом и GPU:</li>
</ol>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">input_obj <span style="color:#f92672">=</span> clCreateBuffer(context, CL_MEM_READ_ONLY, working_len_total <span style="color:#f92672">*</span> <span style="color:#66d9ef">sizeof</span>(<span style="color:#66d9ef">float</span> complex), NULL, <span style="color:#f92672">&amp;</span>ret);
taps_obj <span style="color:#f92672">=</span> clCreateBuffer(result<span style="color:#f92672">-&gt;</span>context, CL_MEM_READ_ONLY, taps_len <span style="color:#f92672">*</span> <span style="color:#66d9ef">sizeof</span>(<span style="color:#66d9ef">float</span> complex), NULL, <span style="color:#f92672">&amp;</span>ret);
output_obj <span style="color:#f92672">=</span> clCreateBuffer(result<span style="color:#f92672">-&gt;</span>context, CL_MEM_WRITE_ONLY, result<span style="color:#f92672">-&gt;</span>output_len <span style="color:#f92672">*</span> <span style="color:#66d9ef">sizeof</span>(<span style="color:#66d9ef">float</span> complex), NULL, <span style="color:#f92672">&amp;</span>ret);
</code></pre></div><ol start="4">
<li>Компиляция загруженной программы:</li>
</ol>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">program <span style="color:#f92672">=</span> clCreateProgramWithSource(result<span style="color:#f92672">-&gt;</span>context, <span style="color:#ae81ff">1</span>, (<span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">**</span>) <span style="color:#f92672">&amp;</span>source_str, (<span style="color:#66d9ef">const</span> size_t <span style="color:#f92672">*</span>) <span style="color:#f92672">&amp;</span>source_size, <span style="color:#f92672">&amp;</span>ret);
clBuildProgram(program, <span style="color:#ae81ff">1</span>, <span style="color:#f92672">&amp;</span>device_id, NULL, NULL, NULL);
</code></pre></div><ol start="5">
<li>Создание объекта kernel и задание аргументов:</li>
</ol>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">kernel <span style="color:#f92672">=</span> clCreateKernel(program, <span style="color:#e6db74">&#34;fir_filter_process&#34;</span>, <span style="color:#f92672">&amp;</span>ret);
clSetKernelArg(kernel, <span style="color:#ae81ff">0</span>, <span style="color:#66d9ef">sizeof</span>(cl_mem), (<span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>) <span style="color:#f92672">&amp;</span>input_obj);
...
clSetKernelArg(kernel, <span style="color:#ae81ff">4</span>, <span style="color:#66d9ef">sizeof</span>(cl_uint), <span style="color:#f92672">&amp;</span>decimation);
</code></pre></div><p>Код самого ядра (kernel) выглядит следующим образом:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">__kernel <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">fir_filter_process</span>(__global <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">float</span> <span style="color:#f92672">*</span><span style="color:#66d9ef">restrict</span> input, __global <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">float</span> <span style="color:#f92672">*</span><span style="color:#66d9ef">restrict</span> taps, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> taps_len, __global <span style="color:#66d9ef">float</span> <span style="color:#f92672">*</span>output, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> decimation, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> output_len) {

    <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;</span> output_len; i<span style="color:#f92672">++</span>) {
        <span style="color:#66d9ef">int</span> output_offset <span style="color:#f92672">=</span> (get_global_id(<span style="color:#ae81ff">0</span>) <span style="color:#f92672">*</span> output_len <span style="color:#f92672">+</span> i) <span style="color:#f92672">*</span> <span style="color:#ae81ff">2</span>;
        <span style="color:#66d9ef">int</span> input_offset <span style="color:#f92672">=</span> output_offset <span style="color:#f92672">*</span> decimation;
        <span style="color:#66d9ef">float</span> real0 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0.0f</span>;
        <span style="color:#66d9ef">float</span> imag0 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0.0f</span>;
        <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> j <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; j <span style="color:#f92672">&lt;</span> taps_len; j<span style="color:#f92672">++</span>) {
            real0 <span style="color:#f92672">+=</span> (input[input_offset <span style="color:#f92672">+</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">*</span> j] <span style="color:#f92672">*</span> taps[<span style="color:#ae81ff">2</span> <span style="color:#f92672">*</span> j]) <span style="color:#f92672">-</span> (input[input_offset <span style="color:#f92672">+</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">*</span> j <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>] <span style="color:#f92672">*</span> taps[<span style="color:#ae81ff">2</span> <span style="color:#f92672">*</span> j <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>]);
            imag0 <span style="color:#f92672">+=</span> (input[input_offset <span style="color:#f92672">+</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">*</span> j] <span style="color:#f92672">*</span> taps[<span style="color:#ae81ff">2</span> <span style="color:#f92672">*</span> j <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>]) <span style="color:#f92672">+</span> (input[input_offset <span style="color:#f92672">+</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">*</span> j <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>] <span style="color:#f92672">*</span> taps[<span style="color:#ae81ff">2</span> <span style="color:#f92672">*</span> j]);
        }
        output[output_offset] <span style="color:#f92672">=</span> real0;
        output[output_offset <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>] <span style="color:#f92672">=</span> imag0;
    }

}
</code></pre></div><p>После того как OpenCL проинициализирован, код ядра загружен и скомпилирован, всё готово к обработке данных. В главном цикле программы или обработчика необходимо:</p>
<ol>
<li>Записать входные данные в буфер CPU/GPU:</li>
</ol>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">clEnqueueWriteBuffer(command_queue, input_obj, CL_TRUE, <span style="color:#ae81ff">0</span>, working_len <span style="color:#f92672">*</span> <span style="color:#66d9ef">sizeof</span>(<span style="color:#66d9ef">float</span> complex), working_buffer, <span style="color:#ae81ff">0</span>, NULL, NULL);
</code></pre></div><ol start="2">
<li>Вызвать обработку данных:</li>
</ol>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">clEnqueueNDRangeKernel(command_queue, kernel, <span style="color:#ae81ff">1</span>, NULL, <span style="color:#f92672">&amp;</span>work_items, <span style="color:#f92672">&amp;</span>local_item_size, <span style="color:#ae81ff">0</span>, NULL, NULL);
</code></pre></div><ol start="3">
<li>Прочитать результат:</li>
</ol>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">clEnqueueReadBuffer(command_queue, output_obj, CL_TRUE, <span style="color:#ae81ff">0</span>, result_len <span style="color:#f92672">*</span> <span style="color:#66d9ef">sizeof</span>(<span style="color:#66d9ef">float</span> complex), filter<span style="color:#f92672">-&gt;</span>output, <span style="color:#ae81ff">0</span>, NULL, NULL);
</code></pre></div><p>Вот, собственно, и всё. В массиве <code>filter-&gt;output</code> будет находиться результат.</p>
<h2 id="тонкости">Тонкости</h2>
<p>А дальше начинаются тонкости. Например, как устроено копирование памяти? В главном цикле программы, данные находятся в оперативной памяти. Но для того, чтобы GPU смог их обработать, их нужно скопировать в GPU память. OpenCL API позволяет это сделать двумя способами:</p>
<ul>
<li>просто скопировав из одного буфера данных в другой с помощью функции <code>clEnqueueWriteBuffer</code>.</li>
<li>с помощью функции <code>clEnqueueMapBuffer</code>, которая возвращает указатель на адрес памяти в которую нужно записать данные. И функции <code>clEnqueueUnmapMemObject</code>, когда нужно вернуть указатель назад в библиотеку.</li>
</ul>
<p>Такой API достаточно гибок - он позволяет копировать память как в SoC системах, так и через PCI express шину на отдельно выделенную видеокарту. При этом каждый разработчик OpenCL сам решает, как именно будет реализовано копирование. Например, в VC4CL есть целых 3 способа копирования данных! Все эти способы можно переключать с помощью переменной среды:</p>
<ul>
<li><a href="https://github.com/raspberrypi/firmware/wiki/Mailboxes">VC4CL_MEMORY_MAILBOX</a> - используется по-умолчанию. Это специальный способ коммуникации между CPU &amp; GPU в Raspberrypi. Он основан на стандартом <a href="https://www.kernel.org/doc/html/latest/driver-api/mailbox.html#client-driver-see-include-linux-mailbox-client-h">mailbox API</a>, который предоставляется ядром Linux.</li>
<li><a href="https://github.com/raspberrypi/linux/commit/dbed3e8b0ebd87f903a9b568c02d2f0b7f321ee1">VC4CL_MEMORY_VCSM</a>. VCSM - специальный драйвер для работы с GPU памятью в Raspberrypi.</li>
<li>VC4CL_MEMORY_CMA - вторая версия VCSM драйвера. Наверное, лучше было бы назвать переменную VC4CL_MEMORY_VCSM_CMA. Новая версия драйвера поддерживает <a href="https://lwn.net/Articles/486301/">CMA (Contiguous Memory Allocator)</a>. Видимо, из-за того, что память выделяется большими последовательными участками, она лучше ложится в DMA и быстрее обрабатывается/копируется.</li>
</ul>
<p>При этом запустить код VC4CL может тремя другими способами:</p>
<ul>
<li>VC4CL_EXECUTE_REGISTER_POKING - используется по-умолчанию. Запись команд и чтение результатов напрямую из драйвера <a href="https://www.kernel.org/doc/html/latest/gpu/v3d.html">V3D</a> или <a href="https://www.kernel.org/doc/html/latest/gpu/vc4.html">VC4</a>. С этими драйверами всё очень запутанно. V3D - это новый драйвер, который поддерживает новую версию OpenGL ES на Raspberrypi 4. VC4 - это старый драйвер для Raspberrypi 1,2,3. При этом в системе может быть загружено два драйвера одновременно и они не совместимы. Наверное, это сделано для того, чтобы обеспечить совместимость операционной системы и разных версий Raspberrypi. И да, переменную надо было бы назвать VC4CL_EXECUTE_V3D.</li>
<li>VC4CL_EXECUTE_MAILBOX. Всё тот же интерфейс mailbox, через который можно запускать код.</li>
<li><a href="https://github.com/raspberrypi/userland/blob/3fd8527eefd8790b4e8393458efc5f94eb21a615/interface/vchi/vchi.h">VC4CL_EXECUTE_VCHI</a> - более низкоуровневый драйвер для коммуникации ARM ядра и GPU. Чем-то похож на VCSM, только используется для запуска программ.</li>
</ul>
<p>Зачем нужно знать все эти тонкости реализации OpenCL? Да потому, что <a href="https://github.com/doe300/VC4CL/issues/103">не все они работают</a>. Также разные драйвера работают на разных уровнях абстракций. Например, mailbox доступен клиентским приложениям, но из-за того, что он задействует ядро, то обработка, в теории, будет чуть медленнее. Напротив, работа с более низкоуровневыми драйверами требует sudo и нестабильна (а может просто неправильно реализована).</p>
<p>В своих тестах я запускал программу с помощью sudo, потому что это наиболее протестированный и рабочий способ, согласно автору VC4CL.</p>
<h2 id="далее">Далее</h2>
<p>В следующей статье я постараюсь описать замеры производительности и возможные способы ускорения OpenCL приложений на примере моего несчастного фильтра. И, конечно же, будет сравнение с CPU. Иначе зачем всё это?</p>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>OpenCL для RaspberryPI</title>
      <link>https://dernasherbrezon.com/posts/opencl-raspberrypi/</link>
      <pubDate>Mon, 01 Nov 2021 18:13:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/opencl-raspberrypi/</guid>
      <description>Изначально у меня не было планов писать код под GPU. Обработка сигналов спутников на Java вполне возможна. И я продолжаю развивать это направление. Код на Java позволяет достаточно быстро написать обработчик сигнала и внедрить в работающую систему. Также с помощью Java гораздо удобнее обрабатывать неструктурированные или слабо структурированные данные. К таким данным обычно относятся различные высокоуровневые протоколы. Однако, есть и недостатки - скорость. Java не очень подходит для быстрой обработки однотипных данных.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>OpenCL для RaspberryPI</h1></header>
      		<div class='container entry-content'>
  <p>Изначально у меня не было планов писать код под GPU. Обработка сигналов спутников на Java вполне возможна. И я продолжаю развивать это направление. Код на Java позволяет достаточно быстро написать обработчик сигнала и внедрить в работающую систему. Также с помощью Java гораздо удобнее обрабатывать неструктурированные или слабо структурированные данные. К таким данным обычно относятся различные высокоуровневые протоколы. Однако, есть и недостатки - скорость. Java не очень подходит для быстрой обработки однотипных данных.</p>
<p>В <a href="https://github.com/dernasherbrezon/r2cloud">проекте r2cloud</a> скорость обработки данных не так важна. Именно поэтому в основном используется Java. Тем не менее мне захотелось ускорить некоторые наиболее нагруженные участки. И причин этому несколько:</p>
<ul>
<li>быстрее обработка сигналов - меньше потребление энергии. Меньше потребление энергии - возможность использования солнечной энергии для питания станции. А значит возможность устанавливать станции в труднодоступных местах и большая независимость работы.</li>
<li>крайне медленная работа в Raspberrypi 1. Да, эта модель морально устарела, но, представьте себе, сколько устройств уже выпущено. И их всех можно использовать, а не выбрасывать.</li>
<li>возможность запускать несколько проектов на одном Raspberrypi. Если r2cloud будет более экономичный в плане ресурсов, то больше пользователей смогут его поставить рядом с уже работающими проектами. Например, <a href="https://ru.flightaware.com/adsb/piaware/build/">flightaware</a> или <a href="https://tracker.sondehub.org">SondeHub</a>.</li>
<li>разработка и продвижение инфраструктуры по доставке оптимизированного кода. На текущий момент в Opensource сообществе нет единого подхода, который бы позволил доставить CPU-специфичный или GPU-специфичный код на конечные компьютеры. Возможно, делая такой обширный проект как r2cloud мне удастся разобраться с множеством слабосвязанных проблем доставки такого кода и предложить работающее решение.</li>
</ul>
<h2 id="raspberrypi">Raspberrypi</h2>
<p>Итак, как же ускорить обработку сигналов на Raspberrypi? Первое, что приходит в голову - это использовать SIMD инструкции процессора. Они позволяют ускорить приложение примерно в 4 раза. Вместо четырёх операций умножения, SIMD инструкции позволяют выполнять одну одновременно над четырьмя float.</p>
<p>Однако, в Raspberrypi 1 нет поддержки SIMD инструкций. Поэтому скорость работы там крайне низкая. <a href="https://github.com/dernasherbrezon/sdr-server/blob/main/test/perf_xlating.c#L62">perf_xlating</a> тест на Raspberrypi 3 выполняется 0.024855 секунд, а на Raspberrypi 1 - 0.332934. То есть на порядок медленнее.</p>
<p>Все Raspberrypi построены на основе <a href="https://beta.raspberrypi.org/documentation/computers/processors.html">SoC от Broadcom</a>. Это значит, что в одном чипе есть и CPU и GPU. Причём GPU, зачастую, почти не задействован! Я попробовал разобраться увеличится ли скорость обработки данных с использованием GPU. Программы под GPU обычно пишутся на OpenCL. Либо с помощью проприетарного SDK, например, <a href="https://developer.nvidia.com/cuda-toolkit">Nvidia cuda toolkit</a>. Под Raspberrypi есть проект <a href="https://github.com/doe300/VC4CL">VC4CL</a>, который реализует ABI OpenCL для GPU VideoCore IV. Здесь и далее я буду давать примеры именно из этого проекта.</p>
<h2 id="opencl">OpenCL</h2>
<p>Для начала немного об OpenCL. <a href="https://ru.wikipedia.org/wiki/OpenCL">OpenCL</a> - это фреймворк для написания программ, связанных с параллельными вычислениями на различных графических и центральных процессорах, а также FPGA. Программы, написанные с помощью этого фреймворка существенно отличаются от традиционных программ на Си или Java. Во-первых, у программы нет как таковой точки входа. Она запускается из основной программы (host-программы). Во-вторых, вся работа построена на параллелизации вычислений. Именно поэтому программы на OpenCL представляют собой описание некоего worker&rsquo;а, который будет обрабатывать параллельно некоторый кусок данных или задачи. В терминах OpenCL такой worker называется kernel. В-третьих, совершенно обычным делом считается компиляция kernel&rsquo;а во время запуска основной host-программы.</p>
<p>Запуск и работа с OpenCL выглядит следующим образом:</p>
<ul>
<li>инициализация устройства</li>
<li>загрузка кода kernel из текстового файла или из бинарного блоба</li>
<li>компиляция kernel</li>
<li>инициализация буферов обмена</li>
<li>в главном цикле программы:
<ul>
<li>копирование данных в буферы GPU</li>
<li>подсчёт необходимого количества вычислений kernel&rsquo;а. Здесь нужно учитывать поддерживаемый параллелизм устройства, алгоритм программы и количество доступных данных</li>
<li>вызов kernel</li>
<li>ожидание результатов</li>
<li>(опционально) вызов другого kernel, которому на вход передаётся результат вычислений первого, но с другим уровнем параллелизма.</li>
</ul>
</li>
</ul>
<p>Из всего этого наиболее важным является распараллеливание вычислений. Для того чтобы это сделать, нужно понимать модель выполнения программы на OpenCL.</p>
<h2 id="модель-выполнения-opencl">Модель выполнения OpenCL</h2>
<p>В OpenCL существует несколько концепций:</p>
<ul>
<li>work-item. Это минимальный и неделимый кусочек работы. По факту, код kernel обрабатывает именно этот один элемент работы. OpenCL подразумевает, что программист сам разделит обработку данных на такие небольшие кусочки, которые будут выполняться параллельно.</li>
<li>work-dim или work dimension. Размерность данных для обработки. Для значения 1 данные представляют собой вектор, 2 - 2D, 3 - 3D.</li>
<li>work group. Несколько work-item могут быть сгруппированы в один work-group. Вся работа разбивается на несколько work group и каждый work-item внутри такой группы запускается независимо.</li>
</ul>
<p>Всё это достаточно сложно представить, поэтому я попытался визуализировать.</p>
<p><img src="/img/opencl-raspberrypi/1.png" alt=""></p>
<p>Задача разбивается на work-item. Это такие прозрачные квадратики сверху. После этого идёт группировка в work group. А затем work group запускаются на параллельных ядрах на устройстве.</p>
<p>Пока всё достаточно просто, но какое программирование на GPU без 2D? При work-dim=2 work-item могут быть частью 2D массива.</p>
<p><img src="/img/opencl-raspberrypi/2.png" alt=""></p>
<p>Задача разбивается на двумерные элементы и дальше по аналогии с одномерными векторами. Примером такой задачи может быть перемножение матриц. Дальше - больше. 3D.</p>
<p><img src="/img/opencl-raspberrypi/3.png" alt=""></p>
<p>Мне сложно представить класс задач, которые нужно решать в трёхмерном пространстве. Расчёт движения атмосферы? Предсказание погоды?</p>
<p>Итак, как задача запускается на параллельных потоках, в принципе, понятно. Однако, пока не ясно, а как же разбить её на одинаковые work-item.</p>
<h2 id="распараллеливание-алгоритма">Распараллеливание алгоритма</h2>
<p>Универсального ответа на этот вопрос, конечно же, нет. Не каждый алгоритм можно эффективно распараллелить. В таком случае ждать от OpenCL и GPU чуда совсем не стоит. И даже если удастся придумать такой алгоритм, нужно учитывать затраты на передачу данных в GPU и обратно. Зачастую, это может стать решающий фактором. Например, CPU может быстрее обработать данные за счёт кэша и SIMD операций, чем передача данных по медленной шине в GPU, быстрый расчёт на GPU и медленная передача результатов обратно в CPU.</p>
<p>В случае с Raspberrypi - это не очень большая проблема, так как CPU и GPU находятся на одном чипе и, по идее, имеют доступ к одной и той же оперативной памяти. Правда, как именно это реализовано в <a href="https://github.com/doe300/VC4CL">VC4CL</a> непонятно. Есть ли поддержка ядра Linux тоже непонятно.</p>
<p>Для тестирования вычислений на GPU я выбрал алгоритм Frequency Xlating FIR filter. Я о нём <a href="https://dernasherbrezon.com/posts/simd-for-dsp/">уже писал</a>, когда оптимизировал код под CPU. Работа такого фильтра заключается в перемножении массива входящих комплексных чисел на другой массив комплексных чисел (характеристика фильтра). Если размер входящего массива N, а характеристика фильтра - это М, то нужно выполнить N * M умножений комплексных чисел. А это, на секундочку, 4 умножения и 2 сложения. В общем виде алгоритм выглядит так:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;</span> input_len; i<span style="color:#f92672">++</span>) {
	<span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> j <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; j <span style="color:#f92672">&lt;</span> taps_len; j<span style="color:#f92672">++</span>) {
	    result_real <span style="color:#f92672">+=</span> (input[<span style="color:#ae81ff">2</span> <span style="color:#f92672">*</span> i <span style="color:#f92672">+</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">*</span> j] <span style="color:#f92672">*</span> taps[<span style="color:#ae81ff">2</span> <span style="color:#f92672">*</span> j]) <span style="color:#f92672">-</span> (input[<span style="color:#ae81ff">2</span> <span style="color:#f92672">*</span> i <span style="color:#f92672">+</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">*</span> j <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>] <span style="color:#f92672">*</span> taps[<span style="color:#ae81ff">2</span> <span style="color:#f92672">*</span> j <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>]);
	    result_imag <span style="color:#f92672">+=</span> (input[<span style="color:#ae81ff">2</span> <span style="color:#f92672">*</span> i <span style="color:#f92672">+</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">*</span> j] <span style="color:#f92672">*</span> taps[<span style="color:#ae81ff">2</span> <span style="color:#f92672">*</span> j <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>]) <span style="color:#f92672">+</span> (input[<span style="color:#ae81ff">2</span> <span style="color:#f92672">*</span> i <span style="color:#f92672">+</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">*</span> j <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>] <span style="color:#f92672">*</span> taps[<span style="color:#ae81ff">2</span> <span style="color:#f92672">*</span> j]);
	}
}
</code></pre></div><p>Для каждого входящего комплексного числа выполнить перемножение всех комплексных чисел на <code>taps_len</code> вперёд с коэффициентами фильтра. В результате получится другой массив комплексных чисел.</p>
<p>Этот алгоритм достаточно хорошо распараллеливается. Так как каждый следующий результат не зависит от предыдущего, то можно разбить весь входящий массив на Х одинаковых частей, перемножить и результаты положить в результирующий массив со смещением Х.</p>
<p>Для более хитрых алгоритмов, например, перемножения матриц, существуют различные мощные оптимизации. Например, в <a href="https://cnugteren.github.io/tutorial/pages/page1.html">этой статье</a> Cedric Nugteren пытается с помощью OpenCL получить ту же производительность в перемножении матриц, что и библиотека cuBLAS. С помощью довольно хитрых оптимизаций он смог улучшить производительность в ~11 раз. Кстати, в конце статьи он пришёл к интересным выводам: чтобы улучшить производительность ещё больше и подобраться вплотную к cuBLAS, нужно спустится на уровень ниже и написать kernel на ассемблере.</p>
<h2 id="далее">Далее</h2>
<p>Информации по запуску OpenCL под Raspberrypi получилось так много, что я вынужден её разбить на несколько частей. В следующей части я постараюсь описать практические шаги необходимые для компиляции и запуска программы.</p>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>FMA в Raspberrypi</title>
      <link>https://dernasherbrezon.com/posts/fma-raspberrypi/</link>
      <pubDate>Sat, 16 Oct 2021 15:22:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/fma-raspberrypi/</guid>
      <description>Разбираясь с одним интересным багом в коде DSP фильтра, я с удивлением обнаружил целую область неизведанного в области чисел с плавающий точкой. Есть замечательная статья о том, что каждый программист должен знать об операциях с плавающей точкой. В ней очень подробно описывается проблема и её решение в стандарте IEEE 754. Однако, там нет явного упоминания такой вещи, как FMA (Fused multiply-add). Мне показалось интересным разобраться, как эта технология работает.
FMA FMA - это оптимизация на уровне процессора следующей операции:</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>FMA в Raspberrypi</h1></header>
      		<div class='container entry-content'>
  <p>Разбираясь с одним интересным багом в коде DSP фильтра, я с удивлением обнаружил целую область неизведанного в области чисел с плавающий точкой. Есть замечательная статья о том, что <a href="https://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html">каждый программист должен знать об операциях с плавающей точкой</a>. В ней очень подробно описывается проблема и её решение в стандарте IEEE 754. Однако, там нет явного упоминания такой вещи, как <a href="https://en.wikipedia.org/wiki/Multiply%E2%80%93accumulate_operation#Fused_multiply%E2%80%93add">FMA</a> (Fused multiply-add). Мне показалось интересным разобраться, как эта технология работает.</p>
<h1 id="fma">FMA</h1>
<p>FMA - это оптимизация на уровне процессора следующей операции:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-C" data-lang="C">result <span style="color:#f92672">+=</span> A <span style="color:#f92672">*</span> B
</code></pre></div><p>Выбор такой операции не случаен. Это ни что иное, как <a href="https://ru.wikipedia.org/wiki/%D0%A1%D0%B2%D1%91%D1%80%D1%82%D0%BA%D0%B0_(%D0%BC%D0%B0%D1%82%D0%B5%D0%BC%D0%B0%D1%82%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8%D0%B9_%D0%B0%D0%BD%D0%B0%D0%BB%D0%B8%D0%B7)">операция свёртки</a>, которая очень часто используется в анализе сигналов (DSP), различных алгоритмах матанализа и пр. В общем виде её можно записать так:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-C" data-lang="C">result[i] <span style="color:#f92672">=</span> A[i]<span style="color:#f92672">*</span>B[i] <span style="color:#f92672">+</span> A[i<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>]<span style="color:#f92672">*</span>B[i<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>] <span style="color:#f92672">+</span> ...
</code></pre></div><p>Собственно оптимизация заключается в двух вещах:</p>
<ul>
<li>умножение и сложение делается одной ассемблерной инструкцией вместо двух</li>
<li>округление происходит только после сложения.</li>
</ul>
<p>На последнем я хотел бы немного остановится. Дело в том, что регистры процессора имеют конечную длину. Записать туда бесконечное число не получится. Поэтому результат умножения должен быть округлён, сложен и округлён ещё раз:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-C" data-lang="C">round(round(A[i] <span style="color:#f92672">*</span> B[i]) <span style="color:#f92672">+</span> result[i])
</code></pre></div><p>Однако, из-за того, что FMA - это одна ассемблерная инструкция, то можно сделать небольшую оптимизацию и произвести умножение на гораздо большем регистре, сложить и результат округлить:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-C" data-lang="C">round(A[i]<span style="color:#f92672">*</span>B[i] <span style="color:#f92672">+</span> result[i])
</code></pre></div><p>Это позволит существенно повысить точность, так как округление происходит только один раз. Понятное дело, что полностью от ошибки округления избавиться нельзя, но вот значительно сократить ошибку вполне возможно.</p>
<h1 id="bcm2837">BCM2837</h1>
<p>Для проверки FMA я совершенно неслучайно выбрал Raspberrypi 3. На нём установлен SoC Broadcom BCM2837. Это чип, в котором одновременно есть и CPU и GPU. А поскольку они оба могут производить операции с плавающей точкой, то, конечно же, интересно было бы узнать как работает FMA на каждом из них.</p>
<p>Хотя на самом деле нет. Я просто пытаюсь найти багу в своём GPU коде.</p>
<h1 id="rpi-fma">rpi-fma</h1>
<p>Я написал небольшой проект - <a href="https://github.com/dernasherbrezon/rpi-fma">rpi-fma</a>, в котором явным образом с помощью ассемблерных инструкций считаю простое выражение:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-C" data-lang="C"><span style="color:#ae81ff">1.0000001F</span> <span style="color:#f92672">*</span> <span style="color:#ae81ff">1.0000001F</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">1.0000002F</span>
</code></pre></div><p>Я взял его не случайно, а нашёл в <a href="https://docs.nvidia.com/cuda/floating-point/index.html">одной статье от Nvidia</a>, в которой описывалась работа их GPU процессора. Она достаточно обширна, но написана была весной 2011. В частности, там утверждается, что:</p>
<blockquote>
<p>At the time this paper is written (Spring 2011) there are no commercially available x86 CPUs which offer hardware FMA</p>
</blockquote>
<p>Если использовать одни и те же числа, то можно сравнить их с результатами инженеров Nvidia.</p>
<p>Я реализовал несколько разных вычислений одного и того же выражения:</p>
<ul>
<li>С использованием двух инструкций: VMUL и VADD</li>
<li>С использованием FMA инструкции: VFMA</li>
<li>С использованием MLA инструкции: VMLA</li>
<li>OpenCL код для запуска на GPU, который в итоге компилировался в две инструкции: FMUL и FADD</li>
</ul>
<p>MLA - это одна инструкция для умножения и сложения с результатом. Её основное отличие от FMA заключается в том, что не делается &ldquo;Fuse&rdquo; - оптимизация округления.</p>
<p>Результаты в таблице ниже:</p>
<table>
    <thead>
        <tr>
            <th>Тест</th>
            <th>Результат</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>VMUL + VADD</td>
            <td>0</td>
        </tr>
        <tr>
            <td>VFMA</td>
            <td>1.42108547e-14</td>
        </tr>
        <tr>
            <td>VMLA</td>
            <td>0</td>
        </tr>
        <tr>
            <td>FMUL + FADD</td>
            <td>0</td>
        </tr>
    </tbody>
</table>
<h1 id="выводы">Выводы</h1>
<p>Выводов неожиданно несколько:</p>
<ul>
<li>FMA существует и на процессорах.</li>
<li>FMA работает и даёт результаты отличные от наивной реализации через 2 инструкции.</li>
<li>В GPU Raspberrypi нет поддержки FMA. Я дополнительно залез в <a href="https://github.com/doe300/VC4C/raw/master/doc/VideoCoreIV-AG100-R.pdf">спецификацию процессора</a> и не обнаружил там ничего похожего.</li>
</ul>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Индивидуальные APT репозитории для CPU</title>
      <link>https://dernasherbrezon.com/posts/apt-for-cpu/</link>
      <pubDate>Sat, 25 Sep 2021 13:17:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/apt-for-cpu/</guid>
      <description>Интересный факт - все приложения, находящиеся в стандартных репозиториях Debian или Ubuntu, скомпилированы с опциями по-умолчанию. Это приводит к интересным последствиям. Например, программисты не используют SIMD инструкции и полагаются на компилятор. Компилятор не всегда может оптимизировать код под конкретный процессор. Из-за этого все супер-быстрые возможности процессоров и невероятные SIMD операции простаивают без дела.
Разработчики Debian объясняют эту особенность тем, что включение поддержки расширенных регистров не даёт существенного ускорения. И, зачастую, это верно.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Индивидуальные APT репозитории для CPU</h1></header>
      		<div class='container entry-content'>
  <p>Интересный факт - все приложения, находящиеся в стандартных репозиториях Debian или Ubuntu, скомпилированы с опциями по-умолчанию. Это приводит к интересным последствиям. Например, программисты не используют SIMD инструкции и полагаются на компилятор. Компилятор не всегда может оптимизировать код под конкретный процессор. Из-за этого все супер-быстрые возможности процессоров и невероятные SIMD операции простаивают без дела.</p>
<p>Разработчики Debian объясняют эту особенность тем, что <a href="https://wiki.debian.org/ArmHardFloatPort/VfpComparison#NEON">включение поддержки расширенных регистров не даёт существенного ускорения</a>. И, зачастую, это верно. Разработчики не будут писать на ассемблере код, чтобы оптимизировать приложения для какого-то одного процессора. Да и не многим приложениям это нужно. А даже, если и написать более оптимизированный код, то непонятно как доставить его пользователю. Получается замкнутый круг: операционным системам невыгодно держать инфраструктуру бинарных пакетов для улучшения производительности на 5-10%. А разработчики не будут писать оптимизированный код, потому что нет инфраструктуры.</p>
<p>Тем не менее, есть отдельные библиотеки, которые оптимизированы специально для разных версий процессоров и по-максимуму используют их возможности. Например, <a href="https://www.libvolk.org">volk</a> позволяет предоставляет набор функций оптимизированный для цифровой обработки сигналов. Если процессор поддерживает оптимизированную реализацию и такая реализация написана, то volk выбирает её. Если нет, то подставляется реализация, которая написана на простом C. Получается, не нужно писать код под каждый тип процессора. Это хорошо, но остаётся другая проблема - дистрибьюция таких библиотек.</p>
<p>Эту-то проблему я и решил на прошлой неделе. Однако, прежде, чем переходить к решению, нужно понять &ldquo;а как вообще работает дистрибьюция APT пакетов?&rdquo;</p>
<h2 id="apt-репозитории">APT репозитории</h2>
<p><img src="/img/apt-for-cpu/1.png" alt=""></p>
<p>Я постараюсь описать схему репозиториев Debian, но это абсолютно так же работает и для Ubuntu. Итак, у каждого дистрибутива есть кодовое имя. Это кодовое имя даётся разным версиям операционной системы. В контексте компиляции это значит, что в разных версиях будут разные версии GCC и разные версии libc. Из чего зачастую следует, что пакет собранный в одной версии операционной системы, может не работать в другой. Иногда это не так, но в общем случае следует собирать пакет для каждой версии ОС.</p>
<p>У каждой версии ОС есть список архитектур, которые она поддерживает. На схеме выше я привёл только две: armhf и amd64. На самом деле, Debian поддерживает гораздо больше. Архитектура в контексте сборки приложения - это усреднённый тип процессора. Например, amd64 - это все 64-битные процессоры, а не только от AMD. То же самое и для armhf. armhf - это &ldquo;обычный&rdquo; 32-битный процессор на архитектуре ARM.</p>
<p>Для того, чтобы иметь бинарные приложения для каждого процессора, нужно пойти ещё дальше и добавить ещё один уровень.</p>
<p><img src="/img/apt-for-cpu/2.png" alt=""></p>
<p>Можно иметь отдельные репозитории для различных версий ARM процессоров: cortex-a7, cortex-a53 и т.д. Также нужно иметь некоторую общую &ldquo;generic&rdquo; версию. Это на тот случай, если CPU не поддерживается. Каждый пакет должен быть собран под различные процессоры, а также с параметрами по-умолчанию для &ldquo;generic&rdquo; версии. На клиенте, подключение CPU-специфичного репозитория можно было бы сделать так (псевдокод):</p>
<pre><code>deb http://s3.amazonaws.com/r2cloud/cpu-$(lscpu model or generic if not supported) $(lsb_release --codename --short) main
</code></pre><p>К сожалению, стандартный APT репозиторий не поддерживают такое детальное логическое разделение, поэтому его можно сделать на физическом уровне. Достаточно создать несколько разных репозиториев под разными URL. Выглядить это могло бы так:</p>
<p><img src="/img/apt-for-cpu/3.png" alt=""></p>
<p>Получается несколько физических репозиториев, каждый из которых содержит:</p>
<ul>
<li>несколько версий ОС</li>
<li>несколько архитектур</li>
<li>только один тип процессора</li>
</ul>
<p>Хорошая новость заключается в том, что типов процессоров не так много. Вдвойне хорошая новость заключается в том, что приложений, которые оптимизированы для нескольких процессоров не так много. Получается, что такие репозитории будут достаточно небольшими.</p>
<h2 id="флаги-gcc">Флаги GCC</h2>
<p>В <a href="https://dernasherbrezon.com/posts/compare-compile-flags-raspberrypi/">предыдущей своей статье</a> я описал опции компиляции для самого первого Raspberr pi, в котором стоит процессор ARM arm1176jzf-s. Однако, другие версии Raspberry pi содержат другие процессоры. Именно поэтому код, собранный под один процессор не запустится на другом:</p>
<p><img src="/img/apt-for-cpu/4.png" alt=""></p>
<p>Кстати, флаги компиляции для ARM процессоров нужно обязательно прописывать, потому что GCC по-умолчанию не включает поддержку расширенных регистров NEON. А вот для Intel x86_64 их включать необязательно, потому что они доступны по-умолчанию. Вот список тех флагов, которые нужно включать для различных версий Raspberry pi.</p>
<table>
	<thead>
		<tr>
			<th>Raspberry pi</th>
			<th>Опции</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td>Raspberry pi 1B</td>
			<td>-mcpu=arm1176jzf-s -mfpu=vfp -mfloat-abi=hard</td>
		</tr>
		<tr>
			<td>Raspberry pi 2 model B</td>
			<td>-mcpu=cortex-a7 -mfpu=neon-vfpv4 -mfloat-abi=hard</td>
		</tr>
		<tr>
			<td>Raspberry pi 3</td>
			<td>-mcpu=cortex-a53 -mfpu=neon-fp-armv8 -mfloat-abi=hard</td>
		</tr>
		<tr>
			<td>Raspberry pi 4</td>
			<td>-mcpu=cortex-a72 -mfpu=neon-fp-armv8 -mfloat-abi=hard</td>
		</tr>
	</tbody>
</table>
<h2 id="реализация">Реализация</h2>
<p>После того, как стало ясно каким образом собрать и разложить бинарники по разным репозиториям, осталось всё это реализовать. Для разных APT репозиториев я создал несколько S3 bucket. Каждый из них содержит только специфичные для конкретного процессора бинарники. В результате в проекте <a href="https://r2server.ru/apt.html">r2cloud</a> появилось два типа репозиториев:</p>
<ul>
<li><a href="http://s3.amazonaws.com/r2cloud">http://s3.amazonaws.com/r2cloud</a> - в нём содержатся приложения не критичные к типу процессора. Там по-прежнему есть разделение на armhf и amd64.</li>
<li><a href="http://s3.amazonaws.com/r2cloud/cpu-">http://s3.amazonaws.com/r2cloud/cpu-</a>* - в таких репозиториях содержатся приложения собранные под конкретные процессоры.</li>
</ul>
<p>Для сборки приложений под конкретный тип процессора я написал небольшой bash скрипт. В нём определяется архитектура процессора (armhf или amd64):</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">CURRENT_ARCH<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>dpkg --print-architecture<span style="color:#66d9ef">)</span>
</code></pre></div><p>А после этого список поддерживаемых процессоров:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#66d9ef">if</span> <span style="color:#f92672">[</span> <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>CURRENT_ARCH<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;armhf&#34;</span> <span style="color:#f92672">]</span>; <span style="color:#66d9ef">then</span>
	supported_cores<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;arm1176jzf-s cortex-a53 cortex-a7 cortex-a72 generic&#34;</span>
<span style="color:#66d9ef">elif</span> <span style="color:#f92672">[</span> <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>CURRENT_ARCH<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;amd64&#34;</span> <span style="color:#f92672">]</span>; <span style="color:#66d9ef">then</span>
	supported_cores<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;generic&#34;</span>
<span style="color:#66d9ef">else</span>
	echo <span style="color:#e6db74">&#34;unknown arch: </span><span style="color:#e6db74">${</span>CURRENT_ARCH<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>
	exit <span style="color:#ae81ff">1</span>
<span style="color:#66d9ef">fi</span>
</code></pre></div><p>Если приложение нужно собирать в зависимости от процессора (all), то запускается сборка для каждого из процессоров. Если нет (one), то приложение собирается для стандартного репозитория:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#66d9ef">if</span> <span style="color:#f92672">[</span> <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>CORE_BUILD<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;all&#34;</span> <span style="color:#f92672">]</span>; <span style="color:#66d9ef">then</span>
	<span style="color:#66d9ef">for</span> i in <span style="color:#e6db74">${</span>supported_cores<span style="color:#e6db74">}</span>; <span style="color:#66d9ef">do</span>
		build_core $i
	<span style="color:#66d9ef">done</span>
<span style="color:#66d9ef">elif</span> <span style="color:#f92672">[</span> <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>CORE_BUILD<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;one&#34;</span> <span style="color:#f92672">]</span>; <span style="color:#66d9ef">then</span>
	build_core
<span style="color:#66d9ef">else</span>
	echo <span style="color:#e6db74">&#34;unknown core_build: </span><span style="color:#e6db74">${</span>CORE_BUILD<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>
	exit <span style="color:#ae81ff">1</span>
<span style="color:#66d9ef">fi</span>
</code></pre></div><h2 id="результаты">Результаты</h2>
<p>В результате сборка стала занимать чуть больше времени. И для того, чтобы масштабироваться дальше, нужно уже что-то посерьёзнее обычного bash скрипта. Тем не менее для моих нужд этого вполне хватает и позволяет сильно упростить и ускорить приложения на Raspberry pi. Сама плата не очень быстрая, поэтому такая оптимизация крайне необходима.</p>
<p>Поскольку у меня теперь есть инфраструктура доставки приложений в зависимости от процессора, то в будущем можно заняться совсем уж экзотическими вещами вроде запуска кода на GPU. Тот же Raspberry pi содержит графическое ядро VideoCore IV, которое умеет перемножать матрицы и вектора очень быстро. А это крайне полезно для цифровой обработки сигналов.</p>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Сравнение различных флагов компиляции для Raspberrypi</title>
      <link>https://dernasherbrezon.com/posts/compare-compile-flags-raspberrypi/</link>
      <pubDate>Thu, 23 Sep 2021 21:20:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/compare-compile-flags-raspberrypi/</guid>
      <description>Недавно мне на глаза попалась самая первая версия Raspberry pi и я решил немного поэкспериментировать со старым железом.
Мне было интересно насколько отличается производительность библиотеки volk в зависимости от различных флагов компиляции.
arm1176jzf-s Для начала необходимо определиться с процессором. Как известно, Raspberrypi использует system-on-the-chip (SoC) от broadcom. Это даже написано на самом процессоре: Broadcom BCM2835. Внутри этого чипа находится несколько логических компонентов:
 ядро CPU - ARM arm1176jzf-s ядро GPU - VideoCore 4  К сожалению, стандартные linux инструменты выдают совершенно неправильную информацию о процессоре, поэтому приходится смотреть маркировку прямо на плате и искать информацию в Интернете.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Сравнение различных флагов компиляции для Raspberrypi</h1></header>
      		<div class='container entry-content'>
  <p>Недавно мне на глаза попалась самая первая версия Raspberry pi и я решил немного поэкспериментировать со старым железом.</p>
<p><img src="/img/compare-compile-flags-raspberrypi/rpi.jpg" alt=""></p>
<p>Мне было интересно насколько отличается производительность <a href="https://github.com/gnuradio/volk">библиотеки volk</a> в зависимости от различных флагов компиляции.</p>
<h2 id="arm1176jzf-s">arm1176jzf-s</h2>
<p>Для начала необходимо определиться с процессором. Как известно, Raspberrypi использует system-on-the-chip (SoC) от broadcom. Это даже написано на самом процессоре: Broadcom BCM2835. Внутри этого чипа находится несколько логических компонентов:</p>
<ul>
<li>ядро CPU - ARM arm1176jzf-s</li>
<li>ядро GPU - VideoCore 4</li>
</ul>
<p>К сожалению, стандартные linux инструменты выдают совершенно неправильную информацию о процессоре, поэтому приходится смотреть маркировку прямо на плате и искать информацию в Интернете.</p>
<p>Согласно, <a href="https://developer.arm.com/documentation/ddi0360/f/introduction-to-vfp">спецификации arm1176jzf-s</a> в нём нет поддержки NEON. А значит каких-то откровенных различий в производительности volk вряд стоит ожидать. Тем не менее мне захотелось докопаться до цифр и попробовать пару идей.</p>
<h2 id="опции-компиляции">Опции компиляции</h2>
<p>Итак, на основе информации о ядре, я составил два различных набора флагов:</p>
<ul>
<li>export CXXFLAGS=&quot;-mcpu=arm1176jzf-s -mfpu=vfp -mfloat-abi=hard&quot;. По-умолчанию, в Debian все флаги &ldquo;-mfpu&rdquo; выключены. Однако, arm1176jzf-s содержит самое базовое расширение для работы с плавающими числами - vfp. Имеет смысл его включить и посмотреть насколько изменится скорость работы программы.</li>
<li>export CXXFLAGS=&quot;&quot;. Флаги по-умолчанию.</li>
</ul>
<p>Помимо компиляции volk с этими группами флагов я решил протестировать:</p>
<ul>
<li>результат работы в Debian stretch (gcc 6.3.0)</li>
<li>результат работы в Debian buster (gcc 8.3.0)</li>
<li>результат работы скомпилированный на Raspberry pi 3, но запущенной на Raspberry pi 1</li>
</ul>
<p>В качестве тестовой программы я выбрал перемножение комплексных чисел. Если бы был доступен NEON, то скорость этой программы была раз в 5 больше, чем при использовании обычных регистров. В данном тесте я не рассчитывал на какое-либо ускорение. Наверное, единственной причиной, по которой я выбрал именно его было то, что он наиболее часто встречается в цифровой обработке сигналов.</p>
<pre><code>volk_profile -R volk_32fc_x2_dot_prod_32fc
</code></pre><h2 id="результаты">Результаты</h2>
<p>Результаты выполнения тестов я поместил в таблицу:</p>
<table>
	<thead>
		<tr>
			<td>Флаги</td>
			<td>Stretch</td>
			<td>Stretch RPi3</td>
			<td>Buster</td>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td>"-mcpu=arm1176jzf-s -mfpu=vfp -mfloat-abi=hard"</td>
			<td>28548.9 мс</td>
			<td>28515.9 мс</td>
			<td>28669 мс</td>
		</tr>
		<tr>
			<td>""</td>
			<td><strong>28088 мс</strong></td>
			<td><strong>28022 мс</strong></td>
			<td><strong>28095.8 мс</strong></td>
		</tr>
	</tbody>
</table>
<p>Как видно из таблицы, особой разницы в скорости выполнения нет. Правда, есть небольшое ускорение при компиляции без каких-либо флагов. В среднем на 500 мс. Возможно, в операционной системе есть какие-то флаги по-умолчанию, которые чуть-чуть помогают.</p>
<p>Ещё один интересный вывод заключается в том, что различные версии GCC выдают примерно одинаковый результат. Видимо, код в обоих случаях содержит одни и те же оптимизации компилятора. Или не содержит ни одной.</p>
<p>Третий вывод заключается в том, что скорость приложения не зависит от устройства на котором оно было скомпилировано. Это достаточно очевидный вывод, но я рад, что он подтвердился ещё раз. Это говорит о том, что в прошивке устройства нет каких-либо скрытых опций и оптимизаций.</p>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Создание Prometheus exporter</title>
      <link>https://dernasherbrezon.com/posts/writing-prometheus-exporter/</link>
      <pubDate>Mon, 09 Aug 2021 15:52:18 +0000</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/writing-prometheus-exporter/</guid>
      <description>Prometheus - база данных для хранения метрик. Туда можно записать метрики производительности системы, роутеров, Java-приложений и многое другое. Если приложение не поддерживает протокол Prometheus для экспорта метрик, то можно взять один из готовых exporter&amp;rsquo;ов. Exporter - это небольшой прокси сервер, который берёт метрики из приложения в одном формате и выдаёт метрики в Prometheus формате. Но что, если готового exporter&amp;rsquo;а нет? Не беда - его можно написать!
8430FT 8430FT - это LTE-модем, который может раздавать интернет через Wi-Fi.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Создание Prometheus exporter</h1></header>
      		<div class='container entry-content'>
  <p>Prometheus - база данных для хранения метрик. Туда можно записать метрики производительности системы, <a href="https://dernasherbrezon.com/posts/prometheus-monitoring-mikrotik/">роутеров</a>, Java-приложений и многое другое. Если приложение не поддерживает протокол Prometheus для экспорта метрик, то можно взять один из <a href="https://github.com/prometheus/docs/blob/master/content/docs/instrumenting/exporters.md">готовых exporter&rsquo;ов</a>. Exporter - это небольшой прокси сервер, который берёт метрики из приложения в одном формате и выдаёт метрики в Prometheus формате. Но что, если готового exporter&rsquo;а нет? Не беда - его можно написать!</p>
<h2 id="8430ft">8430FT</h2>
<p>8430FT - это LTE-модем, который может раздавать интернет через Wi-Fi. Важной особенностью этого модема является возможность подключить внешнюю антенну. Это особенно актуально в удалённых местах, где базовые станции находятся далеко. Используя большую направленную антенну можно очень хорошо усилить сигнал.</p>
<p><img src="/img/writing-prometheus-exporter/8430FT.jpg" alt=""></p>
<p>8430FT - это совсем небольшой модем в формате USB стика, который можно воткнуть в компьютер или напрямую в USB блока питания. Если зайти в админку, то можно найти несколько графиков и статус работы модема. Это хорошо, так как метрики точно доступны в модеме и каким-то образом их можно получить.</p>
<p><img src="/img/writing-prometheus-exporter/8430FT_admin.png" alt=""></p>
<p>Эти графики нарисованы неплохо, но если присмотреться, то возникает несколько вопросов. Например, почему скорость изображена в виде спидометра? Для автомобилей - это стандарт, а вот для скорости интернет соединения этот способ не очень подходит. Какая будет максимальная скорость? Модем может подключиться как к 4G, так и 3G. У них разные скорости и непонятно как рисовать спидометр. Даже на скриншоте видно, что стрелки находятся всегда на нуле, несмотря на то, что трафик идёт.</p>
<p>8430FT - не выдаёт информацию через SNMP. Это очень плохо, потому что придётся писать свой собственный Prometheus exporter, а не использовать готовый <a href="https://github.com/prometheus/snmp_exporter">snmp_exporter</a>. С одной стороны понятно: 8430FT - пользовательское устройство и только самые отъявленные гики будут его мониторить с помощью промышленных решений. С другой, дать хоть какой-нибудь доступ на устройство можно было бы. Хотя бы для отладки web интерфейса.</p>
<p>Я попробовал найти хоть бы какие-нибудь открытые порты на 8430FT и нашёл только два:</p>
<ul>
<li>80 - для админки</li>
<li>6666 - какой-то health check сервис. На любое текстовое сообщение он возвращает в текстовом виде &ldquo;OK&rdquo;. А может быть это бэкдор компании Fareli limited, которая произвела это устройство.</li>
</ul>
<p>Внутри модема используется операционная система <a href="https://en.wikipedia.org/wiki/Nucleus_RTOS">nucleus RTOS</a>. Забавный факт, но ничего полезного он не дал.</p>
<p>Если открыть web developer console, то в запросах можно увидеть следующее:</p>
<p><img src="/img/writing-prometheus-exporter/8430FT_api.png" alt=""></p>
<p>Для получения статуса устройства и статистики используется json-подобный протокол. Ну хоть html не придётся парсить. Протокол получается даже ещё проще, так как каждый запрос содержит в себе токен digest аутентификации. И этого знания о протоколе достаточно, чтобы написать exporter.</p>
<h2 id="8430ft_exporter">8430ft_exporter</h2>
<p>Следующим шагом будет выбор языка, на котором можно написать exporter. Дело в том, что сам Prometheus написан на Go и большинство exporter&rsquo;ов написаны на нём же. В принципе, можно написать на любом языке. Главное, чтобы это был web-сервис, который бы выдавал метрики в особом текстовом формате. К счастью, для Java существует официальная библиотека, которая сильно упрощает написание таких сервисов.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-xml" data-lang="xml"><span style="color:#f92672">&lt;dependency&gt;</span>
	<span style="color:#f92672">&lt;groupId&gt;</span>io.prometheus<span style="color:#f92672">&lt;/groupId&gt;</span>
	<span style="color:#f92672">&lt;artifactId&gt;</span>simpleclient_httpserver<span style="color:#f92672">&lt;/artifactId&gt;</span>
	<span style="color:#f92672">&lt;version&gt;</span>0.11.0<span style="color:#f92672">&lt;/version&gt;</span>
<span style="color:#f92672">&lt;/dependency&gt;</span>
</code></pre></div><p>После того как она подключена нужно реализовать некий Collector:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">ModemCollector</span> <span style="color:#66d9ef">extends</span> Collector <span style="color:#f92672">{</span>
	<span style="color:#a6e22e">@Override</span>
	<span style="color:#66d9ef">public</span> List<span style="color:#f92672">&lt;</span>MetricFamilySamples<span style="color:#f92672">&gt;</span> <span style="color:#a6e22e">collect</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
		<span style="color:#f92672">...</span>
	<span style="color:#f92672">}</span>
<span style="color:#f92672">}</span>
</code></pre></div><p>На каждое обращение, он будет делать запрос к модему по http, парсить и возвращать метрики в списке <code>List&lt;MetricFamilySamples&gt;</code>.</p>
<p>Далее, надо будет зарегистрировать этот Collector в глобальном registry метрик:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">collector<span style="color:#f92672">.</span><span style="color:#a6e22e">register</span><span style="color:#f92672">();</span>
</code></pre></div><p>И поднять web-сервер, который подцепит этот registry:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">new</span> HTTPServer<span style="color:#f92672">(</span>host<span style="color:#f92672">,</span> port<span style="color:#f92672">,</span> <span style="color:#66d9ef">true</span><span style="color:#f92672">);</span>
</code></pre></div><p>Далее можно уже сфокусироваться непосредственно на самих метриках. Не все метрики одинаково полезны. Например, 8430FT может выдавать метрики curUpSpeed и curDnSpeed. Скорость аплоада и скачивания соответственно. Их удобно вывести в web интерфейсе, но импортировать в Prometheus не имеет смысла. На каком интервале измерялась скорость? Это количество байт отправленных за последнюю секунду или среднее количество байт отправленных за последнюю минуту? Обычно такие метрики вычисляются во время отрисовки графиков. Если пользователь выбрал такой интервал, что один пиксель соответствует одной секунде, значит надо взять количество байт в секундном интервале и поделить на длину интервала. А если пиксель соответствует 5 минутам, то нужно брать все байты отправленные в течение минуты и делить на минуту. Тогда скорость бит/с будет правильно высчитываться в обоих случаях.</p>
<p>Команда Prometheus написала <a href="https://prometheus.io/docs/instrumenting/writing_exporters/">неплохой гайд</a> о том, как правильно писать exporter, какие метрики стоит экспортировать и как правильно давать им имена.</p>
<p>После того как модуль написан, его можно анонсировать, сделав pull request к <a href="https://github.com/prometheus/docs/blob/master/content/docs/instrumenting/exporters.md">странице документации</a>. Также можно зарезервировать порт для нового exporter&rsquo;а на <a href="https://github.com/prometheus/prometheus/wiki/Default-port-allocations">специальной странице</a>. Несмотря на то, что порты можно задавать извне, очень удобно иметь множество различных exporter на одной физической машине с портами по-умолчанию.</p>
<p><img src="/img/writing-prometheus-exporter/share.png" alt=""></p>
<h2 id="результат">Результат</h2>
<p>В результате у меня получился небольшой проект - <a href="https://github.com/dernasherbrezon/8430ft_exporter">8430ft_exporter</a>. Он может экспортировать метрики модема, на основе которых можно собрать вот такой дашборд:</p>
<p><img src="/img/writing-prometheus-exporter/dashboard.png" alt=""></p>
<p>Параметр RSSI сигнала очень полезный - он позволяет оценить качество 4G антенны и её направление. А вместе со скоростью интернета позволяет понять зависимость скорости от уровня сигнала.</p>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Мониторинг Mikrotik роутеров с помощью Prometheus</title>
      <link>https://dernasherbrezon.com/posts/prometheus-monitoring-mikrotik/</link>
      <pubDate>Sat, 07 Aug 2021 06:50:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/prometheus-monitoring-mikrotik/</guid>
      <description>Для начала вообще пара слов о том, зачем мониторить роутеры. Роутер, как и любое другое устройство, имеет аппаратные ресурсы, которые могут закончиться. Например, браузер стал медленнее открывать страницы или видео стало медленнее загружаться. Это может быть как из-за провайдера, так и из-за роутера. Возможно, к роутеру подключено слишком много устройств, и он стал медленнее, или параллельно кто-то качает слишком много - всё это может быть причиной замедления.
Большинство роутеров позволяют посмотреть загруженность ЦПУ или памяти прямо в админке.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Мониторинг Mikrotik роутеров с помощью Prometheus</h1></header>
      		<div class='container entry-content'>
  <p>Для начала вообще пара слов о том, зачем мониторить роутеры. Роутер, как и любое другое устройство, имеет аппаратные ресурсы, которые могут закончиться. Например, браузер стал медленнее открывать страницы или видео стало медленнее загружаться. Это может быть как из-за провайдера, так и из-за роутера. Возможно, к роутеру подключено слишком много устройств, и он стал медленнее, или параллельно кто-то качает слишком много - всё это может быть причиной замедления.</p>
<p>Большинство роутеров позволяют посмотреть загруженность ЦПУ или памяти прямо в админке. Но это лишь статичная информация, которая может и не дать полной картины происходящего. Гораздо удобнее смотреть изменение различных показателей во времени. Например, ЦПУ загружен на 80% - это хорошо и плохо? Если на графике видно, что загрузка ЦПУ совпадает с уменьшением скорости скачивания, то да, дело в ЦПУ. А если 80% загрузка держится последние несколько дней или недель, то вряд ли она связана со скоростью скачивания. Возможно, что-то ещё могло повлиять.</p>
<h2 id="общая-схема">Общая схема</h2>
<p>В качестве роутера я использовал <a href="https://mikrotik.com/product/RBwAPR-2nD">Mikrotik waP R</a>. Он позволяет использовать SIM карту, чтобы подключиться к сотовой сети, и раздавать Wi-Fi.</p>
<p><img src="/img/prometheus-monitoring-mikrotik/mikrotik_wap_r.jpg" alt="mikrotik_wap_r"></p>
<p>Общая схема мониторинга выглядит следующим образом:</p>
<p><img src="/img/prometheus-monitoring-mikrotik/schema.png" alt=""></p>
<h2 id="mikrotik">Mikrotik</h2>
<p>Prometheus не может напрямую читать метрики из Mikrotik. Вместо этого он обращается в специальный exporter, который выдаёт метрики в нужном формате. Mikrotik позволяет экспортировать метрики с помощью протокола <a href="https://ru.wikipedia.org/wiki/SNMP">SNMP</a>. По-умолчанию он не включён. Его можно включить следующей командой:</p>
<pre><code>[admin@MikroTik] /snmp
[admin@MikroTik] /snmp&gt;  set enabled yes
</code></pre><h2 id="snmp-exporter">SNMP-exporter</h2>
<p><a href="https://github.com/prometheus/snmp_exporter">SNMP-exporter</a> нужен для того, чтобы преобразовать метрики из SNMP формата в специальный формат, который понимает Prometheus. Устанавливается он достаточно просто:</p>
<pre><code>wget https://github.com/prometheus/snmp_exporter/releases/download/v0.20.0/snmp_exporter-0.20.0.linux-armv7.tar.gz
tar xzf snmp_exporter-0.20.0.linux-armv7.tar.gz
</code></pre><p>Следующим шагом будет создание systemd сервиса, который бы автоматически стартовал на старте. Для этого нужно создать следующий файл:</p>
<pre><code>sudo vi /etc/systemd/system/snmp_exporter.service
</code></pre><p>Файл:</p>
<pre><code>[Unit]
Description=SNMP Exporter
After=network-online.target

[Service]
User=pi
Restart=on-failure
ExecStart=/usr/local/bin/snmp_exporter --config.file='&lt;path to&gt;/snmp_exporter-0.20.0.linux-armv7/snmp.yml'

[Install]
WantedBy=multi-user.target
</code></pre><p>Нужно только внимательно указать путь к snmp.yml файлу. Этот файл содержит маппинг SNMP объектов на метрики Prometheus для разных типов устройств. Mikrotik уже есть в этом файле, так что можно использовать его как-есть.</p>
<p>Дальше необходимо скопировать snmp_exporter:</p>
<pre><code>sudo cp ./snmp_exporter-0.20.0.linux-armv7/snmp_exporter /usr/local/bin/snmp_exporter
</code></pre><p>После этого стартовать сервис:</p>
<pre><code>sudo systemctl enable snmp_exporter
sudo systemctl start snmp_exporter
</code></pre><p>Проверить статус сервиса можно командой:</p>
<pre><code>sudo systemctl status snmp_exporter
</code></pre><p>Если сервис стартовал успешно, то вывод будет следующий:</p>
<p><img src="/img/prometheus-monitoring-mikrotik/snmp_exporter.png" alt=""></p>
<h2 id="prometheus">Prometheus</h2>
<p>Все метрики будут сохраняться в <a href="https://prometheus.io">Prometheus</a>. Prometheus - это специальная база данных для хранения метрик. Его можно запустить локально, либо в облаке.</p>
<p>Я не буду подробно описывать как настроить и стартовать Prometheus. Есть достаточно <a href="https://prometheus.io/docs/prometheus/latest/getting_started/">полная инструкция</a> как это сделать.</p>
<p>Сейчас же достаточно настроить подключение к exporter. Это делается через основной конфиг prometheus.yaml:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml">  - <span style="color:#f92672">job_name</span>: <span style="color:#ae81ff">mikrotik</span>
    <span style="color:#f92672">static_configs</span>:
      - <span style="color:#f92672">targets</span>:
        - <span style="color:#ae81ff">192.168.1.1</span>  <span style="color:#75715e"># SNMP device.</span>
    <span style="color:#f92672">metrics_path</span>: <span style="color:#ae81ff">/snmp</span>
    <span style="color:#f92672">params</span>:
      <span style="color:#f92672">module</span>: [<span style="color:#ae81ff">mikrotik]</span>
    <span style="color:#f92672">relabel_configs</span>:
      - <span style="color:#f92672">source_labels</span>: [<span style="color:#ae81ff">__address__]</span>
        <span style="color:#f92672">target_label</span>: <span style="color:#ae81ff">__param_target</span>
      - <span style="color:#f92672">source_labels</span>: [<span style="color:#ae81ff">__param_target]</span>
        <span style="color:#f92672">target_label</span>: <span style="color:#ae81ff">instance</span>
      - <span style="color:#f92672">target_label</span>: <span style="color:#ae81ff">__address__</span>
        <span style="color:#f92672">replacement</span>: <span style="color:#ae81ff">raspberrypi.local:9116</span>
</code></pre></div><h2 id="grafana">Grafana</h2>
<p>Можно воспользоваться <a href="https://grafana.com/grafana/dashboards/14420">готовыми дашбордами</a> и сразу импортировать их в Grafana.</p>
<p><img src="/img/prometheus-monitoring-mikrotik/image.png" alt=""></p>
<p>Однако, каждое устройство немного отличается друг от друга и большинство дашбордов ничего не покажет. Для <a href="https://mikrotik.com/product/RBwAPR-2nD">Mikrotik waP R</a> я выбрал самые важные параметры:</p>
<ul>
<li>Uptime - <code>sysUpTime{instance='$instance'}/100</code></li>
<li>Load CPU - <code>avg(hrProcessorLoad{instance='$instance'})</code></li>
<li>Load RAM - <code>(hrStorageUsed{hrStorageIndex='65536',instance='$instance'} * 100 )/(hrStorageSize{hrStorageIndex='65536',instance='$instance'})</code></li>
<li>Load system disk - <code>(hrStorageUsed{hrStorageIndex='131072',instance='$instance'} * 100 )/(hrStorageSize{hrStorageIndex='131072',instance='$instance'})</code></li>
<li>In/Out bit/sec - <code>irate(ifHCInOctets{job='mikrotik',ifName=~'$Interface',instance='$instance'}[20s])*8</code></li>
<li>RSRP (Reference Signal Received Power) уровень LTE сигнала - <code>mtxrLTEModemSignalRSRP</code></li>
</ul>
<p>После чего добавил панели:</p>
<p><img src="/img/prometheus-monitoring-mikrotik/grafana.png" alt=""></p>
<p>Для того чтобы добавить другие метрики, нужно сначала найти их oid (идентификатор в SNMP):</p>
<pre><code>[admin@MikroTik] /interface lte print oid
</code></pre><p>После этого необходимо найти oid в snmp.yaml:</p>
<pre><code>pi@rasp-buster:~ $ grep 1.3.6.1.4.1.14988.1.1.16.1.1.4 snmp.yml -B 1
  - name: mtxrLTEModemSignalRSRP
    oid: 1.3.6.1.4.1.14988.1.1.16.1.1.4
</code></pre><p>Метрика с именем <code>mtxrLTEModemSignalRSRP</code> должна быть доступна в Prometheus.</p>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Задержка в sdr-modem</title>
      <link>https://dernasherbrezon.com/posts/sdr-modem-latency/</link>
      <pubDate>Fri, 06 Aug 2021 09:47:18 +0000</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/sdr-modem-latency/</guid>
      <description>В предыдущей статье я планировал реализовать не только отправку, но и приём сигнала с помощью plutosdr. Спустя месяц и несколько важных рефакторингов, я сделал всё, что хотел. Теперь можно напрямую сравнивать приём через plutosdr и через sdr-server. Понятное дело, через plutosdr будет намного быстрее. Мне же хотелось узнать насколько быстрее и померить эту задержку.
Описание стенда Алгоритм тестирования для plutosdr и sdr-server выглядит следующим образом:
 создать сообщение отправить в sdr-modem записать время отправки принять это же сообщение из sdr-modem найти разницу между временем отправки и получения  Для того чтобы отправить сообщение, его нужно закодировать во фрейм.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Задержка в sdr-modem</h1></header>
      		<div class='container entry-content'>
  <p>В предыдущей статье я планировал реализовать не только отправку, но и приём сигнала с помощью plutosdr. Спустя месяц и несколько важных рефакторингов, я сделал всё, что хотел. Теперь можно напрямую сравнивать приём через plutosdr и через sdr-server. Понятное дело, через plutosdr будет намного быстрее. Мне же хотелось узнать насколько быстрее и померить эту задержку.</p>
<h2 id="описание-стенда">Описание стенда</h2>
<p>Алгоритм тестирования для plutosdr и sdr-server выглядит следующим образом:</p>
<ul>
<li>создать сообщение</li>
<li>отправить в sdr-modem</li>
<li>записать время отправки</li>
<li>принять это же сообщение из sdr-modem</li>
<li>найти разницу между временем отправки и получения</li>
</ul>
<p>Для того чтобы отправить сообщение, его нужно закодировать во фрейм. Нельзя просто так взять, смодулировать биты и отправить в эфир. Нужно из них сделать специальный фрейм, чтобы принимающая сторона смогла успешно вычленить его из принимаемого шума. Другими словами нужен канальный уровень.</p>
<p>В качестве канального уровня я выбрал HDLC. Он достаточно прост в реализации и уже доступен в <a href="https://github.com/dernasherbrezon/jradio/blob/master/src/main/java/ru/r2cloud/jradio/blocks/HdlcReceiver.java">jradio</a>. Я отправлял 256 байт полезных данных, которые в результате превращались в 325 байт:</p>
<ul>
<li>50 байт тренировочной последовательности (01010101). Это нужно, чтобы приёмник лучше синхронизировался с сигналом. Можно было бы выбрать и 25, но я выбрал 50.</li>
<li>фрейм 265 байт. HDLC добавляет 0x7E в начало и конец полезной нагрузки, а так же делает <a href="https://ru.wikipedia.org/wiki/%D0%9F%D0%BE%D0%BB%D0%BE%D0%B6%D0%B8%D1%82%D0%B5%D0%BB%D1%8C%D0%BD%D0%BE%D0%B5_%D0%B2%D1%8B%D1%80%D0%B0%D0%B2%D0%BD%D0%B8%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5">положительное выравнивание</a>.</li>
<li>10 байт (00000000) для завершения фрейма. Можно и не добавлять, но мне хотелось посмотреть как будет выглядеть на спектограмме нулевая последовательность бит.</li>
</ul>
<p>Данные передавались на скорости 9600 бод с помощью 2FSK модуляции. Теоретическая задержка составила бы: 325 байт * 8 бит / 9600 бод = ~270 мс.</p>
<p>Полный код теста можно найти в git репозитории <a href="https://github.com/dernasherbrezon/sdr-modem-test">sdr-modem-test</a>.</p>
<p>Алгоритм тестирования в обоих случаях одинаковый, отличается только hardware. В случае с sdr-server схема выглядит следующим образом:</p>
<p><img src="/img/sdr-modem-latency/1.jpg" alt=""></p>
<p>Фрейм отправляется в plutosdr, потом через несколько <a href="https://ru.wikipedia.org/wiki/%D0%90%D1%82%D1%82%D0%B5%D0%BD%D1%8E%D0%B0%D1%82%D0%BE%D1%80">аттенюаторов</a> попадает в rtl-sdr, потом в sdr-server, потом в sdr-modem и только потом в тест. Для тестирования plutosdr-plutosdr схема выглядит чуть-чуть по-проще.</p>
<p><img src="/img/sdr-modem-latency/2.jpg" alt=""></p>
<h2 id="результаты">Результаты</h2>
<p>Задержка очень сильно зависит от размеров внутренних буферов. Чем больше буфер, тем меньше ЦПУ расходуется, но тем больше задержка. Чем меньше буфер, тем больше ЦПУ и меньше задержка. Я пробовал тесты для разных размеров буферов: 131072, 16384 и 8192 элемента. Результаты ниже:</p>
<p><img src="/img/sdr-modem-latency/131072.png" alt=""></p>
<p><img src="/img/sdr-modem-latency/16384.png" alt=""></p>
<p><img src="/img/sdr-modem-latency/8192.png" alt=""></p>
<h2 id="выводы">Выводы</h2>
<p>Для коммуникации в реальном времени, конечно же, лучше всего подходит plutosdr-plutosdr. При размере буфера 16384 или 8192 задержка составляет ~300 мс, что очень близко к теоретической. Кстати, интересно, а где находятся оставшиеся 30 мс? Для одностороннего получения сигнала лучше использовать связку rtl-sdr -&gt; sdr-server -&gt; sdr-modem. Это достаточно гибко и позволяет получать несколько сигналов одновременно.</p>
<p>Со схемой plutosdr-plutosdr, правда, есть несколько недостатков. По-умолчанию, на плате стоит генератор сигнала с TXCO 25ppm. Это достаточно большое число, которое может дать погрешность до 10кГц. Это достаточно много и для узкого сигнала в 9600 бод 2FSK может быть критично. Например, во время тестов принимались только ~6 из 10 сообщений.</p>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Передача сигнала с помощью plutosdr</title>
      <link>https://dernasherbrezon.com/posts/plutosdr-tx/</link>
      <pubDate>Fri, 25 Jun 2021 10:58:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/plutosdr-tx/</guid>
      <description>Последние несколько месяцев я напряжённо работаю над своим проектом sdr-modem. Он представляет собой небольшой TCP сервер, который получает массив байт от клиента и передаёт их с помощью радио сигнала в эфир. Также он может и получать сигнал, декодировать и отправлять клиентам поток байтов.
Пару недель назад я наконец-то дописал основную функциональность и тесты. Пришло время протестировать его работу в реальных условиях. Для этого я сделал небольшой тестовый стенд:
 java приложение соединяется с sdr-modem по TCP и отправляет массив байтов.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Передача сигнала с помощью plutosdr</h1></header>
      		<div class='container entry-content'>
  <p>Последние несколько месяцев я напряжённо работаю над своим проектом <a href="https://github.com/dernasherbrezon/sdr-modem">sdr-modem</a>. Он представляет собой небольшой TCP сервер, который получает массив байт от клиента и передаёт их с помощью радио сигнала в эфир. Также он может и получать сигнал, декодировать и отправлять клиентам поток байтов.</p>
<p>Пару недель назад я наконец-то дописал основную функциональность и тесты. Пришло время протестировать его работу в реальных условиях. Для этого я сделал небольшой тестовый стенд:</p>
<ul>
<li>java приложение соединяется с</li>
<li>sdr-modem по TCP и отправляет массив байтов.</li>
<li>sdr-modem отправляет FSK модулированный сигнал в plutosdr. У меня есть только одно устройство, которое может отправлять радио сигналы, поэтому выбора особого не было.</li>
<li>plutosdr по проводу и с помощью аттенюаторов на 40db соединён с</li>
<li>rtlsdr. Сигнал от rtlsdr идёт в</li>
<li>sdr-server, который отправляет его в</li>
<li>sdr-modem. sdr-modem отправляет демодулированный сигнал в</li>
<li>изначальное java приложение, которое слушает его на отдельном потоке</li>
</ul>
<p>Выглядит всё это как-то так:</p>
<p><img src="/img/plutosdr-tx/0.png" alt=""></p>
<p>Ну или как-то так:</p>
<p><img src="/img/plutosdr-tx/hardware.jpg" alt=""></p>
<p>В результате получается полный дуплекс с отправкой и получением данных.</p>
<p>Всё это было сделано, чтобы:</p>
<ol>
<li>Убедиться, что отправленный фрейм можно получить.</li>
<li>Измерить задержку в коде.</li>
</ol>
<h2 id="отправка-и-получение">Отправка и получение</h2>
<p>Данные перед отправкой должны быть закодированы во фреймы. Это нужно прежде всего для того, чтобы найти начало и окончание. Как только фрейм будет получен и контрольная сумма проверена, то можно замерить время получения.</p>
<p>Я выбрал наиболее распространённый канальный протокол - <a href="https://ru.wikipedia.org/wiki/HDLC">HDLC</a>. Именно он лежит в основе AX.25. И его достаточно просто реализовать. И приём HDLC фреймов уже реализован в другом моём проекте - <a href="https://github.com/dernasherbrezon/jradio">jradio</a>.</p>
<p>После того как фрейм получен, нужно добавить перед ним несколько байтов вида 0b01010101. Это нужно для того, чтобы символьная синхронизация смогла синхронизироваться с потоком. Так же такая последовательность используется в модемах с автоматическим определением скорости передачи данных.</p>
<p>В конце же, неплохо было бы добавить несколько нулевых байтов, чтобы <a href="https://ru.wikipedia.org/wiki/NRZI">NRZI кодирование</a> пакета корректно выдала самые последние биты фрейма.</p>
<p>В итоге спектограмма сигнала выглядит как-то так:</p>
<p><img src="/img/plutosdr-tx/1.png" alt=""></p>
<p>Я использовал классную программу <a href="https://github.com/miek/inspectrum">inspectrum</a> для визуализации сигнала. Сверху отображается спектограмма сигнала. Снизу сэмплы. На спектограмме отчётливо видна синхронизирующая последовательность 01010101 - это две параллельные линии. Также видно, что частоты, кодирующие 0 и 1, разнесены (спойлер: 5кГц, а скорость передачи данных 9600 бод).</p>
<h2 id="анализ-результатов">Анализ результатов</h2>
<p><a href="https://github.com/dernasherbrezon/sdr-modem">sdr-modem</a> позволяет сохранять переданный и полученный сигнал в файл для последующего анализа. Вот, что я получил на входе rtlsdr:</p>
<p><img src="/img/plutosdr-tx/2.png" alt=""></p>
<p>Что ж, полученный сигнал очень походит на то, что я послал и это своего рода успех. Однако, java программа не смогла найти переданный фрейм. Если приглядеться к спектограмме, то видно, что вместо двух частот для 0 и 1, передаётся очень много других частот (горизонтальных линий).</p>
<p>Мне пришлось потратить целую неделю, пересобрать <del>двигатель</del> модулятор/демодулятор и симулировать сигнал в java программе, чтобы найти причину такого странного поведения.</p>
<p>Когда я уже почти отчаялся найти проблему в коде, внезапно наткнулся в одной статье на DDS. Поскольку ничего другого, мне не оставалось, я решил почитать, что же это такое. Оказывается, внутри plutosdr есть некий виртуальный генератор сигнала. Он может генерировать сигнал заданной частоты и фазы. Его можно включить и выключить. Причём, как позже я выяснил, самое интересное заключается в том, что настройки этого генератора сохраняются на внутреннем диске plutosdr и применяются при перезагрузке устройства!</p>
<p>Чтобы узнать включён ли генератор, нужно выполнить команду:</p>
<pre><code>iio_attr -a -c cf-ad9361-dds-core-lpc altvoltage0
</code></pre><p>Если генератор (TX1_I_F1/TX1_Q_F1/TX1_I_F2/TX1_Q_F2) включён, то вывод будет содержать:</p>
<pre><code>dev 'cf-ad9361-dds-core-lpc', channel 'altvoltage0' (output), id 'TX1_I_F1', attr 'raw', value '1'
</code></pre><p><img src="/img/plutosdr-tx/4.png" alt=""></p>
<p>Понятное дело, при передаче полезного сигнала не стоит подмешивать случайно генерируемый. Отключается DDS достаточно просто:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">struct</span> iio_channel <span style="color:#f92672">*</span>channel <span style="color:#f92672">=</span> pluto<span style="color:#f92672">-&gt;</span>lib<span style="color:#f92672">-&gt;</span>iio_device_find_channel(pluto<span style="color:#f92672">-&gt;</span>tx, <span style="color:#e6db74">&#34;TX1_I_F1&#34;</span>, true);
<span style="color:#66d9ef">int</span> code <span style="color:#f92672">=</span> pluto<span style="color:#f92672">-&gt;</span>lib<span style="color:#f92672">-&gt;</span>iio_channel_attr_write_bool(channel, <span style="color:#e6db74">&#34;raw&#34;</span>, <span style="color:#ae81ff">0</span>);
<span style="color:#66d9ef">if</span> (code <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0</span>) {
    <span style="color:#66d9ef">return</span> code;
}
</code></pre></div><p>После ещё одного запуска спектограмма стала выглядеть следующим образом:</p>
<p><img src="/img/plutosdr-tx/3.png" alt=""></p>
<p>Результат стал значительно лучше! Нет больше паразитных частот. Однако, частоты 0 и 1 почему-то сдвоены. Такое ощущение, что передаётся два сигнала с незначительным сдвигом по частоте.</p>
<p>Предыдущее открытие показало, что дело скорей всего в самом plutosdr, чем в исходном сигнале или моём коде. Я стал внимательно исследовать параметры устройства.</p>
<p>К сожалению, ничего интересного в параметрах я не обнаружил. Зато нашёл <a href="https://github.com/analogdevicesinc/plutosdr_scripts/blob/master/pluto_tx_data.py#L45">интересный код</a>, который инициализировал plutosdr на передачу сигнала. Этот код очень похож на мой, однако в нём частота (frequency) устанавливалась ДО установки всех других параметров (rf_bandwidth/sampling_frequency). &ldquo;Чем чёрт не шутит&rdquo; - подумал я и сделал так же. Какого было моё удивление, когда я увидел спектограмму:</p>
<p><img src="/img/plutosdr-tx/5.png" alt=""></p>
<p>Все паразитирующие частоты пропали! Это просто невероятно. Разумеется, в документации об этом ни слова. Сигнал стал значительно чище. Красная линия показывает центральную частоту сигнала. А жёлтая горизонтальная линия чуть ниже - это <a href="https://en.wikipedia.org/wiki/DC_bias">DC offset</a>. Вполне ожидаемый артефакт в таких системах.</p>
<p>У меня нет внятного объяснения полученному улучшению. Разве что, существует ещё один тип генератора в системе и он по-прежнему включён, но при конфигурировании частоты отключается.</p>
<p>Наверняка, многие заметили на спектограмме ещё один сигнал. Он передаётся чуть раньше основного:</p>
<p><img src="/img/plutosdr-tx/6.png" alt=""></p>
<p>Это не я. Вернее, не мой код. Такое ощущение, что этот импульс передаётся самим plutosdr при инициализации. Я попробовал добавить 4-х секундную задержку после инициализации каждого параметра и выяснил, что этот сигнал передаётся во время установки частоты:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">int</span> code <span style="color:#f92672">=</span> plutosdr_write_lli(chn, <span style="color:#e6db74">&#34;frequency&#34;</span>, cfg<span style="color:#f92672">-&gt;</span>center_freq, iio);
<span style="color:#66d9ef">if</span> (code <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0</span>) {
    <span style="color:#66d9ef">return</span> code;
}
</code></pre></div><p>Иногда что-то случалось, и в спектограмме я видел несколько таких импульсов, идущих друг за другом. Меня это наводит на мысль об ещё одном генераторе сигнала внутри plutosdr, но я пока не могу его найти. Он точно не должен повлиять на мой второй тест - замеры задержки в передаче сигнала.</p>
<h2 id="задержка-в-передаче-сигнала">Задержка в передаче сигнала</h2>
<p>Прежде, чем радоваться графикам, нужно понять откуда возникает задержка и как на неё можно повлиять.</p>
<ol>
<li>Задержка внутри кода. Непосредственно влиять на неё не получится. Разве, что купить более мощный процессор или писать код на ассемблере. sdr-modem и так по-максимуму использует возможности процессора, так, сэкономить здесь вряд ли получится.</li>
<li>Чем больше передаваемый фрейм, тем больше времени нужно на его передачу в эфир. Логично, чёрт побери. Для того чтобы убедиться, что фрейм получен правильно, нужно дождаться окончания приёма и посчитать контрольную сумму всего пакета. Например, для передачи 256 байт со скоростью 9600 бод с помощью 2FSK модуляции нужно: 256 байт * 8 бит / 9600 = 213мс. На практике 256 байт вполне могут стать 325 байт из-за HDLC фрейма, преамбулы и нескольких финальных нулевых байтов. А это уже 270мс.</li>
<li>Внутренние буфера при получении сигнала. Сигнал от приёмника идёт непрерывно и накапливается во внутренних буферах приложения. Чем больше буфер, тем меньше переключение контекста и больше задержка. Чем меньше буфер, тем чаще переключается контекст (увеличивается потребление CPU) и меньше задержка. В моём стенде ситуация ещё хуже, потому что получаемый сигнал проходит через 2 приложения: sdr-server и sdr-modem. И каждое приложение имеет свои внутренние буфера.</li>
</ol>
<p>Я провёл несколько измерений с различными размерами буферов и фреймов. Получились следующие результаты:</p>
<p><img src="/img/plutosdr-tx/7.png" alt=""></p>
<p>Синий график - это задержка в получении при размере внутренних буферов 131072 и сообщения в 256 байт. Красный график - размер буфера 65536 элементов. Жёлтый график - размер передаваемого сообщения 10 байт и буфера в 65536 элементов.</p>
<p>Видно, что размер буфера в 65536 максимально близко подбирается к теоретическому пределу - 213мс. Значения всего лишь в 4 раза выше теоретических ~900мс. Непонятно насколько это хорошо или плохо. У меня есть идея, которая заключается в том, что sdr-server даёт существенные задержки из-за дополнительного количества внутренних буферов. Наверное, следующим шагом будет получение сигнала напрямую из plutosdr. Интересно насколько изменятся значения в таком случае.</p>
<h2 id="некоторые-выводы">Некоторые выводы</h2>
<p>Наверное, основное моё негодование - это отсутствие внятной документации на сотни параметров внутри plutosdr. Это, конечно, восхитительно уметь тонко управлять передаваемым сигналом, но без чёткого понимания как эти параметры работают, толку мало. И даже наоборот - можно случайно что-нибудь наконфигурировать и получить не очень оптимальный результат.</p>
<p>Из планов на будущее:</p>
<ul>
<li>разобраться в паразитирующем сигнале при инициализации. UPD: <a href="https://ez.analog.com/linux-software-drivers/f/q-a/546583/spurious-signal-when-configuring-sampling_frequency/423279#423279">задал вопрос</a> на официальном сайте поддержки. Если вкратце, то ничего нельзя поделать.</li>
<li>сделать поддержку приёма сигнала с помощью plutosdr и померить задержку</li>
<li>зарелизить, наконец-то, sdr-modem</li>
</ul>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Оптимизация sincos функции</title>
      <link>https://dernasherbrezon.com/posts/sincos-tuning/</link>
      <pubDate>Tue, 25 May 2021 17:05:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/sincos-tuning/</guid>
      <description>Давненько я ничего не писал в свой блог и на это было несколько причин. Во-первых, я полностью погрузился в написание своего нового проекта - sdr-modem. Не сказать, что он простой, но он гармонично развивает идеи sdr-server и не содержит того, о чём хотелось бы написать. Во-вторых, ничего особенного не происходит.
Тем не менее хочется написать небольшую заметку о том, как я измерял производительность функции sincos, и что из этого получилось.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Оптимизация sincos функции</h1></header>
      		<div class='container entry-content'>
  <p>Давненько я ничего не писал в свой блог и на это было несколько причин. Во-первых, я полностью погрузился в написание своего нового проекта - <a href="https://github.com/dernasherbrezon/sdr-modem">sdr-modem</a>. Не сказать, что он простой, но он гармонично развивает идеи <a href="https://github.com/dernasherbrezon/sdr-server">sdr-server</a> и не содержит того, о чём хотелось бы написать. Во-вторых, ничего особенного не происходит.</p>
<p>Тем не менее хочется написать небольшую заметку о том, как я измерял производительность функции sincos, и что из этого получилось.</p>
<h2 id="sincos">sincos</h2>
<p>Вычисление синуса и косинуса - это достаточно дорогие операции. Именно поэтому их <a href="https://stackoverflow.com/questions/18662261/fastest-implementation-of-sine-cosine-and-square-root-in-c-doesnt-need-to-b">очень часто пытаются оптимизировать</a>. Однако, иногда нужно посчитать одновременно и синус и косинус. Например, при частотной модуляции сигнала для каждого значения сигнала нужно увеличивать фазу и считать для неё синус и косинус. Невероятное совпадение, но это как раз то, над чем я сейчас работаю. В таких случаях есть очень странное ощущение, что вычислив синус угла, можно чуть быстрее посчитать косинус. И, действительно, в библиотеке C есть отдельная функция для этого - <a href="https://linux.die.net/man/3/sincos">sincos</a>. Она позволяет вычислить одновременно синус и косинус угла.</p>
<p>Однако, к тому моменту как я нашёл эту функцию, я знал ещё как минимум о двух других реализациях - volk и приближённое вычисление в gnuradio. При таком разнообразии подходов глаза начинают разбегаться и нужно срочно измерять! Что я и сделал, написав небольшое приложение для каждой из реализаций.</p>
<h2 id="наивная-реализация">Наивная реализация</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;math.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e"></span>
<span style="color:#66d9ef">void</span> <span style="color:#a6e22e">calc_naive</span>(<span style="color:#66d9ef">float</span> <span style="color:#f92672">*</span>input, size_t len, <span style="color:#66d9ef">float</span> complex <span style="color:#f92672">*</span>output, size_t output_len) {
    <span style="color:#66d9ef">for</span> (size_t i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;</span> len; i<span style="color:#f92672">++</span>) {
        output[i] <span style="color:#f92672">=</span> cosf(input[i]) <span style="color:#f92672">+</span> I <span style="color:#f92672">*</span> sinf(input[i]);
    }
}
</code></pre></div><p>Ничего особенного, просто вычисление синуса и косинуса каждый раз. Здесь и далее все массивы заранее созданы и проинициализированы.</p>
<h2 id="стандартная-функция-sincos">Стандартная функция sincos</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;math.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e"></span>
<span style="color:#66d9ef">void</span> <span style="color:#a6e22e">calc_sincos</span>(<span style="color:#66d9ef">float</span> <span style="color:#f92672">*</span>input, size_t len, <span style="color:#66d9ef">float</span> complex <span style="color:#f92672">*</span>output, size_t output_len) {
    <span style="color:#66d9ef">float</span> real;
    <span style="color:#66d9ef">float</span> imag;
    <span style="color:#66d9ef">for</span> (size_t i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;</span> len; i<span style="color:#f92672">++</span>) {
        __sincosf(input[i], <span style="color:#f92672">&amp;</span>real, <span style="color:#f92672">&amp;</span>imag);
        output[i] <span style="color:#f92672">=</span> real <span style="color:#f92672">+</span> I <span style="color:#f92672">*</span> imag;
    }
}
</code></pre></div><p><code>__sincosf</code> берёт углы один за другим и последовательно рассчитывает значение. Результат кладётся в выходной массив комплексных чисел.</p>
<p>Когда я писал этот метод, то случайно навёл курсор на функцию почитать документацию и увидел интересное заявление:</p>
<p><img src="/img/sincos-tuning/1.png" alt=""></p>
<p>Оказывается в MacOS есть специальная библиотека для работы с SIMD инструкциями и она поддерживает sincos!</p>
<h2 id="sincos-из-библиотеки-accelerate">sincos из библиотеки Accelerate</h2>
<p>Accelerate - это Framework, если использовать терминологию Apple. Подключается он просто:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-cmake" data-lang="cmake">add_compile_options(<span style="color:#e6db74">&#34;-F/Library/Frameworks/&#34;</span>)<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>link_libraries(<span style="color:#e6db74">&#34;-F/Library/Frameworks/&#34;</span>)<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>find_library(<span style="color:#e6db74">LIB_ACCELERATE</span> <span style="color:#e6db74">accelerate</span>)<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>target_link_libraries(<span style="color:#e6db74">sdr_modemLib</span> <span style="color:#f92672">${</span>LIB_ACCELERATE<span style="color:#f92672">}</span>)<span style="color:#960050;background-color:#1e0010">
</span></code></pre></div><p>После этого его можно использовать:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;Accelerate/Accelerate.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e"></span>
<span style="color:#66d9ef">void</span> <span style="color:#a6e22e">calc_accelerate</span>(<span style="color:#66d9ef">float</span> <span style="color:#f92672">*</span>sin, <span style="color:#66d9ef">float</span> <span style="color:#f92672">*</span>cos, <span style="color:#66d9ef">float</span> <span style="color:#f92672">*</span>input, size_t len, <span style="color:#66d9ef">float</span> complex <span style="color:#f92672">*</span>output, size_t output_len) {
    vvsincosf(sin, cos, input, (<span style="color:#66d9ef">const</span> <span style="color:#66d9ef">int</span> <span style="color:#f92672">*</span>) <span style="color:#f92672">&amp;</span>len);
    <span style="color:#66d9ef">for</span> (size_t i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;</span> len; i<span style="color:#f92672">++</span>) {
        output[i] <span style="color:#f92672">=</span> cos[i] <span style="color:#f92672">+</span> I <span style="color:#f92672">*</span> sin[i];
    }
}
</code></pre></div><p>Эта функция возвращает отдельно массив синусов и массив косинусов, так что всё равно придётся выполнять de-interleaving, чтобы получить массив комплексных чисел.</p>
<h2 id="volk">volk</h2>
<p>В <a href="https://github.com/gnuradio/volk">volk</a> тоже есть функции для работы с синусом и косинусом. Однако, это две совершенно разные функции, которые работают независимо. Но это не беда:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;volk/volk.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e"></span>
<span style="color:#66d9ef">void</span> <span style="color:#a6e22e">calc_volk</span>(<span style="color:#66d9ef">float</span> <span style="color:#f92672">*</span>sin, <span style="color:#66d9ef">float</span> <span style="color:#f92672">*</span>cos, <span style="color:#66d9ef">float</span> <span style="color:#f92672">*</span>input, size_t len, <span style="color:#66d9ef">float</span> complex <span style="color:#f92672">*</span>output, size_t output_len) {
    volk_32f_sin_32f(sin, input, (<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span>) len);
    volk_32f_cos_32f(cos, input, (<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span>) len);
    <span style="color:#66d9ef">for</span> (size_t i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;</span> len; i<span style="color:#f92672">++</span>) {
        output[i] <span style="color:#f92672">=</span> cos[i] <span style="color:#f92672">+</span> I <span style="color:#f92672">*</span> sin[i];
    }
}
</code></pre></div><p>Вызываем сначала расчёт синусов, затем косинусов, а в конце de-interleaving.</p>
<h2 id="приближённое-вычисление-и-таблицы-поиска">Приближённое вычисление и таблицы поиска</h2>
<p>Этот метод активно используется в <a href="https://github.com/gnuradio/gnuradio/blob/1a0be2e6b54496a8136a64d86e372ab219c6559b/gnuradio-runtime/include/gnuradio/fxpt.h#L75">gnuradio</a>. Насколько я понял, они сначала конвертируют угол в целочисленное значение, а потом хитрым способом ищут в <a href="https://github.com/gnuradio/gnuradio/blob/1a0be2e6b54496a8136a64d86e372ab219c6559b/gnuradio-runtime/include/gnuradio/fxpt.h#L79">таблице поиска</a>. Код из gnuradio не так-то просто добавить в проект, поэтому я скопировал его как-есть.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">cals_gnuradio</span>(<span style="color:#66d9ef">float</span> <span style="color:#f92672">*</span>input, size_t len, <span style="color:#66d9ef">float</span> complex <span style="color:#f92672">*</span>output, size_t output_len) {
    <span style="color:#66d9ef">float</span> oi, oq;
    <span style="color:#66d9ef">for</span> (size_t i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;</span> len; i<span style="color:#f92672">++</span>) {
        <span style="color:#66d9ef">float</span> d_phase <span style="color:#f92672">=</span> fmod(input[i] <span style="color:#f92672">+</span> PI, <span style="color:#ae81ff">2.0f</span> <span style="color:#f92672">*</span> PI) <span style="color:#f92672">-</span> PI;
        int32_t angle <span style="color:#f92672">=</span> float_to_fixed(d_phase);
        gnuradio_sincos(angle, <span style="color:#f92672">&amp;</span>oq, <span style="color:#f92672">&amp;</span>oi);
        output[i] <span style="color:#f92672">=</span> oi <span style="color:#f92672">+</span> I <span style="color:#f92672">*</span> oq;
    }
}
</code></pre></div><h2 id="результаты">Результаты</h2>
<p>Результат выполнения программы для каждого из метода:</p>
<table>
	<thead>
		<tr>
			<th>Метод</th>
			<th>Время выполнения</th>
			<th>real part</th>
			<th>imag part</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td>Наивная реализация</td>
			<td>0.009063</td>
			<td>0.838675</td>
			<td>-0.544632</td>
		</tr>
		<tr>
			<td>Стандартная функция sincos</td>
			<td>0.025624</td>
			<td>0.838675</td>
			<td>-0.544632</td>
		</tr>
		<tr>
			<td>sincos из библиотеки Accelerate</td>
			<td>0.009075</td>
			<td>0.838675</td>
			<td>-0.544632</td>
		</tr>
		<tr>
			<td>volk</td>
			<td>0.007843</td>
			<td>0.838675</td>
			<td>-0.544632</td>
		</tr>
		<tr>
			<td>Приближённое вычисление и таблицы поиска</td>
			<td>0.050738</td>
			<td>0.838890</td>
			<td>-0.544300</td>
		</tr>
	</tbody>
</table>
<p>Второй столбец показывает время выполнения в попугаях на случайно большом количестве входящих данных. Третий и четвёртый столбцы - это значение комплексного числа из результата по случайному индексу. Я добавил его просто, чтобы убедиться в одинаковых результатах.</p>
<p>Как видно из времени выполнения, самый быстрый способ - это volk. Он почти в 3.2 раза быстрее стандартной библиотеки. И даже быстрее Accelerate.</p>
<p>Ещё один удивительный факт - это крайне медленный способ приближённого расчёта. Я бы ожидал, что он на порядок быстрее всех остальных, но на практике он в 7 раз медленнее самого быстрого способа! Я выполнил программу несколько раз и каждый раз получил примерно одинаковые результаты. Так что, это вряд ли связано с загрузкой системы.</p>
<p>Функция sincos значительно проигрывает наивной реализации. Я не знаю почему.</p>
<p>Несмотря на то, что Accelerate не самый быстрый способ расчёта sincos (примерно в 2.8 раз быстрее стандартной функции), я был приятно удивлён. Буквально за пару строчек кода я получил стандартную библиотеку, которая неплохо оптимизирована для MacOS. А если пойти на <a href="https://developer.apple.com/documentation/accelerate">официальный сайт</a>, то можно увидеть достаточно интересный список поддерживаемых функций. Помимо DSP, эта библиотека поддерживает работу с нейронными сетями, векторами, матрицами, линейной алгеброй. Зная, насколько Apple заморачивается с поддержкой нейронных сетей в своих процессорах, я представляю насколько круто иметь железо и библиотеку работающих в тандеме. Не удивительно, что софт в MacOS по ощущениям просто летает.</p>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Создание и поддержка своего собственного APT репозитория</title>
      <link>https://dernasherbrezon.com/posts/r2cloud-apt/</link>
      <pubDate>Sun, 07 Mar 2021 20:45:18 +0000</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/r2cloud-apt/</guid>
      <description>С появлением нового проекта - sdr-server, у меня стало слишком много приложений, которые нужно как-то устанавливать. И всё бы ничего, но каждое приложение в свою очередь требует разных системных библиотек. А эти системные библиотеки не всегда нужных версий. А если сюда добавить разные версии дистрибутивов и разные архитектуры процессоров, то начинается комбинаторный взрыв, и всё становится очень запутанным.
Для решения этой проблемы можно было бы сделать докер образа и на этом успокоится.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Создание и поддержка своего собственного APT репозитория</h1></header>
      		<div class='container entry-content'>
  <p>С появлением нового проекта - <a href="https://github.com/dernasherbrezon/sdr-server">sdr-server</a>, у меня стало слишком много приложений, которые нужно как-то устанавливать. И всё бы ничего, но каждое приложение в свою очередь требует разных системных библиотек. А эти системные библиотеки не всегда нужных версий. А если сюда добавить разные версии дистрибутивов и разные архитектуры процессоров, то начинается комбинаторный взрыв, и всё становится очень запутанным.</p>
<p>Для решения этой проблемы можно было бы сделать докер образа и на этом успокоится. Но, во-первых, я планирую запускать эти приложения под RaspberryPI, где ресурсов не так уж много. Во-вторых, большинство из них написано на Си для получения максимального ускорения. Городить поверх них докер - это значит делать шаг назад. Ну и в-третьих, докер усложнит и без того непростую конфигурацию.</p>
<p>Всё это привело меня к единственно правильному решению - созданию собственного APT репозитория.</p>
<p><img src="/img/r2cloud-apt/1.png" alt=""></p>
<h2 id="требования">Требования</h2>
<p>Изначально я создал APT репозиторий в S3 и закидывал туда пакеты без какой-либо структуры. Этот подход хорошо работает, если разрабатываешь платформенно-независимые приложения. <a href="https://github.com/dernasherbrezon/r2cloud">r2cloud</a> и <a href="https://github.com/dernasherbrezon/r2cloud-ui">r2cloud-ui</a> - как раз такие. Первому нужна только Java, а второй написан на javascript и компилируется в набор статичных .js файлов. Когда же понадобилось нечто большее, я решил подойти к решению проблемы системно и начал с описания требований.</p>
<ul>
<li>поддержка разных дистрибутивов. Мне нужно поддерживать Debian stretch, Debian buster, Ubuntu bionic и Ubuntu focal. Это две последние стабильные версии двух самых популярных дистрибутивов. Debian прежде всего нужен для RaspberryPI. Все RaspberryPi OS основаны на debian. А Ubuntu - это самый популярный дистрибутив как на сервере, так и среди Linux десктопов.</li>
<li>поддержка двух архитектур: armhf и amd64. В будущем планируется добавить arm64.</li>
<li>репозиторий должен быть самодостаточный. Это значит, что все зависимости должны устанавливаться либо из центрального репозитория, либо находится в r2cloud репозитории.</li>
</ul>
<h2 id="поддержка-разных-дистрибутивов">Поддержка разных дистрибутивов</h2>
<p>Самый, наверное, главный вопрос: &ldquo;а зачем вообще явно делать поддержку разных дистрибутивов&rdquo;? Ubuntu сделан на основе Debian, поэтому достаточно было бы поддерживать Debian разных версий.</p>
<p>Но чем больше я пытался ответить на этот вопрос, тем больше убеждался, что явно разделять дистрибутивы и их версии - это правильное решение.</p>
<h3 id="зависимости">Зависимости</h3>
<p>Самое очевидное преимущество разных версий дистрибутивов - возможность гибко управлять зависимостями. Например, есть такая библиотека <a href="https://github.com/libcheck/check">check</a>. Эта библиотека для создания юнит тестов на Си. Если ставить её через brew, то поставится версия 0.15.2:</p>
<p><img src="/img/r2cloud-apt/2.png" alt=""></p>
<p>И в версии 0.15.2 есть метод <code>ck_assert_ptr_nonnull</code>. Весьма удобный метод для того, чтобы проверять выделена ли память. Однако, при попытке собрать приложение в Ubuntu, будет возникать ошибка: метод <code>ck_assert_ptr_nonnull</code> не найден. А всё из-за того, что в Ubuntu bionic версия библиотеки 0.10.0. И там этого метода ещё нет.</p>
<p>Эту проблему можно решить несколькими способами:</p>
<ol>
<li>Не использовать метод <code>ck_assert_ptr_nonnull</code> и поддерживать минимальную версию check</li>
<li>Создать отдельную ветку для конкретного дистрибутива, в котором использовать новый метод</li>
<li>Использовать <code>#if CHECK_VERSION &gt;= 0.11</code> в исходном коде и превратить его в наслоение разных препроцессорных инструкций</li>
<li>Запаковать check нужной версии в собственный репозиторий и поставлять его вместе с приложением</li>
</ol>
<p>Понятное дело, для юнит-тестов 2, 3 и 4 - это перебор. И в моём случае я, скрепя сердцем, переписал юнит-тесты без использования <code>ck_assert_ptr_nonnull</code>. Но для других более важных библиотек, такой способ может и не подойти.</p>
<p>Например, библиотеку volk мне пришлось компилировать и загружать в свой репозиторий.</p>
<h3 id="компиляция">Компиляция</h3>
<p>Компиляция - это ещё один рассадник несовместимости версий и операционных систем. Если приложение скомпилировано более новой версией gcc, то оно вряд ли запустится на операционной системе, где стоит более старая версия.</p>
<p>На практике мне не удалось найти такие пакеты, которые бы запускались на одной версии дистрибутива и не запускались на другой. Но это лишь значит, что я видел недостаточное количество пакетов.</p>
<h2 id="дизайн-apt-репозитория">Дизайн APT репозитория</h2>
<p>Итак, с поддержкой разных версий дистрибутивов определились. Теперь настала очередь выяснить, а как, собственно, это можно сделать.</p>
<p>Для r2cloud APT репозитория я выбрал следующую схему:</p>
<ul>
<li>хостинг - S3</li>
<li>каждый дистрибутив имеет кодовое имя, которое делается подпапкой</li>
<li>каждая поддерживаемая архитектура - это подпапка в дистрибутиве</li>
<li>компонент всегда один - &ldquo;main&rdquo;</li>
</ul>
<p>Получилось нечто такое:</p>
<p><img src="/img/r2cloud-apt/3.png" alt=""></p>
<p>Тут важно заметить, что непосредственно бинарники могут быть переиспользованы между разными дистрибутивами. Они находятся в отдельной директории <code>pool</code> и их можно идентифицировать по имени, версии, компоненту и архитектуре. Вообще, это сделано специально, чтобы уменьшить размер директории <code>pool</code>. Ведь для того, чтобы перенести бинарник в более новые дистрибутивы, достаточно добавить его имя в файл Packages. Однако, это может быть проблемой, если нужно выпускать бинарник не совместимый с предыдущей версией ОС.</p>
<p>Чтобы решить эту проблему, Debian-сообщество рекомендует добавлять название дистрибутива в версию:</p>
<pre><code>0.6.5-1~stretch
</code></pre><p>Но это может сработать не для всех пакетов, а для тех, которые собираются с source format=quilt. Например, <a href="https://github.com/osmocom/rtl-sdr/blob/master/debian/source/format">rtl-sdr</a> содержит source format=native, так что мне пришлось делать <a href="https://github.com/dernasherbrezon/rtl-sdr">собственный форк</a>.</p>
<h2 id="сборка-пакетов">Сборка пакетов</h2>
<p>Из-за того, что появилось множество различных версий дистрибутивов, сборка сильно усложнилась. Единственным правильным способом собрать пакет под определённую версию ОС будет сборка именно в этой версии ОС.</p>
<p>Чтобы хоть как-то облегчить процесс, я накупил несколько флеш карт и установил на каждую из них свою версию дистрибутива:</p>
<p><img src="/img/r2cloud-apt/4.png" alt=""></p>
<p>Как только мне нужно собрать пакет под конкретную версию ОС, я вставляю нужную флеш карту в RaspberryPI и собираю пакет.</p>
<p>Для сборки под Ubuntu я решил пойти немного другим путём - использовать виртуалки. Они достаточно дешёвые и не нужно держать дома ещё одну железку. Достаточно создать виртуалку с поминутной оплатой и запустить там билд.</p>
<h2 id="armhf-vs-arm64">armhf vs arm64</h2>
<p>Больше всего проблем я получил, собирая volk. Эта библиотека использует ассемблерный код и интристики для того, чтобы ускорять выполнение разных DSP преобразований. Я уже <a href="https://dernasherbrezon.com/posts/simd-optimization/">писал недавно</a> о том, как мне удалось её ускорить. Так вот, сборка под RaspberryPI подарила мне много новых ощущений.</p>
<p>Во-первых, в Debian есть две разные архитектуры для 32битного ARM и 64битного ARM. Они называются соответственно armhf и arm64. Собранные пакеты для armhf находятся в разделе binary-armhf, для arm64 - в binary-arm64. Пока всё просто.</p>
<p>Во-вторых, в ARM есть такое расширение - NEON. Это расширение добавляет SIMD операции, с помощью которых можно в несколько раз ускорить приложение. И volk очень активно их использует. Но они не включены по умолчанию в RaspberryPI OS! Поэтому компиляция volk просто игнорирует NEON и производит не самый оптимальный код. Почему разработчики RaspberryPI по-умолчанию не включают NEON для меня загадка. Ведь они точно знают какой процессор стоит у них на плате. И все процессоры в RaspberryPI имеют это расширение.</p>
<p>В-третьих, RaspberryPI OS существует только для armhf. Именно поэтому, запуская компиляцию на RaspberryPI 4, где стоит процессор с arm64, я получаю пакет для armhf. Однако, volk, при компиляции игнорирует <code>dpkg --print-architecture</code> и определяет процессор как arm64! Он производит код для arm64, тот помещается в пакет для armhf, и RaspberryPI 3 не может его запустить. Бардак.</p>
<p>На поиск и решение всех этих особенностей у меня ушло несколько недель.</p>
<h2 id="подключение-apt-репозитория">Подключение APT репозитория</h2>
<p>Но зато подключение репозитория происходит в три строчки:</p>
<pre><code>sudo apt-get install dirmngr lsb-release
sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys A5A70917
sudo bash -c &quot;echo \&quot;deb http://s3.amazonaws.com/r2cloud $(lsb_release --codename --short) main\&quot; &gt; /etc/apt/sources.list.d/r2cloud.list&quot;
</code></pre><p>Самая важная часть - это <code>$(lsb_release --codename --short)</code>. Я просто беру кодовое имя текущей операционной системы и подключаю соответствующую систему из r2cloud репозитория.</p>
<h2 id="apt-html">apt-html</h2>
<p>Количество поддерживаемых дистрибутивов и пакетов стало таким большим, что мне пришлось написать специальную программу - <a href="https://github.com/dernasherbrezon/apt-html">apt-html</a>. Это простая консольная утилита, которая генерирует красивую html страницу со списком пакетов в APT репозитории.</p>
<p>Запускается достаточно просто:</p>
<pre><code>java -jar ./target/apt-html.jar --url http://s3.amazonaws.com/r2cloud --include-arch armhf,amd64 --include-component main --include-codename stretch,bionic,buster,focal --include-package sdr-server,libcpu-features-dev,libvolk2-bin,libvolk2.4-dbgsym,libvolk2.4,librtlsdr0,librtlsdr-dev,librtlsdr0-dbgsym,libiio,plutosdr,r2cloud-jdk,r2cloud-ui,rtl-sdr,wxtoimg,r2cloud --output-dir src/main/resources/
</code></pre><p>На вход подаётся URL APT репозитория, список архитектур для включения в отчёт, список пакетов, список дистрибутивов, а на выходе получается вот такая <a href="https://r2server.ru/apt.html">симпатичная страничка</a>:</p>
<p><img src="/img/r2cloud-apt/1.png" alt=""></p>
<h2 id="выводы">Выводы</h2>
<p>Всё это упражнение в создании APT репозитория заняло у меня несколько недель. И это при том, что последние несколько лет я активно пишу всевозможные инструменты для управления apt репозиториями. Я не думаю, что разработчики Debian сознательно сделали систему такой сложной и запутанной. Скорее всего, со временем она стала обрастать множеством фич и опций, что превратило её в такую, какая она сейчас есть. Несмотря на это, я планирую и дальше развивать r2cloud APT репозиторий и добавлять туда разные полезные пакеты. Ведь это единственный простой способ для конечного пользователя взять и установить программу.</p>
<p>Пара идей на будущее:</p>
<ul>
<li>добавить поддержку arm64</li>
<li>создать баг или pull request в RaspberryPI OS, чтобы включить опцию GCC &ldquo;-mfpu=neon&rdquo; по-умолчанию</li>
<li>возможно, создать rack из нескольких RaspberryPI и похожих плат на Intel, чтобы сделать небольшую билд ферму</li>
</ul>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Динамические библиотеки, RPATH и Conan</title>
      <link>https://dernasherbrezon.com/posts/dynamic-libraries-rpath/</link>
      <pubDate>Thu, 18 Feb 2021 23:11:18 +0000</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/dynamic-libraries-rpath/</guid>
      <description>Эта статья - скорее конспект того, что я узнал за последнюю неделю о динамических библиотеках, RPATH и Conan.
Введение Никто в здравом уме не начнёт изучать то, как линкуются библиотеки в MacOS. Поэтому для начала я попытаюсь обрисовать проблему, которую пытался решить.
Итак, на заре времён, когда жёсткие диски компьютеров были маленькие, память компьютеров была маленькая, люди придумали переиспользование библиотек. Как всё это работает? Допустим у нас есть 2 приложения:</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Динамические библиотеки, RPATH и Conan</h1></header>
      		<div class='container entry-content'>
  <p>Эта статья - скорее конспект того, что я узнал за последнюю неделю о динамических библиотеках, RPATH и Conan.</p>
<h2 id="введение">Введение</h2>
<p>Никто в здравом уме не начнёт изучать то, как линкуются библиотеки в MacOS. Поэтому для начала я попытаюсь обрисовать проблему, которую пытался решить.</p>
<p>Итак, на заре времён, когда жёсткие диски компьютеров были маленькие, память компьютеров была маленькая, люди придумали переиспользование библиотек. Как всё это работает? Допустим у нас есть 2 приложения:</p>
<ul>
<li>калькулятор, зависящий от библиотек:
<ul>
<li>math</li>
<li>ncurses</li>
</ul>
</li>
<li>планировщик задач, зависящий от библиотек:
<ul>
<li>pthread</li>
<li>ncurses</li>
</ul>
</li>
</ul>
<p>При запуске, этих двух приложений, операционная система будет загружать необходимые библиотеки в память. Но так, как библиотека ncurses уже один раз будет загружена, то операционная система не будет загружать её второй раз. Вместо этого приложение &ldquo;планировщик задач&rdquo; получит ссылку на память уже загруженной библиотеки. Это достаточно безопасно, потому что библиотека не может поменяться (я намеренно упрощаю ситуацию с глобальными переменными и thread-safe гарантиями). В итоге логически мы загрузили две библиотеки, а физически только одну (Resident memory vs Shared memory). Чем больше приложений будет использовать одни и те же библиотеки, тем быстрее будет старт приложений и меньше потребление памяти.</p>
<p>Помимо экономии памяти, такое переиспользование улучшало поддерживаемость операционной системы. Допустим, в одной из библиотек (ncurses) обнаружена уязвимость. Для того чтобы её исправить, достаточно обновить библиотеку в одном месте. Все приложения, которые используют эту библиотеку автоматически получат обновление безопасности. Это особенно важно, если некоторые приложения (например, &ldquo;планировщик задач&rdquo;) редко обновляются или вообще заброшены своими создателями.</p>
<p>Альтернативой этому подходу являются толстые дистрибутивы. Я уже писал о плюсах <a href="https://dernasherbrezon.com/posts/thin-and-fat-distributives/">толстых и тонких дистрибутивов</a> для Java. В целом для C/C++ аргументы значительно совпадают. Однако, исторически, приложения операционных систем являются тонкими дистрибутивами. <a href="https://fedoraproject.org/wiki/Bundled_Libraries?rd=Packaging:Bundled_Libraries">Многие ОС</a> до сих пор <a href="https://www.debian.org/doc/debian-policy/ch-source.html#s-embeddedfiles">требуют поставлять приложения</a> в виде тонких дистрибутивов.</p>
<p>Большинство аргументов за и против тонких дистрибутивов имели смысл лет 20 назад. Сейчас же, когда размер памяти и диска не так важны, появляются новые аргументы против:</p>
<ul>
<li>количество библиотек и приложений стало настолько много, что мейнтейнеры популярных систем уже не в состоянии поставлять пакеты с последними версиями библиотек. Зачастую они фиксируют стабильную версию и выпускают небольшие обновления безопасности.</li>
<li>опять же, из-за количества библиотек и зависимостей между ними, стало сложнее найти тот список версий, который подходил бы большинству приложений. Если калькулятор будет использовать ncurses версии 1.0, а &ldquo;планировщик задач&rdquo; ncurses версии 2.0, то непонятно какую версию ncurses нужно ставить. apt, rpm, yum позволяют ставить только одну версию библиотеки. Нельзя поставить одновременно версию 1.0 и 2.0. Если эти версии не совместимы между собой, то придётся выбирать какое приложение включить в состав операционной системы.</li>
<li>нужно постоянно обновлять версию всей операционной системы. Ведь новые версии библиотек уже не появятся. А писать код, половина которого обвешана <code>#if NCURSES = 1.0 ... #else if NCURSES = 2.0 ... #endif</code> никому не хочется.</li>
</ul>
<p>Всё это пронеслось у меня в голове за считанные секунды, когда я думал о том, как исправить &ldquo;<a href="https://github.com/dernasherbrezon/sdr-server/issues/3">Compiling issue - rtlsdr_set_bias_tee</a>&rdquo; в sdr-server.</p>
<h2 id="conanhttpsconanio"><a href="https://conan.io">Conan</a></h2>
<p>Взвесив все за и против, я решил пойти путём толстых дистрибутивов. Для этого я решил разобраться в модной технологии, которая у всех на слуху - <a href="https://conan.io">Conan</a> от компании jfrog.</p>
<p><img src="/img/dynamic-libraries-rpath/conan-install_flow.png" alt="conan-install_flow"></p>
<p>Основная идея проекта заключается в том, что собранные библиотеки уже лежат на центральном сервере. И для того, чтобы их использовать, достаточно подключить в проект. А Conan сам их скачает и правильно подставит пути. Делается это с помощью небольшого конфига:</p>
<pre><code>[requires]
rtlsdr/0.6.4
volk/2.4.1

[build_requires]
check/0.15.2@r2cloud/stable

[generators]
cmake
</code></pre><p>После этого подключить в CMakeLists.txt Conan:</p>
<pre><code>include(${CMAKE_BINARY_DIR}/conanbuildinfo.cmake)
conan_basic_setup()
</code></pre><p>А потом в папке <code>build</code> вызвать команду <code>install</code>:</p>
<pre><code>#: conan install ..
</code></pre><p>Эта команда скачает зависимости, положит их в локальный репозиторий и сгенерирует cmake конфиг в котором прописаны все зависимые библиотеки. После этого остаётся только подключить эти библиотеки к исполняемому файлу:</p>
<pre><code>target_link_libraries(sdr_server ${CONAN_LIBS})
</code></pre><p>И собрать проект:</p>
<pre><code>cmake ..
</code></pre><p>Это было всё в теории. На практике всё совсем по-другому.</p>
<h2 id="практика">Практика</h2>
<p>На практике библиотек в <a href="https://conan.io/center/">conan-center</a> очень мало. Да и те, что есть почему-то <a href="https://github.com/conan-io/conan-center-index/pull/4582">неправильно собраны</a>. Я, в общем-то, был готов к этому, поэтому собрался с мыслями и начал разбираться во всех тонкостях линковки библиотек, их дистрибуции и то, как это реализовано в Conan.</p>
<p>Итак, для того, чтобы понять как правильно собрать библиотеку, необходимо разобраться как она линкуется с программой. Для этого нужно сделать пару шагов назад.</p>
<p>В cmake есть два совершенно разных понятия: build и install. Я даже картинку нарисовал, чтобы ешё раз закрепить это важное знание:</p>
<p><img src="/img/dynamic-libraries-rpath/build-install.png" alt="cmake build vs install"></p>
<p>Во время фазы &ldquo;build&rdquo; приложение компилируется и из него собираются артефакты. Во время фазы &ldquo;install&rdquo; эти артефакты копируются в правильное место внутри операционной системы. Тут есть очень важная вещь: разделение на две фазы достаточно условное. Это не maven, где есть чёткие правила когда и что должно выполняться. В большинстве случаев, папка build после сборки представляет собой помойку разных файлов разбросанных по папкам. И некоторые библиотеки <a href="https://github.com/gnuradio/volk/blob/master/CMakeLists.txt#L283">приводят в порядок</a> публичные header файлы и библиотеки только во время фазы &ldquo;install&rdquo;. Несмотря на такой беспорядок во время фазы &ldquo;build&rdquo;, любой разработчик ожидает, что приложение можно запустить. Это очень важный момент, который нужно понимать, чтобы разобраться в правильном подключении динамических библиотек.</p>
<p>Далее я постараюсь описать, как Conan встраивает зависимости в разные фазы.</p>
<h3 id="компиляция">Компиляция</h3>
<p>Самый простой шаг. Conan использует пути из локального кэша и передаёт их компилятору:</p>
<pre><code>[ 37%] Building C object CMakeFiles/perf_xlating.dir/test/perf_xlating.c.o
/Library/Developer/CommandLineTools/usr/bin/cc \
 -I/Users/dernasherbrezon/.conan/data/check/0.15.2/r2cloud/stable/package/6a83d7f783e7ee89a83cf2fe72b5f5f67538e2a6/include \
 -I/Users/dernasherbrezon/.conan/data/rtlsdr/0.6.4/_/_/package/6a83d7f783e7ee89a83cf2fe72b5f5f67538e2a6/include \
 -I/Users/dernasherbrezon/.conan/data/volk/2.4.1/_/_/package/6a83d7f783e7ee89a83cf2fe72b5f5f67538e2a6/include \
 -I/usr/local/include -std=c99 -O3 -DNDEBUG  -isysroot /Library/Developer/CommandLineTools/SDKs/MacOSX11.0.sdk -std=gnu99 -o CMakeFiles/perf_xlating.dir/test/perf_xlating.c.o -c /Users/dernasherbrezon/git/sdr-server/test/perf_xlating.c
</code></pre><p>В данном случае кэш находится в <code>/Users/dernasherbrezon/.conan/data/</code> и используются библиотеки <code>rtlsdr, volk &amp; check</code>.</p>
<h3 id="линковка">Линковка</h3>
<p>Здесь аналогично: пути из локального кэша используются при линковке.</p>
<pre><code>[ 40%] Linking C executable bin/perf_xlating
/usr/local/Cellar/cmake/3.19.4/bin/cmake -E cmake_link_script CMakeFiles/perf_xlating.dir/link.txt --verbose=1
/Library/Developer/CommandLineTools/usr/bin/cc -std=c99 -O3 -DNDEBUG  -isysroot /Library/Developer/CommandLineTools/SDKs/MacOSX11.0.sdk -Wl,-search_paths_first -Wl,-headerpad_max_install_names CMakeFiles/perf_xlating.dir/test/perf_xlating.c.o -o bin/perf_xlating  \
 -L/Users/dernasherbrezon/.conan/data/check/0.15.2/r2cloud/stable/package/6a83d7f783e7ee89a83cf2fe72b5f5f67538e2a6/lib \
 -L/Users/dernasherbrezon/.conan/data/rtlsdr/0.6.4/_/_/package/6a83d7f783e7ee89a83cf2fe72b5f5f67538e2a6/lib \
 -L/Users/dernasherbrezon/.conan/data/volk/2.4.1/_/_/package/6a83d7f783e7ee89a83cf2fe72b5f5f67538e2a6/lib \
 lib/libsdr_serverLib.a \
 -lcheck -lrtlsdr -lvolk /Library/Developer/CommandLineTools/SDKs/MacOSX11.0.sdk/usr/lib/libz.tbd /usr/local/lib/libconfig.dylib -lpthread -lm 
</code></pre><h3 id="запуск-после-build">Запуск после build</h3>
<p>Приложение запустится без проблем, но здесь ожидает сюрприз: абсолютные пути к зависимым библиотекам. При линковке пути до библиотек прописываются в исполняемый файл.</p>
<pre><code>otool -l bin/perf_xlating|grep -B 2 volk
          cmd LC_LOAD_DYLIB
      cmdsize 152
         name /Users/dernasherbrezon/.conan/data/volk/2.4.1/_/_/package/6a83d7f783e7ee89a83cf2fe72b5f5f67538e2a6/lib/libvolk.2.4.dylib (offset 24)
</code></pre><p>Такие программы просто не будут работать на другом компьютере из-за абсолютных путей.</p>
<h3 id="запуск-после-install">Запуск после install</h3>
<p>Приложение просто не запустится. Для того чтобы оно запустилось, нужно положить все зависимые библиотеки рядом с бинарником. В Conan это делается просто. Достаточно дописать в файл conanfile.txt следующее:</p>
<pre><code>[imports]
bin, *.dll -&gt; ./bin 
lib, *.dylib* -&gt; ./lib
lib, *.so* -&gt; ./lib
</code></pre><p>Эта секция будет выполняться во время команды <code>conan import ..</code> и скопирует все библиотеки из локального кэша в директорию приложения. Например, <code>/Users/dernasherbrezon/.conan/data/volk/2.4.1/_/_/package/6a83d7f783e7ee89a83cf2fe72b5f5f67538e2a6/lib/libvolk.2.4.dylib</code> -&gt; <code>sdr-server/build/lib/libvolk.2.4.dylib</code>.</p>
<p>Следующим шагом необходимо поменять абсолютные пути на относительные внутри исполняемого файла. И вот тут как раз появляется такая вещь как RPATH. Это специальная секция в исполняемом файле, которая содержит директории, в которой нужно искать динамические библиотеки. В эту секцию можно положить значение со специальной переменной @executable_path, чтобы линковщик начал искать библиотеки относительно исполняемого файла. В итоге алгоритм будет такой:</p>
<ol>
<li>Загрузить исполняемый файл</li>
<li>Для каждого имени библиотеки, взять его путь. Если он содержит ключевое слово @rpath, то</li>
<li>Найти секцию RPATH в исполняемом файле. Если она есть, то</li>
<li>Проверить значение секции, если оно содержит @executable_path, то подставить текущий путь до бинарника</li>
<li>В полученном пути поискать библиотеку.</li>
</ol>
<p>В MacOS, правда, всё чуть запутаннее. Библиотека содержит внутри себя путь, где она находится:</p>
<pre><code>otool -l /Users/dernasherbrezon/.conan/data/volk/2.4.1/_/_/package/6a83d7f783e7ee89a83cf2fe72b5f5f67538e2a6/lib/libvolk.2.4.dylib|grep -A 2 LC_ID_DYLIB
          cmd LC_ID_DYLIB
      cmdsize 152
         name /Users/dernasherbrezon/.conan/data/volk/2.4.1/_/_/package/6a83d7f783e7ee89a83cf2fe72b5f5f67538e2a6/lib/libvolk.2.4.dylib (offset 24)
</code></pre><p>Это выглядит очень странно. Видимо, при линковке этот путь копируется из библиотеки в исполняемый файл. Понятное дело, в таких библиотеках тоже нужно заменить абсолютные пути на относительные. Это можно сделать специальной программой:</p>
<pre><code>install_name_tool -id @rpath/libvolk.2.4.dylib /Users/dernasherbrezon/.conan/data/volk/2.4.1/_/_/package/6a83d7f783e7ee89a83cf2fe72b5f5f67538e2a6/lib/libvolk.2.4.dylib
</code></pre><p>Теперь путь содержит специальную метку @rpath:</p>
<pre><code>otool -l /Users/dernasherbrezon/.conan/data/volk/2.4.1/_/_/package/6a83d7f783e7ee89a83cf2fe72b5f5f67538e2a6/lib/libvolk.2.4.dylib|grep -A 2 LC_ID_DYLIB
          cmd LC_ID_DYLIB
      cmdsize 56
         name @rpath/libvolk.2.4.dylib (offset 24)
</code></pre><p>Эта метка будет подставляться из RPATH исполняемого файла. Теперь зависимости выглядят следующим образом:</p>
<pre><code>otool -L bin/perf_xlating 
bin/perf_xlating:
	@rpath/libcheck.0.dylib (compatibility version 0.0.0, current version 0.15.2)
	@rpath/librtlsdr.0.dylib (compatibility version 0.0.0, current version 0.6.4)
	@rpath/libvolk.2.4.dylib (compatibility version 2.4.0, current version 0.0.0)
</code></pre><p>Последним шагом нужно задать секцию RPATH, чтобы начать использовать относительные пути к библиотекам.</p>
<pre><code>install_name_tool -add_rpath @executable_path/../lib bin/perf_xlating
</code></pre><p>После всех этих манипуляций можно проверить результат. Так как поиск библиотек происходит в рантайме, то для того, чтобы узнать получившиеся пути, нужно запустить программу:</p>
<pre><code>DYLD_PRINT_LIBRARIES=YES bin/perf_xlating 
dyld: loaded: &lt;7AB49406-C965-3CD7-99E5-398BC69A6567&gt; /&lt;edited&gt;/sdr-server/build/bin/perf_xlating
dyld: loaded: &lt;26F34288-9251-3468-9ED9-10A595F04DED&gt; /&lt;edited&gt;/sdr-server/build/bin/../lib/libcheck.0.dylib
dyld: loaded: &lt;C8BA4B0A-EE3A-3322-9B14-1C68CFCF977B&gt; /&lt;edited&gt;/sdr-server/build/bin/../lib/librtlsdr.0.dylib
dyld: loaded: &lt;24DC8413-C299-3CD5-ADDD-5785C39B6084&gt; /&lt;edited&gt;/sdr-server/build/bin/../lib/libvolk.2.4.dylib
...
</code></pre><p>Идеально.</p>
<p>Для Linux шаги примерно такие же, только проще. Не нужно прописывать пути внутри самих библиотек.</p>
<p>Пара слов о cmake. Программу <code>install_name_tool</code> можно заменить командами cmake. К сожалению, в cmake существует десяток различных параметров, которые неявно влияют на результат.</p>
<pre><code>CMAKE_INSTALL_RPATH
CMAKE_BUILD_WITH_INSTALL_RPATH
CMAKE_INSTALL_RPATH_USE_LINK_PATH
CMAKE_BUILD_RPATH
CMAKE_SKIP_BUILD_RPATH
INSTALL_RPATH
BUILD_RPATH
</code></pre><p>У меня не получилось заставить cmake проставлять корректный RPATH в исполняемый файл. Возможно, Conan <a href="https://docs.conan.io/en/latest/howtos/manage_shared_libraries/rpaths.html">неявно перезаписывает</a> определённые переменные, тем самым ломая алгоритм.</p>
<h2 id="заключение">Заключение</h2>
<p>Потратив неделю на изучение, создание pull request в Conan, volk и libcheck, я в итоге решил сделать всё по-старинке. Идея толстых дистрибутивов хороша, но инфраструктура пока не готова к этому. Будет ли когда-нибудь готова инфраструктура для С/С++ проектов с её cmake, make, pkgconf, autotools, conan - большой вопрос.</p>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Оптимизация SIMD кода</title>
      <link>https://dernasherbrezon.com/posts/simd-optimization/</link>
      <pubDate>Fri, 12 Feb 2021 22:30:18 +0000</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/simd-optimization/</guid>
      <description>Остапа понесло.
&amp;ldquo;12 стульев&amp;rdquo;
 Почувствовав прилив сил и некоторую уверенность после оптимизации программ на Си, я решил погрузиться ещё глубже. И поводом для этого стало странное поведение функции volk_8i_s32f_convert_32f под RaspberryPI.
В предыдущей статье я смог с помощью этой функции существенно ускорить работу своей программы sdr-server. На скриншоте ниже видно, что конкретная реализация этой функции под MacOS была volk_8i_s32f_convert_32f_u_sse4_1.
Это значит, что все метод реализован с помощью инструкций и регистров SSE4.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Оптимизация SIMD кода</h1></header>
      		<div class='container entry-content'>
  <blockquote>
<p>Остапа понесло.</p>
<p>&ldquo;12 стульев&rdquo;</p>
</blockquote>
<p>Почувствовав прилив сил и некоторую уверенность после оптимизации программ на Си, я решил погрузиться ещё глубже. И поводом для этого стало странное поведение функции <code>volk_8i_s32f_convert_32f</code> под RaspberryPI.</p>
<p><a href="https://dernasherbrezon.com/posts/tune-c-application/">В предыдущей статье</a> я смог с помощью этой функции существенно ускорить работу своей программы <a href="https://github.com/dernasherbrezon/sdr-server">sdr-server</a>. На скриншоте ниже видно, что конкретная реализация этой функции под MacOS была <code>volk_8i_s32f_convert_32f_u_sse4_1</code>.</p>
<p><img src="/img/tune-c-application/6.png" alt=""></p>
<p>Это значит, что все метод реализован с помощью инструкций и регистров <a href="https://ru.wikipedia.org/wiki/SSE4">SSE4</a>. Однако, запуская этот же код на RaspberryPI, я не заметил существенной разницы по сравнению с обычным циклом.</p>
<pre><code>#: volk_profile -R volk_8i_s32f_convert_32f -n

RUN_VOLK_TESTS: volk_8i_s32f_convert_32f(131071,1987)
generic completed in 446.774 ms
neon completed in 434.753 ms
a_generic completed in 416.605 ms
Best aligned arch: a_generic
Best unaligned arch: neon
Warning: this was a dry-run. Config not generated
</code></pre><p>Разница между <code>generic</code> реализаций и специальной реализацией под ARM процессор (<code>neon</code>) несущественна. Это навело меня на мысли. Почему расширенные регистры в Intel работают быстрее, чем похожие регистры в ARM? Я не смог заглянуть внутрь реализации обоих процессоров, чтобы сравнить. Зато я решил открыть <a href="">исходный код Volk</a> и почитать.</p>
<h2 id="интристики">Интристики</h2>
<p>Первый же метод в функции пришлось гуглить. Оказывается код написан с использованием <a href="https://developer.arm.com/architectures/instruction-sets/simd-isas/neon/intrinsics?search=vld1q_s8">интристиков</a>. Поэтому прежде, чем читать код, мне пришлось разобраться, что же это такое.</p>
<p>На самом деле, всё достаточно просто. Интристики - это некоторый промежуточный слой между ассемблером и языком Си. Они оборачивают инструкции ассемблера в функции на Си, чтобы можно было удобнее их читать. Иногда они могут подготавливать регистры ассемблера для вызова операции. Можно написать код на ассемблере и подключить его в программу на Си, но удобнее написать с помощью интристиков. А компилятор уже преобразует их в ассемблерные инструкции.</p>
<p>Для примера можно взять функцию <code>vld1q_s8</code>.</p>
<p><img src="/img/simd-optimization/1.png" alt=""></p>
<p>Эта функция загружает в регистр данные из памяти:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">int8_t <span style="color:#f92672">*</span>inputVectorPtr;
int8x16_t inputVal <span style="color:#f92672">=</span> vld1q_s8(inputVectorPtr);
</code></pre></div><p>После этого можно выполнять необходимые SIMD инструкции над этими данными. При этом компилятор сам выбирает в какой именно регистр будут загружаться данные. Ассемблерный код выглядел бы так:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-asm" data-lang="asm"><span style="color:#a6e22e">VLD1.16</span> <span style="color:#960050;background-color:#1e0010">{</span><span style="color:#66d9ef">d0</span>,<span style="color:#66d9ef">d1</span><span style="color:#960050;background-color:#1e0010">}</span>, [<span style="color:#66d9ef">r0</span>]
</code></pre></div><h2 id="оптимизация">Оптимизация</h2>
<p>Итак, теперь более-менее понятно, что такое интристики. Пришло время расчехлить теоретические знания, полученные более 15 лет назад, и попытаться разобраться, что происходит в методе.</p>
<p>А там почему-то используются структуры размерности 2 (<code>int8x8x2_t</code>) вместо обычных векторов. Мне показалось это странным.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">int8x8x2_t inputVal;
float32x4x2_t outputFloat;
int16x8_t tmp;

<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> number <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
<span style="color:#66d9ef">const</span> <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> sixteenthPoints <span style="color:#f92672">=</span> num_points <span style="color:#f92672">/</span> <span style="color:#ae81ff">16</span>;
<span style="color:#66d9ef">for</span> (; number <span style="color:#f92672">&lt;</span> sixteenthPoints; number<span style="color:#f92672">++</span>) {
    __VOLK_PREFETCH(inputVectorPtr <span style="color:#f92672">+</span> <span style="color:#ae81ff">16</span>);

    inputVal <span style="color:#f92672">=</span> vld2_s8(inputVectorPtr);
    inputVal <span style="color:#f92672">=</span> vzip_s8(inputVal.val[<span style="color:#ae81ff">0</span>], inputVal.val[<span style="color:#ae81ff">1</span>]);
    inputVectorPtr <span style="color:#f92672">+=</span> <span style="color:#ae81ff">16</span>;
...
</code></pre></div><p>Оригинальный код выглядит очень громоздким и профессионально написанным. Я же решил попробовать написать свой первый код с помощью интристиков и не слишком рассчитывал улучшить производительность. Вместо использования структур, я написал код с использованием обычных векторов <code>int8x16_t</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">int8x16_t inputVal;
int16x8_t lower;
int16x8_t higher;
float32x4_t outputFloat;

<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> number <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
<span style="color:#66d9ef">const</span> <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> sixteenthPoints <span style="color:#f92672">=</span> num_points <span style="color:#f92672">/</span> <span style="color:#ae81ff">16</span>;
<span style="color:#66d9ef">for</span> (; number <span style="color:#f92672">&lt;</span> sixteenthPoints; number<span style="color:#f92672">++</span>) {
    inputVal <span style="color:#f92672">=</span> vld1q_s8(inputVectorPtr);
    inputVectorPtr <span style="color:#f92672">+=</span> <span style="color:#ae81ff">16</span>;
...
</code></pre></div><p><a href="https://github.com/dernasherbrezon/volk/blob/volk_8i_s32f_convert_32f/kernels/volk/volk_8i_s32f_convert_32f.h#L299">Получилось значительно</a> прямее и проще. Однако, не факт, что быстрее. Единственным способом проверить - это запустить код.</p>
<pre><code>#: volk_profile -R volk_8i_s32f_convert_32f -n

RUN_VOLK_TESTS: volk_8i_s32f_convert_32f(131071,1987)
generic completed in 401.395 ms
neon completed in 324.097 ms
a_generic completed in 377.772 ms
Best aligned arch: neon
Best unaligned arch: neon
Warning: this was a dry-run. Config not generated
</code></pre><p>Какого же было моё удивление, когда я увидел 20% прирост производительности! Я перепроверил код ещё несколько раз, и всякий раз моя реализация оказывалась быстрее.</p>
<p><img src="/img/simd-optimization/2.png" alt=""></p>
<p>У меня нет достаточно знаний, чтобы точно сказать, почему мой код оказался быстрее. Тем не менее я выдвинул несколько теорий:</p>
<ul>
<li>gcc не смог оптимизировать слишком сложный код в оригинальном методе</li>
<li>оригинальный код работал с N-мерными структурами, которые не подходят для таких простых операций</li>
<li>оригинальный код был написан и оттестирован на armv8 (arm64), а не armv7 (RaspberryPI 3+)</li>
</ul>
<p>В любом случае я создал <a href="https://github.com/gnuradio/volk/pull/446">pull request</a> в оригинальный репозиторий и отправил его на ревью.</p>
<h2 id="результаты">Результаты</h2>
<p>Пожинать плоды моих усилий придётся нескоро. Для начала мой pull request должен быть проверен. Потом он должен попасть в master, и только потом, через какое-то время, он попадёт в релизную версию. Но вместо того, чтобы сидеть и ждать, я готов исследовать новые горизонты:</p>
<ul>
<li>попробовать сравнить <a href="https://www.libvolk.org">libvolk</a> и <a href="https://ru.wikipedia.org/wiki/OpenMAX">openmax</a>. Возможно, в openmax уже реализован этот метод.</li>
<li>попробовать собрать свою версию libvolk и подключить её в проект с помощью <a href="https://conan.io">conan.io</a>. Тогда не придётся ждать официального релиза.</li>
</ul>
<p>В любом случае sdr-server есть куда улучшать.</p>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Оптимизация производительности приложения на Си</title>
      <link>https://dernasherbrezon.com/posts/tune-c-application/</link>
      <pubDate>Sun, 07 Feb 2021 13:20:17 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/tune-c-application/</guid>
      <description>Введение По следам разработки моего нового проекта sdr-server я решил написать очередную статью. И опять про производительность. Прошлая статья закончилась удивительным результатом: использование SIMD ускоряет операцию более, чем в 2 раза. Я даже написал небольшую программу для того, чтобы это проверить.
Однако, в реальной жизни тормозить может совершенно безобидный участок кода. И для того, чтобы увидеть как работает программа под реальной нагрузкой, нужно использовать профайлеры.
Выбор профайлера Оказывается, в мире Си с этим обстоит всё достаточно неплохо.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Оптимизация производительности приложения на Си</h1></header>
      		<div class='container entry-content'>
  <h2 id="введение">Введение</h2>
<p>По следам разработки моего нового проекта <a href="https://github.com/dernasherbrezon/sdr-server">sdr-server</a> я решил написать очередную статью. И опять про производительность. <a href="https://dernasherbrezon.com/posts/simd-for-dsp/">Прошлая статья</a> закончилась удивительным результатом: использование SIMD ускоряет операцию более, чем в 2 раза. Я даже написал <a href="https://github.com/dernasherbrezon/sdr-server/blob/main/test/perf_xlating.c">небольшую программу</a> для того, чтобы это проверить.</p>
<p>Однако, в реальной жизни тормозить может совершенно безобидный участок кода. И для того, чтобы увидеть как работает программа под реальной нагрузкой, нужно использовать <a href="https://ru.wikipedia.org/wiki/%D0%9F%D1%80%D0%BE%D1%84%D0%B8%D0%BB%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5_(%D0%B8%D0%BD%D1%84%D0%BE%D1%80%D0%BC%D0%B0%D1%82%D0%B8%D0%BA%D0%B0)">профайлеры</a>.</p>
<h2 id="выбор-профайлера">Выбор профайлера</h2>
<p>Оказывается, в мире Си с этим обстоит всё достаточно неплохо. Есть множество различных профайлеров на все случаи жизни:</p>
<ul>
<li><a href="https://oprofile.sourceforge.io/about/">oprofile</a></li>
<li><a href="https://en.wikipedia.org/wiki/Gprof">gprof</a></li>
<li><a href="https://www.valgrind.org">valgrind</a></li>
</ul>
<p>Все эти профайлеры работают из командной строки. Сначала нужно скомпилировать программу в debug режиме, затем запустить с профайлером, а затем результат отобразить в ужасной ASCII графике.</p>
<p>К счастью, у меня есть Eclipse и в нём есть <a href="https://wiki.eclipse.org/Linux_Tools_Project/Valgrind/User_Guide">поддержка valgrind</a>. Можно одним кликом запустить профайлер и увидеть результаты в нормальной таблице.</p>
<p><img src="/img/tune-c-application/Vg_original_menu.png" alt=""></p>
<p>Я пошёл этим путём и вскоре пожалел.</p>
<p><img src="/img/tune-c-application/2.png" alt=""></p>
<p>Во-первых, под MacOS valgrind официально не поддерживается. Для этого нужно ставить стороннюю сборку через brew:</p>
<pre><code>brew tap LouisBrunner/valgrind
brew install --HEAD LouisBrunner/valgrind/valgrind
</code></pre><p>Во-вторых, сторонняя сборка требует новой версии xcode 12.4. А для этого нужно его обновить. В-третьих, бинарник устанавливается в <code>/usr/local/bin</code>, а eclipse плагин ищет его только в <code>/usr/bin</code>. В-четвёртых, симлинки не работают:</p>
<pre><code>sudo ln -s $(which valgrind) /usr/bin/valgrind
ln: /usr/bin/valgrind: Operation not permitted
</code></pre><p>Всё из-за новой политики безопасности MacOS. Даже sudo не поможет. Чтобы valgrind плагин подцепил <code>/usr/local/bin</code>, нужно открыть текстовым редактором конфиги eclipse и прописать дополнительные пути. Ну и, в-пятых:</p>
<pre><code>!ENTRY org.eclipse.cdt.core 4 0 2021-02-06 21:18:30.657
!MESSAGE Error: Cannot run program &quot;valgrind&quot;: Unknown reason
!STACK 0
java.io.IOException: Cannot run program &quot;valgrind&quot;: Unknown reason
	at org.eclipse.cdt.utils.spawner.Spawner.exec(Spawner.java:352)
	at org.eclipse.cdt.utils.spawner.Spawner.&lt;init&gt;(Spawner.java:94)
	at org.eclipse.cdt.utils.spawner.ProcessFactory.exec(ProcessFactory.java:99)
	at org.eclipse.cdt.core.CommandLauncher.execute(CommandLauncher.java:190)
	at org.eclipse.linuxtools.internal.profiling.launch.LocalLauncher.execute(LocalLauncher.java:40)
</code></pre><p>Всё это выглядит достаточно печально. Я потратил целый день, пытаясь настроить инструменты, пока не нашёл <a href="https://en.wikipedia.org/wiki/Instruments_(software)">instruments</a>.</p>
<h2 id="instruments">instruments</h2>
<p>instruments - это приложение, поставляющееся с xcode. Оно позволяет профилировать запущенные процессы и поддерживает множество интересных метрик:</p>
<p><img src="/img/tune-c-application/3.png" alt=""></p>
<p>Работает это всё следующим образом:</p>
<ul>
<li>нужно скомпилировать программу в debug режиме</li>
<li>запустить</li>
<li>запустить instruments и подсоединиться к запущенному процессу</li>
</ul>
<p>Самые интересные метрики, наверное, time profiler и allocations. Первый собирает информацию о том, сколько времени выполняется каждый метод. А второй собирает информацию о том, где и сколько выделялось памяти. Остальные метрики, пожалуй, важны для разных приложений с GUI.</p>
<p>Для sdr-server наиболее важным, конечно же, является time profiler. Я написал приложение таким образом, что вся память выделяется на старте и поэтому allocations метрика не так полезна.</p>
<h2 id="оптимизации">Оптимизации</h2>
<p>Я долго запрягал, но быстро ехал. Первый же запуск показал удивительную вещь:</p>
<p><img src="/img/tune-c-application/4.png" alt=""></p>
<p>Самый горячий участок кода - это DSP преобразования. Я ожидаемо их оптимизировал: <a href="https://dernasherbrezon.com/posts/simd-for-dsp/">использовал SIMD инструкции</a> и выделил в отдельный поток. Однако, профайлер показал, что там тратится только 47% времени! Остальные 40% приходятся на поиск в lookup таблице! Эта таблица используется для того, чтобы конвертировать uint8_t в float complex на интервале [-1;1]. Более детально об этом шаге я писал в недавней статье <a href="https://dernasherbrezon.com/posts/how-to-map-zero/">коварные нули</a>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">size_t <span style="color:#a6e22e">lookup_in_table</span>(<span style="color:#66d9ef">const</span> uint8_t <span style="color:#f92672">*</span>input, size_t input_len, xlating <span style="color:#f92672">*</span>filter) {
	<span style="color:#75715e">// convert to [-1.0;1.0] working buffer
</span><span style="color:#75715e"></span>	size_t input_processed <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
	<span style="color:#66d9ef">for</span> (size_t i <span style="color:#f92672">=</span> filter<span style="color:#f92672">-&gt;</span>history_offset; i <span style="color:#f92672">&lt;</span> filter<span style="color:#f92672">-&gt;</span>working_len_total <span style="color:#f92672">&amp;&amp;</span> input_processed <span style="color:#f92672">&lt;</span> input_len; i<span style="color:#f92672">++</span>, input_processed<span style="color:#f92672">++</span>) {
		filter<span style="color:#f92672">-&gt;</span>working_buffer[i] <span style="color:#f92672">=</span> filter<span style="color:#f92672">-&gt;</span>lookup_table[input[input_processed]];
	}
	<span style="color:#66d9ef">return</span> input_processed;
}
</code></pre></div><p>Получается, что поиск в такой таблице для каждого элемента занимает по времени почти столько же, сколько и умножение двух массивов float. Эта таблица достаточно небольшая - всего 256 элементов и я ожидал, что она вся попадёт в кеш процессора.</p>
<p>Я попробовал заменить таблицу на непосредственно вычисление:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">size_t <span style="color:#a6e22e">lookup_in_table2</span>(<span style="color:#66d9ef">const</span> uint8_t <span style="color:#f92672">*</span>input, size_t input_len, xlating <span style="color:#f92672">*</span>filter) {
	<span style="color:#75715e">// convert to [-1.0;1.0] working buffer
</span><span style="color:#75715e"></span>	size_t input_processed <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
	<span style="color:#66d9ef">for</span> (size_t i <span style="color:#f92672">=</span> filter<span style="color:#f92672">-&gt;</span>history_offset; i <span style="color:#f92672">&lt;</span> filter<span style="color:#f92672">-&gt;</span>working_len_total <span style="color:#f92672">&amp;&amp;</span> input_processed <span style="color:#f92672">&lt;</span> input_len; i<span style="color:#f92672">++</span>, input_processed<span style="color:#f92672">++</span>) {
		filter<span style="color:#f92672">-&gt;</span>working_buffer[i] <span style="color:#f92672">=</span> (input[input_processed] <span style="color:#f92672">-</span> <span style="color:#ae81ff">127.5F</span>) <span style="color:#f92672">/</span> <span style="color:#ae81ff">128.0F</span>;
	}
	<span style="color:#66d9ef">return</span> input_processed;
}
</code></pre></div><p><img src="/img/tune-c-application/5.png" alt=""></p>
<p>Картина не слишком поменялась. Стало даже чуть-чуть хуже.</p>
<p>И тут мне пришла в голову замечательная идея: а что если есть специальная функция для такого преобразования? И она нашлась: <code>volk_8i_s32f_convert_32f</code>.  Правда, она работает чуть-чуть по-другому: она конвертирует все байты во float и умножает на число. Это как раз и создаст немного некорректное преобразование, о котором я писал в статье <a href="https://dernasherbrezon.com/posts/how-to-map-zero/">коварные нули</a>. Скрепя сердцем я написал вот такой код:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">size_t <span style="color:#a6e22e">lookup_in_table3</span>(<span style="color:#66d9ef">const</span> uint8_t <span style="color:#f92672">*</span>input, size_t input_len, xlating <span style="color:#f92672">*</span>filter) {
	<span style="color:#75715e">// convert to [-1.0;1.0] working buffer
</span><span style="color:#75715e"></span>	size_t input_processed <span style="color:#f92672">=</span> input_len;
	volk_8i_s32f_convert_32f_u(filter<span style="color:#f92672">-&gt;</span>working_buffer <span style="color:#f92672">+</span> filter<span style="color:#f92672">-&gt;</span>history_offset, (<span style="color:#66d9ef">const</span> <span style="color:#66d9ef">signed</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>)input, <span style="color:#ae81ff">128.0F</span>, input_len);
	<span style="color:#66d9ef">return</span> input_processed;
}
</code></pre></div><p>Что удивительно, так это то, что мои тесты прошли! Видимо, точность, с которой я сравнивал числа была достаточной.</p>
<p><img src="/img/tune-c-application/6.png" alt=""></p>
<p>Ну а после запуска профайлера я увидел замечательную картину. Теперь самый горячий метод - это DSP преобразование.</p>
<h2 id="а-что-же-дальше">А что же дальше?</h2>
<p>Я не ожидал, что этот участок кода будет таким медленным. Поэтому каждый dsp тред делал преобразование из uint8_t во float complex и выполнял DSP преобразование. Эта схема не очень масштабируется. Если подсоединится ещё один клиент, то он будет выполнять абсолютно такое же преобразование. Этот дизайн можно ещё улучшить, если перенести преобразование обратно на rtlsdr поток. Тогда оно будет выполняться только один раз в независимости от количества клиентов.</p>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>SIMD для цифровой обработки сигналов</title>
      <link>https://dernasherbrezon.com/posts/simd-for-dsp/</link>
      <pubDate>Mon, 25 Jan 2021 01:10:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/simd-for-dsp/</guid>
      <description>Несмотря на то, что мой блог о разработке на Java, мне иногда приходится расчехлять старые знания и писать на Си. Вообще, программирование на Си - это целый мир со своими заморочками, инструментами и подходами. И он совсем не пересекается с тем, что творится в Java. Это, с одной стороны, немного досадно, так как все накопленные знания не имеют никакого смысла, а с другой стороны немного волнительно, как открытие Америки.
Совсем недавно я придумал одну идею - сделать небольшой TCP сервер, который бы раздавал некоторый диапазон радио частот клиентам.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>SIMD для цифровой обработки сигналов</h1></header>
      		<div class='container entry-content'>
  <p>Несмотря на то, что мой блог о разработке на Java, мне иногда приходится расчехлять старые знания и писать на Си. Вообще, программирование на Си - это целый мир со своими заморочками, инструментами и подходами. И он совсем не пересекается с тем, что творится в Java. Это, с одной стороны, немного досадно, так как все накопленные знания не имеют никакого смысла, а с другой стороны немного волнительно, как открытие Америки.</p>
<p>Совсем недавно я придумал одну идею - сделать небольшой TCP сервер, который бы раздавал некоторый диапазон радио частот клиентам. Я наверное по-подробнее напишу про этот проект потом, когда закончу, а в этой статье опишу небольшую часть функциональности. А именно - использование <a href="https://en.wikipedia.org/wiki/SIMD">SIMD</a> инструкций процессора для цифровой обработки сигналов.</p>
<h2 id="frequency-xlating-fir-filter">Frequency Xlating FIR filter</h2>
<p>Большинство блоков в обработке сигналов основаны на <a href="https://ru.wikipedia.org/wiki/%D0%A4%D0%B8%D0%BB%D1%8C%D1%82%D1%80_%D1%81_%D0%BA%D0%BE%D0%BD%D0%B5%D1%87%D0%BD%D0%BE%D0%B9_%D0%B8%D0%BC%D0%BF%D1%83%D0%BB%D1%8C%D1%81%D0%BD%D0%BE%D0%B9_%D1%85%D0%B0%D1%80%D0%B0%D0%BA%D1%82%D0%B5%D1%80%D0%B8%D1%81%D1%82%D0%B8%D0%BA%D0%BE%D0%B9">КИХ-фильтрах</a>. Схема их работы достаточно простая:</p>
<p><img src="/img/simd-for-dsp/firfilter.png" alt=""></p>
<p>На вход подаётся оцифрованный сигнал. Каждый сэмпл сигнала нужно перемножить с импульсной характеристикой фильтра, сложить и получить один выходной сэмпл. Импульсная характеристика фильтра - это некоторые коэффициенты типа float. Если представить в виде уравнения, то выглядит это так:</p>
<pre><code>float_input_1 * float_filter_1 + float_input_2 * float_filter_2 + ... = filtered sample
</code></pre><p>После того как получен первый сэмпл, нужно сдвинуть фильтр на 1 элемент влево и ещё раз умножить все коэффициенты:</p>
<pre><code>float_input_2 * float_filter_1 + float_input_3 * float_filter_2 + ... = filtered sample
</code></pre><p>И так далее.</p>
<h2 id="наивная-реализация">Наивная реализация</h2>
<p>Итак, для того, чтобы запрограммировать такой фильтр, нужно написать совсем простой цикл:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">float</span> sum0[<span style="color:#ae81ff">2</span>] <span style="color:#f92672">=</span> {<span style="color:#ae81ff">0</span>,<span style="color:#ae81ff">0</span>};
<span style="color:#66d9ef">float</span> sum1[<span style="color:#ae81ff">2</span>] <span style="color:#f92672">=</span> {<span style="color:#ae81ff">0</span>,<span style="color:#ae81ff">0</span>};
<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;

<span style="color:#66d9ef">for</span>(i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;</span> number_of_samples; <span style="color:#f92672">++</span>i) {
    sum0[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">+=</span> in[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">*</span> tp[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">-</span> in[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">*</span> tp[<span style="color:#ae81ff">1</span>];
    sum0[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">+=</span> in[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">*</span> tp[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">+</span> in[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">*</span> tp[<span style="color:#ae81ff">0</span>];
    sum1[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">+=</span> in[<span style="color:#ae81ff">2</span>] <span style="color:#f92672">*</span> tp[<span style="color:#ae81ff">2</span>] <span style="color:#f92672">-</span> in[<span style="color:#ae81ff">3</span>] <span style="color:#f92672">*</span> tp[<span style="color:#ae81ff">3</span>];
    sum1[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">+=</span> in[<span style="color:#ae81ff">2</span>] <span style="color:#f92672">*</span> tp[<span style="color:#ae81ff">3</span>] <span style="color:#f92672">+</span> in[<span style="color:#ae81ff">3</span>] <span style="color:#f92672">*</span> tp[<span style="color:#ae81ff">2</span>];

    in <span style="color:#f92672">+=</span> <span style="color:#ae81ff">4</span>;
    tp <span style="color:#f92672">+=</span> <span style="color:#ae81ff">4</span>;
}

res[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">=</span> sum0[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">+</span> sum1[<span style="color:#ae81ff">0</span>];
res[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">=</span> sum0[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">+</span> sum1[<span style="color:#ae81ff">1</span>];
</code></pre></div><p>В примере выше выполняется перемножение двух массивов комплексных чисел. Вы же не думали, что фильтр - это просто? Но суть процесса от этого не меняется. Нужно очень много раз перемножить float и сложить результаты. Именно так и работает <a href="https://github.com/dernasherbrezon/jradio/blob/8c5704be41d12ef7e819f9486fab0e623a6f1b44/src/main/java/ru/r2cloud/jradio/blocks/FIRFilter.java">FIRFilter</a> в моём проекте jradio.</p>
<h2 id="использование-simd">Использование SIMD</h2>
<p>Как раз для таких вычислений и придумали <a href="https://en.wikipedia.org/wiki/SIMD">SIMD - single instruction multiple data</a>. Эти инструкции позволяют загрузить много данных в особые регистры процессора и выполнить операцию одной командой. Это, теоретически, позволить ускорить выполнение вычислений. Конечно, тут есть очень много тонкостей. Например, это может замедлить программу, если данные неправильно лежат в памяти. Или SIMD инструкции на одном процессоре будут совершенно по-другому работать на другом. Или размер этих регистров в RaspberryPI сильно отличается от размеров Intel. Но и самая неприятная штука - надо будет писать код на ассемблере.</p>
<p>Но не стоит унывать! Разработчики со всего мира собрались и придумали способы упростить жизнь. В частности, придумали такой проект, как <a href="https://www.libvolk.org">volk</a>. Эта Си библиотека содержит множество часто употребимых функций для подобных вычислений. Достаточно лишь подключить библиотеку и вызвать нужную функцию:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">volk_32fc_x2_dot_prod_32fc_a(lv_32fc_t<span style="color:#f92672">*</span> output, <span style="color:#66d9ef">const</span> lv_32fc_t<span style="color:#f92672">*</span> input, <span style="color:#66d9ef">const</span> lv_32fc_t<span style="color:#f92672">*</span> filter, <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> size);
</code></pre></div><p>А в зависимости от архитектуры процессора и типов SIMD инструкций, библиотека подставит наиболее быструю реализацию этой функции. При этом все реализации таких функций пишутся вручную как на Си, так и на ассемблере. Вот пример реализации для ARM NEON (используется в RaspberryPI):</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-asm" data-lang="asm"><span style="color:#960050;background-color:#1e0010">@</span> <span style="color:#a6e22e">static</span> <span style="color:#66d9ef">inline</span> <span style="color:#66d9ef">void</span> <span style="color:#66d9ef">volk_32fc_x2_dot_prod_32fc_neonasm</span>(<span style="color:#66d9ef">float</span>* <span style="color:#66d9ef">cVector</span>, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">float</span>* <span style="color:#66d9ef">aVector</span>, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">float</span>* <span style="color:#66d9ef">bVector</span>, <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> <span style="color:#66d9ef">num_points</span>)<span style="color:#75715e">;
</span><span style="color:#75715e"></span>	<span style="color:#66d9ef">.global</span>	<span style="color:#66d9ef">volk_32fc_x2_dot_prod_32fc_neonasm</span>
volk_32fc_x2_dot_prod_32fc_neonasm:
    <span style="color:#a6e22e">push</span>    <span style="color:#960050;background-color:#1e0010">{</span><span style="color:#66d9ef">r4</span>, <span style="color:#66d9ef">r5</span>, <span style="color:#66d9ef">r6</span>, <span style="color:#66d9ef">r7</span>, <span style="color:#66d9ef">r8</span>, <span style="color:#66d9ef">lr</span><span style="color:#960050;background-color:#1e0010">}</span>
    <span style="color:#a6e22e">vpush</span>   <span style="color:#960050;background-color:#1e0010">{</span><span style="color:#66d9ef">q0-q7</span><span style="color:#960050;background-color:#1e0010">}</span>
    <span style="color:#a6e22e">vpush</span>   <span style="color:#960050;background-color:#1e0010">{</span><span style="color:#66d9ef">q8-q15</span><span style="color:#960050;background-color:#1e0010">}</span>
    <span style="color:#a6e22e">mov</span> <span style="color:#66d9ef">r8</span>, <span style="color:#66d9ef">r3</span>          <span style="color:#960050;background-color:#1e0010">@</span> <span style="color:#66d9ef">hold</span> <span style="color:#66d9ef">on</span> <span style="color:#66d9ef">to</span> <span style="color:#66d9ef">num_points</span> (<span style="color:#66d9ef">r8</span>)
    <span style="color:#960050;background-color:#1e0010">@</span> <span style="color:#a6e22e">zero</span> <span style="color:#66d9ef">out</span> <span style="color:#66d9ef">accumulators</span> -- <span style="color:#66d9ef">leave</span> <span style="color:#ae81ff">1</span> <span style="color:#66d9ef">reg</span> <span style="color:#66d9ef">in</span> <span style="color:#66d9ef">alu</span>
    <span style="color:#a6e22e">veor</span>    <span style="color:#66d9ef">q8</span>, <span style="color:#66d9ef">q15</span>, <span style="color:#66d9ef">q15</span>
    <span style="color:#a6e22e">mov</span> <span style="color:#66d9ef">r7</span>, <span style="color:#66d9ef">r0</span>          <span style="color:#960050;background-color:#1e0010">@</span> (<span style="color:#66d9ef">r7</span>) <span style="color:#66d9ef">is</span> <span style="color:#66d9ef">cVec</span>
    <span style="color:#a6e22e">...</span>
</code></pre></div><p>Если же процессор не поддерживает нужную SIMD инструкцию или вообще не поддерживает SIMD, то volk подставит наивную реализацию с использованием циклов.</p>
<h2 id="выравнивание">Выравнивание</h2>
<p>Единственное, что требует volk - это выровненные массивы. Понятие &ldquo;выравнивание&rdquo; не существует в Java, поэтому пришлось вспоминать университетский курс по программированию. Тогда нам рассказывали, что выравнивание как-то связано с шиной данных. И выровненные данные каким-то образом ускоряют их обработку. Но тогда это было упомянуто чисто теоретически и вскользь. Немного поискав в Интернете, я нашёл <a href="https://developer.ibm.com/technologies/systems/articles/pa-dalign/">отличную статью</a> (<a href="http://konishchevdmitry.blogspot.com/2010/01/blog-post.html">и перевод</a>) о том, что такое выравнивание данных, зачем оно нужно и как использовать.</p>
<p>Если вкратце, то выравнивают не сами данные, а расположение данных в памяти. Указатель на начало данных должен быть кратен размеру шины данных. В таком случае считывание данных из памяти в процессор будет происходить быстрее. А значит и операции будут происходить быстрее.</p>
<p>volk предоставляет несколько удобных методов для задания выравнивания:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">size_t <span style="color:#a6e22e">volk_get_alignment</span>(<span style="color:#66d9ef">void</span>);
</code></pre></div><p>Это метод получает размер шины данных или необходимую кратность начала данных. На моём Macbook Air это значение равно 32.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">void</span><span style="color:#f92672">*</span> <span style="color:#a6e22e">volk_malloc</span>(size_t size, size_t alignment);
</code></pre></div><p>Второй метод как раз и выделяет выровненную память нужного размера.</p>
<h2 id="выравнивание-памяти-для-ких-фильтра">Выравнивание памяти для КИХ фильтра</h2>
<p>Но выделить выровненную память недостаточно. Если вернуться в описание фильтра, то можно увидеть, что операция с выровненной памятью будет только для первого элемента массива. После смещения на один элемент, указатель будет показывать на адрес не кратный нужному выравниванию.</p>
<p>Чтобы этого избежать, можно применить следующую хитрость:</p>
<p><img src="/img/simd-for-dsp/trick.png" alt=""></p>
<p>Для этого нужно создать несколько различных вариантов фильтра. При этом массив параметров фильтра всегда будет выровнен, а вот коэффициенты в начале могут быть 0. Несмотря на то, что появится несколько лишних операций умножения на 0, оно того стоит.</p>
<p>На практике такой трюк можно записать следующим образом:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">size_t alignment <span style="color:#f92672">=</span> volk_get_alignment();
<span style="color:#66d9ef">float</span> <span style="color:#f92672">*</span>buffer <span style="color:#f92672">=</span> volk_malloc(<span style="color:#66d9ef">sizeof</span>(<span style="color:#66d9ef">float</span>) <span style="color:#f92672">*</span> <span style="color:#ae81ff">16</span>, alignment);
<span style="color:#66d9ef">const</span> lv_32fc_t <span style="color:#f92672">*</span>buf <span style="color:#f92672">=</span> (<span style="color:#66d9ef">const</span> lv_32fc_t<span style="color:#f92672">*</span>) (buffer <span style="color:#f92672">+</span> <span style="color:#ae81ff">2</span>); <span style="color:#75715e">// 2 - some random offset
</span><span style="color:#75715e"></span>
<span style="color:#66d9ef">const</span> lv_32fc_t <span style="color:#f92672">*</span>aligned_buffer <span style="color:#f92672">=</span> (<span style="color:#66d9ef">const</span> lv_32fc_t <span style="color:#f92672">*</span>)((size_t)buf <span style="color:#f92672">&amp;</span> <span style="color:#f92672">~</span>(alignment <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>));
<span style="color:#66d9ef">unsigned</span> align_index <span style="color:#f92672">=</span> buf <span style="color:#f92672">-</span> aligned_buffer; <span style="color:#75715e">// index in the array of aligned filter configurations
</span><span style="color:#75715e"></span>printf(<span style="color:#e6db74">&#34;alignment: %zu</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, alignment);
printf(<span style="color:#e6db74">&#34;initial %p</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, buffer);
printf(<span style="color:#e6db74">&#34;offset  %p</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, buf);
printf(<span style="color:#e6db74">&#34;aligned %p</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, aligned_buffer);
printf(<span style="color:#e6db74">&#34;index: %d</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, align_index);
</code></pre></div><p>На моём Macbook Air вывод будет следующим:</p>
<pre><code>alignment: 32
initial 0x7fc6f0c07020
offset  0x7fc6f0c07028
aligned 0x7fc6f0c07020
index: 1
</code></pre><p>К слову сказать, отсутствие выравнивания иногда крэшило программу в segmentation fault.</p>
<h2 id="результаты">Результаты</h2>
<p>Для того чтобы измерить улучшение производительности, я написал <a href="https://github.com/dernasherbrezon/sdr-server/blob/main/test/perf_xlating.c">небольшую программу</a>. Её суть достаточно проста: в цикле вызывать фильтр. Полученное время запуска поделить на общее количество циклов. Результаты выглядят следующим образом:</p>
<table>
	<thead>
		<tr>
			<th></th>
			<th>Macbook Air</th>
			<th>Raspberrypi 3</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td>Naive</td>
			<td>0.005615 s</td>
			<td>0.082677 s</td>
		</tr>
		<tr>
			<td>SIMD</td>
			<td>0.002649 s</td>
			<td>0.032759 s</td>
		</tr>
	</tbody>
</table>
<p>Как видно, использование SIMD в 2+ раза ускоряет работу программы!</p>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Open source cubesat workshop 2020</title>
      <link>https://dernasherbrezon.com/posts/oscw-2020/</link>
      <pubDate>Thu, 14 Jan 2021 20:20:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/oscw-2020/</guid>
      <description>Под конец 2020 я принял участие в Open Source Cubeset Workshop и рассказал о том, как в одиночку разрабатывать опенсорс проект.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Open source cubesat workshop 2020</h1></header>
      		<div class='container entry-content'>
  
<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube.com/embed/RtsIFTjXxo0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>

<p>Под конец 2020 я принял участие в <a href="https://oscw.space">Open Source Cubeset Workshop</a> и рассказал о том, как в одиночку разрабатывать опенсорс проект.</p>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Восстановление jpeg файлов</title>
      <link>https://dernasherbrezon.com/posts/restore-jpeg-file/</link>
      <pubDate>Wed, 16 Dec 2020 14:40:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/restore-jpeg-file/</guid>
      <description>1kuns-pf уже давно сгорел в плотных слоях атмосферы, но он оставил яркий след в базе данных Satnogs. Это самый наблюдаемый спутник на текущий момент. За два года своей работы сообщество приняло около 6 миллионов сообщений.
Я решил посмотреть, что же это за данные и как то нормализировать их. Так как спутник сгорел, то в результате должен получиться законченный датасет, удобный для анализа.
У меня есть описание формата трёх типов данных:</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Восстановление jpeg файлов</h1></header>
      		<div class='container entry-content'>
  <p><a href="https://db.satnogs.org/satellite/43466">1kuns-pf</a> уже давно сгорел в плотных слоях атмосферы, но он оставил яркий след в базе данных Satnogs. Это самый наблюдаемый спутник на текущий момент. За два года своей работы сообщество приняло около 6 миллионов сообщений.</p>
<p><img src="/img/restore-jpeg-file/1.png" alt=""></p>
<p>Я решил посмотреть, что же это за данные и как то нормализировать их. Так как спутник сгорел, то в результате должен получиться законченный датасет, удобный для анализа.</p>
<p>У меня <a href="https://github.com/dernasherbrezon/jradio/blob/master/src/main/java/ru/r2cloud/jradio/kunspf/KunsPfBeacon.java">есть описание формата</a> трёх типов данных:</p>
<ul>
<li>полная телеметрия (Whole Orbit Data)</li>
<li>текущая телеметрия</li>
<li>изображения</li>
</ul>
<p>С первыми двумя всё достаточно просто: нужно сделать дедупликацию данных, распарсить, удалить явно неправильные данные. А вот с изображениями всё гораздо интереснее.</p>
<h2 id="формат-пакета">Формат пакета</h2>
<p>Формат пакета, содержащего картинку, очень минималистичный.</p>
<p><img src="/img/restore-jpeg-file/5.png" alt=""></p>
<p>У него есть только порядковый номер кусочка данных и, собственно, данные. Этого явно недостаточно, чтобы однозначно собирать полноценные изображения из кусочков. Но, чтобы жизнь мёдом не казалась, есть ещё несколько особенностей:</p>
<ol>
<li>спутник может передавать изображения в двух разрешениях: 160х120 и 640х480. Это значит, что общее количество кусочков данных может быть разным. В теории, я бы мог восстановить хотя бы одно изображение и посчитать из скольких кусочков оно состоит. Но это не сработает в 100% случаях, так как:</li>
<li>изображение задекодировано в формате jpeg. А это значит, что размер полностью тёмного изображения будет меньше, чем изображение с какой-то информацией. А значит и количество кусочков будет меньше.</li>
<li>jpeg файлы передаются простыми фрагментами. Нет ничего похожего на <a href="https://dernasherbrezon.com/posts/decoding-jy1sat/">SSDV</a>. Если не удалось принять кусочек в середине jpeg файла, то всё изображение после этого кусочка будет потеряно.</li>
<li>некоторые изображения передаются друг за другом раз в минуту. В совокупности с 1 пунктом это даёт очень сильные ошибки при склеивании фрагментов. Об этом чуть ниже.</li>
</ol>
<p>В принципе, пункты с первого по третий достаточно просто обойти. Можно посмотреть на данные и эмпирически выявить максимальное количество кусочков для маленьких изображений. Допустим, это 15. Тогда всё, что больше - это кусочки большого изображения. Правда, это не даёт 100% гарантии. Например, можно получить только первые 15 кусочков большого изображения и результат получится неправильным.</p>
<p>Гораздо сложнее с пунктом 4. Чтобы его осознать, нужно понять как хранятся данные в базе и как они туда попадают.</p>
<p><img src="/img/restore-jpeg-file/6.png" alt=""></p>
<p>За одним спутником может наблюдать несколько станций. Все они могут принять как одинаковые фрагменты, так и разные. После того как фрагмент принят станция добавляет к него время и отправляет на сервер. Это, в свою очередь, создаёт дополнительные сложности:</p>
<ol>
<li>Нельзя полагаться на время получения фрагмента. Часы всех станций не синхронизированы. Скорость декодирования сигнала тоже. Время на отправку фрагментов по сети на сервер, тоже разное. Всё это приводит к тому, что кусочки оказываются перемешаны</li>
<li>Кусочки последующего изображения могут быть перемешаны с кусочками предыдущего. А так как нет сквозной нумерации пакетов, то нельзя однозначно сказать к какому изображению относится порядковый номер к текущему или уже следующему.</li>
</ol>
<p>Из всего этого ясно одно - гарантированно восстановить изображения не получится. А насколько хорошо получится? Я задался целью написать такой алгоритм, который бы позволил восстановить максимальное количество изображений.</p>
<h2 id="заголовок-файла">Заголовок файла</h2>
<p>Самой первой идеей, которая пришла мне в голову, было восстановление повреждённого заголовка jpeg файла. Если заголовок всех jpeg файлов будет одинаковый, то я могу его захардкодить и подставлять во все файлы. Для этого нужно найти сколько фрагментов занимать заголовок. Я взял полностью восстановленное изображение и просто посчитал. Получилось 4.5 фрагмента: индексы 0, 1, 2, 3 и половинка 4-го.</p>
<p>Я написал достаточно простой Java код, чтобы проверить теорию:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">Map<span style="color:#f92672">&lt;</span>Integer<span style="color:#f92672">,</span> <span style="color:#66d9ef">byte</span><span style="color:#f92672">[]&gt;</span> dataByChunkId <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> HashMap<span style="color:#f92672">&lt;&gt;();</span>
<span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span>KunsPfBeacon beacon <span style="color:#f92672">:</span> data<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
	<span style="color:#66d9ef">int</span> chunkId <span style="color:#f92672">=</span> beacon<span style="color:#f92672">.</span><span style="color:#a6e22e">getImageChunk</span><span style="color:#f92672">().</span><span style="color:#a6e22e">getImageBlock</span><span style="color:#f92672">();</span>
	<span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>chunkId <span style="color:#f92672">&gt;</span> 3<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
		<span style="color:#66d9ef">continue</span><span style="color:#f92672">;</span>
	<span style="color:#f92672">}</span>
	<span style="color:#66d9ef">byte</span><span style="color:#f92672">[]</span> chunkData <span style="color:#f92672">=</span> beacon<span style="color:#f92672">.</span><span style="color:#a6e22e">getImageChunk</span><span style="color:#f92672">().</span><span style="color:#a6e22e">getImageChunk</span><span style="color:#f92672">();</span>
	<span style="color:#66d9ef">byte</span><span style="color:#f92672">[]</span> previous <span style="color:#f92672">=</span> dataByChunkId<span style="color:#f92672">.</span><span style="color:#a6e22e">get</span><span style="color:#f92672">(</span>chunkId<span style="color:#f92672">);</span>
	<span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>previous <span style="color:#f92672">==</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
		dataByChunkId<span style="color:#f92672">.</span><span style="color:#a6e22e">put</span><span style="color:#f92672">(</span>chunkId<span style="color:#f92672">,</span> chunkData<span style="color:#f92672">);</span>
	<span style="color:#f92672">}</span> <span style="color:#66d9ef">else</span> <span style="color:#f92672">{</span>
		<span style="color:#66d9ef">if</span> <span style="color:#f92672">(!</span>Arrays<span style="color:#f92672">.</span><span style="color:#a6e22e">equals</span><span style="color:#f92672">(</span>previous<span style="color:#f92672">,</span> chunkData<span style="color:#f92672">))</span> <span style="color:#f92672">{</span>
			System<span style="color:#f92672">.</span><span style="color:#a6e22e">err</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;non equal!&#34;</span><span style="color:#f92672">);</span>
			<span style="color:#66d9ef">break</span><span style="color:#f92672">;</span>
		<span style="color:#f92672">}</span>
	<span style="color:#f92672">}</span>
<span style="color:#f92672">}</span>
</code></pre></div><p>И оказалось, что мои выводы неверные! Где-то в мае 2020 спутник попытался передать картинку в разрешении 1600x1200 и с другими таблицами Хаффмана. К сожалению, это был единственный случай передачи такой большой картинки, да и сама она содержала только первые 14 кусочков. В итоге я решил её отбросить и сделать фиксированный jpeg заголовок.</p>
<p>Осталось разобраться, что делать с кусочком номер 4. Он наполовину состоит из заголовка jpeg и наполовину из данных. Если этого кусочка нет, то можно восстановить хоть что-то, правда, результат будет выглядеть достаточно странновато:</p>
<p><img src="/img/restore-jpeg-file/2.jpg" alt=""></p>
<p>С этим ничего не поделаешь. Если данных нет, то их нет.</p>
<h2 id="алгоритм-сортировки">Алгоритм сортировки</h2>
<p>Вот тут кроется самый сок. Дело в том, что при правильной сортировке кусочков изображения, можно получить больше правильных результатов.</p>
<p>Для начала я попробовал тривиальный алгоритм:</p>
<ul>
<li>сортировать по времени</li>
<li>если следующий кусочек имеет индекс меньше, чем предыдущий, то он принадлежит уже следующему изображению</li>
<li>взять текущий список кусочков и составить из них изображение</li>
</ul>
<p><img src="/img/restore-jpeg-file/3.jpg" alt=""></p>
<p>Получилось достаточно неплохо, но когда передаются последовательно несколько изображений, то оба могут получиться &ldquo;битыми&rdquo;. Я попробовал ограничить время получения одного изображения десятью минутами, восемью и пятью. Результат получился хорошим при десяти минутах.</p>
<p><img src="/img/restore-jpeg-file/4.jpg" alt=""></p>
<p>Тем не менее, если кусочки сильно перемешаны, то результат по-прежнему так себе.</p>
<p>Следующей по списку идёт более фундаментальная идея. Декодировать jpeg. Сейчас я просто формирую массив байтов и говорю java, что в нём находится jpeg файл. Массив байтов парсится и получается то, что получается. Даже если изображение частично повреждено, то нативный libjpeg, который используется в java, спокойно это обработает и попробует выдать хоть что-то. Но если написать свой собственный декодер, то можно будет сделать вот такой алгоритм:</p>
<ul>
<li>сортировать по времени</li>
<li>просмотреть вперёд на 10 минут и найти кусочек с индексом 4 (0,1,2,3 - фиксированные. их можно игнорировать)</li>
<li>добавить его к текущим</li>
<li>попробовать декодировать</li>
<li>если DC коэффициент не найден или AC коэффициент не найден, то скорей всего кусочек от другого изображения. Искать дальше</li>
<li>если найден, то начать искать кусочек с индексом 5. И так далее</li>
</ul>
<p>Этот алгоритм гораздо серьёзнее, но для него придётся расчехлить знания по структуре jpeg файлов. Хорошо, что я <a href="https://dernasherbrezon.com/posts/jpeg-encoding/">сделал для себя заметку о кодировании jpeg файлов</a>.</p>
<p><em>Спустя какое-то время</em></p>
<p>Ничего не получилось. Я реализовал <a href="https://github.com/dernasherbrezon/jradio/blob/master/src/test/java/ru/r2cloud/jradio/jpeg/validator/JpegValidator.java">специальный jpeg декодер</a>, который проверяет входящие кусочки изображений. И даже <a href="https://github.com/dernasherbrezon/jradio/blob/master/src/test/java/ru/r2cloud/jradio/jpeg/validator/JpegValidatorTest.java">написал тест</a>, который проходит успешно. Проблема в том, что тест всегда проходит успешно. Несмотря на то, что, теоретически, DC коэффициенты или AC коэффициенты могут быть не найдены, на практике они всегда есть. Даже совсем сломанная картинка не вызывает подозрений. Надо придумывать что-нибудь ещё.</p>
<h2 id="заглядывая-в-будущее">Заглядывая в будущее</h2>
<p>Следующий алгоритм, который я придумал, выглядит так:</p>
<ul>
<li>искать кусочки в следующих 10 минут</li>
<li>если впереди обнаружен кусочек, у которого индекс уже найден, то сравнить байты изображения с уже найденными.</li>
<li>если они одинаковые, значит это - дубликат</li>
<li>а если не одинаковые, значит это - кусочек из следующего изображения</li>
<li>удалить все дубликаты в следующих 30 минутах</li>
</ul>
<p><img src="/img/restore-jpeg-file/8.jpg" alt=""></p>
<p>И опять неудача. Дело в том, что очень часто самые первые кусочки изображения содержат космос (чёрный пречёрный). А значит, они одинаковые среди нескольких разных изображений. Вот досада.</p>
<h2 id="группировка-по-станциям">Группировка по станциям</h2>
<p>Следующей идеей была группировка по станции. Что, если не смешивать кусочки с разных станций, а группировать по станциям и сортировать по времени? Лучше всего идею иллюстрирует следующая диаграмма:</p>
<p><img src="/img/restore-jpeg-file/9.png" alt=""></p>
<p>В рамках одной станции все кусочки можно отсортировать по времени и выделить изображения. После этого, можно пройтись по всем изображением каждой станции и поискать похожие в других. Если в другой станции есть изображение примерно в это же время, и кусочки совпадают, то это два одинаковых. А если это два одинаковых, то можно слить их вместе и <a href="https://github.com/dernasherbrezon/jradio/blob/e1fee09309be55714c3c1988c700a02cd472f4f6/src/test/java/ru/r2cloud/jradio/kunspf/ProcessHistoricalData.java#L134">попытаться восстановить пропущенные</a>.</p>
<p><img src="/img/restore-jpeg-file/10.jpg" alt=""></p>
<p>Уже лучше, но всё равно большие изображения не восстановить. Во-первых, нужно около 1000 кусочков. А во-вторых, даже в рамках одной станции кусочки могут быть перемешаны во времени. У меня нет внятного объяснения этому, кроме того, что база данных асинхронно записывает данные.</p>
<h2 id="хоть-какие-то-результаты">Хоть какие-то результаты</h2>
<p>Большие изображения восстановить не получилось. Зато получилось восстановить много маленьких! Если их соединить, то получится небольшое видео с орбиты:</p>
<p><img src="/img/restore-jpeg-file/11.gif" alt=""></p>
<p>А вот пример изображений снятых с одной и той же выдержкой. Можно заметить, что, чем больше тёмного космоса в кадре, тем ярче становится Земля.</p>
<p><img src="/img/restore-jpeg-file/12.gif" alt=""></p>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Сравнение бесплатных программ для электронных таблиц</title>
      <link>https://dernasherbrezon.com/posts/compare-excel/</link>
      <pubDate>Sun, 15 Nov 2020 11:29:18 +0000</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/compare-excel/</guid>
      <description>Совершенно неожиданно даже для себя самого я решил сравнить программы для работы с электронными таблицами. Всё началось с того, что мне захотелось проанализировать какие спутники поддерживает r2cloud, какие можно декодировать с помощью jradio, а какие из них активные. Для этого я по-старинке открыл Libre Office и быстренько накидал табличку. После этого, мне захотелось поделиться ею с нашим небольшим сообществом ловцов спутников в twitter. Я её расшарил в google docs, но тут же задумался: а зачем мне нужен Libre Office, если google docs вполне работает?</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Сравнение бесплатных программ для электронных таблиц</h1></header>
      		<div class='container entry-content'>
  <p>Совершенно неожиданно даже для себя самого я решил сравнить программы для работы с электронными таблицами. Всё началось с того, что мне захотелось проанализировать какие спутники поддерживает <a href="https://github.com/dernasherbrezon/r2cloud">r2cloud</a>, какие можно декодировать с помощью <a href="https://github.com/dernasherbrezon/jradio">jradio</a>, а какие из них активные. Для этого я по-старинке открыл Libre Office и быстренько накидал табличку. После этого, мне захотелось поделиться ею с нашим небольшим сообществом ловцов спутников в twitter. Я её расшарил в <a href="https://docs.google.com/spreadsheets/d/1II__l9f3wBlXVOt0_3tr06v33V7ORqOQOErSycXabz4">google docs</a>, но тут же задумался: а зачем мне нужен Libre Office, если google docs вполне работает?</p>
<p>При этом во всей этой истории меня больше всего заинтересовало потребление памяти. С одной стороны отдельно запускающееся приложение должно загружать все необходимые библиотеки в память и занимать больше, чем страничка в браузере. А с другой стороны, часть этих библиотек может быть shared и уже загружена в память.</p>
<h2 id="libre-office">Libre Office</h2>
<p><img src="/img/compare-excel/1.png" alt="Libre Office"></p>
<p>Libre Office как будто пришёл из 90-х. Выглядит старомодно и явно не тянет на родное MacOS приложение. Чего только стоят кривые шрифты, на которые нельзя смотреть без боли и слёз.</p>
<p>Чтобы хоть как-то исправить ситуацию, я решил добавить в сравнение <a href="https://www.apple.com/numbers/">Numbers</a>.</p>
<h2 id="numbers">Numbers</h2>
<p><img src="/img/compare-excel/2.png" alt="Numbers"></p>
<p>Обычный .csv файл раскрашивается, добавляются нескучные стили и становится сразу понятно - это настоящее MacOS приложение со свистелками. Не очень понятно, как это использовать, но выглядит красиво.</p>
<p>Ну и представитель &ldquo;нового&rdquo; мира - Google Docs.</p>
<h2 id="google-docs">Google docs</h2>
<p><img src="/img/compare-excel/3.png" alt="Google docs"></p>
<p>Максимально близко похож на Microsoft Excel. В Safari выглядит хорошо, работает быстро и без ошибок.</p>
<h2 id="microsoft-excel">Microsoft Excel</h2>
<p>А как же без самого главного приложения для электронных таблиц? Оно платное, и покупать его для отображения простого .csv как то рука не поворачивается.</p>
<h2 id="сравнение-потребляемой-памяти">Сравнение потребляемой памяти</h2>
<p><img src="/img/compare-excel/4.png" alt="Activity Monitor"></p>
<p>Сравнить потребление памяти достаточно просто - нужно лишь запустить Activity Monitor. И вот тут-то меня и ждал сюрприз.</p>
<p>Во-первых, с огромным отрывом победил Libre Office. 177Мб против 237Мб Numbers и 390Мб Google Docs. Несмотря на то, что приложение неродное для MacOS, оно работает достаточно быстро и потребляет минимальное количество памяти.</p>
<p>Во-вторых, Shared memory в Numbers больше всех. 70Мб против 55Мб Libre Office и 32Мб Google Docs. Здесь явно видно, что ребята из Apple действительно переиспользовали очень много стандартных библиотек и оптимизировали их загрузку. Тем не менее, этого не хватило, чтобы само приложение было лёгким.</p>
<p>В-третьих, я крайне разочарован результатом Google Docs. Я ожидал, что Safari уже загрузил 99% необходимых библиотек и для отображения ещё одной странички Google Docs он будет использовать совсем чуть-чуть памяти. Однако, на практике одна только страница Google Docs занимает почти 400Мб.</p>
<p><img src="/img/compare-excel/5.png" alt="Activity Monitor 2"></p>
<p>Я попробовал запустить ещё одну вкладку с Google Docs в надежде получить чуть больше переиспользования уже загруженной памяти. Но Google docs по-прежнему отъедает стабильные 400Мб памяти.</p>
<h2 id="выводы">Выводы</h2>
<p>Не стоит судить о приложении по его обложке.</p>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Коварные нули</title>
      <link>https://dernasherbrezon.com/posts/how-to-map-zero/</link>
      <pubDate>Wed, 07 Oct 2020 17:23:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/how-to-map-zero/</guid>
      <description>Всё началось в того, что мне захотелось добавить поддержку plutosdr в свой проект r2cloud. Для этого я открыл код, который читает данные из rtlsdr и увидел следующее:
for (int i = 0; i &amp;lt; 0x100; ++i) { lookupTable[i] = ((i &amp;amp; 0xff) - 127.4f) * (1.0f / 128.0f); } Мой глаз зацепился за 127.4. Я не помню откуда у меня этот код, но число 127.4 выглядит уж больно подозрительно. Во-первых, алгоритм какой-то сложный, а во-вторых странное число.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Коварные нули</h1></header>
      		<div class='container entry-content'>
  <p>Всё началось в того, что мне захотелось добавить поддержку <a href="https://www.analog.com/en/design-center/evaluation-hardware-and-software/evaluation-boards-kits/adalm-pluto.html#">plutosdr</a> в свой проект <a href="https://github.com/dernasherbrezon/r2cloud">r2cloud</a>. Для этого я открыл код, который читает данные из rtlsdr и увидел следующее:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> 0<span style="color:#f92672">;</span> i <span style="color:#f92672">&lt;</span> 0x100<span style="color:#f92672">;</span> <span style="color:#f92672">++</span>i<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
	lookupTable<span style="color:#f92672">[</span>i<span style="color:#f92672">]</span> <span style="color:#f92672">=</span> <span style="color:#f92672">((</span>i <span style="color:#f92672">&amp;</span> 0xff<span style="color:#f92672">)</span> <span style="color:#f92672">-</span> 127<span style="color:#f92672">.</span><span style="color:#a6e22e">4f</span><span style="color:#f92672">)</span> <span style="color:#f92672">*</span> <span style="color:#f92672">(</span>1<span style="color:#f92672">.</span><span style="color:#a6e22e">0f</span> <span style="color:#f92672">/</span> 128<span style="color:#f92672">.</span><span style="color:#a6e22e">0f</span><span style="color:#f92672">);</span>
<span style="color:#f92672">}</span>
</code></pre></div><p>Мой глаз зацепился за <code>127.4</code>. Я не помню откуда у меня этот код, но число <code>127.4</code> выглядит уж больно подозрительно. Во-первых, алгоритм какой-то сложный, а во-вторых странное число. Я решил разобраться что к чему.</p>
<p>Для начала нужно дать небольшой контекст. Все SDR приёмники имеют фиксированную разрядность АЦП. Для rtl-sdr - это 8 бит. Поэтому значения, которые выдаёт приёмник, находятся в интервале от 0 до 255. Однако, DSP блоки работают с float числами, поэтому нужно преобразовать byte во float в интервале от -1 до 1. Чтобы в рантайме такое преобразование работало быстро, можно сделать таблицу поиска. В ней индекс массива соответствует числу float.</p>
<p>На первый взгляд задача достаточно простая. Нужно взять интервал от -1 до 1 и поделить на все возможные значения - 256. В итоге получается на каждое значение байта нужно: 2 / 256 = 0.0078125. Пока всё просто. Теперь я хочу проверить границы чисел. Для этого я умножу минимальное и максимальное значение байта на 0.0078125.</p>
<pre><code>0.0078125 * - 128 = -1.
0.0078125 * 127 = 0.9921875
</code></pre><p>Из-за нуля, максимальное значение байта - 127. А значит граница в 1.0 недостижима. Вот схема для примера:</p>
<p><img src="/img/how-to-map-zero/1.png" alt=""></p>
<p>Из неё следуют две вещи:</p>
<ol>
<li>все значения float будут &ldquo;сдвинуты&rdquo; влево на 0.0078125.</li>
<li>все положительные значения становятся ближе к нулю.</li>
</ol>
<p>Второй момент очень важен. Дело в том, что некоторые алгоритмы используют float для определения вероятности 0 или 1. То есть, чем ближе значение к &ldquo;1&rdquo;, тем более вероятна единица. А чем ближе к &ldquo;-1&rdquo; - тем более вероятен ноль. Как только мы сдвинули все положительные значения ближе к нулю, мы уменьшили их вероятность. Это не очень хорошо.</p>
<p>Теперь немного становится понятно, почему алгоритм конвертации такой странный и откуда там float. Тем не менее я так и не понял почему именно <code>127.4</code>. Ведь если нарисовать для него схему, то получается вот что:</p>
<p><img src="/img/how-to-map-zero/2.png" alt=""></p>
<p>Почему-то все значения сдвинуты вправо на дополнительные 0.00078125 от их среднего положения. Я так и не смог понять зачем это сделано. В итоге после многочисленных часов раздумий получилось следующее:</p>
<p><img src="/img/how-to-map-zero/3.png" alt=""></p>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Оптимизация расписания</title>
      <link>https://dernasherbrezon.com/posts/r2cloud-scheduler/</link>
      <pubDate>Sun, 27 Sep 2020 22:50:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/r2cloud-scheduler/</guid>
      <description>Задачка А вот задачка для любителей алгоритмов. Необходимо максимизировать время наблюдения за спутниками. Поясню поподробнее, в чём же она заключается. Итак, есть станция слежения за спутниками. В один момент времени она может записывать сигнал только с одного пролетающего спутника. Спутники летают независимо друг от друга и их количество фиксированно. Можно считать, что пролетают они над одной и той же точкой одинаковое количество раз в день. Но время пролёта случайное. В один момент времени над станцией могут пролетать два и более спутника.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Оптимизация расписания</h1></header>
      		<div class='container entry-content'>
  <h2 id="задачка">Задачка</h2>
<p>А вот задачка для любителей алгоритмов. Необходимо максимизировать время наблюдения за спутниками. Поясню поподробнее, в чём же она заключается. Итак, есть станция слежения за спутниками. В один момент времени она может записывать сигнал только с одного пролетающего спутника. Спутники летают независимо друг от друга и их количество фиксированно. Можно считать, что пролетают они над одной и той же точкой одинаковое количество раз в день. Но время пролёта случайное. В один момент времени над станцией могут пролетать два и более спутника. Цель номер один: необходимо составить расписание наблюдений так, чтобы оно было максимально продолжительным. Цель номер два: все спутники нужно наблюдать примерно одинаковое время.</p>
<p>Звучит немного сумбурно, но будет более понятно на примере решения &ldquo;в лоб&rdquo;, которое я сделал много лет назад.</p>
<h2 id="решение-в-лоб">Решение &ldquo;в лоб&rdquo;</h2>
<p>Самое простое решение, которое мне пришло в голову заключалось в следующем:</p>
<ol>
<li>для каждого спутника</li>
<li>рассчитать время следующего пролёта, начиная с текущего</li>
<li>добавить этот интервал в расписание</li>
<li>если в расписании уже есть перекрывающий интервал, то увеличить начальное время и вернуться на шаг 2.</li>
<li>как только пролёт спутника произошел, то выполнить шаги 2,3,4.</li>
</ol>
<p><img src="/img/r2cloud-scheduler/1.png" alt=""></p>
<p>У этого алгоритма есть один существенный плюс: он работает в поточном режиме. Это значит, что рассчитав начальное расписание, все дальнейшие пролёты рассчитываются по мере выполнения расписания. Это достаточно просто реализовать.</p>
<p>Тем не менее, есть и громадный недостаток: если новый интервал пролёта спутника пересекается с существующим хотя бы на 10 секунд, то он отбрасывается и берётся следующий. А следующий может случиться только через несколько часов.</p>
<p>Я знал, что алгоритм можно улучшить, но не хотел тратить на это время. Однако, <a href="https://github.com/dernasherbrezon/r2cloud/issues/92">недавно пришёл</a> пользователь Nehavita и попросил добавить поддержку перекрывающихся наблюдений. И вот я наконец-то нашёл время и придумал &ldquo;Решение №2&rdquo;.</p>
<h2 id="решение-2">Решение №2</h2>
<p>Идея нового алгоритма достаточно проста:</p>
<ul>
<li>сначала добавить &ldquo;полные&rdquo; наблюдения в расписание, как в предыдущем алгоритме</li>
<li>а затем по-очереди добавлять &ldquo;частичные&rdquo; наблюдения</li>
</ul>
<p>Прямо как в притче про банку, камни и песок.</p>
<p><img src="/img/r2cloud-scheduler/2.png" alt=""></p>
<p>У этого алгоритма есть недостаток. Он не потоковый. Это значит, что нужно определить размер &ldquo;банки&rdquo; или временного окна в рамках которого нужно оптимизировать. А что делать, если временное окно закончилось? Нужно обнулять распределение наблюдений и рассчитывать следующее окно. И это не очень хорошо. Во-первых, обнуление внутреннего состояния приводит к тому, что спутники неравновероятностно наблюдаются. То есть спутник с большей вероятностью появления внутри окна будет чаще наблюдаться. В потоковом же алгоритме вероятность появления спутника считается не в заданном окне, а на бесконечном отрезке времени. А значит равновероятностно. Во-вторых, для периодического расчёта следующего окна нужно дополнительно кодировать таймер. А это усложнение кода и логики работы.</p>
<p>Тем не менее я <a href="https://github.com/dernasherbrezon/r2cloud/blob/master/src/test/java/ru/r2cloud/satellite/UtilizationTest.java">закодировал этот алгоритм</a> и сравнил с предыдущим:</p>
<p><img src="/img/r2cloud-scheduler/3.png" alt=""></p>
<p>Я ожидал, что новый алгоритм улучшит загрузку станции на какие-нибудь магические 30-40-50%. Однако, на практике для 29 спутников он улучшил на скромные 5%. А относительно первого алгоритма на 15%.</p>
<p>У меня есть ещё одна идея для оптимизации. Она уж точно превратит этот алгоритм в классическую NP-полную задачу о рюкзаке. Допустим, в один момент времени над станцией пролетает 3 спутника. При этом для первого спутника можно запланировать &ldquo;полное&rdquo; наблюдение. А вот какой из оставшихся двоих взять? Очевидно, тот у которого &ldquo;частичный&rdquo; пролёт дольше. А что, если запланировать &ldquo;полное&rdquo; наблюдение не первого спутника, а второго? Тогда решение будет совершенно другое. И это как раз становится той самой <a href="https://ru.wikipedia.org/wiki/%D0%97%D0%B0%D0%B4%D0%B0%D1%87%D0%B0_%D0%BE_%D1%80%D1%8E%D0%BA%D0%B7%D0%B0%D0%BA%D0%B5">задачей о рюкзаке</a>.</p>
<p>Эта идея хороша, как тренировка кодирования алгоритмов, но на практике она вряд ли даст существенный прирост к загрузке станции. Как видно из графика, проще добавить больше спутников.</p>
<h2 id="заключение">Заключение</h2>
<p>Осталось перенести алгоритм на реальный планировщик r2cloud и не облажаться.</p>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Жемчужины Python кода</title>
      <link>https://dernasherbrezon.com/posts/python-way/</link>
      <pubDate>Wed, 23 Sep 2020 22:01:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/python-way/</guid>
      <description>В своих статьях я стараюсь рассказывать о небольших технологических штуках и проблемах, с которыми периодически сталкиваюсь. Но вот недавно я столкнулся с совершенно замечательным кодом, написанным на Python, и не могу пройти мимо, чтобы не покритиковать. Итак, есть вот такая функция:
def getkbits8(num, k, p): binary = bin(num)[2:] # convert number into binary first leadingzeros = 8 - len(binary) # Count the necessary leading zeros to fill byte binary = &amp;#39;0&amp;#39; * leadingzeros + binary # Fill byte with leading zeros end = 8 - p - 1 start = end - k + 1 k_bit_sub_str = binary[start: end + 1] # extract k bit sub-string return int(k_bit_sub_str, 2) # convert extracted sub-string into decimal again Она используется следующим образом:</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Жемчужины Python кода</h1></header>
      		<div class='container entry-content'>
  <p>В своих статьях я стараюсь рассказывать о небольших технологических штуках и проблемах, с которыми периодически сталкиваюсь. Но вот недавно я столкнулся с <a href="https://github.com/ralent/swampsat2/blob/ee011be72626cc6e63803d14dc775ca675cbcc6d/lib/swampsat2.py#L447">совершенно замечательным кодом</a>, написанным на Python, и не могу пройти мимо, чтобы не покритиковать. Итак, есть вот такая функция:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">getkbits8</span>(num, k, p):
    binary <span style="color:#f92672">=</span> bin(num)[<span style="color:#ae81ff">2</span>:]  <span style="color:#75715e"># convert number into binary first</span>
    leadingzeros <span style="color:#f92672">=</span> <span style="color:#ae81ff">8</span> <span style="color:#f92672">-</span> len(binary)  <span style="color:#75715e"># Count the necessary leading zeros to fill byte</span>
    binary <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;0&#39;</span> <span style="color:#f92672">*</span> leadingzeros <span style="color:#f92672">+</span> binary  <span style="color:#75715e"># Fill byte with leading zeros</span>
    end <span style="color:#f92672">=</span> <span style="color:#ae81ff">8</span> <span style="color:#f92672">-</span> p <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>
    start <span style="color:#f92672">=</span> end <span style="color:#f92672">-</span> k <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>
    k_bit_sub_str <span style="color:#f92672">=</span> binary[start: end <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>]  <span style="color:#75715e"># extract k  bit sub-string</span>
    <span style="color:#66d9ef">return</span> int(k_bit_sub_str, <span style="color:#ae81ff">2</span>)  <span style="color:#75715e"># convert extracted sub-string into decimal again</span>
</code></pre></div><p>Она используется следующим образом:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">frequentlock <span style="color:#f92672">=</span> ParseDownlink<span style="color:#f92672">.</span>_parsebinary(hexarray, <span style="color:#e6db74">&#39;uint8&#39;</span>)  <span style="color:#75715e"># Get whole register</span>
ordict[<span style="color:#e6db74">&#39;vutrx_rx_frequentlock&#39;</span>] <span style="color:#f92672">=</span> getkbits8(frequentlock, <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">0</span>)  <span style="color:#75715e"># Split register by bit position</span>
</code></pre></div><p>На вход подаётся беззнаковый байт, некий индекс К и ещё один индекс Р. На выходе получается число. Я, признаюсь честно, не знаю Python и поэтому потратил много времени, чтобы понять, как работает эта функция. К слову сказать, мне нужно было переписать парсер для телеметрии Swampsat2 с Python на Java для своего проекта.</p>
<p>Итак, что же делает эта функция на самом деле? Ответ:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">int</span> frequentlock <span style="color:#f92672">=</span> dis<span style="color:#f92672">.</span><span style="color:#a6e22e">readUnsignedByte</span><span style="color:#f92672">();</span>
rxFrequentlock <span style="color:#f92672">=</span> <span style="color:#f92672">((</span>frequentlock <span style="color:#f92672">&gt;&gt;</span> 0<span style="color:#f92672">)</span> <span style="color:#f92672">&amp;</span> 0x1<span style="color:#f92672">);</span>
</code></pre></div><p>Эта функция всего-навсего выделяет биты из байта. Если нужно получить 4 старших бита, то нужно вызвать функцию вот так:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">getkbits8(frequentlock, <span style="color:#ae81ff">4</span>, <span style="color:#ae81ff">4</span>)
</code></pre></div><p>Работает это так:</p>
<ul>
<li>число конвертируется в строку. Например: <code>bin(3)</code> -&gt; <code>'0b11'</code></li>
<li>берётся строка. В моём примере - это &lsquo;11&rsquo;</li>
<li>спереди дописывается необходимое количество нулей. Так, чтобы длина стала равна 8. Это длина байта в битах.</li>
<li>выделяется подстрока нужного размера</li>
<li>она конвертируется в число и возвращается</li>
</ul>
<p>Я не первый раз вижу настолько плохой код и поэтому оправился от шока достаточно быстро. Тем не менее меня всё не покидала мысль о мотивации программиста, который это писал. Предположим, что этот код писал новичок, и он, банально, не знал, что такое битовые операции. Но это не сходится с тем, что использованы сложные операции работы с массивами и строками. Неужели понять битовые операции было сложнее?</p>
<p>Второй вопрос, который я себе задал: зависит ли плохой код от языка программирования? Этот код написан на Python, и автор с лёгкостью и простым синтаксисом смог описать сложные операции. Чтобы ответить на этот вопрос, я надел перчатки и написал этот же код, но на Java:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">private</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">int</span> <span style="color:#a6e22e">getkbits8</span><span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> num<span style="color:#f92672">,</span> <span style="color:#66d9ef">int</span> k<span style="color:#f92672">,</span> <span style="color:#66d9ef">int</span> p<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
	String binary <span style="color:#f92672">=</span> Integer<span style="color:#f92672">.</span><span style="color:#a6e22e">toBinaryString</span><span style="color:#f92672">(</span>num<span style="color:#f92672">);</span>
	<span style="color:#66d9ef">int</span> leadingzeros <span style="color:#f92672">=</span> 8 <span style="color:#f92672">-</span> binary<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span><span style="color:#f92672">();</span>
	StringBuilder zeros <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> StringBuilder<span style="color:#f92672">();</span>
	<span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> 0<span style="color:#f92672">;</span> i <span style="color:#f92672">&lt;</span> leadingzeros<span style="color:#f92672">;</span> i<span style="color:#f92672">++)</span> <span style="color:#f92672">{</span>
		zeros<span style="color:#f92672">.</span><span style="color:#a6e22e">append</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#39;0&#39;</span><span style="color:#f92672">);</span>
	<span style="color:#f92672">}</span>
	binary <span style="color:#f92672">=</span> zeros<span style="color:#f92672">.</span><span style="color:#a6e22e">toString</span><span style="color:#f92672">()</span> <span style="color:#f92672">+</span> binary<span style="color:#f92672">;</span>
	<span style="color:#66d9ef">int</span> end <span style="color:#f92672">=</span> 8 <span style="color:#f92672">-</span> p <span style="color:#f92672">-</span> 1<span style="color:#f92672">;</span>
	<span style="color:#66d9ef">int</span> start <span style="color:#f92672">=</span> end <span style="color:#f92672">-</span> k <span style="color:#f92672">+</span> 1<span style="color:#f92672">;</span>
	String k_bit_sub_str <span style="color:#f92672">=</span> binary<span style="color:#f92672">.</span><span style="color:#a6e22e">substring</span><span style="color:#f92672">(</span>start<span style="color:#f92672">,</span> end <span style="color:#f92672">+</span> 1<span style="color:#f92672">);</span>
	<span style="color:#66d9ef">return</span> Integer<span style="color:#f92672">.</span><span style="color:#a6e22e">parseInt</span><span style="color:#f92672">(</span>k_bit_sub_str<span style="color:#f92672">,</span> 2<span style="color:#f92672">);</span>
<span style="color:#f92672">}</span>
</code></pre></div><p>Если честно, то версия на Java кажется более громоздкой. И это хорошо. Если новичок задумает написать такую функцию, то он несколько раз подумает нет ли способа попроще. Этот пример лишний раз убеждает меня в том, что многословность Java, на самом деле, большой плюс. Весь Java код буквально кричит о том, что происходит выделение ресурсов и неэффективные операции, а также видно, что процессор будет выполнять странные вещи. В Python же достаточно написать <code>'0' * leadingzeros</code>.</p>
<p>Надеюсь, автор оригинального Python кода всего лишь проходил стажировку и не писал софт для настоящих спутников.</p>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Странный Wi-Fi</title>
      <link>https://dernasherbrezon.com/posts/wifi-country-codes/</link>
      <pubDate>Sat, 19 Sep 2020 14:40:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/wifi-country-codes/</guid>
      <description>В процессе исследования странного поведения WiFi в RPi, я наткнулся на довольно интересную информацию. Немногие знают, но WiFi работает в разных странах на разных частотах. Исторически, частоты современного Wifi 2.4Ггц и 5Ггц использовались военными, метеорологическими станциями и радарами. В разных странах они работали немножко на разных частотах, поэтому когда пришёл WiFi, инженеры начали выкручиваться.
Они придумали довольно простой способ - это конфигурация WiFi в зависимости от страны. Несмотря на то, что железо в принципе может работать в широком диапазоне частот, его ограничивают на уровне прошивки в зависимости от страны.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Странный Wi-Fi</h1></header>
      		<div class='container entry-content'>
  <p>В процессе исследования странного поведения WiFi в RPi, я наткнулся на довольно интересную информацию. Немногие знают, но WiFi работает в разных странах на разных частотах. Исторически, частоты современного Wifi 2.4Ггц и 5Ггц использовались военными, метеорологическими станциями и радарами. В разных странах они работали немножко на разных частотах, поэтому когда пришёл WiFi, инженеры начали выкручиваться.</p>
<p>Они придумали довольно простой способ - это конфигурация WiFi в зависимости от страны. Несмотря на то, что железо в принципе может работать в широком диапазоне частот, его ограничивают на уровне прошивки в зависимости от страны.</p>
<p>Такой подход несёт в себе множество потенциальных странностей в поведении WiFi.</p>
<h2 id="создание-помех">Создание помех</h2>
<p>Представьте себе, что рядом стоят две WiFi точки из разных стран. У каждой из них каналы распределены равномерно, но границы частот немного сдвинуты. Получается что-то вроде этого:</p>
<p><img src="/img/wifi-country-codes/1.png" alt=""></p>
<p>Если идёт передача данных на второй точке доступа на 3 канале, то она создаёт помехи на первой точке доступа на каналах 2 и 3. WiFi протокол достаточно продвинутый и предусматривает переключение на другие каналы, если есть помехи. Но в данном случае один канал создаёт помехи на двух каналах, что уменьшает количество свободных каналов. А если добавить сюда несколько точек доступа, то количество свободных каналов ещё уменьшится.</p>
<p>Получается неправильно настроенная точка доступа создаёт помехи в два раза больше, чем правильно настроенная. Это работает и в обратную сторону: все правильно настроенные точки доступа создают в два раза больше помех для неправильно настроенной.</p>
<p>Это в теории. В реальности всё чуть сложнее. На 2.4Ггц почти не бывает конфликтов. Всё потому, что диапазон частот и каналы с 1 по 11 во всех странах одинаковые.</p>
<p><img src="/img/wifi-country-codes/2.png" alt=""></p>
<p>Наиболее подвержены таким помехам станции на 5Ггц.</p>
<h2 id="перебои-в-работе">Перебои в работе</h2>
<p>В RPi существует специальный сервис - &ldquo;wifi-country&rdquo;. Он следит за тем, чтобы страна была правильно указана. Если она не указана, то в логах появляются вот такие сообщения:</p>
<pre><code>Sep 18 18:10:25 raspberrypi wifi-country[324]: Wi-Fi is disabled because the country is not set
</code></pre><p>При этом сам WiFi модуль не выключается и сеть работает. Однако, через какое-то время WiFi может потерять связь и отключиться. Это случается спонтанно и такое событие трудно отловить. За несколько лет на моих RPi это случалось примерно раз в месяц.</p>
<h2 id="как-узнать-настройки-страны-для-wifi">Как узнать настройки страны для WiFi?</h2>
<p>В MacOS это можно сделать через меню &ldquo;About this Mac&rdquo; -&gt; &ldquo;System report&rdquo; -&gt; &ldquo;Wi-Fi&rdquo;. Некоторые точки доступа отправляют настройки страны:</p>
<p><img src="/img/wifi-country-codes/3.png" alt=""></p>
<p>Для RPi узнать настройки можно командой <code>iw</code>:</p>
<pre><code># iw reg get

global
country RU: DFS-ETSI
	(2402 - 2482 @ 40), (N/A, 20), (N/A)
	(5170 - 5250 @ 80), (N/A, 20), (N/A), AUTO-BW
	(5250 - 5330 @ 80), (N/A, 20), (0 ms), DFS, AUTO-BW
	(5650 - 5730 @ 80), (N/A, 30), (0 ms), DFS
	(5735 - 5835 @ 80), (N/A, 30), (N/A)
	(57000 - 66000 @ 2160), (N/A, 40), (N/A)
</code></pre><p>Или для GB:</p>
<pre><code>global
country GB: DFS-ETSI
	(2402 - 2482 @ 40), (N/A, 20), (N/A)
	(5170 - 5250 @ 80), (N/A, 20), (N/A), AUTO-BW
	(5250 - 5330 @ 80), (N/A, 20), (0 ms), DFS, AUTO-BW
	(5490 - 5710 @ 160), (N/A, 27), (0 ms), DFS
	(57000 - 66000 @ 2160), (N/A, 40), (N/A)
</code></pre><p>В первом блоке указывается интервал частот. Например, в России можно использовать частоты 5.735Ггц - 5.835Ггц, а вот в Великобритании уже нельзя.</p>
<h2 id="как-изменить-настройки-страны-для-wifi">Как изменить настройки страны для WiFi?</h2>
<p>В MacOS это можно сделать через программу &ldquo;Wireless Diagnostics&rdquo;. Для этого нужно нажать клавишу &ldquo;Alt&rdquo; и кликнуть по значку WiFi. В появившемся меню будет пункт &ldquo;Open Wireless Diagnostics&rdquo;. Эта программа проанализирует WiFi сети вокруг и выдаст отчёт.</p>
<p><img src="/img/wifi-country-codes/4.png" alt=""></p>
<p>Как видно на скриншоте, моя Time Capsule конфликтует с сетями вокруг. Для того чтобы поменять страну, нужно открыть AirPort Utility, выбрать &ldquo;Wireless&rdquo; -&gt; &ldquo;Wireless options&rdquo; и выбрать регион:</p>
<p><img src="/img/wifi-country-codes/5.png" alt=""></p>
<p>Иии&hellip; <a href="https://discussions.apple.com/thread/6500525">ничего не получится</a>, так как список стран для Time Capsule задаётся в прошивке.</p>
<p>Для RPi поменять страну очень просто. Это можно сделать через программу raspi-config. Нужно выбрать &ldquo;Localization Options&rdquo; -&gt; &ldquo;Change Wi-Fi Country&rdquo; и выбрать свою страну из списка.</p>
<p><img src="/img/wifi-country-codes/6.png" alt=""></p>
<p>&ldquo;Просто&rdquo;, но это не значит, что сработает. Многие жалуются, что даже после того, как страна изменена в raspi-config, в системе по-прежнему появляется сообщение:</p>
<pre><code>Sep 18 18:10:25 raspberrypi wifi-country[324]: Wi-Fi is disabled because the country is not set
</code></pre><p>В таком случае можно сделать следующее:</p>
<ul>
<li>поменять страну через команду: <code>sudo iw reg set RU</code></li>
<li>добавить страну в <code>/etc/wpa_supplicant/wpa_supplicant.conf</code>: <code>country=RU</code></li>
<li>убедиться, что страна задана большими буквами. wifi-country.service почему-то проверяет только две большие буквы:</li>
</ul>
<pre><code>if /bin/grep -q &quot;^country=[A-Z][A-Z]&quot; /etc/wpa_supplicant/wpa_supplicant.conf; then
        exit 0
fi
</code></pre><h2 id="выводы">Выводы</h2>
<p>Можно ныть из-за плохого WiFi и пропускать важные пролёты спутников. А можно попытаться разобраться в проблеме.</p>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Протокол Pacsat</title>
      <link>https://dernasherbrezon.com/posts/pacsat/</link>
      <pubDate>Sun, 06 Sep 2020 22:50:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/pacsat/</guid>
      <description>Вступление 30 лет назад, когда я ещё под стол ходил, собрались умные люди и придумали протокол под названием Pacsat. Этот протокол позволял обмениваться сообщениями и файлами через спутники. Звучит, как будто в конце 80-х решили придумать космический FTP сервер. Всё это, а так же многое другое я обнаружил, когда решил декодировать Falconsat-3. В голове почему-то сразу всплыли ББС, телетайпы и запахло пылью. Недолго думая, я решил погрузиться в мир старины и заняться активной археологией.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Протокол Pacsat</h1></header>
      		<div class='container entry-content'>
  <h2 id="вступление">Вступление</h2>
<p>30 лет назад, когда я ещё под стол ходил, собрались умные люди и придумали протокол под названием Pacsat. Этот протокол позволял обмениваться сообщениями и файлами через спутники. Звучит, как будто в конце 80-х решили придумать космический FTP сервер. Всё это, а так же многое другое я обнаружил, когда решил декодировать <a href="https://db.satnogs.org/satellite/30776">Falconsat-3</a>. В голове почему-то сразу всплыли ББС, телетайпы и запахло пылью. Недолго думая, я решил погрузиться в мир старины и заняться активной археологией.</p>
<h2 id="pacsat">Pacsat</h2>
<p>На момент создания, уже был протокол обмена файлами - <a href="https://ru.wikipedia.org/wiki/FTP">FTP</a>. Он работал в режиме точка-точка: один клиент запрашивает данные у одного сервера. Это удобно, если нужно обеспечить конфиденциальность данных и простоту реализации. Однако, каналы радиолюбительских спутников в то время были достаточно узкие. Да и конфиденциальность тоже не нужна, так как по закону вся коммуникация на радиолюбительских частотах должна быть в открытом виде. А раз этого не нужно делать, то можно придумать протокол, который бы использовал эти особенности. Так и появился Pacsat.</p>
<p>Идея заключается в том, что одна станция может послать запрос, а несколько станций в пределах видимости спутника могут получить ответ. И, вместо того, чтобы делать похожие запросы, станции могут переиспользовать полученные данные.</p>
<p>С помощью этого протокола можно загружать файлы на спутник, просматривать список доступных файлов, скачивать выбранный, получать обычные текстовые сообщения и телеметрию спутника. Больше о мотивации создания протокола можно прочитать в <a href="https://www.g0kla.com/pacsat/intro.txt">официальной документации</a>.</p>
<h2 id="структура-фреймов">Структура фреймов</h2>
<p>Все фреймы протокола Pacsat передаются с помощью протокола <a href="https://ru.wikipedia.org/wiki/AX.25">AX.25</a>. При этом тип фрейма определяется значением &ldquo;destination&rdquo; заголовка AX.25.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>source<span style="color:#f92672">.</span><span style="color:#a6e22e">equalsIgnoreCase</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;PFS3&#34;</span><span style="color:#f92672">))</span> <span style="color:#f92672">{</span>
	<span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>destination<span style="color:#f92672">.</span><span style="color:#a6e22e">equalsIgnoreCase</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;TIME&#34;</span><span style="color:#f92672">))</span> <span style="color:#f92672">{</span>
		pht <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> PacsatHousekeepingTask<span style="color:#f92672">(</span>readMessage<span style="color:#f92672">(</span>dis<span style="color:#f92672">));</span>
	<span style="color:#f92672">}</span> <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>destination<span style="color:#f92672">.</span><span style="color:#a6e22e">equalsIgnoreCase</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;LSTAT&#34;</span><span style="color:#f92672">))</span> <span style="color:#f92672">{</span>
		lstat <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> LoaderStatusLine<span style="color:#f92672">(</span>readMessage<span style="color:#f92672">(</span>dis<span style="color:#f92672">));</span>
	<span style="color:#f92672">}</span>
	<span style="color:#f92672">...</span>
<span style="color:#f92672">}</span>
</code></pre></div><p>Большинство фреймов - это текстовые строчки в ASCII кодировке. Например, информация о текущем времени на спутнике:</p>
<pre><code>PHT: uptime is 922/22:26:34.  Time is Thu Sep 03 20:54:33 2020
</code></pre><p>Телеметрия передаётся в бинарном виде и для каждого спутника своя. Для Falconsat-3 я не нашёл официальной документации с описанием формата. Однако, есть проект <a href="https://github.com/ac2cz/Falcon/blob/master/spacecraft/TlmIformat.csv">Falcon</a>, в котором есть описание полей. За неимением лучшего, я <a href="https://github.com/dernasherbrezon/jradio/blob/master/src/main/java/ru/r2cloud/jradio/falconsat3/Telemetry.java">скопировал</a> их формат. В итоге получилось неплохо. По крайней мере количество передаваемых байт в настоящем фрейме совпало с количеством в описании.</p>
<pre><code>&quot;bus4v6Current&quot;: 0.018719183,
&quot;bus4v6Voltage&quot;: 4.5808215,
&quot;bus3v3Current&quot;: 0.09616788,
&quot;bus3v3Voltage&quot;: 3.3550766,
...
</code></pre><p>Данные тоже выглядят более или менее правдоподобно. Например, напряжение 3.3В на шине действительно близко к 3.3В.</p>
<p>А вот формат передачи файлов стандартный и описан в <a href="https://www.g0kla.com/pacsat/broadcst.txt">спецификации Pacsat</a>. Каждый файл передаётся на Землю разбитым на фреймы. Каждый фрейм состоит из заголовка и данных.</p>
<pre><code>&lt;flags&gt;&lt;file_id&gt;&lt;file_type&gt;&lt;offset&gt;&lt;data&gt;&lt;crc&gt;
</code></pre><p>Для того чтобы получить файл, нужно собрать все фреймы с одинаковым <code>file_id</code> и склеить их поле <code>data</code>. Однако, тут есть тонкость. Так как общего количества фреймов нет в заголовке, то и понять, когда же файл полностью получен нельзя. Есть только смещение блока данных в результирующем файле. По нему нельзя сказать сколько всего будет этих блоков.</p>
<p>Поэтому я решил <a href="https://github.com/dernasherbrezon/jradio/blob/master/src/main/java/ru/r2cloud/jradio/falconsat3/FileExtractor.java#L32">сгруппировать их по file_id и отсортировать по offset</a>. Фрейм, у которого offset=0 является первым. Этот фрейм очень важен, так как в нём находится заголовок pacsat файла. А в этом заголовке передаётся мета-информация о файле, в том числе и его размер. Зная размер файла, можно понять какой фрейм последний. Псевдокод выглядит следующим образом:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">Map<span style="color:#f92672">&lt;</span>Long<span style="color:#f92672">,</span> List<span style="color:#f92672">&lt;</span>BroadcastFileFrame<span style="color:#f92672">&gt;&gt;</span> groupByFileId <span style="color:#f92672">=</span> groupBy<span style="color:#f92672">(</span>frames<span style="color:#f92672">);</span>
<span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span>List<span style="color:#f92672">&lt;</span>BroadcastFileFrame<span style="color:#f92672">&gt;</span> cur <span style="color:#f92672">:</span> groupByFileId<span style="color:#f92672">.</span><span style="color:#a6e22e">values</span><span style="color:#f92672">())</span> <span style="color:#f92672">{</span>
	Collections<span style="color:#f92672">.</span><span style="color:#a6e22e">sort</span><span style="color:#f92672">(</span>cur<span style="color:#f92672">,</span> BroadcastFileFrameComparator<span style="color:#f92672">.</span><span style="color:#a6e22e">INSTANCE</span><span style="color:#f92672">);</span>
	PacsatFile file <span style="color:#f92672">=</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">;</span>
	<span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> 0<span style="color:#f92672">;</span> i <span style="color:#f92672">&lt;</span> cur<span style="color:#f92672">.</span><span style="color:#a6e22e">size</span><span style="color:#f92672">();</span> i<span style="color:#f92672">++)</span> <span style="color:#f92672">{</span>
		BroadcastFileFrame frame <span style="color:#f92672">=</span> cur<span style="color:#f92672">.</span><span style="color:#a6e22e">get</span><span style="color:#f92672">(</span>i<span style="color:#f92672">);</span>
		<span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>i <span style="color:#f92672">==</span> 0 <span style="color:#f92672">&amp;&amp;</span> frame<span style="color:#f92672">.</span><span style="color:#a6e22e">getOffset</span><span style="color:#f92672">()</span> <span style="color:#f92672">!=</span> 0<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
			<span style="color:#75715e">// can&#39;t restore the file without header
</span><span style="color:#75715e"></span>			<span style="color:#66d9ef">break</span><span style="color:#f92672">;</span>
		<span style="color:#f92672">}</span>
		<span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>i <span style="color:#f92672">==</span> 0 <span style="color:#f92672">&amp;&amp;</span> frame<span style="color:#f92672">.</span><span style="color:#a6e22e">getOffset</span><span style="color:#f92672">()</span> <span style="color:#f92672">==</span> 0<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
			<span style="color:#75715e">// read the header and populate the file
</span><span style="color:#75715e"></span>			file <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> PacsatFile<span style="color:#f92672">();</span>
			file<span style="color:#f92672">.</span><span style="color:#a6e22e">setHeader</span><span style="color:#f92672">(</span>header<span style="color:#f92672">);</span>
			file<span style="color:#f92672">.</span><span style="color:#a6e22e">setFileId</span><span style="color:#f92672">(</span>frame<span style="color:#f92672">.</span><span style="color:#a6e22e">getFileId</span><span style="color:#f92672">());</span>
			file<span style="color:#f92672">.</span><span style="color:#a6e22e">setBody</span><span style="color:#f92672">(</span><span style="color:#66d9ef">new</span> <span style="color:#66d9ef">byte</span><span style="color:#f92672">[</span>header<span style="color:#f92672">.</span><span style="color:#a6e22e">getFileSize</span><span style="color:#f92672">().</span><span style="color:#a6e22e">intValue</span><span style="color:#f92672">()</span> <span style="color:#f92672">-</span> header<span style="color:#f92672">.</span><span style="color:#a6e22e">getBodyOffset</span><span style="color:#f92672">()]);</span>	
			<span style="color:#f92672">...</span>		
		<span style="color:#f92672">}</span> <span style="color:#66d9ef">else</span> <span style="color:#f92672">{</span>
			<span style="color:#75715e">// populate the body
</span><span style="color:#75715e"></span>			file<span style="color:#f92672">.</span><span style="color:#a6e22e">append</span><span style="color:#f92672">(</span>frame<span style="color:#f92672">.</span><span style="color:#a6e22e">getData</span><span style="color:#f92672">(),</span> frame<span style="color:#f92672">.</span><span style="color:#a6e22e">getOffset</span><span style="color:#f92672">()</span> <span style="color:#f92672">-</span> file<span style="color:#f92672">.</span><span style="color:#a6e22e">getHeader</span><span style="color:#f92672">().</span><span style="color:#a6e22e">getBodyOffset</span><span style="color:#f92672">());</span>
		<span style="color:#f92672">}</span>
<span style="color:#f92672">}</span>
</code></pre></div><p>Тут не очень понятно зачем добавили тип файла в заголовок фрейма. Дело в том, что в заголовке pacsat файла тоже есть тип файла. И по спецификации они должны совпадать. Вместо этого типа файла я бы добавил размер файла, чтобы упростить декодирование.</p>
<p>Ещё одним неудобством этих фреймов является их количество. Допустим, я знаю общий размер файла и таким образом фрейм с последним кусочком файла. Но как узнать сколько всего кусочков-фреймов было использовано для передачи? Поле <code>length</code> опционально, а значит нельзя рассчитывать, что каждый спутник будет его посылать. И, например, Falconsat-3 не посылает его. Также в спецификации нет требования к длине фрейма. Поэтому один и тот же файл 400 байт может быть послан одним фреймом, а может быть четырьмя.</p>
<p>Для того чтобы понять, получены ли все фреймы я написал следующий алгоритм:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">System<span style="color:#f92672">.</span><span style="color:#a6e22e">arraycopy</span><span style="color:#f92672">(</span>part<span style="color:#f92672">,</span> 0<span style="color:#f92672">,</span> body<span style="color:#f92672">,</span> offset<span style="color:#f92672">,</span> part<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span><span style="color:#f92672">);</span>
holes<span style="color:#f92672">.</span><span style="color:#a6e22e">remove</span><span style="color:#f92672">(</span>offset<span style="color:#f92672">);</span>
<span style="color:#66d9ef">int</span> nextExpectedOffset <span style="color:#f92672">=</span> offset <span style="color:#f92672">+</span> part<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span><span style="color:#f92672">;</span>
<span style="color:#75715e">// add hole of the next offset
</span><span style="color:#75715e">// if this is the last chunk, then do not it&#39;s offset
</span><span style="color:#75715e"></span><span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>nextExpectedOffset <span style="color:#f92672">&lt;</span> body<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
	holes<span style="color:#f92672">.</span><span style="color:#a6e22e">add</span><span style="color:#f92672">(</span>nextExpectedOffset<span style="color:#f92672">);</span>
<span style="color:#f92672">}</span>
</code></pre></div><p>В наборе <code>holes</code> содержатся недостающие индексы. Как только приходит самый первый кусочек файла, я сразу же добавляю недостающий индекс, который должен быть следующим. Таким образом в <code>holes</code> содержится как минимум один индекс. Если же он получен, то я рассчитываю следующий недостающий. И так далее пока не будет получен самый последний. Тогда я не добавляю его в <code>holes</code> и этот набор становится пустым. А это значит файл был полностью принят. Алгоритм использует тот факт, что все полученные фреймы отсортированы по <code>offset</code>.</p>
<p>Сам <a href="https://github.com/dernasherbrezon/jradio/blob/fc7863b71a28029a7e480f92d99ca5ada8f3063c/src/main/java/ru/r2cloud/jradio/falconsat3/PacsatFileHeader.java#L11">заголовок pacsat файла</a> содержит достаточно много полей. Среди них есть и название файла, и его контрольная сумма:</p>
<p><img src="/img/pacsat/2.png" alt=""></p>
<p>С контрольной суммой вышла забавная история. Каждый фрейм уже содержит контрольную сумму XMODEM CRC16. Однако, есть ещё контрольная сумма заголовка pacsat файла и его данных. Как написано в документации, спутники могут попытаться восстановить часть файла, если произошёл <code>Single Event Upset</code>. Файлы ведь хранятся на диске спутника, а значит подвержены ошибкам. И то, что в протоколе предусмотрена возможность контроля целостности на уровне файлов - это заслуживает уважения. Другой вопрос в том, как это сделано. Когда я попытался рассчитать контрольную сумму, у меня ничего не получилось! И только спустя несколько часов исследований выяснилось, что нужно было использовать другой алгоритм CRC16! Не XMODEM CRC16, как везде, а простой <a href="https://github.com/dernasherbrezon/jradio/blob/fc7863b71a28029a7e480f92d99ca5ada8f3063c/src/main/java/ru/r2cloud/jradio/crc/Crc16SumOfBytes.java">Sum-Of-Bytes</a>.</p>
<p>Вот, собственно, и всё. Я скачал демодулированые AX.25 кадры с db.satnogs.org и получил вот такое милое сообщение:</p>
<pre><code>To  : ALL
From: ST2NH
Time: 084104UTC
Date: 20 Aug 2020
-----------------
Hello all,
very dark clouds with heavy thunderstorm at the med of the day.
see photo of the dark sky above my antenna.

Good WX for every one

73 de st2nh
</code></pre><h2 id="выводы">Выводы</h2>
<p>Я стал ещё на шаг ближе к выживанию в случае зомби-апокалипсиса.</p>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Питание Raspberrypi</title>
      <link>https://dernasherbrezon.com/posts/power-supply-for-raspberrypi/</link>
      <pubDate>Sat, 29 Aug 2020 00:04:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/power-supply-for-raspberrypi/</guid>
      <description>Если поискать в интернете словосочетание &amp;ldquo;питание для raspberrypi&amp;rdquo;, то можно найти массу статей о том, что нужно использовать официальный блок питания на 5В и 2.5А. Но что, если RPi питается от солнечных панелей и в логах постоянно проскальзывает &amp;ldquo;Under-voltage detected!&amp;rdquo;? Для решения этой проблемы мне немного пришлось повозиться с теорией и корзиной для покупок.
Предыстория Прежде, чем пытаться найти решение, нужно понять начальные условия. Для одной из своих станций слежения за спутниками я решил использовать солнечную панель.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Питание Raspberrypi</h1></header>
      		<div class='container entry-content'>
  <p>Если поискать в интернете словосочетание &ldquo;питание для raspberrypi&rdquo;, то можно найти массу статей о том, что нужно использовать официальный блок питания на 5В и 2.5А. Но что, если RPi питается от солнечных панелей и в логах постоянно проскальзывает &ldquo;Under-voltage detected!&rdquo;? Для решения этой проблемы мне немного пришлось повозиться с теорией и корзиной для покупок.</p>
<h2 id="предыстория">Предыстория</h2>
<p>Прежде, чем пытаться найти решение, нужно понять начальные условия. Для одной из своих станций слежения за спутниками я решил использовать солнечную панель. Для этого я купил солнечную панель на 30Вт, контроллер <a href="https://www.epsolarpv.com/product/3.html">Epever Tracer</a> и аккумулятор на 12В.</p>
<p><img src="/img/power-supply-for-raspberrypi/1.jpg" alt=""></p>
<p>Несмотря на нелепый вид и кучу проводов, схема довольно продвинутая:</p>
<ul>
<li>контроллер получает энергию от солнечной панели и питает нагрузку.</li>
<li>излишки идут на заряд аккумулятора. Он внизу.</li>
<li>ночью, когда панель не работает, аккумулятор питает нагрузку и немного разряжается.</li>
<li>температурный датчик (ещё один провод идущий вниз). Служит для температурной компенсации напряжения аккумулятора. Это позволяет заряжать аккумулятор оптимальным напряжением, которое зависит от температуры.</li>
<li>RPi (нагрузка) подключена через преобразователь напряжения DC-DC. Так как контроллер может выдавать только 12В, а USB работает на 5В, то нужен специальный преобразователь.</li>
<li>RPi по проводу USB-RJ45 считывает показатели контроллера и отправляет в influxdb. Для этого я написал отдельный проект <a href="https://github.com/dernasherbrezon/epever-tracer-influxdb">epever-tracer-influxdb</a>. О нём я постараюсь написать как-нибудь в другой раз.</li>
<li>К RPi подключен rtl-sdr, который и получает сигналы со спутников по антенне.</li>
</ul>
<p>И всё это на удивление работает. За одним исключением: когда начинается запись пролёта спутника, логах появляются ошибки:</p>
<pre><code>Aug 13 11:54:04 raspberrypi kernel: Under-voltage detected! (0x00050005)
</code></pre><p>Причём это случалось каждый раз, когда начиналась запись. Ясное дело, это было как-то связано с тем, что rtl-sdr включался на полную, начинал потреблять больше энергии и напряжение на RPi проседало. Но как это исправить без осциллографа и такой-то матери?</p>
<h2 id="немного-теории">Немного теории</h2>
<p>Дело явно не в контроллере, так как никакого проседания напряжения там не было:</p>
<p><img src="/img/power-supply-for-raspberrypi/2.png" alt=""></p>
<p>Проседания тока тоже не было. Явно видно, что в момент пролёта спутника потребление возрастало до ~300мА.</p>
<p><img src="/img/power-supply-for-raspberrypi/3.png" alt=""></p>
<p>Что-то явно было в DC-DC преобразователе и для этого мне пришлось погрузиться в теорию. Итак, что же происходит, когда включается rtl-sdr? Схематично процесс изображён ниже.</p>
<p><img src="/img/power-supply-for-raspberrypi/4.png" alt=""></p>
<p>В момент, когда включается rtl-sdr, мгновенно увеличивается потребление тока всей RasperryPi. При этом, напряжение в какой-то момент проседает, чтобы компенсировать выдачу необходимого тока. После совсем небольшого времени напряжение стабилизируется и всё продолжает работать. Именно этого падения напряжение и достаточно, чтобы RPi начал писать в логи ошибки.</p>
<h2 id="решение-проблемы">Решение проблемы</h2>
<p>Я ничего путного не придумал, кроме как купить другой преобразователь. У меня до этого был вот такой:</p>
<p><a href="https://www.amazon.es/dp/B0769CXVS1/ref=pe_3310721_189395781_TE_SCE_dp_1"><img src="/img/power-supply-for-raspberrypi/5.jpg" alt="dcdc"></a></p>
<p>Я нашёл подороже и с хорошими отзывами:</p>
<p><a href="https://www.amazon.es/Reduction-Voltage-Converter-Adapter-Module/dp/B00LGWQJNS"><img src="/img/power-supply-for-raspberrypi/6.jpg" alt="dcdc2"></a></p>
<p>Ещё я поменял провода и продул контакты. Включил, и сообщения пропали. Видимо, второй преобразователь действительно лучше первого.</p>
<h2 id="выводы">Выводы</h2>
<p>Несмотря на то, что мне удалось разобраться с проблемой питания, во рту осталось горькое послевкусие. Я просто заменил один преобразователь на другой. Этот другой тоже мог быть недостаточно быстрым и я мог бы ещё долго чесать голову, пытаясь понять в чём же проблема. Но и на будущее у меня нет однозначного рецепта по выбору DC-DC преобразователя. На сайте в обоих случаях написано 5В 2.5А, тем не менее результаты разные. Тут либо надо смотреть на отзывы, либо покупать осциллограф и тестировать.</p>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Толстые и тонкие дистрибутивы</title>
      <link>https://dernasherbrezon.com/posts/thin-and-fat-distributives/</link>
      <pubDate>Wed, 26 Aug 2020 22:31:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/thin-and-fat-distributives/</guid>
      <description>На этой неделе я окончательно перевёл все мои проекты на Ubuntu 18.04 и тонкие .deb дистрибутивы. Этот проект я начал в начале года и окончательно завершил только сейчас, спустя почти 8 месяцев. Сама по себе миграция заслуживает отдельной статьи с нытьём и риторическими вопросами. Здесь же, я хочу немного описать противостояние тонких и толстых дистрибутивов. То, как я видел эту историю и немного анализа. Поехали!
Дистрибутивы Почти сразу же, как только написана первая версия любой программы, становится вопрос о том, как её распространять.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Толстые и тонкие дистрибутивы</h1></header>
      		<div class='container entry-content'>
  <p>На этой неделе я окончательно перевёл все мои проекты на Ubuntu 18.04 и тонкие .deb дистрибутивы. Этот проект я начал в начале года и окончательно завершил только сейчас, спустя почти 8 месяцев. Сама по себе миграция заслуживает отдельной статьи с нытьём и риторическими вопросами. Здесь же, я хочу немного описать противостояние тонких и толстых дистрибутивов. То, как я видел эту историю и немного анализа. Поехали!</p>
<h2 id="дистрибутивы">Дистрибутивы</h2>
<p>Почти сразу же, как только написана первая версия любой программы, становится вопрос о том, как её распространять. В 2020 есть несколько довольно стандартных способов:</p>
<ul>
<li>Докер-образ. Программа компилируется, все зависимые библиотеки кладутся как в <a href="https://docs.docker.com/storage/storagedriver/">storage layer</a></li>
<li>zip файл. Все необходимые файлы просто кладутся в архив</li>
<li>debian пакет. Немного о том, как его собрать, я писал в <a href="https://dernasherbrezon.com/posts/java-dist/">одной из своих статей</a></li>
</ul>
<p>Если с докер-образами всё понятно, то вот, что положить в zip файл или debian пакет, не всегда очевидно. И существуют 2 диаметрально противоположные стратегии.</p>
<h2 id="толстые-дистрибутивы">Толстые дистрибутивы</h2>
<p>Идея достаточно проста: давайте положим в архив все необходимые файлы и зависимые библиотеки, необходимые для работы приложения. Из плюсов данного подхода:</p>
<ul>
<li>почти нет зависимости на внешнюю среду. Абсолютно не важно какие библиотеки уже установлены в операционной системе, приложение принесёт свои собственные библиотеки с нужными ему версиями.</li>
<li>нет зависимости от других приложений. Это следует из того, что все зависимости лежат внутри толстого дистрибутива.</li>
<li>простота. Достаточно скачать один дистрибутив и запустить его <code>java -jar fatApp.jar</code>.</li>
</ul>
<p>Из минусов:</p>
<ul>
<li>дистрибутив очень много весит. Из-за того, что все зависимости лежат внутри, размер дистрибутива значительно увеличивается. Это влияет на скорость установки (нужно скачать дистрибутив из apt репозитория или artifactory) и скорость сборки, загрузки в репозиторий.</li>
<li>как следствие, сильно увеличивается в размерах бинарный репозиторий. Нужно продумывать стратегию очистки старых версий. Например, недавно компания Docker столкнулась с проблемой разросшегося репозитория docker hub и <a href="https://www.docker.com/pricing/retentionfaq">решила удалять неиспользуемые докер-образы</a>. Удалять старые и не использующиеся зависимости - достаточно сложная и нетривиальная задача.</li>
</ul>
<p>Ярким приверженцем использования толстых дистрибутивов является проект <a href="https://docs.spring.io/spring-boot/docs/2.1.5.RELEASE/reference/html/build-tool-plugins-maven-plugin.html">spring boot</a>. Во время фазы <code>package</code> они собирают толстый дистрибутив, который можно запустить одной строчкой:</p>
<pre><code>$ mvn package
$ java -jar target/mymodule-0.0.1-SNAPSHOT.jar
</code></pre><h2 id="тонкие-дистрибутивы">Тонкие дистрибутивы</h2>
<p>Решить проблемы толстых дистрибутивов призваны тонкие. Но и у них есть свои минусы:</p>
<ul>
<li>относительная сложность. Нет единого мнения о том, как правильно собирать тонкий дистрибутив и разворачивать его для запуска.</li>
<li>зависимость от других приложений. В классическом тонком дистрибутиве зависимости установлены в операционной системе. Но что, если одному приложению нужна одна версия библиотеки, а другому другая? Разработчики linux-подобных операционных систем пытаются найти наименьшее общее кратное для тысяч приложений и библиотек. Это достаточно сложная и трудоёмкая процедура.</li>
</ul>
<p>Плюсы вытекают сами собой:</p>
<ul>
<li>приложения очень мало весят. Их можно очень быстро деплоить и, зачастую, не нужно переживать о размере бинарного репозитория.</li>
<li>зависимости переиспользуются между приложениями. Это не очень актуально для Java мира, но вот для C/C++ мира вполне востребовано. Смысл в том, что библиотека загружается в память всего один раз и потом используется разными приложениями. Это уменьшает потребление оперативной памяти и скорость загрузки приложения.</li>
</ul>
<p>Как я уже писал, яркими сторонниками тонких дистрибутивов являются операционные системы. Несмотря на то, что команда Ubuntu решила сделать толстые дистрибутивы (snap пакеты), сообщество встретило эту идею очень прохладно и с долей скептицизма.</p>
<h2 id="тонкие-дистрибутивы-для-java">Тонкие дистрибутивы для Java</h2>
<p>Во всех своих проектах я постепенно отказался от толстых дистрибутивов и перешёл на тонкие. Для меня это было важно из-за нескольких причин:</p>
<ul>
<li>большие бинарные репозитории дорого держать. Для хобби проектов, которые не приносят деньги, платить за гигабайты дистрибутивов - дорого.</li>
<li>скорость сборки и загрузки в репозитории. Я очень часто работаю в поезде, самолёте, гостинице, где широкие каналы большая редкость. Загружать 100 мегабайтные толстые дистрибутивы можно часами. А вот загрузка ~200кб занимает секунды. Это очень удобно и увеличивает продуктивность.</li>
</ul>
<p>Поскольку не существует единого мнения о том, как делать тонкие дистрибутивы, я решил сделать свой. Для этого я написал небольшой maven plugin - <a href="https://github.com/dernasherbrezon/deps-maven-plugin">deps-maven-plugin</a>. Во время сборки он создаёт три файла:</p>
<ul>
<li>repositories.txt - список всех maven репозиториев, которые доступны в проекте</li>
<li>dependencies.txt - список всех зависимостей проекта</li>
<li>script.sh - фиксированный скрипт, лежащий внутри плагина</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-xml" data-lang="xml"><span style="color:#f92672">&lt;plugin&gt;</span>
	<span style="color:#f92672">&lt;groupId&gt;</span>com.aerse.maven<span style="color:#f92672">&lt;/groupId&gt;</span>
	<span style="color:#f92672">&lt;artifactId&gt;</span>deps-maven-plugin<span style="color:#f92672">&lt;/artifactId&gt;</span>
	<span style="color:#f92672">&lt;configuration&gt;</span>
		<span style="color:#f92672">&lt;repositories&gt;</span>${project.build.directory}/deps/repositories.txt<span style="color:#f92672">&lt;/repositories&gt;</span>
		<span style="color:#f92672">&lt;dependencies&gt;</span>${project.build.directory}/deps/dependencies.txt<span style="color:#f92672">&lt;/dependencies&gt;</span>
		<span style="color:#f92672">&lt;script&gt;</span>${project.build.directory}/deps/script.sh<span style="color:#f92672">&lt;/script&gt;</span>
		<span style="color:#f92672">&lt;excludes&gt;</span>
			<span style="color:#f92672">&lt;exclude&gt;</span>com.example:*:*<span style="color:#f92672">&lt;exclude&gt;</span>
		<span style="color:#f92672">&lt;/excludes&gt;</span>
	<span style="color:#f92672">&lt;/configuration&gt;</span>
<span style="color:#f92672">&lt;/plugin&gt;</span>
</code></pre></div><p>Идея достаточно проста: после распаковки тонкого дистрибутива нужно вызвать script.sh и передать ему два сгенерированных файла. Он их скачает и положит в указанную папку. Это и будет папка со всеми зависимостями.</p>
<p>Тут нужно учитывать, что все зависимости должны быть доступны в открытых maven репозиториях. Если это не так, то их можно исключить в секции <code>excludes</code> и положить внутрь тонкого артефакта.</p>
<p>Но как же быть, если артефакт поменял версию или его удалили из списка зависимостей? Всё просто: script.sh строит пересечение зависимостей, которые нужны в папочке и тех, которые там уже есть. Если зависимости уже были скачаны, то они не будут ещё раз скачиваться. А если зависимости уже не используются (лежат в папке, но отсутствуют в dependencies.txt), то они удаляются из папки.</p>
<p>После того как скрипт отработает, можно запускать приложение. Например, вот так выглядят пути для r2cloud:</p>
<pre><code>java -cp /home/pi/r2cloud/lib/*:/usr/share/java/r2cloud/* ru.r2cloud.R2Cloud
</code></pre><p>Папка <code>/home/pi/r2cloud/lib/</code> содержит само приложение. А папка <code>/usr/share/java/r2cloud/</code> содержит все зависимости приложения.</p>
<h2 id="результаты">Результаты</h2>
<p>Помимо очевидных плюсов тонких дистрибутивов, есть и неочевидные. Например, они сильно экономят трафик при обновлении r2cloud через 3g модем. А так же, за всё время у меня накопилось всего 564.11Мб дистрибутивов r2cloud. А это <a href="https://travis-ci.org/github/dernasherbrezon/r2cloud">около 600</a> сборок!</p>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Время в Raspberrypi - 3</title>
      <link>https://dernasherbrezon.com/posts/time-raspberrypi-3/</link>
      <pubDate>Wed, 19 Aug 2020 18:30:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/time-raspberrypi-3/</guid>
      <description>&amp;ldquo;Да сколько уже можно про время в Raspberrypi?!&amp;rdquo; - скажут некоторые. Однако, несмотря на две предыдущие статьи, мне есть о чём написать. Опять.
Как я уже неоднократно писал, время можно получить двумя способами:
 подключившись к интернету используя RTC модуль  На некоторых станциях у меня стоит RTC модуль, на некоторых нет. Но я не особо переживал по этому поводу, так как станции имели постоянное подключение к интернету.
Запах приключений Всё работало очень хорошо и стабильно, до тех пор пока я не обратил на странное поведения в логах.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Время в Raspberrypi - 3</h1></header>
      		<div class='container entry-content'>
  <p>&ldquo;Да сколько уже можно про время в Raspberrypi?!&rdquo; - скажут некоторые. Однако, несмотря на две <a href="https://dernasherbrezon.com/posts/time-raspberrypi-2/">предыдущие статьи</a>, мне есть о чём написать. Опять.</p>
<p>Как я уже неоднократно писал, время можно получить двумя способами:</p>
<ul>
<li>подключившись к интернету</li>
<li>используя RTC модуль</li>
</ul>
<p>На некоторых станциях у меня стоит RTC модуль, на некоторых нет. Но я не особо переживал по этому поводу, так как станции имели постоянное подключение к интернету.</p>
<h2 id="запах-приключений">Запах приключений</h2>
<p>Всё работало очень хорошо и стабильно, до тех пор пока я не обратил на странное поведения в логах.</p>
<pre><code>Dec 24 03:20:07 raspberrypi java[447]: [1577147653365] observation time passed. skip 43466
</code></pre><p>Поначалу я не придал этому должного внимания, так как эта запись могла означать, что очередь на обработку сигналов переполнилась и последующее наблюдение пропустило своё окно. Не имеет смысл запускать задачу по наблюдению за спутником, если тот уже улетел.</p>
<p>Тем не менее несколько недель назад я заметил шаблон: сообщения появлялись только при старте приложения. Иногда одно, иногда несколько наблюдений отменялись. Однако, в этом не было ничего критичного. Все последующие наблюдения отрабатывали на ура.</p>
<p>Я решил выделить время и попытаться понять в чём же причина. И причина, конечно же, оказалось в системном времени. А именно в том, в какой момент системное время синхронизируется. Для простоты можно нарисовать простейшую диаграмму последовательности:</p>
<ul>
<li>стартует система</li>
<li>запускается systemd-timesyncd и асинхронно запрашивает время</li>
<li>запускается r2cloud и стартует наблюдения</li>
<li>systemd-timesyncd получает асинхронный ответ и модифицирует системное время</li>
</ul>
<p>Из такого описания явно следует проблема: все наблюдения рассчитаны на основе неправильного системного времени. А значит, когда оно изменится, должны быть отброшены.</p>
<h2 id="решение-близко">Решение близко</h2>
<p>К счастью, решение есть! Оно называется <code>systemd-time-wait-sync.service</code>. Этот сервис был добавлен сравнительно недавно в Debian Buster дистрибутив. Он, как следует из названия, дожидается, когда будет получен асинхронный ответ по протоколу NTP, и отправляет специальное событие <code>time-sync.target</code>.</p>
<p>Для того чтобы всё заработало, нужно сделать несколько шагов. Во-первых, нужно включить сервис:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">sudo systemctl enable systemd-time-wait-sync
</code></pre></div><p>Можно проверить статус сервиса:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">sudo systemctl status systemd-time-wait-sync
● systemd-time-wait-sync.service - Wait Until Kernel Time Synchronized
   Loaded: loaded <span style="color:#f92672">(</span>/lib/systemd/system/systemd-time-wait-sync.service; enabled; vendor preset: enabled<span style="color:#f92672">)</span>
   Active: active <span style="color:#f92672">(</span>exited<span style="color:#f92672">)</span> since Tue 2020-08-18 12:01:07 BST; <span style="color:#ae81ff">1</span> day 8h ago
     Docs: man:systemd-time-wait-sync.service<span style="color:#f92672">(</span>8<span style="color:#f92672">)</span>
  Process: <span style="color:#ae81ff">111</span> ExecStart<span style="color:#f92672">=</span>/lib/systemd/systemd-time-wait-sync <span style="color:#f92672">(</span>code<span style="color:#f92672">=</span>exited, status<span style="color:#f92672">=</span>0/SUCCESS<span style="color:#f92672">)</span>
 Main PID: <span style="color:#ae81ff">111</span> <span style="color:#f92672">(</span>code<span style="color:#f92672">=</span>exited, status<span style="color:#f92672">=</span>0/SUCCESS<span style="color:#f92672">)</span>

Aug <span style="color:#ae81ff">18</span> 11:17:01 raspberrypi systemd-time-wait-sync<span style="color:#f92672">[</span>111<span style="color:#f92672">]</span>: adjtime state <span style="color:#ae81ff">5</span> status <span style="color:#ae81ff">40</span> time Tue 2020-08-18 10:17:01.037765 UTC
</code></pre></div><p>Во-вторых, необходимо, чтобы наш сервис, в данном случае r2cloud, стартовал только тогда, когда время синхронизировано. Для этого нужно в описание юнита добавить зависимость:</p>
<pre><code>[Unit]
Description=R2Cloud Service
After=time-sync.target
</code></pre><h2 id="результат">Результат</h2>
<p>В результате r2cloud теперь стартует после того, как время синхронизировано:</p>
<pre><code>Aug 18 12:01:07 raspberrypi systemd[1]: Started Wait Until Kernel Time Synchronized.
Aug 18 12:01:07 raspberrypi systemd[1]: Reached target System Time Synchronized.
Aug 18 12:01:07 raspberrypi systemd[1]: Started R2Cloud Service.
</code></pre><p>Все наблюдения запускаются в своё время и r2cloud станции по всему миру стали чуть эффективнее работать. Ура!</p>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Оптимизация FSK демодулятора</title>
      <link>https://dernasherbrezon.com/posts/tune-ber-fsk/</link>
      <pubDate>Mon, 03 Aug 2020 20:22:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/tune-ber-fsk/</guid>
      <description>Не прошло и года, а я уже придумал как улучшить свой FSK демодулятор. Как уже писал, имея на руках BER кривую, можно начинать улучшать демодулятор. Первым делом я сравнил FSK демодулятор SatNOGS и свой.
Для этого я взял сырые данные (.wav файл) из обработанного пролёта спутника и попробовал прогнать его через свой демодулятор. В результате у меня получилось 23 пакета. Однако, демодулятор SatNOGS смог найти 24 пакета.
Всё это значит, что есть пространство для оптимизации.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Оптимизация FSK демодулятора</h1></header>
      		<div class='container entry-content'>
  <p><a href="https://dernasherbrezon.com/posts/jradio-ber-fsk/">Не прошло и года</a>, а я уже придумал как улучшить свой FSK демодулятор. Как уже писал, имея на руках BER кривую, можно начинать улучшать демодулятор. Первым делом я сравнил <a href="https://gitlab.com/librespacefoundation/satnogs/satnogs-flowgraphs/-/blob/master/generic/fsk.grc">FSK демодулятор</a> SatNOGS и свой.</p>
<p>Для этого я взял сырые данные (.wav файл) из <a href="https://network.satnogs.org/observations/2573152/">обработанного пролёта спутника</a> и попробовал прогнать его через свой демодулятор. В результате у меня получилось 23 пакета. Однако, демодулятор SatNOGS смог найти 24 пакета.</p>
<p><img src="/img/tune-ber-fsk/1.png" alt=""></p>
<p>Всё это значит, что есть пространство для оптимизации.</p>
<p>Я открыл flowgraph satnogs и попытался сравнить его со своим.</p>
<p><img src="/img/tune-ber-fsk/2.png" alt=""></p>
<p>Основные блоки такие же. Используется DC Blocker и Clock Recovery M&amp;M. Единственное отличие - это использование 1024 шага для усреднения сигнала в DC Blocker. В моём же демодуляторе используется только 32 * sps. Для sps=5, это значение будет 160. Я попробовал увеличить это значение до 1024 и получил 24 пакета!</p>
<p>Прирост улучшения декодирования отлично виден на BER кривой.</p>
<p><img src="/img/tune-ber-fsk/dc1024.png" alt=""></p>
<p>После этого я решил попробовать их настройки для Clock Recovery M&amp;M блока и получил ещё более впечатляющую производительность (зелёная линия):</p>
<p><img src="/img/tune-ber-fsk/mmfixes.png" alt=""></p>
<p>Следующим шагом я заметил, что gain omega вычисляется как (2 * Math.PI) / 100. Я попробовал вместо 2 подставить значение sps. В моём случае это было 5. Результат оправдал ожидания. Отчётливо виден небольшой прирост:</p>
<p><img src="/img/tune-ber-fsk/mmsps.png" alt=""></p>
<p>После каждого шага оптимизаций я прогонял через демодулятор реальный сигнал и каждый раз получал чуть более лучшие результаты. На изначальном сигнале у меня получилось 24 пакета, а на <a href="https://network.satnogs.org/observations/2573097/">другом</a> вместо 5 изначальных я получил 7. Почти 30% улучшение!</p>
<p>В ближайшее время я планирую обновить демодулятор и раскатать настройки в сети r2cloud.</p>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Расчёт вероятности ошибки для FSK демодулятора</title>
      <link>https://dernasherbrezon.com/posts/jradio-ber-fsk/</link>
      <pubDate>Sat, 01 Aug 2020 10:22:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/jradio-ber-fsk/</guid>
      <description>Введение Прошёл почти год с того момента, когда я измерял BER для BPSK демодулятора. И вот пришло время измерить вероятность ошибки для FSK демодулятора. Поводом к такому исследованию послужило большое количество спутников, передающих частотно-модулированный сигнал. Мне хотелось прежде всего измерить текущие характеристики демодулятора, чтобы в последствии можно было его улучшать.
Описание теста С прошлого раза я решил существенно поменять методологию. Раньше для подсчёта ошибок использовалось скремблирование. Все полученные нулевые биты делились на 6, из-за характеристик полинома скремблера и дифференциального кодирования.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Расчёт вероятности ошибки для FSK демодулятора</h1></header>
      		<div class='container entry-content'>
  <h2 id="введение">Введение</h2>
<p>Прошёл почти год с того момента, когда я <a href="https://dernasherbrezon.com/posts/jradio-ber-bpsk/">измерял BER для BPSK демодулятора</a>. И вот пришло время измерить вероятность ошибки для FSK демодулятора. Поводом к такому исследованию послужило большое количество спутников, передающих частотно-модулированный сигнал. Мне хотелось прежде всего измерить текущие характеристики демодулятора, чтобы в последствии можно было его улучшать.</p>
<h2 id="описание-теста">Описание теста</h2>
<p>С прошлого раза я решил существенно поменять методологию. Раньше для подсчёта ошибок использовалось скремблирование. Все полученные нулевые биты делились на 6, из-за характеристик полинома скремблера и дифференциального кодирования. Такой способ работал хорошо для больших значений \( E_b / N_0 \). Однако, для маленьких значений, он не очень подходил. Например, на последнем графике видно, что демодулятор работал лучше теоретически возможного:</p>
<p><img src="/img/jradio-ber-bpsk/ber-bpsk-demodulator.png" alt="bpsk demodulator"></p>
<p>Более сложным, но и одновременно более точным способом подсчёта ошибок, будет использование корреляции сигналов. Для этого нужно найти корреляцию между входным потоком бит и выходящим из демодулятора. Прелесть этого подхода в следующем:</p>
<ul>
<li>строгое математическое доказательство.</li>
<li>входящая последовательность бит может быть псевдослучайной последовательностью. Это очень сильно поможет демодулятору синхронизировать символы. А ещё это очень похоже на реальные данные.</li>
<li>устойчивость к задержкам в демодуляторе. Некоторые блоки в демодуляторе могут задерживать входящий сигнал. Поэтому первый входящий бит не всегда равен первому исходящему биту.</li>
<li>не требует специальных знаний об устройстве демодулятора. Например, при тестировании <a href="https://dernasherbrezon.com/posts/jradio-ber-bpsk/">BPSK демодулятора</a> я учитывал фазовую неоднозначность. Такой подход не сработал бы для тестирования FSK демодулятора.</li>
</ul>
<h2 id="корреляция-сигналов">Корреляция сигналов</h2>
<p>Прежде, чем кодировать, нужно разобраться с матмоделью. Корреляция сигналов записывается как:</p>
<p>$$
(f \star g)[n]\ \triangleq \sum_{m=-\infty}^{\infty} \overline{f[m]} g[m+n]
$$</p>
<p>Где,</p>
<p>\(f\) - входящий сигнал,
\(g\) - выходной сигнал</p>
<p>Программировать бесконечный цикл не очень здорово, поэтому обычно используют <a href="https://en.wikipedia.org/wiki/Convolution_theorem">теорему о свёртке</a> и вычисляют преобразования Фурье:</p>
<p>$$
\mathcal{F}\left\{f \star g\right\} = \overline{\mathcal{F} \left\{f\right\}} \cdot \mathcal{F}\left\{g\right\}
$$</p>
<p>Где,</p>
<p>\(\mathcal{F} \left\{f\right\}\) - преобразование Фурье входящего сигнала,
\(\mathcal{F}\left\{g\right\}\) - преобразование Фурье выходного сигнала</p>
<p>После того как найдена корреляция сигналов, можно найти <a href="https://en.wikipedia.org/wiki/Coherence_(signal_processing)">когерентность</a> между ними:</p>
<p>$$
C_{fg}(n) = \frac{|\mathcal{F}\left\{f \star g\right\}|^2}{G_{ff}(n) G_{gg}(n)}
$$</p>
<p>После осознания формул, алгоритм можно представить следующим образом:</p>
<ul>
<li>получение псевдослучайной последовательности &ldquo;0&rdquo; и &ldquo;1&rdquo;. Это будут исходные данные для передачи.</li>
<li>преобразование данных в интервал &ldquo;-1&rdquo; и &ldquo;1&rdquo; и расчёт прямого преобразования Фурье.</li>
<li>получение <a href="https://ru.wikipedia.org/wiki/%D0%9A%D0%BE%D0%BC%D0%BF%D0%BB%D0%B5%D0%BA%D1%81%D0%BD%D0%BE%D0%B5_%D1%81%D0%BE%D0%BF%D1%80%D1%8F%D0%B6%D0%B5%D0%BD%D0%B8%D0%B5">комплексного сопряжения</a> \(\overline{\mathcal{F} \left\{f\right\}}\).</li>
<li>передача исходных данных и получение выходного сигнала.</li>
<li>преобразование выходного сигнала в интервал &ldquo;-1&rdquo; и &ldquo;1&rdquo; и расчёт прямого преобразования Фурье.</li>
<li>получение корреляции \(\mathcal{F}\left\{f \star g\right\}\).</li>
<li>обратное преобразование Фурье для того, чтобы получить значения кросс-спектральной плотности (cross-spectral density).</li>
<li>получение ошибки из когерентности сигналов \(C_{fg}(n)\).</li>
</ul>
<p>Этот метод выглядит значительно сложнее предыдущего. Тем не менее использование математики и формального доказательства даёт мне некоторую уверенность в результатах.</p>
<h2 id="результаты">Результаты</h2>
<p>Результатов мне пришлось ждать довольно долго. И не потому, что алгоритм работает достаточно долго. Нет. Несколько недель мне потребовалось для того, чтобы правильно настроить стенд. Например, нужно правильно отмасштабировать коэффициенты FFT преобразования и подобрать правильную скорость сэмплирования. Несмотря на то, что как такового сэмплирования нет, все блоки работает именно с коэффициентом сэмплирования и его нужно было правильно подобрать в разных местах.</p>
<p>В результате получились следующие графики:</p>
<p><img src="/img/jradio-ber-fsk/fskBer.png" alt="fsk demodulator"></p>
<p>Как видно, я пробовал различные варианты, прежде чем получил более-менее сносный результат. Например, использование <a href="https://en.wikipedia.org/wiki/DC_block">DC Blocker</a> для блокирования DC сигнала, существенно ухудшало характеристики демодулятора.</p>
<p>Ещё одним открытием для меня стало то, что повышение количества сэмплов на символ (samples per symbol - sps) существенно улучшает качество приёма. На красном и зелёном графике я использовал sps=2, а на бордовом - sps=5.</p>
<p>Я попробовал заменить low pass filter на обычный прямоугольный, но результат получился не очень.</p>
<p><img src="/img/jradio-ber-fsk/lpfVsSquare.png" alt=""></p>
<p>Ещё я померил как себя поведёт демодулятор с DC Blocker и без при sps=5. Результат чуть лучше, но я не готов его выкидывать, так как этот компонент помогает найти несущую частоту в реальных сигналах. Частота принимаемого сигнала может немного &ldquo;плавать&rdquo;. Иногда это происходит из-за приёмника, иногда на спутнике проблемы.</p>
<p><img src="/img/jradio-ber-fsk/withDCvswithout.png" alt=""></p>
<h2 id="что-дальше">Что дальше?</h2>
<p>После того как получена BER кривая, можно начинать улучшать демодулятор. Для начала я хочу попробовать заменить алгоритм синхронизации символов. Потом я попробую измерить скорость лока сигнала и скорость потери лока. Впереди, как обычно, много всего интересного и неизвестного.</p>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>r2weather - Открытые метеоснимки из космоса</title>
      <link>https://dernasherbrezon.com/posts/r2weather/</link>
      <pubDate>Sun, 26 Jul 2020 14:05:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/r2weather/</guid>
      <description>В последнее время я очень много писал про r2weather. В том числе про различные технические особенности реализации. В этой же статье я хочу описать общую схему работы.
Введение За Землёй наблюдает множество метеорологических спутников. Основная их задача - получение различных метеосников поверхности Земли. Эти данные используются в различных моделях. Например, чтобы предсказывать погоду, таяние полярных льдов или плотность распределения плактона в прибрежных водах.
Одним из таких спутников является Метеор-М №2. Помимо множества разных камер, на нём установлена камера МСУ-МР.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>r2weather - Открытые метеоснимки из космоса</h1></header>
      		<div class='container entry-content'>
  <p>В последнее время я очень много писал про <a href="https://r2weather.ru">r2weather</a>. В том числе про различные технические особенности реализации. В этой же статье я хочу описать общую схему работы.</p>
<h2 id="введение">Введение</h2>
<p>За Землёй наблюдает множество метеорологических спутников. Основная их задача - получение различных метеосников поверхности Земли. Эти данные используются в различных моделях. Например, чтобы предсказывать погоду, таяние полярных льдов или плотность распределения плактона в прибрежных водах.</p>
<p>Одним из таких спутников является <a href="https://ru.wikipedia.org/wiki/%D0%9C%D0%B5%D1%82%D0%B5%D0%BE%D1%80-%D0%9C_%E2%84%962">Метеор-М №2</a>. Помимо множества разных камер, на нём установлена камера МСУ-МР. Главная её особенность в том, что данные с неё передаются в открытом международном формате <a href="https://planet.iitp.ru/spacecraft/meteor_m_n2_structure_2.pdf">LRPT</a>. С помощью недорогого оборудования каждый желающий может получить метеоснимки.</p>
<p>Уже много лет энтузиасты со всего мира получают метеоснимки с пролетающего над ними спутника. Однако, никто не объединяет эти данные в единую картину. Они хранятся у каждого локально, в различных форматах.</p>
<p>r2weather - это как раз тот сервис, который объединяет данные Метеор-М №2 со множества станций по всему миру. Каждый желающий может получить метеоснимки со спутника и отправить в r2weather. Затем сервис обработает данные и отобразит на карте мира.</p>
<h2 id="принцип-работы">Принцип работы</h2>
<p><img src="/img/r2weather/diagram.png" alt=""></p>
<p>Принцип работы достаточно простой:</p>
<ul>
<li>спутник пролетает над приёмной станцией и передаёт изображение на Землю</li>
<li>станция декодирует сигнал и передаёт результат в сервис r2weather.ru</li>
<li>сервис обрабатывает изображение и отображает на карте</li>
</ul>
<p><img src="/img/r2weather/3.png" alt=""></p>
<p>Поскольку формат LRPT открытый, то каждый может собрать приёмную станцию и поучаствовать в проекте. Такую станцию можно разработать с нуля или взять уже готовую. Существует несколько популярных станций.</p>
<h2 id="satnogs">SatNOGS</h2>
<p>Наиболее популярная сеть станций - <a href="https://satnogs.org/">satnogs</a>. В <a href="https://wiki.satnogs.org/Main_Page">официальной документации</a> описано несколько типовых конфигураций и способы сборки. Станция satnogs поддерживает различные антенны и приёмные устройства. Большинство из них можно купить в магазине и собрать как конструктор.</p>
<p><img src="/img/r2weather/4.png" alt=""></p>
<p>Из недостатков то, что прямой интеграции между станцией satnogs и <a href="https://r2weather.ru">r2weather.ru</a> нет. Поэтому придётся программировать отправку данных со станции в сервис.</p>
<h2 id="r2cloud">r2cloud</h2>
<p>Ещё одна сеть станций - <a href="https://github.com/dernasherbrezon/r2cloud">r2cloud</a>. Это моя собственная разработка. Она не такая популярная как SatNOGS и поддерживает меньшее количество приёмников. Тем не менее она максимально простая и идеально подходит новичкам. В ней есть интеграция с <a href="https://r2weather.ru">r2weather.ru</a> через промежуточный сервис <a href="https://r2server.ru">r2server.ru</a>.</p>
<p><img src="/img/r2weather/r2server-data.png" alt=""></p>
<p>Более детальную информацию можно найти в <a href="https://r2weather.ru/howto">официальной документации</a>.</p>
<h2 id="пересылка-данных-вручную">Пересылка данных вручную</h2>
<p>Этот способ скорее подходит для специалистов или одноразового добавления данных. Есть несколько разных инструкций от <a href="http://happysat.nl/Setup_Meteor/Setup.html">happysat</a>, <a href="https://leshamilton.co.uk/soft/Guide-to-Receiving-Meteor.pdf">Les Hamilton</a> и <a href="https://r4uab.ru/priyom-meteosnimkov-so-sputnikov-meteor-m/">r4uab</a>.</p>
<p>После того как данные в сыром виде получены, можно их отправить с помощью следующей команды:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">gzip -c 2020_04_15_LRPT_06-03-15.s | curl -X PUT -H <span style="color:#e6db74">&#34;Content-Type: application/octet-stream&#34;</span> -H <span style="color:#e6db74">&#34;Authorization: xxx&#34;</span> <span style="color:#ae81ff">\ </span>-H <span style="color:#e6db74">&#34;Content-Encoding: gzip&#34;</span> <span style="color:#e6db74">&#34;https://r2weather.ru/api/v1/lrpt/soft?receptionTime=2020_04_15_LRPT_06-03-15&#34;</span> -v --data-binary @-
</code></pre></div><h2 id="обработка-изображений">Обработка изображений</h2>
<p>После получения изображения, сервис <a href="https://r2weather.ru">r2weather.ru</a> делает несколько преобразований:</p>
<ul>
<li>геокодирование данных. Он сопоставляет каждому пикселю координаты широты и долготы.</li>
<li>восстановление геометрии снимка. Камера снимает в широкоугольном формате, поэтому нужно восстановить пропорции изображения по краям.</li>
</ul>
<p><img src="/img/georeferencing-gcp/6.png" alt=""></p>
<p>После всех преобразований сервис &ldquo;разрезает&rdquo; изображение на кусочки, чтобы отобразить на карте.</p>
<p><img src="/img/r2weather/6.png" alt=""></p>
<h2 id="аналоги">Аналоги</h2>
<p>Идея r2weather не нова, и многие крупнейшие космические агентства имеют похожие сервисы. Например, у европейского космического агентства есть программа <a href="https://www.copernicus.eu/en">copernicus</a>. В рамках этой программы они предоставляют доступ к данным со спутников Sentinel.</p>
<p><img src="/img/r2weather/0.png" alt=""></p>
<p>У NASA есть сервис <a href="https://worldwind.arc.nasa.gov/worldweather/">world weather</a>, где доступны данные MODIS, SUOMI NPP, NOAA и другие.</p>
<p><img src="/img/r2weather/1.png" alt=""></p>
<p>У роскосмоса также есть похожий сервис - <a href="https://gptl.ru">геопортал данных</a>, там можно получить метеоснимки со спутников Канопус, Метеор-М и Ресурс-П.</p>
<p><img src="/img/r2weather/2.png" alt=""></p>
<p>Все эти сервисы предоставляют доступ к своим данным всем желающим и совершенно бесплатно. Тем не менее, данных с камеры МСУ-МР нет ни на одном из этих сервисов. r2weather как раз и призван восполнить этот недостаток.</p>
<h2 id="заключение">Заключение</h2>
<p>r2weather готов и работает стабильно уже несколько месяцев. Тем не менее сервис есть куда улучшать. Вот несколько идей:</p>
<ul>
<li>отфильтровывать ночные снимки. Камера недостаточно чувствительна, поэтому ночью изображение просто серое. Оно не несёт никакой информации и может быть отфильтровано. Сюда же входят изображения сумерек и рассвета.</li>
<li>&ldquo;отрезать&rdquo; левые и правые границы метеоснимков. Из-за особенности камеры изображение получается сильно растянутым по краям. Если его накладывать рядом с более чётким, то видны небольшие ошибки обработки.</li>
<li>добавить разные слои для разных каналов. Сейчас все каналы объединяются в одно изображение. Для более детального анализа подходят разные длины волн и разные каналы.</li>
<li>добавить метод API для получения данных в формате GeoTIFF. Это позволит учёным и исследователям использовать данные в своих работах.</li>
</ul>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Какую Open source лицензию выбрать?</title>
      <link>https://dernasherbrezon.com/posts/open-source-license/</link>
      <pubDate>Thu, 09 Jul 2020 22:20:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/open-source-license/</guid>
      <description>На самом деле универсального ответа на этот вопрос нет. Всё, как обычно, зависит от целей проекта и личных предпочтений автора. Open source лицензий великое множество и каждый может выбрать абсолютно любую. Главное, что нужно помнить, open source - это не код без лицензии.
Даже для мини-проектов на github нужно указывать лицензии. Зачем? Допустим, Вы сделали небольшую, но крайне полезную библиотеку. Допустим, её нашёл какой-нибудь разработчик и захочет использовать в своём коммерческом приложении.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Какую Open source лицензию выбрать?</h1></header>
      		<div class='container entry-content'>
  <p>На самом деле универсального ответа на этот вопрос нет. Всё, как обычно, зависит от целей проекта и личных предпочтений автора. Open source лицензий великое множество и каждый может выбрать абсолютно любую. Главное, что нужно помнить, open source - это не код без лицензии.</p>
<p>Даже для мини-проектов на github нужно указывать лицензии. Зачем? Допустим, Вы сделали небольшую, но крайне полезную библиотеку. Допустим, её нашёл какой-нибудь разработчик и захочет использовать в своём коммерческом приложении. Но ни одна компания в здравом уме не будет использовать библиотеку без лицензии. Никому не нужны проблемы с юристами. Именно поэтому, Ваш, хоть и полезный проект, не будет использован. А разработчики вынуждены будут либо использовать альтернативы, либо полностью переписывать Ваш код. Чтобы избежать этой ситуации, лучше озаботиться правильной лицензией заранее.</p>
<h2 id="зоопарк">Зоопарк</h2>
<p>Существует целый зоопарк Open source лицензий. Наверное, именно поэтому, разработчики не заморачиваются и просто не указывают лицензию. Однако, разобраться с ними достаточно просто.</p>
<p><img src="/img/open-source-license/Floss-license-slide-image.png" alt=""></p>
<p>By David A. Wheeler - <a rel="nofollow" class="external free" href="http://www.dwheeler.com/essays/floss-license-slide.html"><a href="http://www.dwheeler.com/essays/floss-license-slide.html">http://www.dwheeler.com/essays/floss-license-slide.html</a></a>, <a href="https://creativecommons.org/licenses/by-sa/3.0" title="Creative Commons Attribution-Share Alike 3.0">CC BY-SA 3.0</a>, <a href="https://commons.wikimedia.org/w/index.php?curid=41060008">Link</a></p>
<p>Дэвид провёл небольшое исследование и собрал наиболее популярные open source лицензии на одной картинке. Если вкратце, то все open source лицензии условно можно разделить на 3 основные группы:</p>
<ul>
<li>Разрешающие (permissive)</li>
<li>Слабо защищающие (weak protective)</li>
<li>Сильно защищающие (strong protective)</li>
</ul>
<p>Стрелочками указана совместимость между лицензиями. Например, разрабатывая программу под GPLv3, Вы можете включать в неё компоненты, выпущенные по лицензии Apache 2.0. Но не наоборот.</p>
<h2 id="разрешающие">Разрешающие</h2>
<p>Наиболее распространённые лицензии - это <a href="http://licenseit.ru/wiki/index.php/MIT_License">MIT</a>, <a href="http://licenseit.ru/wiki/index.php/BSD_License">BSD</a> и <a href="http://licenseit.ru/wiki/index.php/Apache_License_version_2.0">Apache 2.0</a>. За небольшими девиациями, эти лицензии позволяют использовать код как в коммерческих, так и в open source проектах. Главное указывать авторство оригинальной программы. Полное описание доступно по ссылкам выше.</p>
<h2 id="слабо-защищающие">Слабо защищающие</h2>
<p>Различные варианты <a href="http://licenseit.ru/wiki/index.php/GNU_Lesser_General_Public_License_version_2.1">Lesser GPL</a>. Основное отличие от разрешающих лицензий - это необходимость предоставлять исходные коды и лицензировать программу под GPL лицензией (копилефт). При этом, если в Вашем проекте используется библиотека (динамическая линковка или статическая) под лицензией LGPL, то она будет совместима с любой лицензией Вашего проекта.</p>
<h2 id="сильно-защищающие">Сильно защищающие</h2>
<p>Различные варианты <a href="http://licenseit.ru/wiki/index.php/GNU_General_Public_License_version_3">GPL</a>. Эти лицензии требуют раскрытие исходных кодов и лицензирование проекта, независимо от того, как используется библиотека.</p>
<h2 id="немного-экзотики">Немного экзотики</h2>
<p>Существует ещё одна достаточно полезная лицензия - <a href="https://softwareengineering.stackexchange.com/questions/119436/what-does-gpl-with-classpath-exception-mean-in-practice">GPLv2 with classpath extensions</a>. Она используется компанией Oracle для лицензирования своих open source решений. Зачем она вообще нужна и чем отличается от обычной LGPL?</p>
<p>Для начала нужно сказать, что все &ldquo;классические&rdquo; GPL лицензии не работают с такой штукой как байт-код. В них есть описание процесса линковки и компиляции, что совсем не подходит интерпретируемым языкам, в том числе Java. Для этого как раз и была выпущена специальная лицензия GPLv2 with classpath extensions. Она ясно и чётко говорит, что библиотеки, выпущенные под этой лицензией можно использовать в коммерческих приложениях с любой другой лицензией.</p>
<h2 id="выбор-лицензии">Выбор лицензии</h2>
<p>После того как лицензия выбрана, её достаточно добавить в корень проекта. Это можно сделать во время создания проекта или в любое другое время. Например, github сделали очень удобный способ добавления лицензии при старте проекта:</p>
<p><img src="/img/open-source-license/2.png" alt=""></p>
<h2 id="license_finder">license_finder</h2>
<p>Однако, это ещё не всё. Нужно проверить все зависимости, которые использованы в проекте. Если одна из зависимостей в проекте выпущена под лицензией GPL, то и Ваш проект должен быть GPL-совместим. Для такой проверки есть очень удобный инструмент - <a href="https://github.com/pivotal/LicenseFinder">license_finder</a>. Он поддерживает все современные системы сборки и может получить лицензии всех зависимых библиотек.</p>
<p><img src="/img/open-source-license/3.png" alt=""></p>
<p>На картинке выше, эта программа автоматически определила систему управления зависимостями maven и прошлась по каждой из них. В результате найдено множество зависимостей и напротив каждой из них проставлено название лицензии.</p>
<p>Программа сама не разрешает конфликтов между лицензиями и не выбирает правильную. Это лишь удобный инструмент просмотреть лицензии всех своих зависимостей. Разруливать конфликты нужно вручную. Для этого можно добавить лицензии в список разрешённых.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">license_finder approvals add <span style="color:#e6db74">&#34;Apache 2.0&#34;</span>
</code></pre></div><p>После того как лицензии вручную одобрены, программа создаст файл <code>doc/dependency_decisions.yml</code>. В этом файле будет список всех разрешённых лицензий.</p>
<p>Ну и вишенкой на торте будет добавление license_finder шагом сборки в CI. Если он найдёт не одобренную лицензию, то статус код будет не равен 0, и сборка упадёт. Очень удобно, если случайно добавили новую зависимость, но не посмотрели её лицензию. Вот пример добавления в travis-ci:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml"><span style="color:#f92672">before_install</span>:
  - <span style="color:#ae81ff">gem install license_finder</span>
  
<span style="color:#f92672">script</span>:
  - <span style="color:#ae81ff">set -e</span>
  - <span style="color:#ae81ff">license_finder</span>
  - <span style="color:#ae81ff">the rest of build</span>
</code></pre></div>
</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Полевые испытания поворотного устройства</title>
      <link>https://dernasherbrezon.com/posts/rotator-for-r2cloud-3/</link>
      <pubDate>Tue, 07 Jul 2020 21:39:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/rotator-for-r2cloud-3/</guid>
      <description>Очередная неделя тестирования поворотного устройства принесла удивительные результаты. Для начала, немного изменений по сравнению с предыдущей неделей.
  Работа от батареек. В этот раз я решил попробовать работать от батареек. Это должно уменьшить количество помех, приходящих из сети. Не то, чтобы их очень много, но я надеялся уменьшить noise floor. Кстати, кто-нибудь знает как это перевести на русский язык?
70см фильтр Недавно мне пришёл новый 70см фильтр, который я протестировал в предыдущей статье.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Полевые испытания поворотного устройства</h1></header>
      		<div class='container entry-content'>
  <p>Очередная неделя тестирования поворотного устройства принесла удивительные результаты. Для начала, немного изменений по сравнению с предыдущей неделей.</p>

<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube.com/embed/mKTDQUpfMno" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>

<h3 id="работа-от-батареек">Работа от батареек.</h3>
<p>В этот раз я решил попробовать работать от батареек. Это должно уменьшить количество помех, приходящих из сети. Не то, чтобы их очень много, но я надеялся уменьшить noise floor. Кстати, кто-нибудь знает как это перевести на русский язык?</p>
<h3 id="70см-фильтр">70см фильтр</h3>
<p>Недавно мне пришёл новый 70см фильтр, который я протестировал в <a href="https://dernasherbrezon.com/posts/test-70cm-filter/">предыдущей статье</a>. Разумеется, мне хотелось понять как он поведёт себя в полевых условиях.</p>
<h3 id="ферритовые-кольца">Ферритовые кольца</h3>
<p>Я, честно говоря, так и не смог понять, какие именно частоты эти кольца могут отфильтровать. Возможно, когда-нибудь у меня дойдут руки, и я погружусь в теорию и исследую этот вопрос. А пока пришлось их надеть &ldquo;на всякий случай&rdquo;.</p>
<h2 id="результаты">Результаты</h2>
<p>70см фильтры сделали своё дело. Вот пример того, как раньше принимался сигнал:</p>
<p><img src="/img/rotator-for-r2cloud-2/1.png" alt=""></p>
<p>Сейчас же, спектограмма выглядит следующим образом:</p>
<p><img src="/img/rotator-for-r2cloud-3/1.png" alt=""></p>
<p>Тут важно отметить несколько вещей:</p>
<ul>
<li>сигнал спутника <a href="https://db.satnogs.org/satellite/43855/">CHOMPTT</a> отчётливо виден</li>
<li>когда антенна направлена в сторону центра города, noise floor значительно повышается (на картинке зелёный сверху)</li>
<li>повышение идёт небольшими ступеньками. Это момент, когда антенна двигается</li>
</ul>
<p>Меня очень смущает повышение noise floor. Я рассчитывал, что 70см фильтр будет отфильтровывать все нежелательные частоты до АЦП. Тем самым не перегружая его. Однако, видимо, это не так. У меня есть пара идей о том, что ещё можно попробовать, и я постараюсь описать результаты экспериментов в следующих статьях.</p>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Тестирование 70см фильтра с помощью RTL-SDR</title>
      <link>https://dernasherbrezon.com/posts/test-70cm-filter/</link>
      <pubDate>Sat, 20 Jun 2020 17:30:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/test-70cm-filter/</guid>
      <description>Последние наблюдения показали, что у меня очень высокий уровень шума, если антенна направлена в центр города. У меня возникло предположение, что это связано со слишком сильными сигналами на соседних частотах. Если это так, то это значит, что GSM, FM и DVB перегрузили вход rtl-sdr, полностью заглушив слабые сигналы. Такое возможно, так как у rtl-sdr достаточно низкий динамический диапазон.
Для того чтобы проверить теорию, я решил купить вот такой фильтр на 70см и протестировать его.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Тестирование 70см фильтра с помощью RTL-SDR</h1></header>
      		<div class='container entry-content'>
  <p><a href="https://dernasherbrezon.com/posts/rotator-for-r2cloud-2/">Последние наблюдения</a> показали, что у меня очень высокий уровень шума, если антенна направлена в центр города. У меня возникло предположение, что это связано со слишком сильными сигналами на соседних частотах. Если это так, то это значит, что GSM, FM и DVB перегрузили вход rtl-sdr, полностью заглушив слабые сигналы. Такое возможно, так как у rtl-sdr достаточно <a href="https://dernasherbrezon.com/posts/dynamic-range/">низкий динамический диапазон</a>.</p>
<p>Для того чтобы проверить теорию, я решил купить вот такой <a href="https://www.ebay.co.uk/itm/70cm-430-440MHz-Filter-EME-RTL-SDR/264521132435?pageci=fdb1adb1-62db-45fd-9a71-4029605d1ae3">фильтр на 70см</a> и протестировать его.</p>
<p><img src="/img/test-70cm-filter/0.jpg" alt=""></p>
<h2 id="описание-стенда">Описание стенда</h2>
<p>В <a href="https://dernasherbrezon.com/posts/test-fm-filter/">прошлый раз</a> я тестировал фм-фильтры. В этот раз я решил собрать такой же стенд и протестировать 70см фильтр.</p>
<p><img src="/img/test-70cm-filter/1.jpg" alt=""></p>
<h2 id="софт">Софт</h2>
<p>rtl_power - программа из стандартной поставки <a href="https://github.com/osmocom/rtl-sdr">rtl-sdr</a>. Она позволяет сканировать большой диапазон частот, разбивая его участки примерно 2Mhz и выполняя быстрое преобразование фурье. После этого, результаты преобразуются в dbm.</p>
<p><a href="http://github.com/dernasherbrezon/rtlSpectrum">rtlSpectrum</a> - программа для анализа результатов rtl_power.</p>
<h2 id="опыт-1">Опыт 1</h2>
<p>В этот раз я решил провести 2 опыта. Первый опыт заключался в том, чтобы протестировать фильтр с помощью генератора шума. Оба раза rtl_power запускался следующей командой:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">rtl_power -f 24M:1.7G:1M -g <span style="color:#ae81ff">0</span> -i 3m -1
</code></pre></div><p><img src="/img/test-70cm-filter/2.png" alt=""></p>
<p>На картинке выше, светло-оранжевый график - без использования фильтра, тёмно-оранжевый - с фильтром. Очень отчётливо видно, насколько классно отфильтрованы сигналы вне 430-440Мгц. При этом пик ~13.6dbm, а уровень шума ~24.3dbm.</p>
<h2 id="опыт-2">Опыт 2</h2>
<p>Второй опыт заключался в том, чтобы подключить фильтр напрямую к антенне и померить результаты. Команда для запуска rtl_power немного отличается от первого опыта:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">rtl_power -f 24M:1.7G:1M -g <span style="color:#ae81ff">35</span> -i 3m -1
</code></pre></div><p><img src="/img/test-70cm-filter/3.png" alt=""></p>
<p>На этом графике видно, что FM и GSM диапазоны отлично отфильтрованы. Однако, на нём сложно разглядеть что же происходит в 70см диапазоне. Чтобы это исправить, я построил ещё один график, в котором вычел один из другого. В результате получилось:</p>
<p><img src="/img/test-70cm-filter/4.png" alt=""></p>
<p>Теперь отчётливо видно, что диапазон 430-440Мгц остался нетронутым, а все остальные сигналы были отлично отфильтрованы.</p>
<h2 id="полевые-испытания">Полевые испытания</h2>
<p>Следующим шагом я решил провести полевые испытания. Суть опыта достаточно проста: я прикрепил антенну параллельно земле и направил в центр города. После чего, измерил уровень шума в GQRX с фильтром и без.</p>
<p>Вот так выглядит спектограмма без фильтра:</p>
<p><img src="/img/test-70cm-filter/5.png" alt=""></p>
<p>Уровень шума -40dbm и никаких сигналов не видно. А вот результат с использованием фильтра:</p>
<p><img src="/img/test-70cm-filter/6.png" alt=""></p>
<p>Абсолютно те же настройки, но уровень шума значительно ниже и виден сигнал на -50dbm.</p>
<h2 id="выводы">Выводы</h2>
<p>Фильтр работает. Я попробую погонять его пару дней, чтобы посмотреть улучшиться ли приём сигналов. Недостаток вполне очевидный - на него нельзя принимать 2м сигналы.</p>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Поворотное устройство - продолжение</title>
      <link>https://dernasherbrezon.com/posts/rotator-for-r2cloud-2/</link>
      <pubDate>Tue, 16 Jun 2020 20:04:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/rotator-for-r2cloud-2/</guid>
      <description>Каждый раз, когда я выхожу тестировать поворотное устройство, находятся удивительные и разнообразные ошибки. Если в прошлый раз после включения вообще ничего не происходило, то на этот раз что-то явно пошло не так.
  Главные отличия от предыдущей версии:
 крепление антенны более надёжное. Я использовал стандартные крепления, которые шли в комплекте с поворотным устройством. Несмотря на более громоздкую конструкцию, антенна закреплена гораздо прочнее. облучатели для 70см теперь вертикально расположены. По идее это должно улучшить качество приёма.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Поворотное устройство - продолжение</h1></header>
      		<div class='container entry-content'>
  <p>Каждый раз, когда я выхожу тестировать поворотное устройство, находятся удивительные и разнообразные ошибки. Если в прошлый раз после включения вообще ничего не происходило, то на этот раз что-то явно пошло не так.</p>

<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube.com/embed/NchXCDGxOCo" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>

<p>Главные отличия от предыдущей версии:</p>
<ul>
<li>крепление антенны более надёжное. Я использовал стандартные крепления, которые шли в комплекте с поворотным устройством. Несмотря на более громоздкую конструкцию, антенна закреплена гораздо прочнее.</li>
<li>облучатели для 70см теперь вертикально расположены. По идее это должно улучшить качество приёма. Хотя, возможно, для спутников нужно совсем по-другому располагать антенну.</li>
<li>в RaspberryPI я установил <a href="https://dernasherbrezon.com/posts/time-raspberrypi-2/">модуль часов</a>. Теперь не нужно логиниться удалённо, чтобы установить текущее время.</li>
</ul>
<p>И несмотря на все улучшения, мне удалось декодировать только 2 сигнала из 20. Большинство же сигналов выглядят следующим образом на спектограмме:</p>
<p><img src="/img/rotator-for-r2cloud-2/1.png" alt=""></p>
<p>Такое ощущение, что, когда антенна смотрит в сторону центра города, появляется очень много помех. При этом отчётливо видны полосы - это момент, когда поворотное устройство корректирует направление антенны.</p>
<p>С этим обязательно нужно что-то делать. Я заказал специальные фильтры на 70см и 2м. Возможно, они смогут отфильтровать ненужные сигналы и существенно улучшить приём слабых сигналов.</p>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Время в Raspberrypi - 2</title>
      <link>https://dernasherbrezon.com/posts/time-raspberrypi-2/</link>
      <pubDate>Thu, 11 Jun 2020 21:35:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/time-raspberrypi-2/</guid>
      <description>Прошёл почти год с момента написания оригинальной статьи про время в Raspberrypi, и вот я уже снова столкнулся с этой проблемой. На этот раз мне захотелось сделать мобильную станцию слежения за спутниками вместе с поворотным устройством. Мобильность в данном случае означает то, что я могу принести станцию в поле, поймать несколько сигналов во время чтения книги, отнести домой и залить результаты в https://r2server.ru. Проблема оказалась там, где её никто не ждал.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Время в Raspberrypi - 2</h1></header>
      		<div class='container entry-content'>
  <p>Прошёл почти год с момента написания <a href="https://dernasherbrezon.com/posts/time-raspberrypi/">оригинальной статьи</a> про время в Raspberrypi, и вот я уже снова столкнулся с этой проблемой. На этот раз мне захотелось сделать мобильную станцию слежения за спутниками вместе с <a href="https://dernasherbrezon.com/posts/rotator-for-r2cloud/">поворотным устройством</a>. Мобильность в данном случае означает то, что я могу принести станцию в поле, поймать несколько сигналов во время чтения книги, отнести домой и залить результаты в <a href="https://r2server.ru">https://r2server.ru</a>. Проблема оказалась там, где её никто не ждал. Если отнести Raspberrypi в чисто-поле, то там не будет сигнала Wi-Fi. А это значит, не будет сети. А это значит не будет NTP и неоткуда получить время. Можно, конечно, зайти удалённо на Raspberrypi и вручную выставить время по часам. Но это выглядит слишком утомительным.</p>
<h2 id="rtc-для-rpi">RTC для RPi</h2>
<p>Вместо того чтобы вручную устанавливать время, можно пойти более простым путём. Достаточно установить RTC модуль и время будет правильным всегда. Вернее, до тех пор, пока работает маленькая пальчиковая батарейка в этом модуле.</p>
<p>Я заказал модуль MakerHawk RPI DS1307.</p>
<p><img src="/img/time-raspberrypi-2/1.jpg" alt=""></p>
<p>На обратной стороне в него вставляется небольшая батарейка формата CR1220.</p>
<p><img src="/img/time-raspberrypi-2/2.jpg" alt=""></p>
<p>Весь модуль крепится на I2C контакты Raspberrypi.</p>
<p><img src="/img/time-raspberrypi-2/3.jpg" alt=""></p>
<p>У меня установлены стандартные радиаторы на процессор. Они не очень высокие, поэтому между ними и RTC модулем есть небольшой зазор. Однако, если ставить нестандартное охлаждение, например, кулер, то могут возникнуть проблемы.</p>
<h2 id="настройка-raspberrypi">Настройка Raspberrypi</h2>
<p>После того как модуль установлен, необходимо настроить Raspberrypi. Это делается достаточно просто.</p>
<p>Во-первых, нужно подключить специальный модуль ядра. Для этого в файл <code>/boot/config.txt</code> нужно добавить следующие строчки:</p>
<pre><code>device_tree=bcm2710-rpi-3-b.dtb
dtoverlay=i2c-rtc,ds1307
dtparam=i2c_arm=on
</code></pre><p>Во-вторых, необходимо выключить старую эмуляцию часов на основе файлов. Для этого нужно удалить и выключить <code>fake-hwclock</code>:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">sudo apt-get -y remove fake-hwclock
sudo update-rc.d -f fake-hwclock remove
</code></pre></div><p>Так же необходимо убрать проверку из <code>/lib/udev/hwclock-set</code> и закомментировать/удалить следующие строчки:</p>
<pre><code>if [ -e /run/systemd/system ] ; then
 exit 0
fi
</code></pre><p>После этого, можно перезагружаться. Если всё прошло успешно, то в логах dmesg будут следующие строчки:</p>
<pre><code>[    5.779005] rtc-ds1307 1-0068: registered as rtc0
</code></pre><p>Устройство подключено и работает. Теперь можно переходить к заключительному шагу: настройка времени. Необходимо установить системное время.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">sudo date -s <span style="color:#e6db74">&#39;2020-06-10 18:30:00&#39;</span>
</code></pre></div><p>После чего нужно скопировать текущее системное время на RTC модуль:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">sudo hwclock -w
date <span style="color:#f92672">&amp;&amp;</span> sudo hwclock -r
</code></pre></div><p>Всё готово. Теперь Raspberrypi будет показывать актуальное время после каждого рестарта, даже если нет соединения с интернетом.</p>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Поворотное устройство для r2cloud</title>
      <link>https://dernasherbrezon.com/posts/rotator-for-r2cloud/</link>
      <pubDate>Wed, 10 Jun 2020 18:41:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/rotator-for-r2cloud/</guid>
      <description>Введение Последние несколько недель я активно работал над поддержкой поворотных устройств в r2cloud. Тут стоит немного рассказать зачем вообще нужны поворотные устройства и направленные антенны.
Если совсем грубо, то существует несколько основных классов антенн: всенаправленные, направленные и фазовые решётки. Мой проект до недавнего времени поддерживал только всенаправленные антенны.
Причина достаточно проста: они просты в настройке и установке. При этом здесь нет движущихся частей и такие антенны могут работать сразу в нескольких диапазонах.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Поворотное устройство для r2cloud</h1></header>
      		<div class='container entry-content'>
  <h2 id="введение">Введение</h2>
<p>Последние несколько недель я активно работал над поддержкой поворотных устройств в r2cloud. Тут стоит немного рассказать зачем вообще нужны поворотные устройства и направленные антенны.</p>
<p>Если совсем грубо, то существует несколько основных классов антенн: всенаправленные, направленные и фазовые решётки. Мой проект до недавнего времени поддерживал только всенаправленные антенны.</p>
<p><img src="/img/rotator-for-r2cloud/1.jpg" alt=""></p>
<p>Причина достаточно проста: они просты в настройке и установке. При этом здесь нет движущихся частей и такие антенны могут работать сразу в нескольких диапазонах.</p>
<p><img src="/img/rotator-for-r2cloud/2.png" alt=""></p>
<p>Правда, у таких антенн есть один большой недостаток - они не усиливают сигнал. А чаще всего ослабляют. Как показывает практика, некоторые сигналы со спутников всё же удастся получить, но иногда хочется чего-то большего. И тут на помощь приходят направленные антенны.</p>
<p><img src="/img/rotator-for-r2cloud/3.png" alt=""></p>
<p>У таких антенн коэффициент усиления сигнала может быть до 20 dBi. Недостаток у них очевидный: их нужно направлять на спутник. Это не так-то просто сделать, если учесть, что спутник движется достаточно быстро и в разное время бывает в разных участках неба.</p>
<p>И тут на помощь приходит поворотное устройство. Специальный софт рассчитывает положение спутника относительно антенны и направляет антенну точно на спутник. Это позволяет принимать достаточно слабые сигналы.</p>
<h2 id="поворотное-устройство">Поворотное устройство</h2>
<p>В центре всей системы стоит, конечно же, поворотное устройство. Некоторые покупают готовые, некоторые строят своё. Например, проект SATNOGS <a href="https://wiki.satnogs.org/SatNOGS_Rotator_v3">предоставляет</a> модели для самостоятельной сборки. Главное отличие от готовых - стоимость. Готовые поворотные устройства <a href="https://www.rfhamdesign.com/products/spx-antenna-rotators/spx-01-az--el/index.php">начинаются от 600$</a>. Если же распечатывать на 3D-принтере и делать самому, то материалы будут стоить около 200$. Я же решил попробовать другой, не менее популярный способ - использовать поворотное устройство от телескопа.</p>
<p>Многие современные телескопы идут в комплекте с треногами и поворотными устройствами. Эти устройства ничем не уступают классическим коммерческим. Мне же хотелось получить две вещи:</p>
<ul>
<li>Мобильность. Я не могу установить антенну на крыше многоэтажного дома. На балконе тоже не вариант, так как качество приёма будет значительно хуже.</li>
<li>Простота в настройке. Мне хочется сфокусироваться на разработке софта, а не пытаться решить проблему питания на транзисторах. Для этого нужно просто купить гарантированно работающие компоненты.</li>
</ul>
<p>После нескольких недель выбора модели и подборки компонент, я остановился на <a href="http://skywatcher.com/product/allview-mount/">Skywatcher Allview</a>.</p>
<p><img src="/img/rotator-for-r2cloud/4.jpg" alt=""></p>
<p>Эта модель может управлять антенной в двух плоскостях: азимут и высота. Также в комплекте идёт пульт (SynScan), к которому можно подключить компьютер и с его помощью программно управлять моторами.</p>
<p><img src="/img/rotator-for-r2cloud/5.jpg" alt=""></p>
<p>У этого пульта есть 3 разъёма:</p>
<ul>
<li>RJ-45</li>
<li>RJ-11</li>
<li>USB Type-B</li>
</ul>
<p><img src="/img/rotator-for-r2cloud/6.jpg" alt=""></p>
<p>По RJ-45 пульт подключается к поворотному устройству, а по RJ-11 или USB к компьютеру. Тут есть интересная особенность. Оба порта работает как serial устройство. При этом кабеля-переходника с RJ-11 на RS-232 в комплекте не было. И чтобы его сделать, необходимо правильно распаять контакты на RJ-11. Я думал это просто и купил более дешёвый кабель, но он не подошёл. Устройство определяется, но при попытке отправить туда данные, ответа нет.</p>
<p>Уже почти отчаявшись, я решил попробовать кабель USB Type-B на USB Type-A и у меня получилось.</p>
<h2 id="настройка-synscan">Настройка SynScan</h2>
<p>В Linux устройство опознаётся как ttyUSB0. Это всё из-за того, что внутри есть специальный чип, который преобразует USB протокол в serial устройство.</p>
<p>Для того чтобы проверить, правильно ли всё работает, можно использовать простую утилиту <a href="https://tio.github.io">tio</a>:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">tio -e -b <span style="color:#ae81ff">9600</span> /dev/tty.usbserial-1410
</code></pre></div><p>SynScan поддерживает несколько команд, все они - простые буквенные коды в ASCII. Например, для того чтобы проверить версию прошивки, нужно ввести &ldquo;V&rdquo;:</p>
<p><img src="/img/rotator-for-r2cloud/7.png" alt=""></p>
<p>В данном примере версия 04270A.</p>
<p>Если всё работает как нужно, то можно переходить к настройке rotctrld. Это специальный демон, который принимает команды по TCP и управляет через serial порт устройством.</p>
<h2 id="настройка-rotctrld">Настройка rotctrld</h2>
<p>Демон rotctrld поставляется вместе с библиотекой <a href="https://hamlib.github.io">hamlib</a>. Эта библиотека предоставляет единый интерфейс для различных поворотных устройств и радиостанций. В стандартном пакете она ещё содержит набор CLI утилит для управления устройствами. Устанавливаются они стандартным образом:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">sudo apt install libhamlib-utils
</code></pre></div><p>Список поддерживаемых устройств можно получить следующей командой:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">rotctld --list
</code></pre></div><p>SkyWatcher в списке не оказалось, но я почитал протокол, и он оказался очень похож на Celestron. Команда для запуска выглядит следующим образом:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">rotctld --model<span style="color:#f92672">=</span><span style="color:#ae81ff">1401</span> --port<span style="color:#f92672">=</span><span style="color:#ae81ff">4533</span> --listen-addr<span style="color:#f92672">=</span>127.0.0.1 --rot-file<span style="color:#f92672">=</span>/dev/ttyUSB0
</code></pre></div><p>В MacOS это тоже работает. Для этого достаточно поставить hamlib через homebrew и запустить так:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">/usr/local/Cellar/hamlib/3.3/bin/rotctld --model<span style="color:#f92672">=</span><span style="color:#ae81ff">1401</span> --port<span style="color:#f92672">=</span><span style="color:#ae81ff">4533</span> --listen-addr<span style="color:#f92672">=</span>127.0.0.1 --rot-file<span style="color:#f92672">=</span>/dev/tty.usbserial-1410
</code></pre></div><p>rotctld откроет TCP порт, который будет принимать команды в <a href="http://manpages.ubuntu.com/manpages/xenial/man8/rotctld.8.html">текстовом виде</a>. Единственное, чего не хватает - это автоматического старта/рестарта. По умолчанию демон стартует в foreground mode. Я написал небольшой конфиг для systemd, чтобы решить эту проблему:</p>
<pre><code>[Unit]
Description=rotctrld Service

[Service]
WorkingDirectory=/home/pi/r2cloud/
ExecStart=rotctld --model=1401 --port=4533 --listen-addr=127.0.0.1 --rot-file=/dev/ttyUSB0
Restart=always
User=pi
Group=pi

[Install]
WantedBy=multi-user.target
</code></pre><p>Теперь демон будет стартовать при запуске системы и в случае крэша рестартовать. Для того чтобы общаться с ним из Java, Я написал небольшой клиент-обёртку - <a href="https://github.com/dernasherbrezon/rotctrldClient">rotctrldClient</a>. Не очень благозвучное название, зато делает свою работу хорошо:</p>
<p><img src="/img/rotator-for-r2cloud/8.png" alt=""></p>
<p>Именно эта библиотека находится в сердце <a href="https://github.com/dernasherbrezon/r2cloud">r2cloud</a> для управления поворотными устройствами.</p>
<h2 id="настройка-r2cloud">Настройка r2cloud</h2>
<p>r2cloud может контролировать поворотное устройство во время пролёта спутника. Для этого нужно в общих настройках включить и задать параметры подключения к rotctrld:</p>
<p><img src="/img/rotator-for-r2cloud/9.png" alt=""></p>
<p>В данном случае, r2cloud будет рассчитывать азимут и высоту спутника над горизонтом каждые 1000мс. Если спутник вышел за границы предыдущей зоны на ±5 градусов, то антенна корректируется. И это всё. r2cloud сделает всё остальное автоматически.</p>
<h2 id="результаты">Результаты</h2>
<p>Если всё настроено успешно, то поворотное устройство будет направлять антенну на спутник, когда тот окажется в зоне видимости. Вот пример работы моей конфигурации:</p>

<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube.com/embed/BMk_NKHXlag" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>


</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Юнит-тесты</title>
      <link>https://dernasherbrezon.com/posts/unit-tests/</link>
      <pubDate>Mon, 25 May 2020 17:27:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/unit-tests/</guid>
      <description>15 лет назад никто не слышал про юнит-тесты. Код писался один раз, потом проверялся вручную QA и методами пристального вглядывания. Все жили в гармонии и мире. Но тут пришли юнит-тесты и мир разделился на два враждующих лагеря: на тех, кто пишет тесты и тех, кто нет.
Спойлер: я за авто-тесты.
В интернете очень много аргументов как за, так и против. Я решил собрать свой собственный список аргументов за юнит-тесты.
1 Тесты пишутся не для того, чтобы протестировать каждое логическое условие и всевозможные комбинации входных и выходных данных.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Юнит-тесты</h1></header>
      		<div class='container entry-content'>
  <p>15 лет назад никто не слышал про юнит-тесты. Код писался один раз, потом проверялся вручную QA и методами пристального вглядывания. Все жили в гармонии и мире. Но тут пришли юнит-тесты и мир разделился на два враждующих лагеря: на тех, кто пишет тесты и тех, кто нет.</p>
<p>Спойлер: я за авто-тесты.</p>
<p>В интернете очень много аргументов как за, так и против. Я решил собрать свой собственный список аргументов за юнит-тесты.</p>
<h2 id="1">1</h2>
<p>Тесты пишутся не для того, чтобы протестировать каждое логическое условие и всевозможные комбинации входных и выходных данных.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#a6e22e">@Test</span>
<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">testSuccess</span><span style="color:#f92672">()</span> <span style="color:#66d9ef">throws</span> Exception <span style="color:#f92672">{</span>
	ObservationRequest req <span style="color:#f92672">=</span> createRequest<span style="color:#f92672">();</span>
	<span style="color:#66d9ef">int</span> times <span style="color:#f92672">=</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">int</span><span style="color:#f92672">)</span> <span style="color:#f92672">((</span>req<span style="color:#f92672">.</span><span style="color:#a6e22e">getEndTimeMillis</span><span style="color:#f92672">()</span> <span style="color:#f92672">-</span> req<span style="color:#f92672">.</span><span style="color:#a6e22e">getStartTimeMillis</span><span style="color:#f92672">())</span> <span style="color:#f92672">/</span> 1000<span style="color:#f92672">);</span>
	config<span style="color:#f92672">.</span><span style="color:#a6e22e">setProperty</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;rotator.enabled&#34;</span><span style="color:#f92672">,</span> <span style="color:#66d9ef">true</span><span style="color:#f92672">);</span>
	service <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> RotatorService<span style="color:#f92672">(</span>config<span style="color:#f92672">,</span> predict<span style="color:#f92672">,</span> <span style="color:#66d9ef">new</span> ScheduleFixedTimesTheadPoolFactory<span style="color:#f92672">(</span>times<span style="color:#f92672">),</span> <span style="color:#66d9ef">new</span> SteppingClock<span style="color:#f92672">(</span>req<span style="color:#f92672">.</span><span style="color:#a6e22e">getStartTimeMillis</span><span style="color:#f92672">(),</span> 1000<span style="color:#f92672">));</span>
	service<span style="color:#f92672">.</span><span style="color:#a6e22e">start</span><span style="color:#f92672">();</span>
	assertNotNull<span style="color:#f92672">(</span>service<span style="color:#f92672">.</span><span style="color:#a6e22e">schedule</span><span style="color:#f92672">(</span>req<span style="color:#f92672">,</span> req<span style="color:#f92672">.</span><span style="color:#a6e22e">getStartTimeMillis</span><span style="color:#f92672">()));</span>
	<span style="color:#66d9ef">try</span> <span style="color:#f92672">(</span>BufferedReader r <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> BufferedReader<span style="color:#f92672">(</span><span style="color:#66d9ef">new</span> InputStreamReader<span style="color:#f92672">(</span>RotatorService<span style="color:#f92672">.</span><span style="color:#a6e22e">class</span><span style="color:#f92672">.</span><span style="color:#a6e22e">getClassLoader</span><span style="color:#f92672">().</span><span style="color:#a6e22e">getResourceAsStream</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;expected/rotctrld-requests.txt&#34;</span><span style="color:#f92672">),</span> StandardCharsets<span style="color:#f92672">.</span><span style="color:#a6e22e">UTF_8</span><span style="color:#f92672">)))</span> <span style="color:#f92672">{</span>
		String curLine <span style="color:#f92672">=</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">;</span>
		<span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> 0<span style="color:#f92672">;</span>
		<span style="color:#66d9ef">while</span> <span style="color:#f92672">((</span>curLine <span style="color:#f92672">=</span> r<span style="color:#f92672">.</span><span style="color:#a6e22e">readLine</span><span style="color:#f92672">())</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
			assertPosition<span style="color:#f92672">(</span>curLine<span style="color:#f92672">,</span> requestHandler<span style="color:#f92672">.</span><span style="color:#a6e22e">getRequests</span><span style="color:#f92672">().</span><span style="color:#a6e22e">get</span><span style="color:#f92672">(</span>i<span style="color:#f92672">));</span>
			i<span style="color:#f92672">++;</span>
		<span style="color:#f92672">}</span>
		assertEquals<span style="color:#f92672">(</span>i<span style="color:#f92672">,</span> requestHandler<span style="color:#f92672">.</span><span style="color:#a6e22e">getRequests</span><span style="color:#f92672">().</span><span style="color:#a6e22e">size</span><span style="color:#f92672">());</span>
	<span style="color:#f92672">}</span>
<span style="color:#f92672">}</span>
</code></pre></div><p>Я очень часто слышу следующий диалог:</p>
<ul>
<li>А вот тут давайте мы напишем юнит-тесты.</li>
<li>Но мы же не сможем ими покрыть А, Б, В!</li>
<li>Точно, это будет слишком сложно и нам понадобится сложная инфраструктура. Давайте вернёмся к ним в следующий раз, когда у нас будет больше времени.</li>
</ul>
<p>Я крайне не согласен с таким подходом. Тесты не должны покрывать всевозможные случаи, А, Б и В. Основное их назначение - хотя бы раз выполнить написанный код. Сколько раз я видел случаи, когда разработчик написал код и ни разу его не выполнил. Наличие теста - это отличное доказательство, что код хотя бы раз выполнился, и совсем глупых ошибок там нет.</p>
<h2 id="2">2</h2>
<p>Даже маленькие библиотеки нужно тестировать. Особенно маленькие библиотеки. Обычно они имеют чётко обозначенный интерфейс, который можно удобно протестировать юнит-тестами.</p>
<p><img src="/img/unit-tests/1.png" alt=""></p>
<h2 id="3">3</h2>
<p>Написание тестов заставляет задуматься о том, как структурирован код. Обычно, разработчик сфокусирован на том, чтобы код работал как нужно. Написание же тестов, позволяет понять то, как код будет использоваться. Я прохладно отношусь к TDD. Но в этой методологии есть зерно правды - надо писать код и тесты в одно и то же время. Это позволяет сильно сэкономить на интеграции кода с другими компонентами.</p>
<p><img src="/img/unit-tests/2.png" alt=""></p>
<p>Ещё при написании тестов начинаешь задумываться: &ldquo;А что ещё можно проверить?&rdquo;, &ldquo;Ничего я не забыл?&rdquo;. Это позволяет посмотреть на код с другой стороны и придумать пару странных сценариев использования, которые лучше протестировать. Сюда же входят всевозможные проверки на входные параметры и граничные условия.</p>
<h2 id="4">4</h2>
<p>Тесты позволяют править ошибки реализации. Допустим все тесты проходят успешно, но выясняется, что код всё-таки работает неправильно. В таком случае его реализация меняется, и тесты запускаются ещё раз. Ошибок быть не должно.</p>
<p>Этот пункт можно расширить: тесты позволяют обновлять зависимые библиотеки. Допустим, такая ситуация: код зависит от сторонней библиотеки. В этой библиотеке была найдена ошибка безопасности. Если есть тесты, то можно просто обновить версию зависимой библиотеки и прогнать тесты. Ошибок быть не должно. Это очень удобно использовать в связке с автоматическими системами генерации pull request. Например, github недавно научился сканировать зависимые библиотеки на разные уязвимости и автоматически создавать pull request с обновлёнными версиями библиотек. Если есть тесты, то такие pull request автоматически собираются и тестируются. Если нет ошибок, то можно безопасно обновляться.</p>
<p><img src="/img/unit-tests/3.png" alt=""></p>
<h2 id="выводы">Выводы</h2>
<p>Пишите тесты. А если не знаете как, то спросите меня. Я знаю.</p>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Декодирование картинки fox-1d</title>
      <link>https://dernasherbrezon.com/posts/decoding-fox1d/</link>
      <pubDate>Thu, 14 May 2020 21:21:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/decoding-fox1d/</guid>
      <description>Люди по-прежнему запускают спутники в космос, а я по-прежнему пытаюсь декодировать с них сигналы. На этот раз я решил разобраться со спутниками семейства Fox. Они передают достаточно много данных:
 телеметрия результаты исследований радиации картинки  Если первые два типа данных достаточно стандартны, то вот картинки - это то, перед чем я не могу устоять.
Формат передачи данных Эти спутники могут передавать информацию с помощью двух протоколов:
 медленный. Скорость 200 бит в секунду.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Декодирование картинки fox-1d</h1></header>
      		<div class='container entry-content'>
  <p>Люди по-прежнему запускают спутники в космос, а я по-прежнему пытаюсь декодировать с них сигналы. На этот раз я решил разобраться со спутниками семейства Fox. Они передают достаточно много данных:</p>
<ul>
<li>телеметрия</li>
<li>результаты исследований радиации</li>
<li>картинки</li>
</ul>
<p>Если первые два типа данных достаточно стандартны, то вот картинки - это то, перед чем я не могу устоять.</p>
<h3 id="формат-передачи-данных">Формат передачи данных</h3>
<p>Эти спутники могут передавать информацию с помощью двух протоколов:</p>
<ul>
<li>медленный. Скорость 200 бит в секунду. Используется для передачи телеметрии.</li>
<li>быстрый. 9600 бит в секунду. Передача телеметрии, картинок и результатов исследований</li>
</ul>
<p>Для декодирования картинки, необходимо разобраться с &ldquo;быстрым&rdquo; протоколом передачи данных. Тут важно знать, что этот протокол включается только по команде с Земли, когда нужно получить большой объём данных. А значит он выключен всё остальное время. Это очень сильно отличается от того, как <a href="https://dernasherbrezon.com/posts/decoding-meteor-m/">Метеор-М</a> и <a href="https://dernasherbrezon.com/posts/decoding-jy1sat/">jy1sat</a> передают изображения, где изображения передаются постоянно.</p>
<h3 id="демодуляция">Демодуляция</h3>
<p>Сигнал &ldquo;быстрого&rdquo; протокола - это FSK модулированный сигнал 9600 бит в секунду. Ничего особенного тут нет, стандартный <a href="https://github.com/dernasherbrezon/jradio/blob/master/src/main/java/ru/r2cloud/jradio/demod/FskDemodulator.java">FskDemodulator</a> из <a href="https://github.com/dernasherbrezon/jradio">jradio</a> вполне подходит.</p>
<p>Единственная странность - это крайне короткое синхрослово. Несмотря на то, что длина самого пакета 5272 байт, синхрослово длиной всего 10бит. Это значит две вещи:</p>
<ul>
<li>нужно искать полное совпадение в потоке бит. Иначе, сильно увеличится количество ложных срабатываний. А это в свою очередь сильно будет нагружать и без того не быстрый алгоритм Рид-Соломона</li>
<li>сильно уменьшается помехоустойчивость. Несмотря на то, что для всего сообщения применяются коды Рида-Соломона, ошибка в одном бите в синхрослове полностью отбрасывает декодирование всего пакета.</li>
</ul>
<h3 id="помехоустойчивое-декодирование">Помехоустойчивое декодирование</h3>
<p>В Fox-* примется достаточно интересная комбинация кодов - <a href="https://en.wikipedia.org/wiki/8b/10b_encoding">код 8b10b</a> и код Рида-Соломона. Код 8b10b работает достаточно интересным способом: каждый передаваемый байт (8 бит) кодируется 10 битами. При этом эти 10 бит выбраны таким образом, чтобы иметь максимальное Хэмминг расстояние.</p>
<p>Если приёмник получает 10 бит, то он пытается найти их в таблице поиска и получить переданный байт. Если такого значения нет, то считается, что переданный байт не был корректно принят. Какая же польза от этого знания? А это используется в алгоритме Рида-Соломона. Зная, какие байты точно не были корректно приняты, можно передать это знание Риду-Соломону и немного увеличить шансы на восстановление данных.</p>
<p>До этого момента всё шло хорошо и достаточно понятно. Дальше же начинается череда странных решений и неоднозначных реализаций. Для начала, 5272 байт - это достаточно много для одного пакета. Если же учитывать код 8b10b, то общее количество бит будет - 52720. Чем длиннее пакет, тем больше вероятность возникновения помех и больше вероятность ошибок приёма.</p>
<p>Весь пакет кодируется с помощью интерливинга 21 кода Рида-Соломона. Но так, как 5272 не делится нацело на 21, то используется padding нулевых байт при декодировании:</p>
<p><img src="/img/decoding-fox1d/4.png" alt=""></p>
<p>Как видно из схемы выше, алгоритм получения данных будет достаточно нетривиальным. Нулевые байты дописываются слева к каждому коду. При этом первое слово имеет на один байт больше. Во всех других проколах, с которыми мне приходилось сталкиваться, интерливинг делался для сообщений, которые нацело делились на 255. Причина, по которой была выбрана длина 5272 байт, остаётся для меня загадкой.</p>
<h3 id="декодирование-картинки">Декодирование картинки</h3>
<p>Но самое странное - это то, как эти 5272 байт используются. Формат пакета следующий:</p>
<table>
	<thead>
		<tr>
			<th style="width: 20%">Размер (байт)</th>
			<th>Описание</th>
		</tr>
	</thead>
	<tbody>
		<tr>	
			<td>6</td>
			<td>Заголовок. Содержит id спутника и тип телеметрии</td>
		</tr>
		<tr>	
			<td>60</td>
			<td>Текущая телеметрия. Различные показатели спутника в текущий момент</td>
		</tr>
		<tr>	
			<td>60</td>
			<td>Максимальные значения показателей за период измерений</td>
		</tr>
		<tr>	
			<td>60</td>
			<td>Минимальные значения показателей за период измерений</td>
		</tr>
		<tr>	
			<td>1</td>
			<td>Количество "линий" передаваемого изображения. Линия - это кусочек изображения высотой 8 пикселов и шириной 320 пикселей в формате JPEG</td>
		</tr>
		<tr>	
			<td>Переменная длина</td>
			<td>"Линии" изображения</td>
		</tr>
		<tr>	
			<td>1</td>
			<td>Количество пакетов радиационого эксперимента. Передаётся либо изображение, либо данные эксперимента</td>
		</tr>
		<tr>	
			<td>Переменная длина</td>
			<td>Данные эксперимента</td>
		</tr>
	</tbody>
</table>
<p>В каждом пакете передаётся всего 3 &ldquo;линии&rdquo; изображения. Если сложить все байты вместе, то получится около 1340 байт. Из-за кодирования jpeg может быть чуть больше или чуть меньше, но никак не 5272. <a href="https://github.com/ac2cz/FoxTelem/issues/632">Оказывается</a> оставшиеся байты используются в <code>experiment on the radiation hardness of COTS memory modules</code>. В официальном клиенте я не нашёл способа декодировать эти данные.</p>
<h3 id="декодирование-jpeg">Декодирование jpeg</h3>
<p>Способ, которым передаются кусочки изображения, совсем отличается от <a href="https://dernasherbrezon.com/posts/decoding-meteor-m/">Метеор-М</a> и <a href="https://dernasherbrezon.com/posts/decoding-jy1sat/">SSDV</a>. Каждая &ldquo;линия&rdquo; изображения состоит из:</p>
<table>
	<thead>
		<tr>
			<th style="width: 20%">Название</th>
			<th style="width: 20%">Размер (байт)</th>
			<th>Описание</th>
		</tr>
	</thead>
	<tbody>
		<tr>	
			<td>Preamble</td>
			<td>6</td>
			<td>Байты синхронизации. Не очень понятно зачем они нужны, так как изображение уже находится внутри пакета.</td>
		</tr>
		<tr>	
			<td>Counter</td>
			<td>1</td>
			<td>ID картинки. Крайне необходимое поле для того, чтобы понять, когда закончилась одна картинка и началась другая</td>
		</tr>
		<tr>	
			<td>Length</td>
			<td>10 бит</td>
			<td>Длина JPEG данных</td>
		</tr>
		<tr>	
			<td>ID линии</td>
			<td>6 бит</td>
			<td>ID линии внутри изображения. От 0 до 29.</td>
		</tr>		
		<tr>	
			<td>JPEG данные</td>
			<td>переменная длина</td>
			<td>Непосредственно данные изображения</td>
		</tr>		
	</tbody>
</table>
<p>Я уже было расчехлил свои <a href="https://dernasherbrezon.com/posts/jpeg-encoding/">таблицы Хаффмана</a> и настроил таблицы квантования, как выяснилось, что можно и без них. Дело в том, что DC коэффициенты обнуляются для каждого следующего кусочка. А это значит, что они независимы и их можно как-есть сохранить в файл и назвать его <code>картинка.jpg</code>. В java код выглядит так:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">baos<span style="color:#f92672">.</span><span style="color:#a6e22e">write</span><span style="color:#f92672">(</span>HEADER<span style="color:#f92672">);</span>
<span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span>PictureScanLine cur <span style="color:#f92672">:</span> currentBatch<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
	<span style="color:#66d9ef">int</span> missingLines <span style="color:#f92672">=</span> cur<span style="color:#f92672">.</span><span style="color:#a6e22e">getLineNumber</span><span style="color:#f92672">()</span> <span style="color:#f92672">-</span> previousLineNumber <span style="color:#f92672">-</span> 1<span style="color:#f92672">;</span>
	<span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> 0<span style="color:#f92672">;</span> i <span style="color:#f92672">&lt;</span> missingLines<span style="color:#f92672">;</span> i<span style="color:#f92672">++)</span> <span style="color:#f92672">{</span>
		appendLine<span style="color:#f92672">(</span>baos<span style="color:#f92672">,</span> EMPTY_LINE<span style="color:#f92672">,</span> previousLineNumber <span style="color:#f92672">+</span> i <span style="color:#f92672">+</span> 1<span style="color:#f92672">);</span>
	<span style="color:#f92672">}</span>
	previousLineNumber <span style="color:#f92672">=</span> cur<span style="color:#f92672">.</span><span style="color:#a6e22e">getLineNumber</span><span style="color:#f92672">();</span>
	appendLine<span style="color:#f92672">(</span>baos<span style="color:#f92672">,</span> cur<span style="color:#f92672">.</span><span style="color:#a6e22e">getData</span><span style="color:#f92672">(),</span> cur<span style="color:#f92672">.</span><span style="color:#a6e22e">getLineNumber</span><span style="color:#f92672">());</span>
<span style="color:#f92672">}</span>

<span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>previousLineNumber <span style="color:#f92672">+</span> 1 <span style="color:#f92672">!=</span> TOTAL_LINES<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
	<span style="color:#66d9ef">int</span> missingLines <span style="color:#f92672">=</span> TOTAL_LINES <span style="color:#f92672">-</span> previousLineNumber <span style="color:#f92672">-</span> 1<span style="color:#f92672">;</span>
	<span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> 0<span style="color:#f92672">;</span> i <span style="color:#f92672">&lt;</span> missingLines<span style="color:#f92672">;</span> i<span style="color:#f92672">++)</span> <span style="color:#f92672">{</span>
		appendLine<span style="color:#f92672">(</span>baos<span style="color:#f92672">,</span> EMPTY_LINE<span style="color:#f92672">,</span> previousLineNumber <span style="color:#f92672">+</span> i <span style="color:#f92672">+</span> 1<span style="color:#f92672">);</span>
	<span style="color:#f92672">}</span>
<span style="color:#f92672">}</span>
baos<span style="color:#f92672">.</span><span style="color:#a6e22e">write</span><span style="color:#f92672">(</span>FOOTER<span style="color:#f92672">);</span>
</code></pre></div><p>При этом <code>HEADER</code>, <code>EMPTY_LINE</code> и <code>FOOTER</code> - это заранее созданные массивы байт. После того как байты записаны в <code>ByteArrayOutputStream</code> на выходе получается <a href="https://en.wikipedia.org/wiki/JPEG#Syntax_and_structure">стандартный jpeg файл</a>. Тут важно не забыть добавлять тэг <code>RSTn</code> после каждой линии, чтобы сбросить DC коэффициенты в 0.</p>
<h3 id="результат">Результат</h3>
<p>В результате один пакет Fox-1D позволяет получить вот такую симпатичную картинку из космоса:</p>
<p><img src="/img/decoding-fox1d/fox1dPicture.png" alt=""></p>
<p>Если присмотреться, то справа можно увидеть странную зелёную полосу:</p>
<p><img src="/img/decoding-fox1d/2.png" alt=""></p>
<p>Я попытался разобраться из-за чего она получилась, но не нашёл ничего подозрительного. Jpeg файл выглядел правильным, и никаких ошибок декодирования не было. Вполне возможно, это баг камеры на спутнике.</p>
<p>Если же сравнивать <a href="http://www.amsat.org/tlm/showImages.php?id=4">результаты</a> с официальным клиентом, то мне мой нравится больше. В официальном декодере даже нет поддержки пропущенных линий:</p>
<p><img src="/img/decoding-fox1d/4_69_831012_1.jpg" alt=""></p>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Ошибки прозрачности в gdal2tiles</title>
      <link>https://dernasherbrezon.com/posts/gdal2tiles-transparency/</link>
      <pubDate>Thu, 07 May 2020 22:21:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/gdal2tiles-transparency/</guid>
      <description>В своей работе над r2weather.ru я нахожу множество багов. Иногда они случаются по собственной глупости, а иногда появляются в самых неожиданных местах. Причём, ошибки связаны не только с программированием и различными алгоритмами, но и со странным поведением внешних систем.
Из недавнего, я обнаружил на результирующей карте совершенно странные полупрозрачные полоски толщиной один-два пиксела.
Выглядит это, прямо скажем, не очень. Особенно на большой карте мира.
Исследование Вообще, я специально конвертирую jpeg-файл, принимаемый со спутника в формат .</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Ошибки прозрачности в gdal2tiles</h1></header>
      		<div class='container entry-content'>
  <p>В своей работе над <a href="https://r2weather.ru">r2weather.ru</a> я нахожу множество багов. Иногда они случаются по собственной глупости, а иногда появляются в самых неожиданных местах. Причём, ошибки связаны не только с программированием и различными алгоритмами, но и со странным поведением внешних систем.</p>
<p>Из недавнего, я обнаружил на результирующей карте совершенно странные полупрозрачные полоски толщиной один-два пиксела.</p>
<p><img src="/img/gdal2tiles-transparency/41.png" alt=""></p>
<p>Выглядит это, прямо скажем, не очень. Особенно на большой карте мира.</p>
<h2 id="исследование">Исследование</h2>
<p>Вообще, я специально конвертирую jpeg-файл, принимаемый со спутника в формат .png. Во-первых, это формат без потерь. То есть, каждый пиксел, который я вижу в результирующем jpeg, выглядит именно так, как он был передан со спутника. Это очень сильно улучшает изображение, так как нет двойного перекодирования в jpeg. Во-вторых, png поддерживает альфа-канал. Если часть изображения не была принята, то в альфа-канал можно поместить полностью прозрачные пикселы. Они будут нести дополнительную информацию и их можно будет красиво &ldquo;не показать&rdquo; на карте.</p>
<p>Если ещё раз глянуть на получившийся тайл, то видно, что полупрозрачные пикселы находятся по краям изображения. Если бы я не принял часть пакетов со спутника, то у меня была бы полоса шириной 8 пикселов. А это значит, что эти пикселы добавляются где-то во время обработки.</p>
<p>Чтобы их найти, достаточно проверить изображение на каждом шаге обработки.</p>
<p><img src="/img/gdal2tiles-transparency/1.png" alt=""></p>
<p>GeoTIFF получается с очень чёткими краями.</p>
<p><img src="/img/gdal2tiles-transparency/2.png" alt=""></p>
<p>Ага! Попался. gdal2tiles создаёт тайлы с полупрозрачными пикселами по краям. И это очень странно:</p>
<ol>
<li>В <a href="https://gdal.org/programs/gdal2tiles.html">официальной документации</a> об этом нигде не сказано</li>
<li>Полупрозрачность добавляется не во всех слоях! В примере выше тайл с 5-го уровня, а для уровня 6 никакой прозрачности не добавляется.</li>
</ol>
<p><img src="/img/gdal2tiles-transparency/3.png" alt=""></p>
<p>Исправляется эта ошибка достаточно просто. Во-первых, при отрисовке нужно брать изображения чуть-чуть внахлёст. Тогда будет плавный переход между двумя изображениями. А во-вторых можно игнорировать все пикселы в которых выставлена полупрозрачность.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> 0<span style="color:#f92672">;</span> i <span style="color:#f92672">&lt;</span> sourceImage<span style="color:#f92672">.</span><span style="color:#a6e22e">getWidth</span><span style="color:#f92672">();</span> i<span style="color:#f92672">++)</span> <span style="color:#f92672">{</span>
	<span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> j <span style="color:#f92672">=</span> 0<span style="color:#f92672">;</span> j <span style="color:#f92672">&lt;</span> sourceImage<span style="color:#f92672">.</span><span style="color:#a6e22e">getHeight</span><span style="color:#f92672">();</span> j<span style="color:#f92672">++)</span> <span style="color:#f92672">{</span>
		<span style="color:#66d9ef">int</span> sourceRgb <span style="color:#f92672">=</span> sourceImage<span style="color:#f92672">.</span><span style="color:#a6e22e">getRGB</span><span style="color:#f92672">(</span>i<span style="color:#f92672">,</span> j<span style="color:#f92672">);</span>
		<span style="color:#75715e">// do not override dest with no data
</span><span style="color:#75715e"></span>		<span style="color:#75715e">// do not copy any partially tranparent pixels
</span><span style="color:#75715e"></span>		<span style="color:#75715e">// gdal2tiles.py create them on the edges for some reason
</span><span style="color:#75715e"></span>		<span style="color:#66d9ef">if</span> <span style="color:#f92672">((</span>sourceRgb <span style="color:#f92672">&gt;&gt;&gt;</span> 24<span style="color:#f92672">)</span> <span style="color:#f92672">!=</span> 0xFF<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
			<span style="color:#66d9ef">continue</span><span style="color:#f92672">;</span>
		<span style="color:#f92672">}</span>
		destImage<span style="color:#f92672">.</span><span style="color:#a6e22e">setRGB</span><span style="color:#f92672">(</span>i<span style="color:#f92672">,</span> j<span style="color:#f92672">,</span> sourceRgb<span style="color:#f92672">);</span>
	<span style="color:#f92672">}</span>
<span style="color:#f92672">}</span>
</code></pre></div><h2 id="результат">Результат</h2>
<p>Такое небольшое изменение дало на удивление хорошие результаты.</p>
<p><img src="/img/gdal2tiles-transparency/4.png" alt=""></p>
<p>На изображении выше наложены два пролёта подряд на Северной Америкой. Несмотря, на то, что границы каждого пролёта немного размыты, изображение склеено вполне неплохо.</p>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Прозрачность в GeoTIFF</title>
      <link>https://dernasherbrezon.com/posts/geotiff-transparency/</link>
      <pubDate>Thu, 30 Apr 2020 16:15:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/geotiff-transparency/</guid>
      <description>Работа над r2weather.ru идёт полным ходом, а значит появляются и исправляются различные баги. Один из последних и самых интересных - настройка прозрачности.
После того как я создал GeoTIFF и нарезал его на тайлы с помощью gdal2tiles у меня получился следующий результат:
Если присмотреться, то можно увидеть отдельные &amp;ldquo;выколотые&amp;rdquo; пикселы там, где находится море. А если взять ночную фотографию, то такие пикселы еще более заметны:
Это явно ошибка определения прозрачности, так как на оригинальном изображении этой проблемы нет.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Прозрачность в GeoTIFF</h1></header>
      		<div class='container entry-content'>
  <p>Работа над <a href="https://r2weather.ru">r2weather.ru</a> идёт полным ходом, а значит появляются и исправляются различные баги. Один из последних и самых интересных - настройка прозрачности.</p>
<p>После того как я создал GeoTIFF и нарезал его на тайлы с помощью gdal2tiles у меня получился следующий результат:</p>
<p><img src="/img/geotiff-transparency/1.png" alt=""></p>
<p>Если присмотреться, то можно увидеть отдельные &ldquo;выколотые&rdquo; пикселы там, где находится море. А если взять ночную фотографию, то такие пикселы еще более заметны:</p>
<p><img src="/img/geotiff-transparency/2.png" alt=""></p>
<p>Это явно ошибка определения прозрачности, так как на оригинальном изображении этой проблемы нет.</p>
<h2 id="прозрачность">Прозрачность</h2>
<p>В GeoTIFF прозрачность можно задать несколькими способами. В одной из <a href="https://dernasherbrezon.com/posts/georeferencing-geotiff/">предыдущих статей</a> я описал, как задать прозрачность на уровне каждого канала. Для этого нужно добавить следующий параметр:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-xml" data-lang="xml"><span style="color:#f92672">&lt;NoDataValue&gt;</span>0.0<span style="color:#f92672">&lt;/NoDataValue&gt;</span>
</code></pre></div><p>Он фактически говорит, что все пикселы с нулевым значением в данном слое - прозрачны. Но это не всегда так! &ldquo;0&rdquo; или чёрный цвет - это не отсутствие цвета. Это такой цвет. В прозрачных png флаг, который определяет прозрачность - это альфа канал. Если значение 0x0, то пиксел полностью прозрачный. Если 0xFF, то - непрозрачный.</p>
<p>При работе с GeoTIFF этим можно воспользоваться. Для этого добавляется дополнительный слой, у которого тип Alpha:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-xml" data-lang="xml"><span style="color:#f92672">&lt;VRTRasterBand</span> <span style="color:#a6e22e">dataType=</span><span style="color:#e6db74">&#34;Byte&#34;</span> <span style="color:#a6e22e">band=</span><span style="color:#e6db74">&#34;4&#34;</span><span style="color:#f92672">&gt;</span>
	<span style="color:#f92672">&lt;Description&gt;</span>Alpha<span style="color:#f92672">&lt;/Description&gt;</span>
	<span style="color:#f92672">&lt;ColorInterp&gt;</span>Alpha<span style="color:#f92672">&lt;/ColorInterp&gt;</span>	
	<span style="color:#f92672">&lt;SimpleSource&gt;</span>
		<span style="color:#f92672">&lt;SourceFilename</span> <span style="color:#a6e22e">relativeToVRT=</span><span style="color:#e6db74">&#34;1&#34;</span><span style="color:#f92672">&gt;</span>output.png<span style="color:#f92672">&lt;/SourceFilename&gt;</span>
		<span style="color:#f92672">&lt;SourceBand&gt;</span>4<span style="color:#f92672">&lt;/SourceBand&gt;</span>	
	<span style="color:#f92672">&lt;/SimpleSource&gt;</span>
<span style="color:#f92672">&lt;/VRTRasterBand&gt;</span>
</code></pre></div><p>В результате GeoTIFF будет содержать:</p>
<pre><code>Band 4 Block=2438x1 Type=Byte, ColorInterp=Alpha
  Description = Alpha
</code></pre><p>Программы, которые работают с GeoTIFF, могут использовать этот канал для того, чтобы задавать прозрачность.</p>
<h2 id="результат">Результат</h2>
<p>После добавления прозрачности из альфа-канала, результат gdal2tiles выглядит следующим образом:</p>
<p><img src="/img/geotiff-transparency/3.png" alt=""></p>
<p>Над Латвией сейчас ночь.</p>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Геокодирование спутниковых снимков: Тайлы</title>
      <link>https://dernasherbrezon.com/posts/georeferencing-tiles/</link>
      <pubDate>Mon, 20 Apr 2020 20:52:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/georeferencing-tiles/</guid>
      <description>Это финальная статья о том, как геокодировать спутниковые снимки. Здесь я постараюсь описать, а что же делать дальше с полученным GeoTIFF файлом. Если интересно о том, как получить GeoTIFF, то можно почитать предыдущие статьи:
 Введение Опорные точки GeoTIFF Тайлы  QGIS GeoTIFF, полученный на предыдущем шаге выглядит правдоподобно, но хочется убедиться, что проекция выполнена правильно. Самый простой способ - это наложить файл на настоящую карту. Для этого достаточно взять бесплатную QGIS и добавить слой OpenStreetMap:</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Геокодирование спутниковых снимков: Тайлы</h1></header>
      		<div class='container entry-content'>
  <p>Это финальная статья о том, как геокодировать спутниковые снимки. Здесь я постараюсь описать, а что же делать дальше с полученным GeoTIFF файлом. Если интересно о том, как получить GeoTIFF, то можно почитать предыдущие статьи:</p>
<ol>
<li><a href="https://dernasherbrezon.com/posts/georeferencing-satellite-images/">Введение</a></li>
<li><a href="https://dernasherbrezon.com/posts/georeferencing-gcp/">Опорные точки</a></li>
<li><a href="https://dernasherbrezon.com/posts/georeferencing-geotiff/">GeoTIFF</a></li>
<li>Тайлы</li>
</ol>
<h2 id="qgis">QGIS</h2>
<p>GeoTIFF, полученный на предыдущем шаге выглядит правдоподобно, но хочется убедиться, что проекция выполнена правильно. Самый простой способ - это наложить файл на настоящую карту. Для этого достаточно взять <a href="https://www.qgis.org/en/site/">бесплатную QGIS</a> и добавить слой OpenStreetMap:</p>
<p><img src="/img/georeferencing-tiles/1.png" alt=""></p>
<p>После этого добавить слой из GeoTIFF файла:</p>
<p><img src="/img/georeferencing-tiles/2.png" alt=""></p>
<p>Такое отображение не слишком полезно, поэтому нужно добавить прозрачности. В свойствах слоя нужно сделать общую прозрачность процентов на 60% и проставить &ldquo;No Data Value = 0&rdquo;.</p>
<p><img src="/img/georeferencing-tiles/3.png" alt=""></p>
<p>Выглядит значительно лучше, но видно, что изображение совсем не совпадает с картой. В моём примере разница примерно 34км. Это достаточно много.</p>
<p><img src="/img/georeferencing-tiles/4.png" alt=""></p>
<h2 id="ошибки-геокодирования">Ошибки геокодирования</h2>
<p>Причин, по котором изображение может не совпадать с картой, множество:</p>
<ol>
<li>Ошибки модели SGP4</li>
<li>Неправильно выбранная проекция лучей камеры на Землю</li>
<li>Неправильно посчитанные кватернионы</li>
<li>Неправильная ориентация самого спутника на орбите</li>
<li>Неизвестный фактор</li>
</ol>
<p>Каждая из этих причин может вносить существенную ошибку в геокодировании. И для разных спутников решение может быть совершенно разным. В случае Метеор-М2, я заметил, что в одной из работ указывается стандартное значение крена 2.5 градуса. Это значит, что камера спутника не точно смотрит в надир, а под небольшим углом. Я попытался смоделировать это в Rugged:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">LOSBuilder losBuilder <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> LOSBuilder<span style="color:#f92672">(</span>rawDirs<span style="color:#f92672">);</span>
losBuilder<span style="color:#f92672">.</span><span style="color:#a6e22e">addTransform</span><span style="color:#f92672">(</span><span style="color:#66d9ef">new</span> FixedRotation<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;fixed-rotation&#34;</span><span style="color:#f92672">,</span> Vector3D<span style="color:#f92672">.</span><span style="color:#a6e22e">PLUS_I</span><span style="color:#f92672">,</span> FastMath<span style="color:#f92672">.</span><span style="color:#a6e22e">toRadians</span><span style="color:#f92672">(</span>2<span style="color:#f92672">.</span><span style="color:#a6e22e">5</span><span style="color:#f92672">)));</span>
TimeDependentLOS lineOfSight <span style="color:#f92672">=</span> losBuilder<span style="color:#f92672">.</span><span style="color:#a6e22e">build</span><span style="color:#f92672">();</span>
</code></pre></div><p>Пересоздав GeoTIFF, я получил следующее:</p>
<p><img src="/img/georeferencing-tiles/5.png" alt=""></p>
<p>Разница составила около 10км. Это значительно лучше, чем было в прошлый раз. Видимо, я на правильном пути. Немножко &ldquo;поиграв&rdquo; с углами крена и тангажа, я высчитал их для снимка как 2.6 и 0.6:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">LOSBuilder losBuilder <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> LOSBuilder<span style="color:#f92672">(</span>rawDirs<span style="color:#f92672">);</span>
losBuilder<span style="color:#f92672">.</span><span style="color:#a6e22e">addTransform</span><span style="color:#f92672">(</span><span style="color:#66d9ef">new</span> FixedRotation<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;fixed-rotation&#34;</span><span style="color:#f92672">,</span> Vector3D<span style="color:#f92672">.</span><span style="color:#a6e22e">PLUS_I</span><span style="color:#f92672">,</span> FastMath<span style="color:#f92672">.</span><span style="color:#a6e22e">toRadians</span><span style="color:#f92672">(</span>2<span style="color:#f92672">.</span><span style="color:#a6e22e">6</span><span style="color:#f92672">)));</span>
losBuilder<span style="color:#f92672">.</span><span style="color:#a6e22e">addTransform</span><span style="color:#f92672">(</span><span style="color:#66d9ef">new</span> FixedRotation<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;fixed-rotation&#34;</span><span style="color:#f92672">,</span> Vector3D<span style="color:#f92672">.</span><span style="color:#a6e22e">PLUS_J</span><span style="color:#f92672">,</span> FastMath<span style="color:#f92672">.</span><span style="color:#a6e22e">toRadians</span><span style="color:#f92672">(</span>0<span style="color:#f92672">.</span><span style="color:#a6e22e">6</span><span style="color:#f92672">)));</span>
TimeDependentLOS lineOfSight <span style="color:#f92672">=</span> losBuilder<span style="color:#f92672">.</span><span style="color:#a6e22e">build</span><span style="color:#f92672">();</span>
</code></pre></div><p>В результате даёт:</p>
<p><img src="/img/georeferencing-tiles/6.png" alt=""></p>
<h2 id="тайлы">Тайлы</h2>
<p>Изображение идеально совпадает с картой. Что же ещё можно сделать? Рассказать об этом другим! Самый простой способ - это разрезать изображение на тайлы и наложить на одну из известных карт.</p>
<p>В GDAL есть встроенная программа gdal2tiles. С её помощью можно достаточно просто сгенерировать тайлы:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">python3 gdal2tiles.py --profile<span style="color:#f92672">=</span>mercator -z 3-6 output.tif tiles
</code></pre></div><p>Эта команда создаст в папке <code>tiles</code> необходимые тайлы с уровнями детализации 3,4,5,6. Более детальные тайлы не имеет смысла создавать, так как разрешение МСУ-МР километр на пиксель.</p>
<p>После того как созданы тайлы, их можно загружать на карту (да, снизу карта и её можно двигать и увеличивать):</p>
<!-- Leaflet -->
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.6.0/dist/leaflet.css"
   integrity="sha512-xwE/Az9zrjBIphAcBb3F6JVqxf46+CDLwfLMHloNu6KEQCAWi6HcDUbeOfBIptF7tcCzusKFjFw2yuvEpDL9wQ=="
   crossorigin=""/>
<script src="https://unpkg.com/leaflet@1.6.0/dist/leaflet.js"
   integrity="sha512-gZwIG9x3wUXg2hdXF6+rVkLF/0Vi9U8D2Ntg4Ga5I5BZpVkVxlJWbSQtXPSiUTtC0TjtGOmxa1AJPuV0CPthew=="
   crossorigin=""></script>
<div id="map" style="height: 480px;"></div>
<script>

// Map
var map = L.map('map', {
    center: [42.1061323234332, 40.66492877632462],
    zoom: 5,
    minZoom: 3,
    maxZoom: 6
});

L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png', {attribution: '&copy; <a href="http://osm.org/copyright">OpenStreetMap</a> contributors', minZoom: 3, maxZoom: 6}).addTo(map);
L.tileLayer('/img/georeferencing-tiles/{z}/{x}/{y}.png', { tms: true, opacity: 0.7, attribution: "", minZoom: 3, maxZoom: 6}).addTo(map);

</script>
<h2 id="послесловие">Послесловие</h2>
<p>Несмотря на кажущуюся простоту, для меня весь процесс получения картинки со спутника и наложение её на карту, занял два года. В течении этого времени были и радость открытия и полное отрицание получившихся результатов. Но я очень горд тем, что прошёл весь путь. Ведь я смог разобраться в нескольких совершенно несвязанных областях знаний и добиться финального результата.</p>
<p>Но я не собираюсь стоять на месте. Есть множество вещей, которые можно улучшить:</p>
<ol>
<li>Более точное геокодирование на основе береговых линий. Дело в том, что спутник может незначительно менять направление камеры на Землю. Гарантировать значения 2.6 и 0.6 нельзя, поэтому нужно сделать &ldquo;доводку&rdquo; изображения.</li>
<li>Нужно создать сервис, который бы собирал изображения с Метеор-М2 и мог бы накладывать их на карту в реальном времени. Это вполне возможно, и я планирую этим заняться в ближайшее время.</li>
</ol>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Геокодирование спутниковых снимков: GeoTIFF</title>
      <link>https://dernasherbrezon.com/posts/georeferencing-geotiff/</link>
      <pubDate>Sun, 19 Apr 2020 18:09:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/georeferencing-geotiff/</guid>
      <description>Начало Итак, в прошлом посте я описал основные шаги, необходимые для получения списка опорных точек. Следующим шагом будет создание файла в формате GeoTIFF. Это подмножество формата tiff, в котором хранится дополнительная геоинформация. Почти все современные ГИС поддерживают этот формат, поэтому в нём распространяются как карты Google Earth, так и панорамы съёмки квадрокоптерами.
GDAL Для работы с GeoTIFF форматом существует множество библиотек. Наиболее популярная и открытая - GDAL. Она позволяет создавать и редактировать GeoTIFF, выполнять преобразование из одной проекции в другую, создавать тайлы.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Геокодирование спутниковых снимков: GeoTIFF</h1></header>
      		<div class='container entry-content'>
  <h2 id="начало">Начало</h2>
<p>Итак, в <a href="https://dernasherbrezon.com/posts/georeferencing-gcp/">прошлом посте</a> я описал основные шаги, необходимые для получения списка опорных точек. Следующим шагом будет создание файла в формате <a href="https://en.wikipedia.org/wiki/GeoTIFF">GeoTIFF</a>. Это подмножество формата tiff, в котором хранится дополнительная геоинформация. Почти все современные ГИС поддерживают этот формат, поэтому в нём распространяются как карты <a href="https://developers.google.com/earth-engine/exporting">Google Earth</a>, так и панорамы съёмки <a href="https://support.dronedeploy.com/docs/data-export-formats">квадрокоптерами</a>.</p>
<p><img src="/img/georeferencing-geotiff/1.png" alt=""></p>
<h2 id="gdal">GDAL</h2>
<p>Для работы с GeoTIFF форматом существует множество библиотек. Наиболее популярная и открытая - <a href="https://gdal.org">GDAL</a>. Она позволяет создавать и редактировать GeoTIFF, выполнять преобразование из одной проекции в другую, создавать тайлы. Несмотря на то, что есть <a href="https://www.geotools.org">java альтернативы</a>, я решил использовать именно GDAL. Прежде всего из-за лицензии и большого сообщества.</p>
<p>Итак, для того, чтобы создать GeoTIFF, нужно использовать команду <code>gdal_translate</code>:</p>
<pre><code>gdal_translate -gcp pixel1 line1 X1 Y1 -gcp pixel2 line2 X2 Y2 ... source.tif sourceGCP.tif
</code></pre><p>С это командой есть несколько проблем:</p>
<ul>
<li>она создаёт промежуточный GeoTIFF файл. Для того чтобы наложить изображение на карту, его необходимо преобразовать в формат EPSG:3857. Хотелось бы сразу генерировать файл в нужной проекции.</li>
<li>задавать опорные точки через командную строку не очень удобно. Особенно есть их очень много.</li>
</ul>
<p>К счастью, в GDAL есть мета-формат для описания виртуальных датасетов - <a href="https://gdal.org/drivers/raster/vrt.html">VRT</a>. Он позволяет описывать опорные точки и соответствующее им оригинальное изображение.</p>
<h2 id="vrt">VRT</h2>
<p>vrt файл - это обычный xml файл. Для него даже есть <a href="https://raw.githubusercontent.com/OSGeo/gdal/master/gdal/data/gdalvrt.xsd">xml схема</a>, чтобы проверить корректность. Для своих нужд я создал следующий файл:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-xml" data-lang="xml"><span style="color:#f92672">&lt;VRTDataset</span> <span style="color:#a6e22e">rasterXSize=</span><span style="color:#e6db74">&#34;1568&#34;</span> <span style="color:#a6e22e">rasterYSize=</span><span style="color:#e6db74">&#34;480&#34;</span><span style="color:#f92672">&gt;</span>
	<span style="color:#f92672">&lt;GCPList</span> <span style="color:#a6e22e">Projection=</span><span style="color:#e6db74">&#34;EPSG:4326&#34;</span><span style="color:#f92672">&gt;</span>
		<span style="color:#f92672">&lt;GCP</span> <span style="color:#a6e22e">Id=</span><span style="color:#e6db74">&#34;0&#34;</span> <span style="color:#a6e22e">Pixel=</span><span style="color:#e6db74">&#34;1568.5&#34;</span> <span style="color:#a6e22e">Line=</span><span style="color:#e6db74">&#34;0.5&#34;</span> <span style="color:#a6e22e">X=</span><span style="color:#e6db74">&#34;64.87017562215375&#34;</span> <span style="color:#a6e22e">Y=</span><span style="color:#e6db74">&#34;41.05354188002164&#34;</span> <span style="color:#a6e22e">Z=</span><span style="color:#e6db74">&#34;0.0&#34;</span> <span style="color:#f92672">/&gt;</span>
		<span style="color:#f92672">&lt;GCP</span> <span style="color:#a6e22e">Id=</span><span style="color:#e6db74">&#34;1&#34;</span> <span style="color:#a6e22e">Pixel=</span><span style="color:#e6db74">&#34;1536.5&#34;</span> <span style="color:#a6e22e">Line=</span><span style="color:#e6db74">&#34;0.5&#34;</span> <span style="color:#a6e22e">X=</span><span style="color:#e6db74">&#34;62.466422534484025&#34;</span> <span style="color:#a6e22e">Y=</span><span style="color:#e6db74">&#34;41.906597006909756&#34;</span> <span style="color:#a6e22e">Z=</span><span style="color:#e6db74">&#34;0.0&#34;</span> <span style="color:#f92672">/&gt;</span>
		...
	<span style="color:#f92672">&lt;/GCPList&gt;</span>
	<span style="color:#f92672">&lt;VRTRasterBand</span> <span style="color:#a6e22e">dataType=</span><span style="color:#e6db74">&#34;Byte&#34;</span> <span style="color:#a6e22e">band=</span><span style="color:#e6db74">&#34;1&#34;</span><span style="color:#f92672">&gt;</span>
		<span style="color:#f92672">&lt;Description&gt;</span>channel1<span style="color:#f92672">&lt;/Description&gt;</span>
		<span style="color:#f92672">&lt;NoDataValue&gt;</span>0.0<span style="color:#f92672">&lt;/NoDataValue&gt;</span>
		<span style="color:#f92672">&lt;SimpleSource&gt;</span>
			<span style="color:#f92672">&lt;SourceFilename</span> <span style="color:#a6e22e">relativeToVRT=</span><span style="color:#e6db74">&#34;1&#34;</span><span style="color:#f92672">&gt;</span>output.png<span style="color:#f92672">&lt;/SourceFilename&gt;</span>
			<span style="color:#f92672">&lt;SourceBand&gt;</span>1<span style="color:#f92672">&lt;/SourceBand&gt;</span>
		<span style="color:#f92672">&lt;/SimpleSource&gt;</span>
	<span style="color:#f92672">&lt;/VRTRasterBand&gt;</span>
	<span style="color:#f92672">&lt;VRTRasterBand</span> <span style="color:#a6e22e">dataType=</span><span style="color:#e6db74">&#34;Byte&#34;</span> <span style="color:#a6e22e">band=</span><span style="color:#e6db74">&#34;2&#34;</span><span style="color:#f92672">&gt;</span>
		<span style="color:#f92672">&lt;Description&gt;</span>channel2<span style="color:#f92672">&lt;/Description&gt;</span>
		<span style="color:#f92672">&lt;NoDataValue&gt;</span>0.0<span style="color:#f92672">&lt;/NoDataValue&gt;</span>
		<span style="color:#f92672">&lt;SimpleSource&gt;</span>
			<span style="color:#f92672">&lt;SourceFilename</span> <span style="color:#a6e22e">relativeToVRT=</span><span style="color:#e6db74">&#34;1&#34;</span><span style="color:#f92672">&gt;</span>output.png<span style="color:#f92672">&lt;/SourceFilename&gt;</span>
			<span style="color:#f92672">&lt;SourceBand&gt;</span>2<span style="color:#f92672">&lt;/SourceBand&gt;</span>
		<span style="color:#f92672">&lt;/SimpleSource&gt;</span>
	<span style="color:#f92672">&lt;/VRTRasterBand&gt;</span>
	<span style="color:#f92672">&lt;VRTRasterBand</span> <span style="color:#a6e22e">dataType=</span><span style="color:#e6db74">&#34;Byte&#34;</span> <span style="color:#a6e22e">band=</span><span style="color:#e6db74">&#34;3&#34;</span><span style="color:#f92672">&gt;</span>
		<span style="color:#f92672">&lt;Description&gt;</span>channel3<span style="color:#f92672">&lt;/Description&gt;</span>
		<span style="color:#f92672">&lt;NoDataValue&gt;</span>0.0<span style="color:#f92672">&lt;/NoDataValue&gt;</span>
		<span style="color:#f92672">&lt;SimpleSource&gt;</span>
			<span style="color:#f92672">&lt;SourceFilename</span> <span style="color:#a6e22e">relativeToVRT=</span><span style="color:#e6db74">&#34;1&#34;</span><span style="color:#f92672">&gt;</span>output.png<span style="color:#f92672">&lt;/SourceFilename&gt;</span>
			<span style="color:#f92672">&lt;SourceBand&gt;</span>3<span style="color:#f92672">&lt;/SourceBand&gt;</span>
		<span style="color:#f92672">&lt;/SimpleSource&gt;</span>
	<span style="color:#f92672">&lt;/VRTRasterBand&gt;</span>
<span style="color:#f92672">&lt;/VRTDataset&gt;</span>
</code></pre></div><p>В этом файле следует обратить внимание на несколько вещей:</p>
<ul>
<li>Список опорных точек создан для модели земли WGS84 (EPSG:4326)</li>
<li><code>output.png</code> - оригинальное изображение.</li>
<li>Для каждого канала изображения есть описание. Например, <code>&lt;Description&gt;channel2&lt;/Description&gt;</code> - данные спектрального диапазона 0.7-1.1 мкм.</li>
</ul>
<h2 id="gdalwarp">gdalwarp</h2>
<p>После того как vrt файл создан, можно создавать GeoTIFF в нужной проекции:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">gdalwarp -tps -overwrite -t_srs epsg:3857 -of GTIFF output.vrt output.tif
</code></pre></div><p>Где:</p>
<ul>
<li>tps (thin plate spline) - метод интерполяции точек. Без него gdalwarp не сможет правильно обработать опорные точки</li>
<li>epsg:3857 - проекция <a href="https://en.wikipedia.org/wiki/Web_Mercator_projection">web mercator</a>. Эту проекцию используют все вэб карты: google карты, open street map, yandex карты</li>
<li>GTIFF - формат выходного файла.</li>
</ul>
<p>В результате оригинальное изображение:</p>
<p><img src="/img/georeferencing-satellite-images/1.png" alt=""></p>
<p>Будет преобразовано в следующее:</p>
<p><img src="/img/georeferencing-geotiff/0.png" alt=""></p>
<p>Как видно, оно было немного повёрнуто и растянуто по краям. На первый взгляд выглядит как раз то, что и нужно было сделать. Но как же убедиться, что всё правильно? Всё правильно, надо наложить его на настоящую карту. Об этом и пойдёт речь в следующей статье.</p>
<hr/>
<p>Геокодирование спутниковых снимков:</p>
<ol>
<li><a href="https://dernasherbrezon.com/posts/georeferencing-satellite-images/">Введение</a></li>
<li><a href="https://dernasherbrezon.com/posts/georeferencing-gcp/">Опорные точки</a></li>
<li>GeoTIFF</li>
<li><a href="https://dernasherbrezon.com/posts/georeferencing-tiles/">Тайлы</a></li>
</ol>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Геокодирование спутниковых снимков: опорные точки</title>
      <link>https://dernasherbrezon.com/posts/georeferencing-gcp/</link>
      <pubDate>Sat, 18 Apr 2020 18:15:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/georeferencing-gcp/</guid>
      <description>Начало В прошлом посте я описал основные шаги, необходимые для геокодирования изображения. Здесь же, я хочу более подробно описать алгоритм получения опорных точек. Опорная точка - это отображение координат пиксела (X, Y) на географические координаты (широта, долгота).
Зная список опорных точек, можно растянуть изображение по ширине и высоте так, чтобы оно совпало с картой. Их, например, можно задать вручную в любой ГИС. Обычно выбирают береговые линии с характерными полуостровами:
Мне же такой способ не подходит, так как я хочу делать это в автоматическом режиме.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Геокодирование спутниковых снимков: опорные точки</h1></header>
      		<div class='container entry-content'>
  <h2 id="начало">Начало</h2>
<p>В <a href="https://dernasherbrezon.com/posts/georeferencing-satellite-images/">прошлом посте</a> я описал основные шаги, необходимые для геокодирования изображения. Здесь же, я хочу более подробно описать алгоритм получения опорных точек. Опорная точка - это отображение координат пиксела (X, Y) на географические координаты (широта, долгота).</p>
<p>Зная список опорных точек, можно растянуть изображение по ширине и высоте так, чтобы оно совпало с картой. Их, например, можно задать вручную в любой ГИС. Обычно выбирают береговые линии с характерными полуостровами:</p>
<p><img src="/img/georeferencing-gcp/0.png" alt=""></p>
<p>Мне же такой способ не подходит, так как я хочу делать это в автоматическом режиме. Это более сложный способ, так как требуется смоделировать поведение спутника в каждый момент времени. А для этого нужно вычислить:</p>
<ul>
<li>положение спутника</li>
<li>положение камеры относительно спутника</li>
<li>параметры камеры (фокусное расстояние, пространственное разрешение и пр.)</li>
</ul>
<p>Далее я постараюсь рассчитать каждый из этих параметров и посчитать на их основе опорные точки.</p>
<h2 id="положение-спутника">Положение спутника</h2>
<p>Положение спутника можно получить двумя способами:</p>
<ol>
<li>На основе телеметрии, которую передаёт сам спутник</li>
<li>На основе SGP4 модели</li>
</ol>
<p>Несмотря на то, что первый способ более точный, Метеор-М2 не передаёт эту информацию. Но это не беда. Можно рассчитать чуть менее точное положение на основе модели <a href="https://en.wikipedia.org/wiki/Simplified_perturbations_models">SGP4</a>. Для этого нужно знать:</p>
<ul>
<li>TLE</li>
<li>текущее время</li>
</ul>
<h4 id="tle">TLE</h4>
<p><a href="https://ru.wikipedia.org/wiki/TLE">TLE</a> - это двухстрочный формат данных, представляющий собой набор элементов орбиты для спутника Земли. Взять актуальные параметры можно с сайта <a href="https://www.celestrak.com/NORAD/elements/weather.txt">www.celestrak.com</a>. Например, в данный момент TLE для Метеор-М2 такие:</p>
<pre><code>METEOR-M 2              
1 40069U 14037A   20109.60817406 -.00000042  00000-0 -58409-8 0  9990
2 40069  98.5096 149.3859 0006903  94.0019 266.1946 14.20671606299713
</code></pre><h4 id="текущее-время">Текущее время</h4>
<p>Время - очень важный параметр, который нужно знать для каждой строчки изображения. Его можно получить двумя способами:</p>
<ol>
<li>На основе информации со спутника</li>
<li>Рассчитать на станции приёма</li>
</ol>
<p>К счастью, Метеор-М2 передаёт время формирования изображения в каждом пакете. В протоколе LRPT для этого существует вторичный заголовок, в котором может содержаться актуальное время:</p>
<p><img src="/img/georeferencing-gcp/2.png" alt=""></p>
<p>Метеор-М2 передаёт в поле &ldquo;мс суток&rdquo; количество миллисекунд, прошедших с начала дня по московскому времени.</p>
<h4 id="расчёт-положения">Расчёт положения</h4>
<p>На основе этих данных можно посчитать положение спутника. Для этого я использую библиотеку <a href="https://www.orekit.org">orekit</a>:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">String line1 <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;1 40069U 14037A   20109.60817406 -.00000042  00000-0 -58409-8 0  9990&#34;</span><span style="color:#f92672">;</span>
String line2 <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;2 40069  98.5096 149.3859 0006903  94.0019 266.1946 14.20671606299713&#34;</span><span style="color:#f92672">;</span>
TLEPropagator tlePropagator <span style="color:#f92672">=</span> TLEPropagator<span style="color:#f92672">.</span><span style="color:#a6e22e">selectExtrapolator</span><span style="color:#f92672">(</span><span style="color:#66d9ef">new</span> TLE<span style="color:#f92672">(</span>line1<span style="color:#f92672">,</span> line2<span style="color:#f92672">));</span>

AbsoluteDate date <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> AbsoluteDate<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;2020-04-11T05:36:00.899994&#34;</span><span style="color:#f92672">,</span> TimeScalesFactory<span style="color:#f92672">.</span><span style="color:#a6e22e">getUTC</span><span style="color:#f92672">());</span>
PVCoordinates pv <span style="color:#f92672">=</span> tlePropagator<span style="color:#f92672">.</span><span style="color:#a6e22e">getPVCoordinates</span><span style="color:#f92672">(</span>date<span style="color:#f92672">);</span>
</code></pre></div><p>Здесь для примера я взял расчёт положения для времени <code>2020-04-11 05:36</code>. Таким же образом можно найти положение для любой даты. Единственное, что нужно учитывать - это устаревание TLE. Посчитать траекторию спутника на длительном отрезке времени достаточно сложно и ресурсоёмко. Именно поэтому авторы SGP4 выбрали простые расчёты и периодическую коррекцию на основе визуальных наблюдений.</p>
<p>Если рассчитать положение спутника с 2020-04-11 05:36 по 2020-04-11 05:46 и наложить полученные координаты на Яндекс карты, то получится вот такая симпатичная картинка:</p>
<p><img src="/img/georeferencing-gcp/3.png" alt=""></p>
<p>К слову, использование Яндекс карт оказалось очень удобным способом отладки.</p>
<h2 id="положение-камеры-относительно-спутника">Положение камеры относительно спутника</h2>
<p>Следующим шагом необходимо понять направление камеры. Для этого необходимо вычислить <a href="https://ru.wikipedia.org/wiki/%D0%9A%D0%B2%D0%B0%D1%82%D0%B5%D1%80%D0%BD%D0%B8%D0%BE%D0%BD%D1%8B_%D0%B8_%D0%B2%D1%80%D0%B0%D1%89%D0%B5%D0%BD%D0%B8%D0%B5_%D0%BF%D1%80%D0%BE%D1%81%D1%82%D1%80%D0%B0%D0%BD%D1%81%D1%82%D0%B2%D0%B0">кватернионы</a> самого спутника. Согласно документации, камера спутника смотрит точно в надир. То есть, спутник равномерно вращается вокруг своей оси и при этом угол напрямую зависит от положения относительно Земли. Всё это можно смоделировать с помощью orekit:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">String line1 <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;1 40069U 14037A   20109.60817406 -.00000042  00000-0 -58409-8 0  9990&#34;</span><span style="color:#f92672">;</span>
String line2 <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;2 40069  98.5096 149.3859 0006903  94.0019 266.1946 14.20671606299713&#34;</span><span style="color:#f92672">;</span>
TLEPropagator tlePropagator <span style="color:#f92672">=</span> TLEPropagator<span style="color:#f92672">.</span><span style="color:#a6e22e">selectExtrapolator</span><span style="color:#f92672">(</span><span style="color:#66d9ef">new</span> TLE<span style="color:#f92672">(</span>line1<span style="color:#f92672">,</span> line2<span style="color:#f92672">));</span>

Frame eme2000 <span style="color:#f92672">=</span> FramesFactory<span style="color:#f92672">.</span><span style="color:#a6e22e">getEME2000</span><span style="color:#f92672">();</span>
Frame earthFrame <span style="color:#f92672">=</span> FramesFactory<span style="color:#f92672">.</span><span style="color:#a6e22e">getITRF</span><span style="color:#f92672">(</span>IERSConventions<span style="color:#f92672">.</span><span style="color:#a6e22e">IERS_2010</span><span style="color:#f92672">,</span> <span style="color:#66d9ef">true</span><span style="color:#f92672">);</span>
OneAxisEllipsoid earth <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> OneAxisEllipsoid<span style="color:#f92672">(</span>Constants<span style="color:#f92672">.</span><span style="color:#a6e22e">WGS84_EARTH_EQUATORIAL_RADIUS</span><span style="color:#f92672">,</span> Constants<span style="color:#f92672">.</span><span style="color:#a6e22e">WGS84_EARTH_FLATTENING</span><span style="color:#f92672">,</span> earthFrame<span style="color:#f92672">);</span>
BodyCenterPointing earthCenterAttitudeLaw <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> BodyCenterPointing<span style="color:#f92672">(</span>eme2000<span style="color:#f92672">,</span> earth<span style="color:#f92672">);</span>
AbsoluteDate date <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> AbsoluteDate<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;2020-04-11T05:36:00.899994&#34;</span><span style="color:#f92672">,</span> TimeScalesFactory<span style="color:#f92672">.</span><span style="color:#a6e22e">getUTC</span><span style="color:#f92672">());</span>
Attitude attitude  <span style="color:#f92672">=</span> earthCenterAttitudeLaw<span style="color:#f92672">.</span><span style="color:#a6e22e">getAttitude</span><span style="color:#f92672">(</span>tlePropagator<span style="color:#f92672">,</span> date<span style="color:#f92672">,</span> eme2000<span style="color:#f92672">);</span>
</code></pre></div><p>Основная идея заключается в том, чтобы определить угол между базисными векторами спутника и вектором, соединяющим центр спутника и центр Земли. Конечно, для более точного позиционирования нужно использовать гравитационный центр Земли. А для этого использовать гравитационные карты Земли. К счастью, в случае Метеор-М2 и камеры MСУ-МР, такой точности не требуется.</p>
<h2 id="параметры-камеры">Параметры камеры</h2>
<p>Самый сложный шаг заключается в моделировании камеры МСУ-МР. Дело в том, что в интернете почти нет её параметров. Я почти разуверился в том, что это вообще возможно найти, однако мне удалось раскопать научную статью &ldquo;<a href="http://jurnal.vniiem.ru/text/154/32-42.pdf">МЕТОДИКИ ОПРЕДЕЛЕНИЯ ВЕЛИЧИНЫ ПРОЕКЦИИ ПИКСЕЛЯ СЪЁМОЧНЫХ СИСТЕМ МСУ-МР И КМСС НА МЕСТНОСТЬ</a>&rdquo;. В ней вскользь упоминаются параметры:</p>
<ul>
<li>количество точек N=1568</li>
<li>общий угол обзора Θ = 110,5°</li>
<li>фокусное расстояние. Зависит от типа канала:
<ul>
<li>f=150мм,w=0,2 мм для каналов 1,2</li>
<li>f=150мм,w=0,18мм для канала 3</li>
<li>f=40мм, w=0,05мм для каналов 4,6</li>
</ul>
</li>
</ul>
<p>Схематично геометрия съёмки выглядит следующим образом:</p>
<p><img src="/img/georeferencing-gcp/4.jpg" alt=""></p>
<p>Для модели расчёта опорных точек мне нужно рассчитать вектора исходящие из камеры и направленные на поверхность. Если принять угол Θn = Θ * n / N, то вектора можно рассчитать следующим образом:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">double</span> width <span style="color:#f92672">=</span> 1568<span style="color:#f92672">;</span>
<span style="color:#66d9ef">double</span> delta <span style="color:#f92672">=</span> FastMath<span style="color:#f92672">.</span><span style="color:#a6e22e">toRadians</span><span style="color:#f92672">(</span>110<span style="color:#f92672">.</span><span style="color:#a6e22e">5</span><span style="color:#f92672">)</span> <span style="color:#f92672">/</span> width<span style="color:#f92672">;</span>
<span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> 0<span style="color:#f92672">;</span> i <span style="color:#f92672">&lt;</span> width<span style="color:#f92672">;</span> i<span style="color:#f92672">++)</span> <span style="color:#f92672">{</span>
    SinCos sc <span style="color:#f92672">=</span> FastMath<span style="color:#f92672">.</span><span style="color:#a6e22e">sinCos</span><span style="color:#f92672">((</span>i <span style="color:#f92672">-</span> width <span style="color:#f92672">/</span> 2<span style="color:#f92672">)</span> <span style="color:#f92672">*</span> delta<span style="color:#f92672">);</span>
    Vector3D curVector <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> Vector3D<span style="color:#f92672">(</span>0<span style="color:#f92672">.</span><span style="color:#a6e22e">0</span><span style="color:#f92672">,</span> sc<span style="color:#f92672">.</span><span style="color:#a6e22e">sin</span><span style="color:#f92672">(),</span> sc<span style="color:#f92672">.</span><span style="color:#a6e22e">cos</span><span style="color:#f92672">());</span>
<span style="color:#f92672">}</span>
</code></pre></div><h2 id="построение-опорных-точек">Построение опорных точек</h2>
<p>На основе полученных параметров можно рассчитать опорные точки. Для этого надо вспомнить школьный курс неевклидовой геометрии и рассчитать проекции на сферу. Или можно взять готовую библиотеку <a href="https://www.orekit.org/rugged/">Rugged</a>. В ней описана достаточно сложная модель получения опорных точек. Она учитывает скорость света и относительную скорость спутника относительно Земли, модель рефракции атмосферы. Также можно, например, загрузить карту высот и получить более точные координаты.</p>
<p><img src="/img/georeferencing-gcp/7.png" alt=""></p>
<p>Для МСУ-МР такая точность не нужна, но это может быть полезно для других типов камер и спутников.</p>
<p>Центральным классом модели является <code>Rugged</code>. Его можно создать следующим способом:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">LOSBuilder losBuilder <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> LOSBuilder<span style="color:#f92672">(</span>rawDirs<span style="color:#f92672">);</span>
TimeDependentLOS lineOfSight <span style="color:#f92672">=</span> losBuilder<span style="color:#f92672">.</span><span style="color:#a6e22e">build</span><span style="color:#f92672">();</span>
		
MeteorLineDatation lineDatation <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> MeteorLineDatation<span style="color:#f92672">(</span>image<span style="color:#f92672">,</span> startOfTheDay<span style="color:#f92672">.</span><span style="color:#a6e22e">getTime</span><span style="color:#f92672">());</span>
LineSensor lineSensor <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> LineSensor<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;MSU_MR&#34;</span><span style="color:#f92672">,</span> lineDatation<span style="color:#f92672">,</span> Vector3D<span style="color:#f92672">.</span><span style="color:#a6e22e">ZERO</span><span style="color:#f92672">,</span> lineOfSight<span style="color:#f92672">);</span>

Rugged rugged <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> RuggedBuilder<span style="color:#f92672">().</span>
	<span style="color:#75715e">// do not use Digital Elevation Model
</span><span style="color:#75715e"></span>	setAlgorithm<span style="color:#f92672">(</span>AlgorithmId<span style="color:#f92672">.</span><span style="color:#a6e22e">IGNORE_DEM_USE_ELLIPSOID</span><span style="color:#f92672">).</span> 
	setEllipsoid<span style="color:#f92672">(</span>EllipsoidId<span style="color:#f92672">.</span><span style="color:#a6e22e">WGS84</span><span style="color:#f92672">,</span> BodyRotatingFrameId<span style="color:#f92672">.</span><span style="color:#a6e22e">ITRF</span><span style="color:#f92672">).</span>
	<span style="color:#75715e">// calculate 10 minute pass
</span><span style="color:#75715e"></span>	setTimeSpan<span style="color:#f92672">(</span>absDate<span style="color:#f92672">,</span> absDate<span style="color:#f92672">.</span><span style="color:#a6e22e">shiftedBy</span><span style="color:#f92672">(</span>60 <span style="color:#f92672">*</span> 10<span style="color:#f92672">),</span> 0<span style="color:#f92672">.</span><span style="color:#a6e22e">01</span><span style="color:#f92672">,</span> 8 <span style="color:#f92672">/</span> lineSensor<span style="color:#f92672">.</span><span style="color:#a6e22e">getRate</span><span style="color:#f92672">(</span>0<span style="color:#f92672">)).</span> 
	setTrajectory<span style="color:#f92672">(</span>InertialFrameId<span style="color:#f92672">.</span><span style="color:#a6e22e">EME2000</span><span style="color:#f92672">,</span>
	              satellitePVList<span style="color:#f92672">,</span> 4<span style="color:#f92672">,</span> CartesianDerivativesFilter<span style="color:#f92672">.</span><span style="color:#a6e22e">USE_PV</span><span style="color:#f92672">,</span>
	              satelliteQList<span style="color:#f92672">,</span>  4<span style="color:#f92672">,</span>  AngularDerivativesFilter<span style="color:#f92672">.</span><span style="color:#a6e22e">USE_R</span><span style="color:#f92672">).</span>
	addLineSensor<span style="color:#f92672">(</span>lineSensor<span style="color:#f92672">).</span>
	build<span style="color:#f92672">();</span>
</code></pre></div><p>Алгоритм следующий:</p>
<ul>
<li>создаётся <code>lineOfSight</code> на основе параметров камеры</li>
<li>создаётся модель сенсора на основе <code>lineOfSight</code> и, так называемого,  <code>LineDatation</code>. Это объект, который позволяет на основе индекса строки получить дату и наоборот</li>
<li>для расчёта координат точек:
<ul>
<li>используется проекция WGS84. Об этом будет чуть подробнее в следующей статье</li>
<li>траектория спутника <code>satellitePVList</code></li>
<li>кватернионы спутника <code>satelliteQList</code></li>
</ul>
</li>
</ul>
<p>Как только объект создан, можно вычислить опорные точки:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">int</span> lineIndex <span style="color:#f92672">=</span> 0<span style="color:#f92672">;</span>
<span style="color:#66d9ef">int</span> pixelIndex <span style="color:#f92672">=</span> 0<span style="color:#f92672">;</span>
<span style="color:#75715e">// position of sensor within spacecraft frame
</span><span style="color:#75715e"></span>Vector3D position <span style="color:#f92672">=</span> lineSensor<span style="color:#f92672">.</span><span style="color:#a6e22e">getPosition</span><span style="color:#f92672">();</span>
AbsoluteDate date <span style="color:#f92672">=</span> lineSensor<span style="color:#f92672">.</span><span style="color:#a6e22e">getDate</span><span style="color:#f92672">(</span>lineIndex<span style="color:#f92672">);</span>
<span style="color:#75715e">// get line-of-sight
</span><span style="color:#75715e"></span>Vector3D los <span style="color:#f92672">=</span> lineSensor<span style="color:#f92672">.</span><span style="color:#a6e22e">getLOS</span><span style="color:#f92672">(</span>date<span style="color:#f92672">,</span> pixelIndex<span style="color:#f92672">);</span>
<span style="color:#75715e">// calculate GCP
</span><span style="color:#75715e"></span>GeodeticPoint gcp <span style="color:#f92672">=</span> rugged<span style="color:#f92672">.</span><span style="color:#a6e22e">directLocation</span><span style="color:#f92672">(</span>date<span style="color:#f92672">,</span> position<span style="color:#f92672">,</span> los<span style="color:#f92672">);</span>
</code></pre></div><h2 id="результат">Результат</h2>
<p>Для того чтобы проверить корректность модели, можно рассчитать опорные точки для каждого пиксела и нанести на карту. Например, неправильно рассчитанные квартернионы дают следующую картинку:</p>
<p><img src="/img/georeferencing-gcp/5.png" alt=""></p>
<p>Судя по изображению, камера спутника сначала смотрит точно в надир, а потом начинает отклоняться вверх и влево.</p>
<p>Если все параметры заданы верно, то опорные точки должны выглядеть так:</p>
<p><img src="/img/georeferencing-gcp/6.png" alt=""></p>
<p>Здесь видно, что:</p>
<ol>
<li>Спутник летит под небольшим углом с севера на юг</li>
<li>Расстояния между линиями увеличиваются с юга на север из-за проекции меркатора</li>
<li>Расстояния между пикселами увеличиваются из центра к краям из-за широкоугольной камеры спутника</li>
</ol>
<p>После того как получены опорные точки и они выглядят правдоподобно, можно переходить к следующему шагу: создание GeoTiff файла.</p>
<hr/>
<p>Геокодирование спутниковых снимков:</p>
<ol>
<li><a href="https://dernasherbrezon.com/posts/georeferencing-satellite-images/">Введение</a></li>
<li>Опорные точки</li>
<li><a href="https://dernasherbrezon.com/posts/georeferencing-geotiff/">GeoTIFF</a></li>
<li><a href="https://dernasherbrezon.com/posts/georeferencing-tiles/">Тайлы</a></li>
</ol>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Геокодирование спутниковых снимков: Введение</title>
      <link>https://dernasherbrezon.com/posts/georeferencing-satellite-images/</link>
      <pubDate>Sat, 18 Apr 2020 09:33:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/georeferencing-satellite-images/</guid>
      <description>Начало Пару лет назад я научился получать изображение со спутника Метеор-М2. Тогда я подробно прошёлся по всей модели OSI, начиная с физического уровня rtl-sdr и заканчивая транспортным LRPT. Все наработки я интегрировал в r2cloud, и с тех пор у меня в автоматическом режиме сохраняются все изображения.
Однако, меня не покидало ощущение некоторой незавершённости задачи. Изображения-то я получал, но что делать с ними дальше совершенно не знал. Вернее, конечно же, знал: как и любой другой метеорологический снимок, он нужен для того, чтобы предсказывать погоду.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Геокодирование спутниковых снимков: Введение</h1></header>
      		<div class='container entry-content'>
  <h2 id="начало">Начало</h2>
<p>Пару лет назад я научился <a href="https://dernasherbrezon.com/posts/decoding-meteor-m/">получать изображение</a> со спутника Метеор-М2. Тогда я подробно прошёлся по всей модели OSI, начиная с физического уровня rtl-sdr и заканчивая транспортным LRPT. Все наработки я интегрировал в <a href="https://github.com/dernasherbrezon/r2cloud">r2cloud</a>, и с тех пор у меня в автоматическом режиме сохраняются все изображения.</p>
<p>Однако, меня не покидало ощущение некоторой незавершённости задачи. Изображения-то я получал, но что делать с ними дальше совершенно не знал. Вернее, конечно же, знал: как и любой другой метеорологический снимок, он нужен для того, чтобы предсказывать погоду.</p>
<p><img src="/img/georeferencing-satellite-images/1.png" alt=""></p>
<p>Как видно на изображении выше, у всех снимков с Метеор-М края сильно деформированы. Регион, который они покрывают тоже сложно угадать. С такими изображениями не то, что погоду предсказать, с ними понять погоду совершенно невозможно.</p>
<p>Бегло пробежавшись по результатам выдачи google, я нашёл несколько программ, которые позволяют обрабатывать такие снимки.</p>
<h2 id="lrpt-places">Lrpt places</h2>
<p>Программа распространяется через форум <a href="http://www.radioscanner.ru/forum/topic47659-146.html">radioscanner</a> и позволяет добавлять метки городов на изображение.</p>
<p><img src="/img/georeferencing-satellite-images/2.png" alt=""></p>
<p>Это хорошая программа, которая позволяет быстро понять погоду в своём городе и в нескольких соседних. Однако, она имеет несколько серьёзных недостатков:</p>
<ul>
<li>изображение навсегда портится, так как метки и текст рисуются прямо на нём.</li>
<li>названия городов только на одном языке. Я не уверен, есть ли локализация на другие языки.</li>
<li>список городов фиксирован. При этом отображаются только крупные города. Если Вы живёте в небольшой деревушке, то её нельзя будет найти.</li>
<li>снимок по-прежнему деформирован по краям и его сложно анализировать.</li>
<li>программа работает только под Windows и запускается вручную.</li>
</ul>
<h2 id="smoothmeteor">SmoothMeteor</h2>
<p>Программа <a href="https://leshamilton.co.uk/meteor3m.htm0">SmoothMeteor</a> позволяет растягивать изображения, тем самым устраняя деформации по краям.</p>
<p><img src="/img/georeferencing-satellite-images/3.png" alt=""></p>
<p>Как и предыдущая программа, она имеет ряд недостатков:</p>
<ul>
<li>изображение повёрнуто по ходу движения спутника.</li>
<li>нет городов и границ стран. Нельзя понять какая погода в моём городе.</li>
<li>программа работает только под Windows и запускается вручную.</li>
</ul>
<h2 id="lrptimageprocessor">LrptImageProcessor</h2>
<p><a href="https://www.satsignal.eu/software/LRPT-processor.html">LrptImageProcessor</a> позволяет исправлять искажения, накладывать города и границы стран.</p>
<p><img src="/img/georeferencing-satellite-images/4.png" alt=""></p>
<p>Из недостатков:</p>
<ul>
<li>неточности в наложении границ.</li>
<li>работает только под Windows и запускается вручную.</li>
</ul>
<h2 id="требования">Требования</h2>
<p>Все эти программы работают хорошо, но я захотел сделать лучше и определил для себя следующие требования:</p>
<ol>
<li>Автоматическая обработка и возможность запускать из-под Linux. Все мои изображения принимаются в автоматическом режиме и мне хочется их так же обрабатывать в автоматическом режиме.</li>
<li>Результат обработки должен быть в стандартном формате. Я точно не первый человек на планете, который обрабатывает изображения со спутников. Именно поэтому, мне хочется выдавать результат, который будет удобно использовать для дальнейшей обработки.</li>
<li>Правильная работа со слоями. Все программы выше просто комбинируют каналы изображения в RGB картинку и делают JPEG. Однако, на Метеор-М2 есть 6 каналов, которые могут включаться и выключаться. И они не всегда соответствуют R, G и B. В тот момент, когда каналы группируются в RGB теряется информация о том, какой именно канал был использован где.</li>
<li>Полученные изображения можно наложить на Яндекс карту или open street map. Это позволит точно понять, где какой город, речка и страна.</li>
</ol>
<h2 id="анализ">Анализ</h2>
<p>Итак, прежде всего необходимо понять в каком виде существуют метео данные. <a href="https://earthdata.nasa.gov/collaborate/open-data-services-and-software/data-information-policy/data-levels">Nasa Earth Data</a> даёт классификацию данных по 4 уровням:</p>
<ul>
<li>уровень 0. Данные со спутника в необработанном виде. Тип данных зависит от протокола передачи. В случае Метеор-М2 - это VCDU.</li>
<li>уровень 1А. Реконструированные данные с временными метками и вспомогательной информацией. Посчитанной, но не применённой к изображению.</li>
<li>уровень 1B. Данные уровня 1А, но вспомогательная информация откалибрована на основе параметров сенсора.</li>
<li>уровень 2. Геокодированные данные.</li>
<li>уровень 3. Спроецированные и геокодированные данные с учётом всех исправлений и коррекций.</li>
<li>уровень 4. Обработанные данные с учётом разных моделей. Например, <a href="https://en.wikipedia.org/wiki/Normalized_difference_vegetation_index">NDVI</a>.</li>
</ul>
<p>Исходя из такого описания, я хочу формировать данные уровня 1B или уровня 2. Уровни 3 и 4 требуют глубоких знаний приборов и различных метеорологических моделей. Я пока не готов погружаться на такую глубину.</p>
<p>Как легко заметить, эти уровни чем-то похожи на уровни модели OSI. Где каждый уровень предоставляет интерфейс или данные для последующего. Это значит, что подготовив данные уровня 2, я могу предоставить их в стандартном виде для последующей обработки. В теории, любой метеоролог может их взять и начать использовать.</p>
<h2 id="шаги">Шаги</h2>
<p>Итак, чтобы получить геокодированные данные, мне нужно сопоставить каждому пикселю координаты широты и долготы. Несмотря на то, что это звучит достаточно просто, этому процессу посвящено отдельное направление науки - <a href="https://ru.wikipedia.org/wiki/%D0%94%D0%B8%D1%81%D1%82%D0%B0%D0%BD%D1%86%D0%B8%D0%BE%D0%BD%D0%BD%D0%BE%D0%B5_%D0%B7%D0%BE%D0%BD%D0%B4%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5_%D0%97%D0%B5%D0%BC%D0%BB%D0%B8">Дистанционное зондирование Земли</a>. На эту тему написано множество увесистых книжек, поэтому я не буду здесь выводить формулы и аксиомы, а лишь опишу основные шаги.</p>
<p>Задача геокодирования изображений для каждого спутника может выглядеть чуть-чуть по-другому. Я же постараюсь описать шаги для Метеор-М2. В общем случае алгоритм выглядит следующим образом:</p>
<p><img src="/img/georeferencing-satellite-images/5.png" alt=""></p>
<p>На первом этапе необходимо получить:</p>
<ul>
<li>положение спутника в пространстве</li>
<li>положение камеры относительно спутника</li>
<li>непосредственно изображение с временными метками</li>
<li>параметры камеры. Такие, как фокусное расстояние, пространственное разрешение и пр.</li>
</ul>
<p>На втором этапе создаётся список опорных точек. Каждая точка - это отображение пиксела в соответствующую широту и долготу.</p>
<p>На третьем этапе формируется файл в формате GeoTiff. Это специальный формат, который позволяет хранить изображение и привязанные к нему контрольные точки.</p>
<p>На четвёртом этапе можно загрузить файл в любую ГИС и проверить результат. Либо нарезать GeoTiff на тайлы и наложить на карту.</p>
<p>Я постараюсь описать каждый из этих шагов в последующих статьях по-подробнее. А в самом конце будет результат работы.</p>
<hr/>
<p>Геокодирование спутниковых снимков:</p>
<ol>
<li>Введение</li>
<li><a href="https://dernasherbrezon.com/posts/georeferencing-gcp/">Опорные точки</a></li>
<li><a href="https://dernasherbrezon.com/posts/georeferencing-geotiff/">GeoTIFF</a></li>
<li><a href="https://dernasherbrezon.com/posts/georeferencing-tiles/">Тайлы</a></li>
</ol>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Работа с Orekit</title>
      <link>https://dernasherbrezon.com/posts/orekit/</link>
      <pubDate>Sat, 28 Mar 2020 10:05:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/orekit/</guid>
      <description>Совсем недавно я обнаружил программу LicenseFinder. Она позволяет сканировать проект и найти все лицензии, которые используются в зависимостях. Это очень удобно, так как не все лицензии совместимы между собой. Я решил проверить свои open source проекты и обнаружил нестыковку лицензий для r2cloud. У меня использовалась библиотека predict4java с лицензией GPL-v2, а у моего проекта лицензия Apache 2.0. Такая зависимость фактически означает, что мой проект тоже должен распространяться под лицензией GPL-v2. И этого мне совсем не хотелось.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Работа с Orekit</h1></header>
      		<div class='container entry-content'>
  <p>Совсем недавно я обнаружил программу <a href="https://github.com/pivotal/LicenseFinder">LicenseFinder</a>. Она позволяет сканировать проект и найти все лицензии, которые используются в зависимостях. Это очень удобно, так как не все лицензии совместимы между собой. Я решил проверить свои open source проекты и обнаружил нестыковку лицензий для <a href="https://github.com/dernasherbrezon/r2cloud">r2cloud</a>. У меня использовалась библиотека <a href="https://github.com/g4dpz/predict4java">predict4java</a> с лицензией GPL-v2, а у моего проекта лицензия Apache 2.0. Такая зависимость фактически означает, что мой проект тоже должен распространяться под лицензией GPL-v2. И этого мне совсем не хотелось.</p>
<p>Ещё один недостаток predict4java - последний раз значительные изменения были в 2015 году. Да и сама библиотека является портом библиотеки <a href="http://www.qsl.net/kd2bd/predict.html">Predict</a>, которая в свою очередь является портом SGP4 модели, написанной на фортране.</p>
<p>Я начал искать альтернативы этой библиотеке. А надо сказать, что библиотека очень узкоспециализированная. Она рассчитывает положение спутника относительно Земли на основе модели SGP4. Заменить такую библиотеку это не то же самое, что поменять логирование.</p>
<p>Тем не менее я нашёл достаточно интересную альтернативу - <a href="https://www.orekit.org">OreKit</a>. По заверениям разработчиков, эта библиотека используется в реальных космических миссиях для расчёта орбит. Ещё одним плюсом является то, что она написана на java. Идеально подходит для моего проекта.</p>
<h2 id="настройка">Настройка</h2>
<p>Прежде, чем работать с библиотекой, необходимо её настроить. Здесь всё говорит о том, что это серьёзная программа. Для конфигурации необходимо скачать <a href="https://gitlab.orekit.org/orekit/orekit-data/-/archive/master/orekit-data-master.zip">orekit-data-master.zip</a>. Этот файл содержит множество входных данных для различных математических моделей внутри Orekit. Например, модель Земли и leap second за всё время наблюдений.</p>
<p>После того как файл скачан и распакован в директорию, можно начать работать с библиотекой:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">File orekitData <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> File<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;./path/with/orekit-data-master/&#34;</span><span style="color:#f92672">);</span>
DataProvidersManager manager <span style="color:#f92672">=</span> DataProvidersManager<span style="color:#f92672">.</span><span style="color:#a6e22e">getInstance</span><span style="color:#f92672">();</span>
manager<span style="color:#f92672">.</span><span style="color:#a6e22e">addProvider</span><span style="color:#f92672">(</span><span style="color:#66d9ef">new</span> DirectoryCrawler<span style="color:#f92672">(</span>orekitData<span style="color:#f92672">))</span>
</code></pre></div><h2 id="расчёт-пролёта-спутника">Расчёт пролёта спутника</h2>
<p>В моём проекте мне необходимо рассчитать время пролёта над станцией. Как только спутник показывается на горизонте, мне необходимо настроиться на его частоту и записать сигнал. Как только спутник уйдёт за горизонт, мне нужно остановить запись и начать её обрабатывать.</p>
<p><img src="/img/orekit/1.png" alt=""></p>
<p>При этом есть два параметра:</p>
<ul>
<li>гарантированная высота над горизонтом. Спутник может пролетать достаточно далеко от наблюдателя и подниматься лишь на несколько градусов. Иногда этого недостаточно для приёма. Из-за этого необходимо найти все пролёты, при которых спутник поднимается на достаточную высоту.</li>
<li>минимальная высота над горизонтом. Как только пролёт найден, необходимо найти начало и конец. Для этого есть минимальная высота.</li>
</ul>
<p>Для начала необходимо описать параметры станции:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">GeodeticPoint point <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> GeodeticPoint<span style="color:#f92672">(</span>FastMath<span style="color:#f92672">.</span><span style="color:#a6e22e">toRadians</span><span style="color:#f92672">(</span>latitude<span style="color:#f92672">),</span> FastMath<span style="color:#f92672">.</span><span style="color:#a6e22e">toRadians</span><span style="color:#f92672">(</span>longitude<span style="color:#f92672">),</span> 0<span style="color:#f92672">.</span><span style="color:#a6e22e">0</span><span style="color:#f92672">)</span>
Frame earthFrame <span style="color:#f92672">=</span> FramesFactory<span style="color:#f92672">.</span><span style="color:#a6e22e">getITRF</span><span style="color:#f92672">(</span>IERSConventions<span style="color:#f92672">.</span><span style="color:#a6e22e">IERS_2010</span><span style="color:#f92672">,</span> <span style="color:#66d9ef">true</span><span style="color:#f92672">);</span>
BodyShape earth <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> OneAxisEllipsoid<span style="color:#f92672">(</span>Constants<span style="color:#f92672">.</span><span style="color:#a6e22e">WGS84_EARTH_EQUATORIAL_RADIUS</span><span style="color:#f92672">,</span> Constants<span style="color:#f92672">.</span><span style="color:#a6e22e">WGS84_EARTH_FLATTENING</span><span style="color:#f92672">,</span> earthFrame<span style="color:#f92672">);</span>
TopocentricFrame baseStationFrame <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> TopocentricFrame<span style="color:#f92672">(</span>earth<span style="color:#f92672">,</span> point<span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;station&#34;</span><span style="color:#f92672">);</span>
</code></pre></div><p>После этого создать <code>Propagator</code> для задания орбиты спутника:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">TLEPropagator tlePropagator <span style="color:#f92672">=</span> TLEPropagator<span style="color:#f92672">.</span><span style="color:#a6e22e">selectExtrapolator</span><span style="color:#f92672">(</span><span style="color:#66d9ef">new</span> TLE<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;row 1&#34;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;row 2&#34;</span><span style="color:#f92672">));</span>
</code></pre></div><p>С помощью него, можно узнать положение спутника в заданное время. Он может работать в 3-х режимах:</p>
<ul>
<li>slave. Приложение само вызывает расчёт координат</li>
<li>master. Библиотека вызывает callback-функцию при расчёте</li>
<li>ephemeral. Приложение вызывает расчёт координат. При этом время может идти в случайном порядке.</li>
</ul>
<p>Более подробно о режимах можно узнать в <a href="https://www.orekit.org/site-orekit-tutorials-10.1/tutorials/propagation.html">официальной документации</a>. Для расчёта необходимо использовать slave режим и <code>ElevationExtremumDetector</code>. Это специальный фильтр, который будет отфильтровывать только те события, которые имеют максимум высоты.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">ElevationExtremumDetector maxDetector <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> ElevationExtremumDetector<span style="color:#f92672">(</span>60<span style="color:#f92672">,</span> 0<span style="color:#f92672">.</span><span style="color:#a6e22e">001</span><span style="color:#f92672">,</span> baseStationFrame<span style="color:#f92672">).</span><span style="color:#a6e22e">withMaxIter</span><span style="color:#f92672">(</span>48 <span style="color:#f92672">*</span> 60<span style="color:#f92672">).</span><span style="color:#a6e22e">withHandler</span><span style="color:#f92672">(</span>maxElevationHandler<span style="color:#f92672">);</span>
tlePropagator<span style="color:#f92672">.</span><span style="color:#a6e22e">clearEventsDetectors</span><span style="color:#f92672">();</span>
tlePropagator<span style="color:#f92672">.</span><span style="color:#a6e22e">addEventDetector</span><span style="color:#f92672">(</span><span style="color:#66d9ef">new</span> EventSlopeFilter<span style="color:#f92672">&lt;</span>EventDetector<span style="color:#f92672">&gt;(</span>maxDetector<span style="color:#f92672">,</span> FilterType<span style="color:#f92672">.</span><span style="color:#a6e22e">TRIGGER_ONLY_DECREASING_EVENTS</span><span style="color:#f92672">));</span>
tlePropagator<span style="color:#f92672">.</span><span style="color:#a6e22e">setSlaveMode</span><span style="color:#f92672">();</span>
tlePropagator<span style="color:#f92672">.</span><span style="color:#a6e22e">propagate</span><span style="color:#f92672">(</span>initialDate<span style="color:#f92672">,</span> <span style="color:#66d9ef">new</span> AbsoluteDate<span style="color:#f92672">(</span>initialDate<span style="color:#f92672">,</span> 3600<span style="color:#f92672">.</span> <span style="color:#f92672">*</span> 24 <span style="color:#f92672">*</span> 2<span style="color:#f92672">));</span>
</code></pre></div><p>Здесь я создаю такой детектор, который будет рассчитывать высоту относительно <code>baseStationFrame</code> и вызывать callback <code>maxElevationHandler</code>. Расчёт будет идти с какой-то текущей даты <code>initialDate</code> и на 2 дня вперёд.</p>
<p>Сам callback выглядит следующим образом:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#a6e22e">@Override</span>
<span style="color:#66d9ef">public</span> Action <span style="color:#a6e22e">eventOccurred</span><span style="color:#f92672">(</span>SpacecraftState s<span style="color:#f92672">,</span> ElevationExtremumDetector detector<span style="color:#f92672">,</span> <span style="color:#66d9ef">boolean</span> increasing<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
	<span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>FastMath<span style="color:#f92672">.</span><span style="color:#a6e22e">toDegrees</span><span style="color:#f92672">(</span>detector<span style="color:#f92672">.</span><span style="color:#a6e22e">getElevation</span><span style="color:#f92672">(</span>s<span style="color:#f92672">))</span> <span style="color:#f92672">&gt;</span> maxElevation<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
		date <span style="color:#f92672">=</span> s<span style="color:#f92672">.</span><span style="color:#a6e22e">getDate</span><span style="color:#f92672">();</span>
		<span style="color:#66d9ef">return</span> Action<span style="color:#f92672">.</span><span style="color:#a6e22e">STOP</span><span style="color:#f92672">;</span>
	<span style="color:#f92672">}</span>
	<span style="color:#66d9ef">return</span> Action<span style="color:#f92672">.</span><span style="color:#a6e22e">CONTINUE</span><span style="color:#f92672">;</span>
<span style="color:#f92672">}</span>
</code></pre></div><p>Если максимальная высота больше гарантированной, то запоминать время и останавливаться. В противном случае продолжать дальше искать.</p>
<p>После того как время с гарантированной высотой найдено, необходимо найти начало и конец пролёта. Для этого используется <code>ElevationDetector</code>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">ElevationDetector boundsDetector <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> ElevationDetector<span style="color:#f92672">(</span>60<span style="color:#f92672">,</span> 0<span style="color:#f92672">.</span><span style="color:#a6e22e">001</span><span style="color:#f92672">,</span> baseStationFrame<span style="color:#f92672">).</span><span style="color:#a6e22e">withConstantElevation</span><span style="color:#f92672">(</span>FastMath<span style="color:#f92672">.</span><span style="color:#a6e22e">toRadians</span><span style="color:#f92672">(</span>minElevation<span style="color:#f92672">)).</span><span style="color:#a6e22e">withHandler</span><span style="color:#f92672">(</span>minElevationHandler<span style="color:#f92672">);</span>
tlePropagator<span style="color:#f92672">.</span><span style="color:#a6e22e">clearEventsDetectors</span><span style="color:#f92672">();</span>
tlePropagator<span style="color:#f92672">.</span><span style="color:#a6e22e">addEventDetector</span><span style="color:#f92672">(</span>boundsDetector<span style="color:#f92672">);</span>
AbsoluteDate startDate <span style="color:#f92672">=</span> maxElevationHandler<span style="color:#f92672">.</span><span style="color:#a6e22e">getDate</span><span style="color:#f92672">().</span><span style="color:#a6e22e">shiftedBy</span><span style="color:#f92672">(-</span>20 <span style="color:#f92672">*</span> 60<span style="color:#f92672">.</span><span style="color:#a6e22e">0</span><span style="color:#f92672">);</span>
tlePropagator<span style="color:#f92672">.</span><span style="color:#a6e22e">propagate</span><span style="color:#f92672">(</span>startDate<span style="color:#f92672">,</span> startDate<span style="color:#f92672">.</span><span style="color:#a6e22e">shiftedBy</span><span style="color:#f92672">(</span>40 <span style="color:#f92672">*</span> 60<span style="color:#f92672">.));</span>
</code></pre></div><p>Этот детектор срабатывает, когда спутник поднимается выше минимальной высоты и опускается ниже минимальной.</p>
<p>Обработчик должен выглядеть следующим образом:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#a6e22e">@Override</span>
<span style="color:#66d9ef">public</span> Action <span style="color:#a6e22e">eventOccurred</span><span style="color:#f92672">(</span>SpacecraftState s<span style="color:#f92672">,</span> ElevationDetector detector<span style="color:#f92672">,</span> <span style="color:#66d9ef">boolean</span> increasing<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
	<span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>increasing<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
		start <span style="color:#f92672">=</span> s<span style="color:#f92672">.</span><span style="color:#a6e22e">getDate</span><span style="color:#f92672">();</span>
		<span style="color:#66d9ef">return</span> Action<span style="color:#f92672">.</span><span style="color:#a6e22e">CONTINUE</span><span style="color:#f92672">;</span>
	<span style="color:#f92672">}</span>
	end <span style="color:#f92672">=</span> s<span style="color:#f92672">.</span><span style="color:#a6e22e">getDate</span><span style="color:#f92672">();</span>
	<span style="color:#66d9ef">return</span> Action<span style="color:#f92672">.</span><span style="color:#a6e22e">STOP</span><span style="color:#f92672">;</span>
<span style="color:#f92672">}</span>
</code></pre></div><p>Он должен запоминать время, если событие &ldquo;восходящее&rdquo;, то есть высота спутника увеличивается. И запоминать время, если событие &ldquo;нисходящее&rdquo;.</p>
<h2 id="расчёт-допплеровского-смещения-сигнала">Расчёт допплеровского смещения сигнала</h2>
<p>Ещё одна вещь, которая необходима в r2cloud - это расчёт смещения допплера для сигнала со спутника. Для этого необходимо рассчитать скорость сближения станции и спутника.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">AbsoluteDate date <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> AbsoluteDate<span style="color:#f92672">(</span><span style="color:#66d9ef">new</span> Date<span style="color:#f92672">(</span>utcTimeMillis<span style="color:#f92672">),</span> TimeScalesFactory<span style="color:#f92672">.</span><span style="color:#a6e22e">getUTC</span><span style="color:#f92672">());</span>
PVCoordinates currentState <span style="color:#f92672">=</span> tlePropagator<span style="color:#f92672">.</span><span style="color:#a6e22e">getPVCoordinates</span><span style="color:#f92672">(</span>date<span style="color:#f92672">);</span>
<span style="color:#66d9ef">final</span> <span style="color:#66d9ef">double</span> rangeRate <span style="color:#f92672">=</span> currentLocation<span style="color:#f92672">.</span><span style="color:#a6e22e">getRangeRate</span><span style="color:#f92672">(</span>currentState<span style="color:#f92672">,</span> tlePropagator<span style="color:#f92672">.</span><span style="color:#a6e22e">getFrame</span><span style="color:#f92672">(),</span> date<span style="color:#f92672">);</span>
<span style="color:#66d9ef">return</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">long</span><span style="color:#f92672">)</span> <span style="color:#f92672">((</span><span style="color:#66d9ef">double</span><span style="color:#f92672">)</span> freq <span style="color:#f92672">*</span> <span style="color:#f92672">(</span>SPEED_OF_LIGHT <span style="color:#f92672">-</span> rangeRate<span style="color:#f92672">)</span> <span style="color:#f92672">/</span> SPEED_OF_LIGHT<span style="color:#f92672">);</span>
</code></pre></div><p>Здесь, для переданного времени <code>utcTimeMillis</code> я высчитываю текущую позицию спутника. Далее нахожу скорость сближения двух тел. После того, как найдена скорость сближения, можно рассчитать частоту.</p>
<h2 id="вывод">Вывод</h2>
<p>OreKit - это очень мощная библиотека, с помощью которой можно смодулировать множество разных ситуаций. Правда, порог вхождения в неё достаточно высокий.</p>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Создание и публикация приложения в Launchpad</title>
      <link>https://dernasherbrezon.com/posts/publishing-to-launchpad/</link>
      <pubDate>Tue, 24 Mar 2020 18:40:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/publishing-to-launchpad/</guid>
      <description>Последнюю неделю я активно стал разрабатывать небольшое приложение epever-tracer-influxdb. Оно позволяет читать параметры солнечного контроллера и отправлять данные в InfluxDB. Само приложение написано на C и предполагается, что оно будет работать на Raspberry PI. После того как я написал это приложение передо мной в очередной раз встала задача дистрибуции. Самый простой способ - попытаться добавить его в основной репозиторий Debian. Но тут есть несколько проблем:
 непонятно в какой момент пакет окажется в основном репозитории.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Создание и публикация приложения в Launchpad</h1></header>
      		<div class='container entry-content'>
  <p>Последнюю неделю я активно стал разрабатывать небольшое приложение <a href="https://github.com/dernasherbrezon/epever-tracer-influxdb">epever-tracer-influxdb</a>. Оно позволяет читать параметры солнечного контроллера и отправлять данные в InfluxDB. Само приложение написано на C и предполагается, что оно будет работать на Raspberry PI. После того как я написал это приложение передо мной в очередной раз встала задача дистрибуции. Самый простой способ - попытаться добавить его в основной репозиторий Debian. Но тут есть несколько проблем:</p>
<ul>
<li>непонятно в какой момент пакет окажется в основном репозитории. Если мне, скажем, необходимо завтра начать использовать его, то мне точно не хочется ждать пока open source бюрократия пережуёт моё приложение</li>
<li>что-то мне подсказывает, что нужно сделать очень много неявных приседаний прежде, чем моё приложение будет &ldquo;каноничным&rdquo; debian приложением. Это, конечно, полезно, но я не готов тратить сразу много времени на это.</li>
</ul>
<p>Все эти проблемы решает <a href="https://launchpad.net">Launchpad</a>. Специальный сервис для хостинга своих персональных apt репозиториев. Это не первое моё приложение, которое я решил разместить там. До этого я размещал там <a href="https://dernasherbrezon.com/posts/setting-up-c/">apt-transport-swift</a>.</p>
<h2 id="подготовка">Подготовка</h2>
<p>Прежде, чем начать подготавливать приложение, необходимо знать одну важную деталь. На ней в документации нет сильного акцента и для новичка это может стать откровением. В debian/ubuntu мире есть очень чёткое различие между &ldquo;оригинальным&rdquo; приложением и &ldquo;дебинизированным&rdquo;. Оригинальное приложение - это фактически исходники приложения и то, что предоставляет разработчик приложения. &ldquo;дебинизированное&rdquo; приложение - это исходники (или .tar.gz) и метаинформация о самом приложении, необходимые скрипты для сборки и разворачивания его в операционной системе. Эту особенность необходимо постоянно держать в голове. Это особенно важно, если ты являешься одновременно разработчиком приложения и мейнтейнером.</p>
<h2 id="общая-схема-работы">Общая схема работы</h2>
<p>PPA - это personal package archives. По сути репозиторий, где можно хранить свои собственные сборки разных пакетов или собственные приложения. Работает это следующим образом:</p>
<p><img src="/img/publishing-to-launchpad/1.png" alt=""></p>
<ol>
<li>Разработчик подготавливает пакет и исходные коды.</li>
<li>Эти исходные коды заливаются в launchpad</li>
<li>Launchpad начинает их собирать для разных архитектур и</li>
<li>Выкладывает в персональный apt репозиторий</li>
</ol>
<p>В самом Launchpad есть гигантская билд ферма, которая постоянно собирает новые пакеты под разные архитектуры. Очень круто и удобно. Понятное дело, что они поддерживают только open source проекты.</p>
<h2 id="погнали">Погнали</h2>
<p>Во-первых, необходимо <a href="https://login.launchpad.net/+login">создать аккаунт</a>.</p>
<p>Во-вторых, в своём профиле на launchpad необходимо создать новый PPA. Тут опять всё очевидно.</p>
<p>В-третьих, необходимо привязать к своему аккаунту PGP ключ. Тут всё не так очевидно, но есть <a href="https://help.launchpad.net/YourAccount/ImportingYourPGPKey">хороший мануал</a> о том, как это сделать. В последствии этот ключ будет использоваться для того, чтобы подписать пакет и залить его launchpad.</p>
<h2 id="подготовка-пакета">Подготовка пакета</h2>
<p>Для того чтобы собрать пакет, необходимо описать некоторую мета-информацию. Для этого необходимо создать папку debian в корне проекта. Я подробно не буду описывать каждый из необходимых файлов. Достаточно <a href="https://github.com/dernasherbrezon/epever-tracer-influxdb/tree/master/debian">посмотреть пример</a> того, как это сделано для epever-tracer-influxdb. Для разных приложений набор необходимых файлов может быть разный.</p>
<h2 id="локальная-сборка-пакета">Локальная сборка пакета</h2>
<p>Тут всё немножко сложнее. Поскольку я разрабатываю на маке, у меня нет всех необходимых инструментов, чтобы собирать .deb пакеты. В моём случае необходимо делать дополнительные шаги:</p>
<ul>
<li>создать виртуалку в облаке</li>
<li>скопировать свои pgp ключи на виртуалку</li>
</ul>
<p>После всего этого необходимо установить пакеты:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">sudo apt-get install devscripts build-essential lintian
</code></pre></div><p>Создать архив с оригинальными исходными кодами:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">tar czf epever-tracer-influxdb_1.0.0.orig.tar.gz epever-tracer-influxdb
</code></pre></div><p>Тут очень важно то, как называется этот архив. В нём обязательно должна быть версия и .orig.tar.gz. Скрипты сборки будут искать архив именно с таким именем.</p>
<p>После этого можно проверить, что пакет собирается:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">debuild -i -us -uc -b
</code></pre></div><p>Также эта команда запускает lintian - линтер для .deb пакетов. Он очень продвинутый и может находить достаточно странные ошибки:</p>
<pre><code>W: epever-tracer-influxdb: debian-changelog-has-wrong-day-of-week 2020-03-23 is a Monday
W: epever-tracer-influxdb: new-package-should-close-itp-bug
E: epever-tracer-influxdb: bad-permissions-for-etc-cron.d-script etc/cron.d/epeverTracerCron 0755 != 0644
</code></pre><p>По коду ошибки можно найти достаточно полное описание с вариантами исправления. Например, <a href="https://lintian.debian.org/tags/debian-changelog-has-wrong-day-of-week.html">debian-changelog-has-wrong-day-of-week</a> говорит о том, что в changelog файле у меня неправильный день недели. И это правда, потому что changelog был скопирован из другого проекта.</p>
<p>После того как сборка прошла успешно, можно собирать .changes файл. Для этого необходимо выполнить команду:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">debuild -S -sa
</code></pre></div><p>Эта команда создаст несколько файлов директорией выше и подпишет их pgp ключом.</p>
<h2 id="публикация">Публикация</h2>
<p>Теперь всё готово, чтобы публиковать файлы в launchpad. Для этого нужно перейти на директорию выше и вызывать команду:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">dput ppa:rodionovamp/epever-tracer-influxdb epever-tracer-influxdb_1.0.0-3_source.changes
</code></pre></div><p>Название PPA и файла .changes, конечно же, необходимо изменить на свои. Если всё прошло успешно, то launchpad пришлёт письмо:</p>
<pre><code>[~rodionovamp/ubuntu/epever-tracer-influxdb/disco] epever-tracer-influxdb 1.0.2-5 (Accepted)
</code></pre><p>Это значит, что исходники получены и готовы к сборке. Статус сборки можно посмотреть в PPA. После того как собраны все пакеты для всех архитектур, они могут быть доступны для установки:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">sudo add-apt-repository ppa:rodionovamp/epever-tracer-influxdb
sudo apt-get update
sudo apt-get install epever-tracer-influxdb
</code></pre></div><h2 id="что-может-пойти-не-так">Что может пойти не так</h2>
<p>Почти всё может пойти не так. Из-за того, что почти вся сборка основана на различных скриптах и негласных конвенциях, сломаться может любой из шагов выше. Я собрал очень много ошибок и потратил на их решение пару дней.</p>
<pre><code>dpkg-source: info: building epever-tracer-influxdb using existing ./epever-tracer-influxdb_1.0.0.orig.tar.gz
dpkg-source: error: cannot represent change to docs/screen1.png: binary file contents changed
</code></pre><p>Почти всегда необходимо пересоздавать .orig.tar.gz после получения новых исходников из гита.</p>
<pre><code>Rejected:
File epever-tracer-influxdb_1.0.0.orig.tar.gz already exists in epever-tracer-influxdb, but uploaded version has different contents. See more information about this error in https://help.launchpad.net/Packaging/UploadErrors.
</code></pre><p>Нельзя залить один и тот же архив с исходниками два раза. Даже если первый не собрался или в нём ошибка. При небольшом изменении исходников необходимо менять минорную версию и заново создавать архив.</p>
<pre><code>Files specified in DSC are broken or missing, skipping package unpack verification.
</code></pre><p>debuild почему-то при ошибке подписывания исходников не падает, а продолжает работу. Если такие исходники попытаться залить в launchpad, то возникают странные ошибки.</p>
<pre><code>* State: Failed to build
* Duration: 2 minutes
* Build Log: ....
</code></pre><p>Для старых дистрибутивов уже нельзя собрать проект.</p>
<pre><code>Rejected:
disco is obsolete and will not accept new uploads.

epever-tracer-influxdb (1.0.3-2) disco; urgency=medium
</code></pre><p>То, что собралось на Mac OS необязательно соберётся на Ubuntu. Необходимо локально собирать проект и прогонять все тесты.</p>
<h2 id="выводы">Выводы</h2>
<ul>
<li>Очень много негласных конвенций и скриптов для сборки deb пакетов. Возможно, это связано с большим наследием самой системы. Возможно, это связано со сложностью поддержки такого большого количества пакетов в консистентном состоянии.</li>
<li>Как следствие, нужно много читать или много тратить времени, чтобы исправить все ошибки деплоя</li>
<li>Из плюсов, бесплатный хостинг вашего маленького приложения в публичном месте. Хотя я, конечно же, предпочёл что-нибудь посовременнее и проще.</li>
</ul>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Тестирование REST клиентов</title>
      <link>https://dernasherbrezon.com/posts/mock-server/</link>
      <pubDate>Wed, 18 Mar 2020 19:37:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/mock-server/</guid>
      <description>Последние несколько дней я работал над декодированием сигналов со спутника SMOG-P. Помимо декодирования самого протокола я решил заморочиться и написать полноценную интеграцию между r2server и gnd.bme.hu.
Gnd bme - это сайт, на котором отображаются последние пакеты, принятые со спутника, общая информация о том, как декодировать сигнал.
Но самое интересное заключается в том, что этот сайт предоставляет небольшой API, чтобы можно было программно отправлять им данные. На самом сайте нет описания этого API, но я внимательно посмотрел исходники и нашёл в них всё необходимое.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Тестирование REST клиентов</h1></header>
      		<div class='container entry-content'>
  <p>Последние несколько дней я работал над декодированием сигналов со спутника <a href="https://destevez.net/2019/12/decoding-smog-p-and-atl-1/">SMOG-P</a>. Помимо декодирования самого протокола я решил заморочиться и написать полноценную интеграцию между <a href="https://r2server.ru">r2server</a> и <a href="https://gnd.bme.hu:8080/index">gnd.bme.hu</a>.</p>
<p>Gnd bme - это сайт, на котором отображаются последние пакеты, принятые со спутника, общая информация о том, как декодировать сигнал.</p>
<p><img src="/img/mock-server/1.png" alt=""></p>
<p>Но самое интересное заключается в том, что этот сайт предоставляет небольшой API, чтобы можно было программно отправлять им данные. На самом сайте нет описания этого API, но я внимательно посмотрел <a href="http://152.66.80.46/smog1/receivesmogpatl1/gorgon.zip">исходники</a> и нашёл в них всё необходимое.</p>
<h2 id="bmeclient">BmeClient</h2>
<p>Для подобных интеграций я предпочитаю делать небольшие проекты, которые удобно переиспользовать. Я завёл проект <a href="https://github.com/dernasherbrezon/bmeClient">bmeClient</a>. Он достаточно простой:</p>
<ul>
<li>по сути переписанный bash скрипт на java</li>
<li>при этом для обработки JSON используются внешние библиотеки, а не regexp, как в bash.</li>
<li>используется новый HttpClient из JDK11</li>
<li>slf4j-api для логирования</li>
<li>retry запросов</li>
</ul>
<p>Само API имеет всего 2 метода:</p>
<ul>
<li>получить token для дальнейшей работы</li>
<li>загрузить JSON с данными на сервер</li>
</ul>
<p>Несмотря на такой простой протокол, мне захотелось его протестировать.</p>
<h2 id="тестирование">Тестирование</h2>
<p>Единственное, чем занимается BmeClient - это конвертирует входные параметры в http запрос и обрабатывает ответ от сервера. Именно поэтому я решил протестировать работу клиента с настоящим вэб сервером. Такой сервер должен уметь делать следующее:</p>
<ul>
<li>получать запрос по http</li>
<li>отправлять ответ согласно установленному сценарию</li>
</ul>
<p>Такие типы серверов называются - Mock сервер. Я решил погуглить готовую реализацию, нашёл несколько готовых, но меня ужаснули результаты. Чтобы разобраться насколько всё плохо, я решил сравнить несколько на примере простого теста.</p>
<h2 id="сравнение">Сравнение</h2>
<p>Я ни сколько не сомневаюсь, что все реализации действительно работают и помогают писать тесты. Мне же прежде всего хотелось сравнить простоту реализации одного и того же теста на разных Mock серверах. Сам тест достаточно простой:</p>
<ul>
<li>Из клиента вызвать загрузку данных</li>
<li>Сервер должен ответить ошибкой 503 на первую попытку получения токена</li>
<li>На следующую попытку ответить статусом 200</li>
<li>На попытку загрузить данные ответить статусом 200</li>
<li>Тест должен проверить, что на сервер данные были загружены с помощью заранее известного JSON</li>
</ul>
<p>Для сравнения я выбрал следующие Mock сервера:</p>
<ul>
<li><a href="https://www.mock-server.com">Mock-Server</a>. Рекомендован <a href="https://www.baeldung.com/mockserver">baeldung</a>. <a href="https://github.com/mock-server/mockserver">2.5k звёзд на github</a></li>
<li>Стандартный <code>com.sun.net.httpserver.HttpServer</code>, который поставляется в каждой JRE. Собственно это даже не Mock сервер, а просто вэб сервер. Из преимуществ - стандартный, простой.</li>
<li><a href="https://github.com/jadler-mocking/jadler">jadler</a>. 84 звезды</li>
<li><a href="http://wiremock.org">WireMock</a>. Просто нагуглил. <a href="https://github.com/tomakehurst/wiremock">3.7к звёзд на github</a></li>
</ul>
<h2 id="mock-server">Mock-Server</h2>
<p>Подключается просто:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-xml" data-lang="xml"><span style="color:#f92672">&lt;dependency&gt;</span>
    <span style="color:#f92672">&lt;groupId&gt;</span>org.mock-server<span style="color:#f92672">&lt;/groupId&gt;</span>
    <span style="color:#f92672">&lt;artifactId&gt;</span>mockserver-netty<span style="color:#f92672">&lt;/artifactId&gt;</span>
    <span style="color:#f92672">&lt;version&gt;</span>5.9.0<span style="color:#f92672">&lt;/version&gt;</span>
    <span style="color:#f92672">&lt;scope&gt;</span>test<span style="color:#f92672">&lt;/scope&gt;</span>
<span style="color:#f92672">&lt;/dependency&gt;</span>
<span style="color:#f92672">&lt;dependency&gt;</span>
    <span style="color:#f92672">&lt;groupId&gt;</span>org.mock-server<span style="color:#f92672">&lt;/groupId&gt;</span>
    <span style="color:#f92672">&lt;artifactId&gt;</span>mockserver-client-java<span style="color:#f92672">&lt;/artifactId&gt;</span>
    <span style="color:#f92672">&lt;version&gt;</span>5.9.0<span style="color:#f92672">&lt;/version&gt;</span>
    <span style="color:#f92672">&lt;scope&gt;</span>test<span style="color:#f92672">&lt;/scope&gt;</span>
<span style="color:#f92672">&lt;/dependency&gt;</span>
</code></pre></div><p>Казалось бы, 2 простые зависимости? Нет, они добавляют ровно <em><strong>50 (!!!)</strong></em> библиотек в проект. Я не очень понимаю зачем столько нужно. Может быть от этого тесты становятся лучше? Мне потребовалось минут 10, чтобы написать тест. Это достаточно неплохо, если учесть, что я никогда не писал тестов с помощью этой библиотеки. Я потратил бы меньше времени, если бы <a href="https://www.baeldung.com/mockserver">туториалы</a> работали и, если бы не было этих дурацких статических импортов. Кто вообще их придумал? Вот у меня есть код:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">request<span style="color:#f92672">()</span>
<span style="color:#f92672">.</span><span style="color:#a6e22e">withBody</span><span style="color:#f92672">(</span>exact<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;some data&#34;</span><span style="color:#f92672">))</span>
</code></pre></div><p>Из какого класса этот <code>request</code> импортируется? А из какого <code>exact</code>? Для этого мне пришлось залезть в исходники примеров и поискать импорты. Тем не менее с первого раза тест не сработал.</p>
<p><img src="/img/mock-server/mockServerError.png" alt=""></p>
<p>Да, я не первый день программирую на Java, поэтому точно знаю в чём причина. Хотя она и не следует из описания exception. Конфликт библиотек. Помните я говорил, что подключается 50 библиотек в проект? Так вот, чем больше библиотек, тем больше шанс, что произойдёт конфликт. Именно это и произошло. После того как я поменял версию slf4j в своём проекте с 1.7.12 на 1.7.26, тест выполнился.</p>
<p><img src="/img/mock-server/nashornWarning.png" alt=""></p>
<p>Стоп-стоп. Nashorn? Это тот самый <a href="https://openjdk.java.net/projects/nashorn/">Nashorn</a>, который Java движок для запуска Javascript? Почему я вижу это предупреждение? У меня тест REST клиента. Тут нет javascript. Неужели они стартуют его? Я даже не представляю, как исправить это предупреждение. И уж точно не знаю, сломаются ли мои тесты при запуске на следующей версии JDK. Мир сошёл с ума.</p>
<p>Тест вывел кучу бесполезной информации в логи, но при этом успешно прошёл за почти 4 секунды.</p>
<p><img src="/img/mock-server/mockServer.png" alt=""></p>
<p>Сам код теста выглядит следующим образом:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">private</span> ClientAndServer mockServer<span style="color:#f92672">;</span>
<span style="color:#66d9ef">private</span> BmeClient client<span style="color:#f92672">;</span>
	 
<span style="color:#a6e22e">@Before</span>
<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">startServer</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
    mockServer <span style="color:#f92672">=</span> ClientAndServer<span style="color:#f92672">.</span><span style="color:#a6e22e">startClientAndServer</span><span style="color:#f92672">(</span>1080<span style="color:#f92672">);</span>
    client <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> BmeClient<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;http://localhost&#34;</span><span style="color:#f92672">,</span> 1080<span style="color:#f92672">,</span> 10000<span style="color:#f92672">,</span> 0L<span style="color:#f92672">,</span> UUID<span style="color:#f92672">.</span><span style="color:#a6e22e">randomUUID</span><span style="color:#f92672">().</span><span style="color:#a6e22e">toString</span><span style="color:#f92672">(),</span> UUID<span style="color:#f92672">.</span><span style="color:#a6e22e">randomUUID</span><span style="color:#f92672">().</span><span style="color:#a6e22e">toString</span><span style="color:#f92672">());</span>
<span style="color:#f92672">}</span>
    
<span style="color:#a6e22e">@Test</span>
<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">testRetryAuthOnInternalSystemError</span><span style="color:#f92672">()</span> <span style="color:#66d9ef">throws</span> Exception <span style="color:#f92672">{</span>
    mockServer
    <span style="color:#f92672">.</span><span style="color:#a6e22e">when</span><span style="color:#f92672">(</span>
      request<span style="color:#f92672">().</span><span style="color:#a6e22e">withPath</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;/api/tokens&#34;</span><span style="color:#f92672">),</span> Times<span style="color:#f92672">.</span><span style="color:#a6e22e">exactly</span><span style="color:#f92672">(</span>1<span style="color:#f92672">))</span>
    <span style="color:#f92672">.</span><span style="color:#a6e22e">respond</span><span style="color:#f92672">(</span>HttpResponse<span style="color:#f92672">.</span><span style="color:#a6e22e">response</span><span style="color:#f92672">().</span><span style="color:#a6e22e">withStatusCode</span><span style="color:#f92672">(</span>503<span style="color:#f92672">).</span><span style="color:#a6e22e">withBody</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;{\&#34;error\&#34;:\&#34;internal server error\&#34;}&#34;</span><span style="color:#f92672">));</span>
    mockServer
    <span style="color:#f92672">.</span><span style="color:#a6e22e">when</span><span style="color:#f92672">(</span>
      request<span style="color:#f92672">().</span><span style="color:#a6e22e">withPath</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;/api/tokens&#34;</span><span style="color:#f92672">),</span> Times<span style="color:#f92672">.</span><span style="color:#a6e22e">exactly</span><span style="color:#f92672">(</span>1<span style="color:#f92672">))</span>
    <span style="color:#f92672">.</span><span style="color:#a6e22e">respond</span><span style="color:#f92672">(</span>HttpResponse<span style="color:#f92672">.</span><span style="color:#a6e22e">response</span><span style="color:#f92672">().</span><span style="color:#a6e22e">withStatusCode</span><span style="color:#f92672">(</span>200<span style="color:#f92672">).</span><span style="color:#a6e22e">withBody</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;{\&#34;token\&#34;:\&#34;1234567890\&#34;}&#34;</span><span style="color:#f92672">));</span>
    mockServer
    <span style="color:#f92672">.</span><span style="color:#a6e22e">when</span><span style="color:#f92672">(</span>
      request<span style="color:#f92672">().</span><span style="color:#a6e22e">withPath</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;/api/packets/bulk&#34;</span><span style="color:#f92672">),</span> Times<span style="color:#f92672">.</span><span style="color:#a6e22e">exactly</span><span style="color:#f92672">(</span>1<span style="color:#f92672">))</span>
    <span style="color:#f92672">.</span><span style="color:#a6e22e">respond</span><span style="color:#f92672">(</span>HttpResponse<span style="color:#f92672">.</span><span style="color:#a6e22e">response</span><span style="color:#f92672">().</span><span style="color:#a6e22e">withStatusCode</span><span style="color:#f92672">(</span>200<span style="color:#f92672">).</span><span style="color:#a6e22e">withBody</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;{\&#34;results\&#34;:[{\&#34;location\&#34;:\&#34;/api/packets/1234567890\&#34;}]}&#34;</span><span style="color:#f92672">));</span>
    client<span style="color:#f92672">.</span><span style="color:#a6e22e">uploadBatch</span><span style="color:#f92672">(</span>Satellite<span style="color:#f92672">.</span><span style="color:#a6e22e">SMOGP</span><span style="color:#f92672">,</span> Collections<span style="color:#f92672">.</span><span style="color:#a6e22e">singletonList</span><span style="color:#f92672">(</span><span style="color:#66d9ef">new</span> <span style="color:#66d9ef">byte</span><span style="color:#f92672">[]</span> <span style="color:#f92672">{</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">byte</span><span style="color:#f92672">)</span> 0xca<span style="color:#f92672">,</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">byte</span><span style="color:#f92672">)</span> 0xfe <span style="color:#f92672">}));</span>
    <span style="color:#66d9ef">new</span> MockServerClient<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;localhost&#34;</span><span style="color:#f92672">,</span> 1080<span style="color:#f92672">).</span><span style="color:#a6e22e">verify</span><span style="color:#f92672">(</span>
            request<span style="color:#f92672">()</span>
                    <span style="color:#f92672">.</span><span style="color:#a6e22e">withMethod</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;POST&#34;</span><span style="color:#f92672">)</span>
                    <span style="color:#f92672">.</span><span style="color:#a6e22e">withPath</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;/api/packets/bulk&#34;</span><span style="color:#f92672">)</span>
                    <span style="color:#f92672">.</span><span style="color:#a6e22e">withBody</span><span style="color:#f92672">(</span>exact<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;{\&#34;packets\&#34;:[{\&#34;satellite\&#34;:\&#34;smogp\&#34;,\&#34;packet\&#34;:\&#34;cafe\&#34;}]}&#34;</span><span style="color:#f92672">)),</span>
            VerificationTimes<span style="color:#f92672">.</span><span style="color:#a6e22e">exactly</span><span style="color:#f92672">(</span>1<span style="color:#f92672">)</span>
    <span style="color:#f92672">);</span>        
<span style="color:#f92672">}</span>
  
<span style="color:#a6e22e">@After</span>
<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">stopServer</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span> 
    mockServer<span style="color:#f92672">.</span><span style="color:#a6e22e">stop</span><span style="color:#f92672">();</span>
<span style="color:#f92672">}</span>
</code></pre></div><h2 id="wiremock">WireMock</h2>
<p>Подключается просто:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-xml" data-lang="xml"><span style="color:#f92672">&lt;dependency&gt;</span>
    <span style="color:#f92672">&lt;groupId&gt;</span>com.github.tomakehurst<span style="color:#f92672">&lt;/groupId&gt;</span>
    <span style="color:#f92672">&lt;artifactId&gt;</span>wiremock-jre8<span style="color:#f92672">&lt;/artifactId&gt;</span>
    <span style="color:#f92672">&lt;version&gt;</span>2.26.3<span style="color:#f92672">&lt;/version&gt;</span>
    <span style="color:#f92672">&lt;scope&gt;</span>test<span style="color:#f92672">&lt;/scope&gt;</span>
<span style="color:#f92672">&lt;/dependency&gt;</span>
</code></pre></div><p>Здесь всё суровее - <em><strong>52 (!!!)</strong></em> дополнительные библиотеки. Наверное, для того, чтобы поддерживать <a href="http://wiremock.org/docs/extending-wiremock/">расширения</a>.</p>
<p>Ладно, можно приступать к исследованию Java API. Я открыл <a href="http://wiremock.org/docs/getting-started/">getting started</a> и обнаружил очередной DSL:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">exampleTest</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
    stubFor<span style="color:#f92672">(</span>get<span style="color:#f92672">(</span>urlEqualTo<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;/my/resource&#34;</span><span style="color:#f92672">))</span>
</code></pre></div><p>Откуда взялась эта мода на DSL? Вот как мне понять какие классы нужно заимпортить? Начал исследовать сайт в поисках исходников и наткнулся на изумительное:</p>
<p><img src="/img/mock-server/friendlyWebUI.png" alt=""></p>
<p>На-секундочку, ещё раз. <code>Friendly Web UI</code> для того, чтобы написать юнит тесты? Или это мода на монетизацию? Мол, попробуйте наш бесплатный продукт, а для использования Web UI заплатите. Я чего-то не понимаю.</p>
<p><img src="/img/mock-server/noJavadoc.png" alt=""></p>
<p>Я не знаю, что хотели сказать авторы отсутствующим javadoc к своему DSL. Но мне потребовалось где-то 30 минут, чтобы разобраться в API и написать работающий тест. 2 секунды на исполнение и собственно код теста:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#a6e22e">@Rule</span>
<span style="color:#66d9ef">public</span> WireMockRule wireMockRule <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> WireMockRule<span style="color:#f92672">(</span>8089<span style="color:#f92672">);</span>

<span style="color:#66d9ef">private</span> BmeClient client<span style="color:#f92672">;</span>

<span style="color:#a6e22e">@Test</span>
<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">testRetryAuthOnInternalSystemError</span><span style="color:#f92672">()</span> <span style="color:#66d9ef">throws</span> Exception <span style="color:#f92672">{</span>
    stubFor<span style="color:#f92672">(</span>post<span style="color:#f92672">(</span>urlEqualTo<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;/api/tokens&#34;</span><span style="color:#f92672">)).</span><span style="color:#a6e22e">inScenario</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;retryAuth&#34;</span><span style="color:#f92672">)</span>
            <span style="color:#f92672">.</span><span style="color:#a6e22e">willReturn</span><span style="color:#f92672">(</span>aResponse<span style="color:#f92672">()</span>
                <span style="color:#f92672">.</span><span style="color:#a6e22e">withStatus</span><span style="color:#f92672">(</span>503<span style="color:#f92672">)</span>
                <span style="color:#f92672">.</span><span style="color:#a6e22e">withBody</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;{\&#34;error\&#34;:\&#34;internal server error\&#34;}&#34;</span><span style="color:#f92672">))</span>
            <span style="color:#f92672">.</span><span style="color:#a6e22e">willSetStateTo</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;RETRIED&#34;</span><span style="color:#f92672">));</span>		
    stubFor<span style="color:#f92672">(</span>post<span style="color:#f92672">(</span>urlEqualTo<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;/api/tokens&#34;</span><span style="color:#f92672">)).</span><span style="color:#a6e22e">inScenario</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;retryAuth&#34;</span><span style="color:#f92672">).</span><span style="color:#a6e22e">whenScenarioStateIs</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;RETRIED&#34;</span><span style="color:#f92672">)</span>
            <span style="color:#f92672">.</span><span style="color:#a6e22e">willReturn</span><span style="color:#f92672">(</span>aResponse<span style="color:#f92672">()</span>
                <span style="color:#f92672">.</span><span style="color:#a6e22e">withStatus</span><span style="color:#f92672">(</span>200<span style="color:#f92672">)</span>
                <span style="color:#f92672">.</span><span style="color:#a6e22e">withBody</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;{\&#34;token\&#34;:\&#34;1234567890\&#34;}&#34;</span><span style="color:#f92672">)));</span>		
    stubFor<span style="color:#f92672">(</span>post<span style="color:#f92672">(</span>urlEqualTo<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;/api/packets/bulk&#34;</span><span style="color:#f92672">))</span>
            <span style="color:#f92672">.</span><span style="color:#a6e22e">willReturn</span><span style="color:#f92672">(</span>aResponse<span style="color:#f92672">()</span>
                <span style="color:#f92672">.</span><span style="color:#a6e22e">withStatus</span><span style="color:#f92672">(</span>200<span style="color:#f92672">)</span>
                <span style="color:#f92672">.</span><span style="color:#a6e22e">withBody</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;{\&#34;results\&#34;:[{\&#34;location\&#34;:\&#34;/api/packets/1234567890\&#34;}]}&#34;</span><span style="color:#f92672">)));</span>		

    client<span style="color:#f92672">.</span><span style="color:#a6e22e">uploadBatch</span><span style="color:#f92672">(</span>Satellite<span style="color:#f92672">.</span><span style="color:#a6e22e">SMOGP</span><span style="color:#f92672">,</span> Collections<span style="color:#f92672">.</span><span style="color:#a6e22e">singletonList</span><span style="color:#f92672">(</span><span style="color:#66d9ef">new</span> <span style="color:#66d9ef">byte</span><span style="color:#f92672">[]</span> <span style="color:#f92672">{</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">byte</span><span style="color:#f92672">)</span> 0xca<span style="color:#f92672">,</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">byte</span><span style="color:#f92672">)</span> 0xfe <span style="color:#f92672">}));</span>
    
    verify<span style="color:#f92672">(</span>postRequestedFor<span style="color:#f92672">(</span>urlEqualTo<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;/api/packets/bulk&#34;</span><span style="color:#f92672">)).</span><span style="color:#a6e22e">withRequestBody</span><span style="color:#f92672">(</span>equalTo<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;{\&#34;packets\&#34;:[{\&#34;satellite\&#34;:\&#34;smogp\&#34;,\&#34;packet\&#34;:\&#34;cafe\&#34;}]}&#34;</span><span style="color:#f92672">)));</span>
<span style="color:#f92672">}</span>

<span style="color:#a6e22e">@Before</span>
<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">start</span><span style="color:#f92672">()</span> <span style="color:#66d9ef">throws</span> Exception <span style="color:#f92672">{</span>
	client <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> BmeClient<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;http://localhost&#34;</span><span style="color:#f92672">,</span> 8089<span style="color:#f92672">,</span> 10000<span style="color:#f92672">,</span> 0L<span style="color:#f92672">,</span> UUID<span style="color:#f92672">.</span><span style="color:#a6e22e">randomUUID</span><span style="color:#f92672">().</span><span style="color:#a6e22e">toString</span><span style="color:#f92672">(),</span> UUID<span style="color:#f92672">.</span><span style="color:#a6e22e">randomUUID</span><span style="color:#f92672">().</span><span style="color:#a6e22e">toString</span><span style="color:#f92672">());</span>
<span style="color:#f92672">}</span>
</code></pre></div><h2 id="jadler">Jadler</h2>
<p>Подключение стандартное:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-xml" data-lang="xml"><span style="color:#f92672">&lt;dependency&gt;</span>
    <span style="color:#f92672">&lt;groupId&gt;</span>net.jadler<span style="color:#f92672">&lt;/groupId&gt;</span>
    <span style="color:#f92672">&lt;artifactId&gt;</span>jadler-all<span style="color:#f92672">&lt;/artifactId&gt;</span>
    <span style="color:#f92672">&lt;version&gt;</span>1.3.0<span style="color:#f92672">&lt;/version&gt;</span>
    <span style="color:#f92672">&lt;scope&gt;</span>test<span style="color:#f92672">&lt;/scope&gt;</span>
<span style="color:#f92672">&lt;/dependency&gt;</span>
</code></pre></div><p>На удивление мало зависимостей. Всего 14 библиотек. Настройка и использование достаточно тривиальны. Несмотря на то, что используется вездесущий DSL, на его настройку мне потребовалось минут 5. Тест прошёл за 1 секунду и выглядит следующим образом:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">private</span> BmeClient client<span style="color:#f92672">;</span>

<span style="color:#a6e22e">@Test</span>
<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">testRetryAuthOnInternalSystemError</span><span style="color:#f92672">()</span> <span style="color:#66d9ef">throws</span> Exception <span style="color:#f92672">{</span>
	 onRequest<span style="color:#f92672">()</span>
     	<span style="color:#f92672">.</span><span style="color:#a6e22e">havingPathEqualTo</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;/api/tokens&#34;</span><span style="color:#f92672">)</span>
     	<span style="color:#f92672">.</span><span style="color:#a6e22e">havingMethodEqualTo</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;POST&#34;</span><span style="color:#f92672">)</span>
     <span style="color:#f92672">.</span><span style="color:#a6e22e">respond</span><span style="color:#f92672">()</span>
     	<span style="color:#f92672">.</span><span style="color:#a6e22e">withStatus</span><span style="color:#f92672">(</span>503<span style="color:#f92672">)</span>
     	<span style="color:#f92672">.</span><span style="color:#a6e22e">withBody</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;{\&#34;error\&#34;:\&#34;internal server error\&#34;}&#34;</span><span style="color:#f92672">)</span>
     <span style="color:#f92672">.</span><span style="color:#a6e22e">thenRespond</span><span style="color:#f92672">()</span>
     	<span style="color:#f92672">.</span><span style="color:#a6e22e">withStatus</span><span style="color:#f92672">(</span>200<span style="color:#f92672">)</span>
     	<span style="color:#f92672">.</span><span style="color:#a6e22e">withBody</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;{\&#34;token\&#34;:\&#34;1234567890\&#34;}&#34;</span><span style="color:#f92672">);</span>
	 onRequest<span style="color:#f92672">()</span>
     	<span style="color:#f92672">.</span><span style="color:#a6e22e">havingPathEqualTo</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;/api/packets/bulk&#34;</span><span style="color:#f92672">)</span>
     	<span style="color:#f92672">.</span><span style="color:#a6e22e">havingMethodEqualTo</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;POST&#34;</span><span style="color:#f92672">)</span>
     <span style="color:#f92672">.</span><span style="color:#a6e22e">respond</span><span style="color:#f92672">()</span>
     	<span style="color:#f92672">.</span><span style="color:#a6e22e">withStatus</span><span style="color:#f92672">(</span>200<span style="color:#f92672">)</span>
     	<span style="color:#f92672">.</span><span style="color:#a6e22e">withBody</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;{\&#34;results\&#34;:[{\&#34;location\&#34;:\&#34;/api/packets/1234567890\&#34;}]}&#34;</span><span style="color:#f92672">);</span>
	 
	 client<span style="color:#f92672">.</span><span style="color:#a6e22e">uploadBatch</span><span style="color:#f92672">(</span>Satellite<span style="color:#f92672">.</span><span style="color:#a6e22e">SMOGP</span><span style="color:#f92672">,</span> Collections<span style="color:#f92672">.</span><span style="color:#a6e22e">singletonList</span><span style="color:#f92672">(</span><span style="color:#66d9ef">new</span> <span style="color:#66d9ef">byte</span><span style="color:#f92672">[]</span> <span style="color:#f92672">{</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">byte</span><span style="color:#f92672">)</span> 0xca<span style="color:#f92672">,</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">byte</span><span style="color:#f92672">)</span> 0xfe <span style="color:#f92672">}));</span>
	 
     verifyThatRequest<span style="color:#f92672">()</span>
     	<span style="color:#f92672">.</span><span style="color:#a6e22e">havingMethodEqualTo</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;POST&#34;</span><span style="color:#f92672">)</span>
     	<span style="color:#f92672">.</span><span style="color:#a6e22e">havingPathEqualTo</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;/api/packets/bulk&#34;</span><span style="color:#f92672">)</span>
     	<span style="color:#f92672">.</span><span style="color:#a6e22e">havingBodyEqualTo</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;{\&#34;packets\&#34;:[{\&#34;satellite\&#34;:\&#34;smogp\&#34;,\&#34;packet\&#34;:\&#34;cafe\&#34;}]}&#34;</span><span style="color:#f92672">)</span>
     	<span style="color:#f92672">.</span><span style="color:#a6e22e">receivedOnce</span><span style="color:#f92672">();</span>		 
<span style="color:#f92672">}</span>

<span style="color:#a6e22e">@Before</span>
<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">start</span><span style="color:#f92672">()</span> <span style="color:#66d9ef">throws</span> Exception <span style="color:#f92672">{</span>
	initJadler<span style="color:#f92672">();</span>
	client <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> BmeClient<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;http://localhost&#34;</span><span style="color:#f92672">,</span> port<span style="color:#f92672">(),</span> 10000<span style="color:#f92672">,</span> 0L<span style="color:#f92672">,</span> UUID<span style="color:#f92672">.</span><span style="color:#a6e22e">randomUUID</span><span style="color:#f92672">().</span><span style="color:#a6e22e">toString</span><span style="color:#f92672">(),</span> UUID<span style="color:#f92672">.</span><span style="color:#a6e22e">randomUUID</span><span style="color:#f92672">().</span><span style="color:#a6e22e">toString</span><span style="color:#f92672">());</span>
<span style="color:#f92672">}</span>

<span style="color:#a6e22e">@After</span>
<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">stop</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
    closeJadler<span style="color:#f92672">();</span>
<span style="color:#f92672">}</span>
</code></pre></div><h2 id="httpserver">HttpServer</h2>
<p>Подключение простое: его просто нет. Этот сервер по-умолчанию доступен в любой JRE. Нет зависимостей, нет проблем совместимости версий. Не нужно следить за обновлениями.</p>
<p>Поскольку это простой вэб сервер, то никакого DSL для написания тестов нет. Его можно сделать самому или не использовать совсем! <a href="https://alistairisrael.wordpress.com/2009/09/02/functional-http-testing-with-sun-java-6-httpserver/">Некоторые</a> излишне переусложняют свои тесты. Они получаются громоздкими и не очень читабельными. Мне удалось написать достаточно просто:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">private</span> HttpServer server<span style="color:#f92672">;</span>
<span style="color:#66d9ef">private</span> BmeClient client<span style="color:#f92672">;</span>

<span style="color:#66d9ef">private</span> String request<span style="color:#f92672">;</span>

<span style="color:#a6e22e">@Test</span>
<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">testRetryAuthOnInternalSystemError</span><span style="color:#f92672">()</span> <span style="color:#66d9ef">throws</span> Exception <span style="color:#f92672">{</span>
	List<span style="color:#f92672">&lt;</span>HttpResponse<span style="color:#f92672">&gt;</span> responses <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> ArrayList<span style="color:#f92672">&lt;&gt;();</span>
	responses<span style="color:#f92672">.</span><span style="color:#a6e22e">add</span><span style="color:#f92672">(</span><span style="color:#66d9ef">new</span> HttpResponse<span style="color:#f92672">(</span>503<span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;{\&#34;error\&#34;:\&#34;internal server error\&#34;}&#34;</span><span style="color:#f92672">));</span>
	responses<span style="color:#f92672">.</span><span style="color:#a6e22e">add</span><span style="color:#f92672">(</span><span style="color:#66d9ef">new</span> HttpResponse<span style="color:#f92672">(</span>200<span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;{\&#34;token\&#34;:\&#34;1234567890\&#34;}&#34;</span><span style="color:#f92672">));</span>
	server<span style="color:#f92672">.</span><span style="color:#a6e22e">createContext</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;/api/tokens&#34;</span><span style="color:#f92672">,</span> <span style="color:#66d9ef">new</span> SequentialHttpResponse<span style="color:#f92672">(</span>responses<span style="color:#f92672">));</span>
	server<span style="color:#f92672">.</span><span style="color:#a6e22e">createContext</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;/api/packets/bulk&#34;</span><span style="color:#f92672">,</span> createSuccessBulkHandler<span style="color:#f92672">());</span>
	
	client<span style="color:#f92672">.</span><span style="color:#a6e22e">uploadBatch</span><span style="color:#f92672">(</span>Satellite<span style="color:#f92672">.</span><span style="color:#a6e22e">SMOGP</span><span style="color:#f92672">,</span> Collections<span style="color:#f92672">.</span><span style="color:#a6e22e">singletonList</span><span style="color:#f92672">(</span><span style="color:#66d9ef">new</span> <span style="color:#66d9ef">byte</span><span style="color:#f92672">[]</span> <span style="color:#f92672">{</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">byte</span><span style="color:#f92672">)</span> 0xca<span style="color:#f92672">,</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">byte</span><span style="color:#f92672">)</span> 0xfe <span style="color:#f92672">}));</span>
	assertEquals<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;{\&#34;packets\&#34;:[{\&#34;satellite\&#34;:\&#34;smogp\&#34;,\&#34;packet\&#34;:\&#34;cafe\&#34;}]}&#34;</span><span style="color:#f92672">,</span> request<span style="color:#f92672">);</span>
<span style="color:#f92672">}</span>

<span style="color:#a6e22e">@Before</span>
<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">start</span><span style="color:#f92672">()</span> <span style="color:#66d9ef">throws</span> Exception <span style="color:#f92672">{</span>
	request <span style="color:#f92672">=</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">;</span>
	String host <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;localhost&#34;</span><span style="color:#f92672">;</span>
	<span style="color:#66d9ef">int</span> port <span style="color:#f92672">=</span> 8000<span style="color:#f92672">;</span>
	server <span style="color:#f92672">=</span> HttpServer<span style="color:#f92672">.</span><span style="color:#a6e22e">create</span><span style="color:#f92672">(</span><span style="color:#66d9ef">new</span> InetSocketAddress<span style="color:#f92672">(</span>host<span style="color:#f92672">,</span> port<span style="color:#f92672">),</span> 0<span style="color:#f92672">);</span>
	server<span style="color:#f92672">.</span><span style="color:#a6e22e">start</span><span style="color:#f92672">();</span>
	client <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> BmeClient<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;http://&#34;</span> <span style="color:#f92672">+</span> host<span style="color:#f92672">,</span> port<span style="color:#f92672">,</span> 10000<span style="color:#f92672">,</span> 0L<span style="color:#f92672">,</span> UUID<span style="color:#f92672">.</span><span style="color:#a6e22e">randomUUID</span><span style="color:#f92672">().</span><span style="color:#a6e22e">toString</span><span style="color:#f92672">(),</span> UUID<span style="color:#f92672">.</span><span style="color:#a6e22e">randomUUID</span><span style="color:#f92672">().</span><span style="color:#a6e22e">toString</span><span style="color:#f92672">());</span>
<span style="color:#f92672">}</span>

<span style="color:#66d9ef">private</span> HttpResponse <span style="color:#a6e22e">createSuccessBulkHandler</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
	<span style="color:#66d9ef">return</span> <span style="color:#66d9ef">new</span> HttpResponse<span style="color:#f92672">(</span>200<span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;{\&#34;results\&#34;:[{\&#34;location\&#34;:\&#34;/api/packets/1234567890\&#34;}]}&#34;</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>

		<span style="color:#a6e22e">@Override</span>
		<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">handle</span><span style="color:#f92672">(</span>HttpExchange exchange<span style="color:#f92672">)</span> <span style="color:#66d9ef">throws</span> IOException <span style="color:#f92672">{</span>
			request <span style="color:#f92672">=</span> convertToString<span style="color:#f92672">(</span>exchange<span style="color:#f92672">.</span><span style="color:#a6e22e">getRequestBody</span><span style="color:#f92672">());</span>
			<span style="color:#66d9ef">byte</span><span style="color:#f92672">[]</span> bytes <span style="color:#f92672">=</span> getMessage<span style="color:#f92672">().</span><span style="color:#a6e22e">getBytes</span><span style="color:#f92672">(</span>StandardCharsets<span style="color:#f92672">.</span><span style="color:#a6e22e">UTF_8</span><span style="color:#f92672">);</span>
			exchange<span style="color:#f92672">.</span><span style="color:#a6e22e">sendResponseHeaders</span><span style="color:#f92672">(</span>getStatusCode<span style="color:#f92672">(),</span> bytes<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span><span style="color:#f92672">);</span>
			OutputStream os <span style="color:#f92672">=</span> exchange<span style="color:#f92672">.</span><span style="color:#a6e22e">getResponseBody</span><span style="color:#f92672">();</span>
			os<span style="color:#f92672">.</span><span style="color:#a6e22e">write</span><span style="color:#f92672">(</span>bytes<span style="color:#f92672">);</span>
			os<span style="color:#f92672">.</span><span style="color:#a6e22e">close</span><span style="color:#f92672">();</span>
		<span style="color:#f92672">}</span>
	<span style="color:#f92672">};</span>
<span style="color:#f92672">}</span>

<span style="color:#66d9ef">private</span> <span style="color:#66d9ef">static</span> String <span style="color:#a6e22e">convertToString</span><span style="color:#f92672">(</span>InputStream is<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
	<span style="color:#66d9ef">try</span> <span style="color:#f92672">(</span>java<span style="color:#f92672">.</span><span style="color:#a6e22e">util</span><span style="color:#f92672">.</span><span style="color:#a6e22e">Scanner</span> s <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> java<span style="color:#f92672">.</span><span style="color:#a6e22e">util</span><span style="color:#f92672">.</span><span style="color:#a6e22e">Scanner</span><span style="color:#f92672">(</span>is<span style="color:#f92672">))</span> <span style="color:#f92672">{</span>
		<span style="color:#66d9ef">return</span> s<span style="color:#f92672">.</span><span style="color:#a6e22e">useDelimiter</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;\\A&#34;</span><span style="color:#f92672">).</span><span style="color:#a6e22e">hasNext</span><span style="color:#f92672">()</span> <span style="color:#f92672">?</span> s<span style="color:#f92672">.</span><span style="color:#a6e22e">next</span><span style="color:#f92672">()</span> <span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;&#34;</span><span style="color:#f92672">;</span>
	<span style="color:#f92672">}</span>
<span style="color:#f92672">}</span>

<span style="color:#a6e22e">@After</span>
<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">stop</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
	<span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>server <span style="color:#f92672">!=</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
		server<span style="color:#f92672">.</span><span style="color:#a6e22e">stop</span><span style="color:#f92672">(</span>0<span style="color:#f92672">);</span>
	<span style="color:#f92672">}</span>
<span style="color:#f92672">}</span>
</code></pre></div><p>Такой тест выполняется за ~0.8с. Ещё я сделал 2 вспомогательных класса <code>HttpResponse</code> и <code>SequentialHttpResponse</code>, которые просто возвращают ожидаемый результат и статус код. Для того чтобы протестировать результат запроса, я написал метод <code>createSuccessBulkHandler</code>. Он немного громоздкий, но при желании можно упростить.</p>
<h2 id="выводы">Выводы</h2>
<ol>
<li>Мир сошёл с ума. Для простейшей задачи требуется 50+ библиотек</li>
<li>Чем меньше библиотек, тем лучше</li>
<li>DSL - это зло. В каждой из библиотек используется свой собственный DSL со своими собственными парадигмами.</li>
<li>HttpServer - идеальный вариант для тестирования небольших REST клиентов</li>
</ol>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Декодирование телеметрии D-STAR ONE</title>
      <link>https://dernasherbrezon.com/posts/dstar1-telemetry/</link>
      <pubDate>Wed, 19 Feb 2020 14:14:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/dstar1-telemetry/</guid>
      <description>Я уже давно декодирую телеметрию с D-STAR ONE, но совсем недавно, просматривая логи базовой станции, наткнулся на следующую ошибку:
unable to parse beacon java.io.EOFException at java.base/java.io.DataInputStream.readUnsignedByte(DataInputStream.java:295) at ru.r2cloud.jradio.dstar1.PayloadData.&amp;lt;init&amp;gt;(PayloadData.java:102) at ru.r2cloud.jradio.dstar1.Dstar1Beacon.readBeacon(Dstar1Beacon.java:27) at ru.r2cloud.jradio.Beacon.readExternal(Beacon.java:16) Эта случайная ошибка в логах и моя любознательность стали причиной интересного расследования, которое значительно улучшило качество приёма телеметрии.
Расследование Как обычно, в таких случаях, я скачал сырые данные и попытался воспроизвести ошибку локально. Код Dstar1Beacon достаточно простой, поэтому остановившись в дебаг-режиме, я сразу понял в чём дело.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Декодирование телеметрии D-STAR ONE</h1></header>
      		<div class='container entry-content'>
  <p>Я уже давно декодирую телеметрию с D-STAR ONE, но совсем недавно, просматривая логи базовой станции, наткнулся на следующую ошибку:</p>
<pre><code>unable to parse beacon
java.io.EOFException
        at java.base/java.io.DataInputStream.readUnsignedByte(DataInputStream.java:295)
        at ru.r2cloud.jradio.dstar1.PayloadData.&lt;init&gt;(PayloadData.java:102)
        at ru.r2cloud.jradio.dstar1.Dstar1Beacon.readBeacon(Dstar1Beacon.java:27)
        at ru.r2cloud.jradio.Beacon.readExternal(Beacon.java:16)
</code></pre><p>Эта случайная ошибка в логах и моя любознательность стали причиной интересного расследования, которое значительно улучшило качество приёма телеметрии.</p>
<h2 id="расследование">Расследование</h2>
<p>Как обычно, в таких случаях, я скачал сырые данные и попытался воспроизвести ошибку локально. Код <code>Dstar1Beacon</code> достаточно простой, поэтому остановившись в дебаг-режиме, я сразу понял в чём дело. <code>CMX909bBeacon</code> декодирует данные и возвращает массив байт, который и будет использоваться в дальнейшем.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">DataInputStream dis <span style="color:#f92672">=</span> <span style="color:#f92672">...</span>
<span style="color:#66d9ef">byte</span><span style="color:#f92672">[]</span> dataFromBlocks <span style="color:#f92672">=</span> CMX909bBeacon<span style="color:#f92672">.</span><span style="color:#a6e22e">readDataBlocks</span><span style="color:#f92672">(</span>NUMBER_OF_BLOCKS<span style="color:#f92672">,</span> randomizer<span style="color:#f92672">,</span> dis<span style="color:#f92672">);</span>
<span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>dataFromBlocks <span style="color:#f92672">!=</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
	payload <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> PayloadData<span style="color:#f92672">(</span>dataFromBlocks<span style="color:#f92672">);</span>
<span style="color:#f92672">}</span>
</code></pre></div><p>Сам же <code>CMX909bBeacon</code> выглядит следующим образом:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">byte</span><span style="color:#f92672">[]</span> <span style="color:#a6e22e">readDataBlocks</span><span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> numberOfBlocks<span style="color:#f92672">,</span> MobitexRandomizer randomizer<span style="color:#f92672">,</span> DataInputStream dis<span style="color:#f92672">)</span> <span style="color:#66d9ef">throws</span> IOException<span style="color:#f92672">,</span> UncorrectableException <span style="color:#f92672">{</span>
	ByteArrayOutputStream baos <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> ByteArrayOutputStream<span style="color:#f92672">();</span>
	<span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> 0<span style="color:#f92672">;</span> i <span style="color:#f92672">&lt;</span> numberOfBlocks<span style="color:#f92672">;</span> i<span style="color:#f92672">++)</span> <span style="color:#f92672">{</span>
		<span style="color:#66d9ef">try</span> <span style="color:#f92672">{</span>
			<span style="color:#66d9ef">byte</span><span style="color:#f92672">[]</span> block <span style="color:#f92672">=</span> readDatablock<span style="color:#f92672">(</span>randomizer<span style="color:#f92672">,</span> dis<span style="color:#f92672">,</span> BLOCK_SIZE_BYTES<span style="color:#f92672">);</span>
			baos<span style="color:#f92672">.</span><span style="color:#a6e22e">write</span><span style="color:#f92672">(</span>block<span style="color:#f92672">);</span>
		<span style="color:#f92672">}</span> <span style="color:#66d9ef">catch</span> <span style="color:#f92672">(</span>UncorrectableException e<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
			<span style="color:#75715e">// if some data recovered, then return it
</span><span style="color:#75715e"></span>			<span style="color:#75715e">// at least some SourcePacket might be recovered
</span><span style="color:#75715e"></span>			<span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>baos<span style="color:#f92672">.</span><span style="color:#a6e22e">size</span><span style="color:#f92672">()</span> <span style="color:#f92672">&gt;</span> 0<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
				<span style="color:#66d9ef">return</span> baos<span style="color:#f92672">.</span><span style="color:#a6e22e">toByteArray</span><span style="color:#f92672">();</span>
			<span style="color:#f92672">}</span> <span style="color:#66d9ef">else</span> <span style="color:#f92672">{</span>
				<span style="color:#75715e">// if this is the first block and we cannot recover it
</span><span style="color:#75715e"></span>				<span style="color:#75715e">// then throw Exception. most likely whole packet is invalid
</span><span style="color:#75715e"></span>				<span style="color:#66d9ef">throw</span> e<span style="color:#f92672">;</span>
			<span style="color:#f92672">}</span>
		<span style="color:#f92672">}</span>
	<span style="color:#f92672">}</span>
	<span style="color:#66d9ef">return</span> baos<span style="color:#f92672">.</span><span style="color:#a6e22e">toByteArray</span><span style="color:#f92672">();</span>
<span style="color:#f92672">}</span>
</code></pre></div><p>Для каждого блока (о них чуть ниже), происходит декодирование и добавление в результирующий массив. Самая интересная часть находится в обработке <code>UncorrectableException</code>. Если блок не удалось декодировать, то возвращаются только успешно декодированные данные. Но если декодированных данных нет, то <code>UncorrectableException</code> пробрасывается дальше.</p>
<p>Видимо, из-за этого как раз и возник <code>EOFException</code>. Из метода вернулось неполное количество байт, и <code>PayloadData</code> просто не смог десериализоваться.</p>
<p>С причиной всё понятно, но как же правильно исправить эту ошибку? Для этого нужно вспомнить структуру протокола Mobitex.</p>
<p><img src="/img/dstar1-telemetry/1.png" alt=""></p>
<p>Фрейм состоит из шапки и нескольких блоков данных. Каждый блок данных кодируется независимо от других. D-STAR ONE передаёт фиксированное количество блоков - 6.</p>
<p>При декодировании каждого блока происходит коррекция ошибок и проверка контрольной суммы. Этого достаточно, чтобы однозначно сказать корректные данные получены или нет. Самое важное заключается в том, что все блоки кодируются независимо. Например, обычно фрейм кодируется следующим образом: сначала идут данные, потом идёт контрольная сумма, а потом коды коррекции ошибок. Если не удалось сделать коррекцию ошибок или контрольная сумма не совпала, то весь фрейм просто отбрасывается.</p>
<p><img src="/img/dstar1-telemetry/2.jpg" alt=""></p>
<p>В Mobitex каждый блок кодируется независимо.</p>
<p><img src="/img/dstar1-telemetry/3.jpg" alt=""></p>
<p>И если один из блоков не прошёл декодирование, то его можно отбросить. При этом остальные блоки вполне можно восстановить. При этом потеряется только часть данных. Осталось понять, как правильно читать данные из такого массива.</p>
<h2 id="gapdatainputstreamhttpsgithubcomdernasherbrezonjradioblobmastersrcmainjavarur2cloudjradioutilgapdatainputstreamjava"><a href="https://github.com/dernasherbrezon/jradio/blob/master/src/main/java/ru/r2cloud/jradio/util/GapDataInputStream.java">GapDataInputStream</a></h2>
<p>Для работы с таким потоком байт обычный массив <code>byte[]</code> не подходит. Во-первых, он занимает место там, где отсутствуют данные. А во-вторых, нужно явно возвращать пустые значения, если идёт чтение из &ldquo;дырки&rdquo;. Для этого я создал структуру данных <code>GapData</code> и поток <code>GapDataInputStream</code>, который очень похож на обычный <code>DataInputStream</code>. Основная его идея достаточно проста: если идёт чтение из &ldquo;дырки&rdquo; то нужно возвращать <code>null</code>, в противном случае - число.</p>
<p><img src="/img/dstar1-telemetry/4.png" alt=""></p>
<p>В данном примере, <code>short B = null</code>, потому что один из байтов попадает в дырку. А вот <code>byte C</code> будет содержать значение. Также я сделал методы очень похожие на <code>DataInputStream</code>: <code>readUnsignedByte</code> или <code>readUnsignedShort</code>. Из-за этого миграция на новую структуру данных стала тривиальной:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">batteryChargeOut <span style="color:#f92672">=</span> dis<span style="color:#f92672">.</span><span style="color:#a6e22e">readUnsignedShort</span><span style="color:#f92672">()</span> <span style="color:#f92672">*</span> 2<span style="color:#f92672">.</span><span style="color:#a6e22e">5f</span> <span style="color:#f92672">/</span> <span style="color:#f92672">(</span>4096 <span style="color:#f92672">*</span> 20 <span style="color:#f92672">*</span> 0<span style="color:#f92672">.</span><span style="color:#a6e22e">033f</span><span style="color:#f92672">);</span>
</code></pre></div><p>Нужно заменить на:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">Integer unsignedShort <span style="color:#f92672">=</span> dis<span style="color:#f92672">.</span><span style="color:#a6e22e">readUnsignedShort</span><span style="color:#f92672">();</span>
<span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>unsignedShort <span style="color:#f92672">!=</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
	batteryChargeOut <span style="color:#f92672">=</span> unsignedShort <span style="color:#f92672">*</span> 2<span style="color:#f92672">.</span><span style="color:#a6e22e">5f</span> <span style="color:#f92672">/</span> <span style="color:#f92672">(</span>4096 <span style="color:#f92672">*</span> 20 <span style="color:#f92672">*</span> 0<span style="color:#f92672">.</span><span style="color:#a6e22e">033f</span><span style="color:#f92672">);</span>
<span style="color:#f92672">}</span>
</code></pre></div><p>При этом все внутренние поля должны измениться на объекты <code>float -&gt; Float</code>, <code>byte -&gt; Byte</code> и так далее.</p>
<h2 id="послесловие">Послесловие</h2>
<p>Судя по коду <code>CMX909bBeacon</code> я уже догадывался, что можно частично прочитать данные. Однако, я забыл добавить правильную обработку в десериализатор. Теперь же, с помощью <code>GapDataInputStream</code> я смогу получать больше ценной информации с орбиты земли.</p>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Изображения с DSLWP-B</title>
      <link>https://dernasherbrezon.com/posts/dslwp-b-images/</link>
      <pubDate>Sat, 15 Feb 2020 15:40:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/dslwp-b-images/</guid>
      <description>Недавно Дэниел и команда DSLWP выложили в общий доступ данные со спутника DSLWP-B. Эти данные включают в себя телеметрию, а также изображения Луны и Земли. Сам спутник уже был штатно разбит о Луну, поэтому больше данных с него не будет. Мне же стало интересно, как передавались изображения с лунной орбиты. Плюс, это была бы отличная возможность проверить работу моего ssdv декодера.
Для начала я скачал dslwp-data репозиторий и попытался декодировать файлы *.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Изображения с DSLWP-B</h1></header>
      		<div class='container entry-content'>
  <p><a href="https://destevez.net/2019/12/dslwp-b-whole-mission-telemetry/">Недавно</a> Дэниел и команда DSLWP выложили в общий доступ данные со спутника <a href="http://dk3wn.info/blog/satelliten/dslwp/">DSLWP-B</a>. Эти данные включают в себя телеметрию, а также <a href="http://lilacsat.hit.edu.cn/dashboard/pages_en/pics-b.html">изображения Луны и Земли</a>. Сам спутник уже был штатно разбит о Луну, поэтому больше данных с него не будет. Мне же стало интересно, как передавались изображения с лунной орбиты. Плюс, это была бы отличная возможность проверить работу моего <a href="https://github.com/dernasherbrezon/ssdv4j">ssdv</a> декодера.</p>
<p><img src="/img/dslwp-b-images/1.png" alt=""></p>
<p>Для начала я скачал <a href="https://github.com/tammojan/dslwp-data">dslwp-data</a> репозиторий и попытался декодировать файлы *.ssdv. Эти файлы уже содержат фреймы SSDV в специфичном для DSLWP протоколе. Как обычно, для экономии канала, разработчики немного изменили <a href="https://dernasherbrezon.com/posts/decoding-jy1sat/">этот протокол</a>: нет полей <code>Packet Type</code>, <code>Callsign</code> и <code>FEC</code>.</p>
<p>Я <a href="https://github.com/dernasherbrezon/jradio/blob/master/src/main/java/ru/r2cloud/jradio/dslwp/DslwpSsdvPacketSource.java">написал</a> небольшую обёртку, которая преобразует специфичные для DSLWP SSDV пакеты в стандартные. Однако, с первого раза ничего не получилось. Оказывается, для кодирования изображений использовалась цветовая субдискретизация 2х1 и она была просто сломана в ssdv4j.</p>
<p>Я переписал чудовищные циклы с хитрыми индексами:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> row <span style="color:#f92672">=</span> 0<span style="color:#f92672">;</span> row <span style="color:#f92672">&lt;</span> DataUnitDecoder<span style="color:#f92672">.</span><span style="color:#a6e22e">PIXELS_PER_DU</span><span style="color:#f92672">;</span> row<span style="color:#f92672">++)</span> <span style="color:#f92672">{</span>
	<span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> col <span style="color:#f92672">=</span> 0<span style="color:#f92672">;</span> col <span style="color:#f92672">&lt;</span> DataUnitDecoder<span style="color:#f92672">.</span><span style="color:#a6e22e">PIXELS_PER_DU</span><span style="color:#f92672">;</span> col<span style="color:#f92672">++)</span> <span style="color:#f92672">{</span>
		<span style="color:#66d9ef">int</span> cbCrSourceIndex <span style="color:#f92672">=</span> row <span style="color:#f92672">*</span> DataUnitDecoder<span style="color:#f92672">.</span><span style="color:#a6e22e">PIXELS_PER_DU</span> <span style="color:#f92672">+</span> col<span style="color:#f92672">;</span>
		<span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> subRow <span style="color:#f92672">=</span> 0<span style="color:#f92672">;</span> subRow <span style="color:#f92672">&lt;</span> yComponent<span style="color:#f92672">.</span><span style="color:#a6e22e">getMaxRows</span><span style="color:#f92672">();</span> subRow<span style="color:#f92672">++)</span> <span style="color:#f92672">{</span>
			<span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> subCol <span style="color:#f92672">=</span> 0<span style="color:#f92672">;</span> subCol <span style="color:#f92672">&lt;</span> yComponent<span style="color:#f92672">.</span><span style="color:#a6e22e">getMaxCols</span><span style="color:#f92672">();</span> subCol<span style="color:#f92672">++)</span> <span style="color:#f92672">{</span>
				<span style="color:#66d9ef">int</span> ySourceIndex <span style="color:#f92672">=</span> row <span style="color:#f92672">*</span> DataUnitDecoder<span style="color:#f92672">.</span><span style="color:#a6e22e">PIXELS_PER_DU</span> <span style="color:#f92672">*</span> yComponent<span style="color:#f92672">.</span><span style="color:#a6e22e">getMaxCols</span><span style="color:#f92672">()</span> <span style="color:#f92672">*</span> yComponent<span style="color:#f92672">.</span><span style="color:#a6e22e">getMaxRows</span><span style="color:#f92672">()</span> <span style="color:#f92672">+</span> subRow <span style="color:#f92672">*</span> DataUnitDecoder<span style="color:#f92672">.</span><span style="color:#a6e22e">PIXELS_PER_DU</span> <span style="color:#f92672">*</span> yComponent<span style="color:#f92672">.</span><span style="color:#a6e22e">getMaxCols</span><span style="color:#f92672">()</span> <span style="color:#f92672">+</span> col <span style="color:#f92672">*</span> yComponent<span style="color:#f92672">.</span><span style="color:#a6e22e">getMaxCols</span><span style="color:#f92672">()</span> <span style="color:#f92672">+</span> subCol<span style="color:#f92672">;</span>
				rgb<span style="color:#f92672">[</span>ySourceIndex<span style="color:#f92672">]</span> <span style="color:#f92672">=</span> convertToRgb<span style="color:#f92672">(</span>yComponent<span style="color:#f92672">.</span><span style="color:#a6e22e">getBuffer</span><span style="color:#f92672">()[</span>ySourceIndex<span style="color:#f92672">],</span> cbComponent<span style="color:#f92672">.</span><span style="color:#a6e22e">getBuffer</span><span style="color:#f92672">()[</span>cbCrSourceIndex<span style="color:#f92672">],</span> crComponent<span style="color:#f92672">.</span><span style="color:#a6e22e">getBuffer</span><span style="color:#f92672">()[</span>cbCrSourceIndex<span style="color:#f92672">]);</span>
			<span style="color:#f92672">}</span>
		<span style="color:#f92672">}</span>
	<span style="color:#f92672">}</span>
<span style="color:#f92672">}</span>
</code></pre></div><p>На чуть более простые:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">int</span><span style="color:#f92672">[]</span> cbCrIndexMapping <span style="color:#f92672">=</span> getSrcIndexMapping<span style="color:#f92672">(</span>yComponent<span style="color:#f92672">.</span><span style="color:#a6e22e">getSubsamplingMode</span><span style="color:#f92672">());</span>
<span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> row <span style="color:#f92672">=</span> 0<span style="color:#f92672">;</span> row <span style="color:#f92672">&lt;</span> yComponent<span style="color:#f92672">.</span><span style="color:#a6e22e">getMaxRows</span><span style="color:#f92672">()</span> <span style="color:#f92672">*</span> DataUnitDecoder<span style="color:#f92672">.</span><span style="color:#a6e22e">PIXELS_PER_DU</span><span style="color:#f92672">;</span> row<span style="color:#f92672">++)</span> <span style="color:#f92672">{</span>
	<span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> col <span style="color:#f92672">=</span> 0<span style="color:#f92672">;</span> col <span style="color:#f92672">&lt;</span> yComponent<span style="color:#f92672">.</span><span style="color:#a6e22e">getMaxCols</span><span style="color:#f92672">()</span> <span style="color:#f92672">*</span> DataUnitDecoder<span style="color:#f92672">.</span><span style="color:#a6e22e">PIXELS_PER_DU</span><span style="color:#f92672">;</span> col<span style="color:#f92672">++)</span> <span style="color:#f92672">{</span>
		<span style="color:#66d9ef">int</span> sourceIndex <span style="color:#f92672">=</span> row <span style="color:#f92672">*</span> yComponent<span style="color:#f92672">.</span><span style="color:#a6e22e">getMaxCols</span><span style="color:#f92672">()</span> <span style="color:#f92672">*</span> DataUnitDecoder<span style="color:#f92672">.</span><span style="color:#a6e22e">PIXELS_PER_DU</span> <span style="color:#f92672">+</span> col<span style="color:#f92672">;</span>
		rgb<span style="color:#f92672">[</span>sourceIndex<span style="color:#f92672">]</span> <span style="color:#f92672">=</span> convertToRgb<span style="color:#f92672">(</span>yComponent<span style="color:#f92672">.</span><span style="color:#a6e22e">getBuffer</span><span style="color:#f92672">()[</span>sourceIndex<span style="color:#f92672">],</span> cbComponent<span style="color:#f92672">.</span><span style="color:#a6e22e">getBuffer</span><span style="color:#f92672">()[</span>cbCrIndexMapping<span style="color:#f92672">[</span>sourceIndex<span style="color:#f92672">]],</span> crComponent<span style="color:#f92672">.</span><span style="color:#a6e22e">getBuffer</span><span style="color:#f92672">()[</span>cbCrIndexMapping<span style="color:#f92672">[</span>sourceIndex<span style="color:#f92672">]]);</span>
	<span style="color:#f92672">}</span>
<span style="color:#f92672">}</span>
</code></pre></div><p>Исправил несколько ошибок. И в целом, не было ничего сложного, кроме разных хитрых индексов. Единственную странность я обнаружил в спецификации SSDV. В каждом пакете есть такие поля как <code>Width</code> и <code>Height</code> измеряемые в количестве MCU. Чтобы получить высоту в пикселах, логично умножить <code>Width</code> на высоту одного MCU. Тут есть засада. В зависимости от цветовой субдискретизации высота MCU может быть как 8 пикселей (для 2x1), так и 16 (для 2x2). Поэтому для получения высоты картинки при 2x1 я просто умножал высоту на 8. Однако, это не сработало. Похоже MCU в SSDV понимается как блок пикселей 16х16. И совсем не совпадает с тем, что написано в стандарте jpeg. Сделав правильные выводы, я получил картинку:</p>
<p><img src="/img/dslwp-b-images/dslwp-137.png" alt=""></p>
<p>Если же сравнивать мой декодер с официальным, то мне нравится больше мой. Он правильнее обрабатывает пропущенные пакеты и всегда выдаёт чёрный цвет.</p>
<p><img src="/img/dslwp-b-images/compare.png" alt=""></p>
<p>После того как я обработал все существующие пакеты, удалось найти несколько хороших кадров и сделать анимацию:</p>
<p><img src="/img/dslwp-b-images/gif.gif" alt=""></p>
<p>На ней отлично видно, как спутник облетает Луну, и то, как Земля вращается на заднем плане.</p>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Кодирование jpeg</title>
      <link>https://dernasherbrezon.com/posts/jpeg-encoding/</link>
      <pubDate>Sat, 08 Feb 2020 16:04:00 +0000</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/jpeg-encoding/</guid>
      <description>Введение Для работой с jpeg файлами написано множество библиотек. Даже Java по умолчанию поддерживает чтение и запись jpeg файлов. Однако, когда требуется декодировать более сложные типы передачи jpeg, то необходимо понимать как устроен формат и какие алгоритмы используются. В этой статье я постараюсь максимально дотошно разобрать кодирование jpeg.
Типы передачи jpeg Прежде, чем разбирать кодирование цвета в jpeg, необходимо чётко разделять две вещи: кодирование цвета и передача блоков изображения.
Кодирование цвета - это набор алгоритмов для формирования, так называемых MCU, блоков пикселей 8х8 или 16х16.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Кодирование jpeg</h1></header>
      		<div class='container entry-content'>
  <h2 id="введение">Введение</h2>
<p>Для работой с jpeg файлами написано множество библиотек. Даже Java по умолчанию поддерживает <a href="https://docs.oracle.com/javase/tutorial/2d/images/loadimage.html">чтение и запись</a> jpeg файлов. Однако, когда требуется декодировать более сложные типы передачи jpeg, то необходимо понимать как устроен формат и какие алгоритмы используются. В этой статье я постараюсь максимально дотошно разобрать кодирование jpeg.</p>
<h2 id="типы-передачи-jpeg">Типы передачи jpeg</h2>
<p>Прежде, чем разбирать кодирование цвета в jpeg, необходимо чётко разделять две вещи: кодирование цвета и передача блоков изображения.</p>
<p>Кодирование цвета - это набор алгоритмов для формирования, так называемых MCU, блоков пикселей 8х8 или 16х16. Именно эти алгоритмы отвечают за сжатие изображения.</p>
<p>Передача или хранение блоков изображения бывает нескольких видов. Файл - наиболее распространённый способ. Вначале файла идёт описание таблиц квантования и всевозможная мета-информация о картинке. После этого идёт список MCU блоков jpeg.</p>
<p>Несмотря на то, что файл используется в 99.999% процентов случаев, существуют и другие способы передачи jpeg картинки. В основном они решают ту или иную проблему, которую нельзя решить с использованием стандартных файлов. <a href="https://dernasherbrezon.com/posts/decoding-meteor-m/">Continuous jpeg</a> - способ передачи &ldquo;бесконечного&rdquo; jpeg файла. Используется в метеорологических спутниках для передачи полос сканирования Земли. Так как спутник летает вокруг Земли и постоянно шлёт информацию, то и картинка получается как бы &ldquo;бесконечной&rdquo; высоты.</p>
<p><a href="https://dernasherbrezon.com/posts/decoding-jy1sat/">SSDV</a> - способ передачи jpeg файла, при котором часть пакетов может потеряться. Используется в спутниках с более узким каналом передачи данных.</p>
<p>Ниже я постараюсь описать только алгоритмы кодирования цвета в jpeg.</p>
<h2 id="кодирование-jpeg">Кодирование jpeg</h2>
<h3 id="шаг-1-преобразование-в-ycbcr">Шаг 1. Преобразование в YCbCr</h3>
<p>Изначальный RGB цвет преобразуется в YCbCr с помощью формулы:</p>
<pre><code>Y  =  0.299  * R + 0.587  * G + 0.114  * B
Cb = -0.1687 * R - 0.3313 * G + 0.5    * B + 128
Cr =  0.5    * R - 0.4187 * G - 0.0813 * B + 128
</code></pre><p>Зачем это сделано? Тут важно понять, что всё сжатие jpeg основано на восприятии цвета человеком. Задача алгоритма так уменьшить размер картинки, чтобы человек не заметил большой разницы. Тут важно &ldquo;не заметил&rdquo;. Некоторые люди вполне могут заметить, некоторые нет. Алгоритм не делает между ними различия, а работает с усредненным значением &ldquo;не заметил&rdquo;. Это значение получено эмпирически путём опроса множества людей.</p>
<p>В данном случае важно знать, что человеческий глаз более чувствителен к зелёному цвету. Так же человеческий глаз более чувствителен к контрасту, чем к оттенкам цветов. Это прежде всего связано с тем, что роговица позволяет различать предметы в темноте.</p>
<p>Зная это, можно преобразовать &ldquo;компьютерный&rdquo; формат RGB в более человеческий YCbCr. Уменьшая качество CbCr можно, не теряя в качестве восприятия, сильно уменьшить количество информации. На этом основан следующий шаг.</p>
<h3 id="шаг-2-сэмплирование">Шаг 2. Сэмплирование</h3>
<p>Компоненты Cb и Cr можно сэмплировать со значительным интервалом, тем самым уменьшая размер изображения. Этот приём называется цветовая субдискретизация (chroma subsampling). Он заключается в том, что для каждого блока Y, блоки Cb и Cr берутся с некоторым интервалом.</p>
<p><img src="/img/jpeg-encoding/1.png" alt=""></p>
<p>Например, на картинке выше, цветовая субдискретизация 4:2:0. Это значит, что для блока пикселей 2х2 Y компоненты, пикселы Cb и Cr усредняются и берутся только один раз. Jpeg поддерживает различные варианты субдискретизации: 4:1:1, 4:2:0.</p>
<p>В данном случае удалось уменьшить с 12 байт ( 3 * 4 * 1 байт ) до 6 байт (4 байт + байт + байт). То есть уменьшить размер в 2 раза!</p>
<h3 id="шаг-3">Шаг 3.</h3>
<p>Самый простой шаг - перевод цвета из интервала 0 ~ 255 в знаковый -128 ~ 127.</p>
<h3 id="шаг-4-дискретное-косинусное-преобразование">Шаг 4. Дискретное косинусное преобразование</h3>
<p>Следующие шаги позволяют уменьшить размер за счёт отфильтровывания высокочастотных деталей изображения. Этот процесс лучше понять на примере. Но для начала необходимо разбить пикселы изображения на блоки 8х8 пикселей. Немного терминологии jpeg. DU (data unit) - это блок пикселей 8х8 одного компонента. MCU (minimum coding unit) - это несколько или один DU, которые все вместе дают кусочек картинки 8х8 или 16х16 пикселей. Для примера выше, MCU выглядит следующим образом:</p>
<p><img src="/img/jpeg-encoding/2.png" alt=""></p>
<p>MCU состоит из 6 блоков DU. Каждый блок DU состоит из 8х8 пикселей.</p>
<p>После того как картинка разбита на блоки DU, идёт кодирование каждого блока. <a href="https://ru.wikipedia.org/wiki/%D0%94%D0%B8%D1%81%D0%BA%D1%80%D0%B5%D1%82%D0%BD%D0%BE%D0%B5_%D0%BA%D0%BE%D1%81%D0%B8%D0%BD%D1%83%D1%81%D0%BD%D0%BE%D0%B5_%D0%BF%D1%80%D0%B5%D0%BE%D0%B1%D1%80%D0%B0%D0%B7%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5">Дискретное косинусное преобразование</a> применяется для каждого по очереди. Эта операция преобразует матрицу чисел 8х8 в их частотное представление. Это очень похоже на <a href="https://ru.wikipedia.org/wiki/%D0%94%D0%B8%D1%81%D0%BA%D1%80%D0%B5%D1%82%D0%BD%D0%BE%D0%B5_%D0%BF%D1%80%D0%B5%D0%BE%D0%B1%D1%80%D0%B0%D0%B7%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5_%D0%A4%D1%83%D1%80%D1%8C%D0%B5">дискретное преобразование фурье</a>. У получившейся матрицы 8х8 есть одна особенность: большая энергия сосредоточена в левом верхнем углу, а наименьшая энергия в правом нижнем.</p>
<p><img src="/img/jpeg-encoding/3.png" alt=""></p>
<p>Это свойство будет использоваться далее.</p>
<h3 id="шаг-5-зиг-заг-преобразование">Шаг 5. Зиг-заг преобразование</h3>
<p>Основной целью всех этих преобразований является удаление высокочастотных компонент, которые находятся в правом нижнем углу. Но для этого необходимо представить массив так, чтобы все высокочастотные значения шли последними в массиве. Для этого используется так называемое зиг-заг преобразование. Элементы массива 8х8 берутся в зигзагообразном порядке начиная с левого верхнего угла.</p>
<p><img src="/img/jpeg-encoding/4.png" alt=""></p>
<h3 id="шаг-6-квантизация">Шаг 6. Квантизация</h3>
<p>На этом шаге как раз и удаляются высокочастотные значения. Получившуюся матрицу на прошлом шаге необходимо поэлементно разделить на таблицу квантования. Y компонент имеет свою таблицу квантования, Cb и Cr - свою. Каждая из этих таблиц получена опытным путём на основе опроса множества людей.</p>
<pre><code> 16 11 10 16 24  40  51  61

 12 12 14 19 26  58  60  55

 14 13 16 24 40  57  69  56

 14 17 22 29 51  87  80  62

 18 22 37 56 68  109 103 77

 24 35 55 64 81  104 113 92

 49 64 78 87 103 121 120 101

 72 92 95 98 112 100 103 99 
</code></pre><p>Из этой таблицы видно, что значения правого нижнего угла имеют наибольшие значения и соответствуют высокочастотным значениям DU. Если поделить соответствующие значения таблиц друг на друга и округлить к ближайшему целому, то с большой вероятностью в правом нижнем углу будут 0.</p>
<p>Например, после выполнения дискретного косинусного преобразования мы имеем таблицу:</p>
<pre><code>364 42 0 0 0 0 0 0 
 63 20 0 0 0 0 0 0 
-24  0 0 0 0 0 0 0 
  0  0 0 0 0 0 0 0 
  0  0 0 0 0 0 0 0 
  0  0 0 0 0 0 0 0 
  0  0 0 0 0 0 0 0 
  0  0 0 0 0 0 0 0
</code></pre><p>После квантования и зиг-заг преобразования получаем:</p>
<pre><code>13 2 3 -1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
</code></pre><h3 id="шаг-7-кодирование-серий">Шаг 7. Кодирование серий</h3>
<p>Первый элемент массива обладает особыми свойствами - он всегда ненулевой. Поэтому в стандарте jpeg получившийся массив разбивают на 2 части и кодируют разными способами. Первый элемент называется DC коэффициент и я дальше опишу как он кодируется. Оставшийся массив называется AC коэффициентами. Их кодируют с помощью серий. Для этого массив записывают следующим образом:</p>
<pre><code>(0,2) (0,3) (0,-1) (0,1) (EOB)
</code></pre><p>Первое число обозначает количество &ldquo;0&rdquo;, которые идут перед вторым числом. EOB (end of block) - это особое число, которое показывает, что блок закончился и дальше идут только 0. Вот ещё один пример кодирования серий:</p>
<pre><code>57,45,0,0,0,0,23,0,-30,-16,0,,,,0
</code></pre><p>Даст:</p>
<pre><code>(0,57) (0,45) (4,23) (1,-30) (0,-16) (EOB)
</code></pre><p>Зиг-заг преобразование как раз и нужно было, чтобы поместить все &ldquo;0&rdquo; в конце и заменить их на EOB.</p>
<p>Одним из условий кодирования является то, что первое число не может быть больше 0xF. Поэтому 16 и более нулей кодируются в несколько блоков. Например, <code>57 восемнадцать нулей 45</code> кодируется как:</p>
<pre><code>(0, 57) (15, 0) (2, 45)
</code></pre><h3 id="шаг-8-кодирование-хаффмана-для-ac-коэффициентов">Шаг 8. Кодирование Хаффмана для AC коэффициентов</h3>
<p>Прежде, чем переходить к кодированию Хаффмана, необходимо описать, как хранятся числа согласно стандарту jpeg. Обычно, для хранения чисел в программе используют типы данных фиксированной длины: byte, short, int. В jpeg для хранения числа используется минимальное количество бит. Это значит, что для хранения числа &ldquo;1&rdquo; используется только 1 бит. Для хранения числа &ldquo;9&rdquo; используется 4 бита - 1001. Но так, как длина числа заранее неизвестна, то необходимо также хранить его длину. В стандарте jpeg длина числа называется категорией. Вот список возможных длин и соответствующих им чисел:</p>
<table>
	<thead>
		<tr>
			<th style="text-align: center;">Значения</th>
			<th style="width: 15%">Категория</th>
			<th style="text-align: center;">Биты</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td style="text-align: center;">0</td>
			<td style="text-align: center;">0</td>
			<td style="text-align: center;">-</td>
		</tr>
		<tr>
			<td style="text-align: center;">-1,1</td>
			<td style="text-align: center;">1</td>
			<td style="text-align: center;">0,1</td>
		</tr>
		<tr>
			<td style="text-align: center;">-3,-2,2,3</td>
			<td style="text-align: center;">2</td>
			<td style="text-align: center;">00,01,10,11</td>
		</tr>
		<tr>
			<td style="text-align: center;">-7,-6,-5,-4,4,5,6,7</td>
			<td style="text-align: center;">3</td>
			<td style="text-align: center;">000,001,010,011,100,101,110,111</td>
		</tr>
		<tr>
			<td style="text-align: center;">-15,..,-8,8,..,15</td>
			<td style="text-align: center;">4</td>
			<td style="text-align: center;">0000,..,0111,1000,..,1111</td>
		</tr>
		<tr>
			<td style="text-align: center;">-31,..,-16,16,..,31</td>
			<td style="text-align: center;">5</td>
			<td style="text-align: center;">00000,..,01111,10000,..,11111</td>
		</tr>
		<tr>
			<td style="text-align: center;">-63,..,-32,32,..,63</td>
			<td style="text-align: center;">6</td>
			<td style="text-align: center;">-</td>
		</tr>
		<tr>
			<td style="text-align: center;">-127,..,-64,64,..,127</td>
			<td style="text-align: center;">7</td>
			<td style="text-align: center;">-</td>
		</tr>
		<tr>
			<td style="text-align: center;">-255,..,-128,128,..,255</td>
			<td style="text-align: center;">8</td>
			<td style="text-align: center;">-</td>
		</tr>
		<tr>
			<td style="text-align: center;">-511,..,-256,256,..,511</td>
			<td style="text-align: center;">9</td>
			<td style="text-align: center;">-</td>
		</tr>
		<tr>
			<td style="text-align: center;">-1023,..,-512,512,..,1023</td>
			<td style="text-align: center;">10</td>
			<td style="text-align: center;">-</td>
		</tr>
		<tr>
			<td style="text-align: center;">-2047,..,-1024,1024,..,2047</td>
			<td style="text-align: center;">11</td>
			<td style="text-align: center;">-</td>
		</tr>
		<tr>
			<td style="text-align: center;">-4095,..,-2048,2048,..,4095</td>
			<td style="text-align: center;">12</td>
			<td style="text-align: center;">-</td>
		</tr>
		<tr>
			<td style="text-align: center;">-8191,..,-4096,4096,..,8191</td>
			<td style="text-align: center;">13</td>
			<td style="text-align: center;">-</td>
		</tr>
		<tr>
			<td style="text-align: center;">-16383,..,-8192,8192,..,16383</td>
			<td style="text-align: center;">14</td>
			<td style="text-align: center;">-</td>
		</tr>
		<tr>
			<td style="text-align: center;">-32767,..,-16384,16384,..,32767</td>
			<td style="text-align: center;">15</td>
			<td style="text-align: center;">-</td>
		</tr>
	</tbody>
</table>
<p>Результат с прошлого шага:</p>
<pre><code>(0,2) (0,3) (0,-1) (0,1) (EOB)
</code></pre><p>Можно переписать немного в другом виде - (количество нулей, категория, число в двоичной форме):</p>
<pre><code>(0,2,10) (0,2,11) (0,1,0) (0,1,1) (EOB)
</code></pre><p>Теперь можно заметить, что первые 2 числа не могут превышать байт. Количество нулей не может быть больше 0xF, а количество категорий тоже не может быть больше 0xF. Этот первый байт и кодируется с помощью <a href="https://ru.wikipedia.org/wiki/%D0%9A%D0%BE%D0%B4_%D0%A5%D0%B0%D1%84%D1%84%D0%BC%D0%B0%D0%BD%D0%B0">кода Хаффмана</a>.</p>
<p>В основе кодов Хаффмана лежит достаточно интересная идея: а давайте наиболее часто встречаемые числа будем кодировать наименьшим количеством бит. Например, для последовательности <code>6 6 4 5 6 4</code> число &ldquo;6&rdquo; заменить на &ldquo;0&rdquo;. Тогда вместо 110 оно будет кодироваться как 0. Но этого недостаточно. Необходимо кодировать количество бит в числе. Это делается с помощью <a href="https://ru.wikipedia.org/wiki/%D0%9F%D1%80%D0%B5%D1%84%D0%B8%D0%BA%D1%81%D0%BD%D1%8B%D0%B9_%D0%BA%D0%BE%D0%B4">префиксного кодирования</a>. То есть зная префикс, можно однозначно определить значение числа. При этом редкие числа будут занимать больше бит. Более формальное описание кода Хаффмана с помощью бинарных деревьев можно почитать в <a href="https://ru.wikipedia.org/wiki/%D0%9A%D0%BE%D0%B4_%D0%A5%D0%B0%D1%84%D1%84%D0%BC%D0%B0%D0%BD%D0%B0">википедии</a>.</p>
<p>Для кодирования АС коэффициентов существует своя таблица Хаффмана. Она может быть определена в файле, либо заранее оговорена. Например, она <a href="https://www.w3.org/Graphics/JPEG/itu-t81.pdf">может выглядеть</a> так:</p>
<table>
	<thead>
		<tr>
			<th>Количество нулей / категория</th>
			<th>Длина кода</th>
			<th>Код</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td>0/0 (EOB)</td>
			<td>4</td>
			<td>1010</td>
		</tr>
		<tr>
			<td>0/1</td>
			<td>2</td>
			<td>00</td>
		</tr>
		<tr>
			<td>0/2</td>
			<td>2</td>
			<td>01</td>
		</tr>
		<tr>
			<td>0/3</td>
			<td>3</td>
			<td>100</td>
		</tr>
		<tr>
			<td>0/4</td>
			<td>4</td>
			<td>1011</td>
		</tr>
		<tr>
			<td>1/1</td>
			<td>4</td>
			<td>1100</td>
		</tr>
		<tr>
			<td>0/5</td>
			<td>5</td>
			<td>11010</td>
		</tr>		
		<tr>
			<td colspan="3">...</td>
		</tr>
		<tr>
			<td>15/10</td>
			<td>16</td>
			<td>1111111111111110</td>
		</tr>
	</tbody>
</table>
<p>Это пример таблицы Хаффмана из стандарта jpeg. Однако, никто не мешает иметь собственную таблицу для каждого файла. На этом, кстати, основаны множество программ оптимизации jpeg файлов. Вместо того чтобы использовать стандартную таблицу, эти программы считают количество наиболее частых чисел и на основе этого строят свои таблицы Хаффмана.</p>
<p>Хранение таблицы Хаффмана, тоже нетривиально. Вместо того чтобы хранить результирующую таблицу, в файле хранятся 2 таблицы: список длин и список значений. По ним <a href="https://github.com/dernasherbrezon/ssdv4j/blob/master/src/main/java/ru/r2cloud/ssdv/DataUnitDecoder.java#L347">можно построить</a> необходимые таблицы.</p>
<p>Итак, используя таблицу Хаффмана, можно закодировать первый байт следующим образом:</p>
<pre><code>(01,10) (01,11) (00,0) (00,1) (1010)
</code></pre><p>Итого:</p>
<pre><code>011001110000011010
</code></pre><h3 id="шаг-9-кодирование-хаффмана-для-dc-коэффициента">Шаг 9. Кодирование Хаффмана для DC коэффициента</h3>
<p>Коэффициент DC особенный и поэтому кодируется отдельно. Алгоритм состоит из двух этапов:</p>
<ol>
<li>вычисление разницы с предыдущим DC коэффициентом. Исследователи заметили, что последовательные блоки 8х8 обычно имеют очень похожие DC коэффициенты. Если вычесть один из другого, то разница между ними не большая и как следствие она будет занимать меньше бит при кодировании Хаффмана. Таким образом, кодируется только разница DC коэффициентов:</li>
</ol>
<pre><code>Разница = DC текущий - DC предыдущий
</code></pre><p>Если предыдущего нет, то он считается равным &ldquo;0&rdquo;.</p>
<ol start="2">
<li>На втором шаге число кодируется с помощью кодов Хаффмана. Например, &ldquo;13&rdquo; принадлежит 4ой категории: (4,1101). Для DC коэффициентов существует своя собственная таблица Хаффмана:</li>
</ol>
<table>
	<thead>
		<tr>
			<th>Категория</th>
			<th>Длина кода</th>
			<th>Код</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td>0</td>
			<td>2</td>
			<td>00</td>
		</tr>
		<tr>
			<td>1</td>
			<td>3</td>
			<td>010</td>
		</tr>
		<tr>
			<td>2</td>
			<td>3</td>
			<td>011</td>
		</tr>
		<tr>
			<td>3</td>
			<td>3</td>
			<td>100</td>
		</tr>
		<tr>
			<td>4</td>
			<td>3</td>
			<td>101</td>
		</tr>
		<tr>
			<td>5</td>
			<td>3</td>
			<td>110</td>
		</tr>
		<tr>
			<td>6</td>
			<td>4</td>
			<td>1110</td>
		</tr>
		<tr>
			<td>7</td>
			<td>5</td>
			<td>11110</td>
		</tr>
		<tr>
			<td>8</td>
			<td>6</td>
			<td>111110</td>
		</tr>
		<tr>
			<td>9</td>
			<td>7</td>
			<td>1111110</td>
		</tr>
		<tr>
			<td>10</td>
			<td>8</td>
			<td>11111110</td>
		</tr>
		<tr>
			<td>11</td>
			<td>9</td>
			<td>111111110</td>
		</tr>
	</tbody>
</table>
<p>В результате DC коэффициент &ldquo;13&rdquo; будет кодирован как (101,1101):</p>
<pre><code>1011101
</code></pre><p>И финальный результат:</p>
<pre><code>1011101 011001110000011010
</code></pre><p>Если бы кодировали &ldquo;в лоб&rdquo;, то получилось бы (8 * 8) * 8 бит = 512 бит. Однако, с помощью различных алгоритмов, их удалось сократить до 25 бит. Итого, сжатие почти в 20 раз!</p>
<p>Таким же образом кодируются все оставшиеся DU.</p>
<h2 id="декодирование-jpeg">Декодирование jpeg</h2>
<p>Чтобы декодировать jpeg, необходимо выполнить все шаги в обратном порядке.</p>
<p>Отличительной особенностью декодирования является поиск кодового слова в таблице Хаффмана. Обычно для этих целей <a href="https://github.com/dernasherbrezon/ssdv4j/blob/master/src/main/java/ru/r2cloud/ssdv/DataUnitDecoder.java#L294">создают таблицы поиска</a> со всеми возможными префиксами кодов Хаффмана. После чего, из файла читаются 2 байта и по ним ищется категория, количество нулей и пр.</p>
<h2 id="бонус">Бонус</h2>
<p>Если внимательно прочитать алгоритмы, то можно заметить, что дискретное косинусное преобразование, квантизация и конвертация из RGB в YCbCr могут давать дробные значения. А так, как цвета хранятся в целом значении, то будет происходить округление. При одноразовом декодировании из jpeg (YCbCr) в RGB это округление не будет давать заметной ошибки. Однако, при многократной конвертации из растра в jpeg и обратно, ошибка будет накапливаться и давать <a href="https://www.impulseadventure.com/photo/jpeg-color-space.html">ощутимые результаты</a>.</p>
<p>Некоторые редакторы определяют так называемое &ldquo;степень сжатия&rdquo; jpeg. Это реализуется достаточно просто: все коэффициенты матрицы квантования умножаются на некоторое число. Чем больше число, тем больше коэффициент, тем больше вероятность, что в матрице значений цветов будут нули. Это одновременно уменьшает размер изображения и ухудшает его качество.</p>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Fosdem 2020</title>
      <link>https://dernasherbrezon.com/posts/fosdem-2020/</link>
      <pubDate>Sun, 02 Feb 2020 21:50:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/fosdem-2020/</guid>
      <description>В этом году я съездил на Fosdem 2020 и выступил там с речью. Рассказал о r2cloud и отлично пообщался с многими знакомыми.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Fosdem 2020</h1></header>
      		<div class='container entry-content'>
  
<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube.com/embed/1M7Gi2bbSFg" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>

<p>В этом году я съездил на <a href="https://fosdem.org/2020/">Fosdem 2020</a> и выступил там с речью. Рассказал о <a href="https://github.com/dernasherbrezon/r2cloud">r2cloud</a> и отлично пообщался с многими знакомыми.</p>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Декодирование картинки jy1sat</title>
      <link>https://dernasherbrezon.com/posts/decoding-jy1sat/</link>
      <pubDate>Thu, 23 Jan 2020 00:20:17 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/decoding-jy1sat/</guid>
      <description>Введение Все началось с того, что я решил подчистить неиспользуемый код в jradio. Оказалось, спутники семейства funcube шлют дополнительные 200 байт в пакете. В зависимости от спутника, там могут содержаться более детальная телеметрия или просто текстовые сообщения с земли. После небольшого исследования выяснилось, что спутник jy1sat использует их, чтобы передавать картинку! Это мгновенно заинтересовало меня, и в следующие несколько недель я не смог спать, думая о том, как её декодировать.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Декодирование картинки jy1sat</h1></header>
      		<div class='container entry-content'>
  <h2 id="введение">Введение</h2>
<p>Все началось с того, что я решил подчистить неиспользуемый код в <a href="https://github.com/dernasherbrezon/jradio">jradio</a>. Оказалось, спутники семейства funcube шлют дополнительные 200 байт в пакете. В зависимости от спутника, там могут содержаться более детальная телеметрия или просто текстовые сообщения с земли. После небольшого исследования выяснилось, что спутник jy1sat использует их, чтобы передавать картинку! Это мгновенно заинтересовало меня, и в следующие несколько недель я не смог спать, думая о том, как её декодировать.</p>
<p>Дэниэл в своем блоге <a href="https://destevez.net/2019/04/decoding-ssdv-from-jy1sat/">описал</a> формат, в котором передаётся эта картинка. Этот формат основан на протоколе <a href="https://ukhas.org.uk/guides:ssdv#packet_format">ssdv</a> (Slow Scan Digital Video). Если вкратце, то формат позволяет передавать небольшие картинки с помощью пакетной передачи данных. Картинка (в jpeg формате) разбивается на небольшие кусочки, которые передаются друг за другом.</p>
<p>Структура обоих пакетов выглядит следующим образом.</p>
<h3 id="funcube-пакет">Funcube пакет</h3>
<table>
	<thead>
		<tr>
			<th style="width: 20%">Размер (байт)</th>
			<th>Описание</th>
		</tr>
	</thead>
	<tbody>
		<tr>	
			<td>2</td>
			<td>Заголовок. Содержит id спутника</td>
		</tr>
		<tr>	
			<td>54</td>
			<td>Текущая телеметрия. Различные показатели спутника в текущий момент</td>
		</tr>
		<tr>	
			<td>200</td>
			<td>Полезные данные. В случае jy1sat передаётся SSDV пакет</td>
		</tr>
	</tbody>
</table>
<h3 id="ssdv-пакет">SSDV пакет</h3>
<p>Формат SSDV хорошо описан в <a href="https://ukhas.org.uk/guides:ssdv#packet_format">официальной документации</a>.</p>
<table>
	<thead>
		<tr>
			<th style="width: 20%">Название</th>
			<th style="width: 20%">Размер (байт)</th>
			<th>Описание</th>
		</tr>
	</thead>
	<tbody>
		<tr>	
			<td>Sync Byte</td>
			<td>1</td>
			<td>Байт синхронизации. Может присутствовать для синхронизации потока бит. Непонятно зачем есть в полезных данных jy1sat. Итак, ясно, что jy1sat передаёт картинку и полезные данные уже извлечены из внешнего funcube пакета. Можно было бы сэкономить этот байт</td>
		</tr>
		<tr>	
			<td>Packet Type</td>
			<td>1</td>
			<td>Тип пакета. Используется для определения коррекции ошибок. Если 0x67, то последних 32х байт кода Рида-Соломона нет. Так как funcube пакет уже прошёл коррекцию ошибок, то слать их ещё раз, но в SSDV пакете смысла нет. Тут авторы молодцы - они не шлют их, а также не шлют контрольную сумму. Так как такого типа пакета нет, то они заполняют его значением 0x68</td>
		</tr>
		<tr>	
			<td>Callsign</td>
			<td>4</td>
			<td>Позывной в формате Base40. Опять же, полезное поле для получения SSDV пакетов напрямую с демодулятора. Однако, в данном случае ясно, что это за пакет, поэтому создатели jy1sat не отправляют это поле и экономят 4 байта.</td>
		</tr>
		<tr>	
			<td>Image ID</td>
			<td>1</td>
			<td>ID картинки. Крайне необходимое поле для того, чтобы понять, когда закончилась одна картинка и началась другая</td>
		</tr>		
		<tr>	
			<td>Packet ID</td>
			<td>2</td>
			<td>ID пакета внутри картинки. Используется для того, чтобы понять были ли потеряны пакеты. Если пакет был потерян, то можно вместо него нарисовать чёрный прямоугольник</td>
		</tr>		
		<tr>	
			<td>Width</td>
			<td>1</td>
			<td>Ширина картинки. Измеряется в количестве MCU. Один MCU в SSDV равен 16х16 пикселей. Размеры картинок заранее неизвестны, поэтому их необходимо передавать в каждом пакете</td>
		</tr>		
		<tr>	
			<td>Height</td>
			<td>1</td>
			<td>Высота картинки. Измеряется в количестве MCU</td>
		</tr>		
		<tr>	
			<td>Flags</td>
			<td>1</td>
			<td>Крайне важные флаги. Задают: качество jpeg картинки, флаг последнего пакета в картинке, цветовую субдискретизацию. Об этом более подробно ниже в разделе декодирования</td>
		</tr>
		<tr>	
			<td>MCU offset</td>
			<td>1</td>
			<td>Смещение первого MCU от начала данных. Так как MCU в jpeg может занимать разное количество байт, то некоторые байты могут не поместиться в один пакет и должны будут переехать в следующий. Однако, если один из пакетов потерян, то необходимо знать, где начинается первый MCU и какой у него индекс</td>
		</tr>
		<tr>	
			<td>MCU index</td>
			<td>2</td>
			<td>Индекс первого MCU в этом пакете в общем списке MCU всей картинки. Крайне важен, чтобы определить сколько MCU было пропущено и где начать рисовать текущий</td>
		</tr>
		<tr>	
			<td>Payload</td>
			<td>205 / 237</td>
			<td>Непосредственно данные jpeg. Закодированные последовательно MCU. В случае jy1sat размер 189 байт, так как в funcube пакете полезные данные только 200 байт</td>
		</tr>
		<tr>	
			<td>Checksum</td>
			<td>4</td>
			<td>Контрольная сумма. В jy1sat не передаётся</td>
		</tr>
		<tr>	
			<td>FEC</td>
			<td>32</td>
			<td>Коды Рида-Соломона. В jy1sat не передаётся</td>
		</tr>
	</tbody>
</table>
<p>В принципе, формат пакета достаточно простой и хорошо продуманный. Данных должно как раз хватить на то, чтобы успешно обрабатывать потерянные пакеты, и при этом не передаётся ничего лишнего.</p>
<p>Главное отличие, например, от формата <a href="https://en.wikipedia.org/wiki/Low-rate_picture_transmission">LRPT</a> - тут нет промежуточного пакета, который бы содержал фиксированное количество MCU. Однако, здесь это и не нужно, так как размер картинки известен в отличие от LRPT.</p>
<h3 id="формат-картинки">Формат картинки</h3>
<p>Картинка - это <a href="https://dernasherbrezon.com/posts/abbreviated-jpeg-java/">abbreviated jpeg</a>. Только, в отличие от классического abbreviated jpeg, здесь есть следующие особенности. Во-первых, совсем нет заголовка и всех таблиц. Для SSDV таблицы квантования и хаффмана заранее зафиксированы в протоколе. Во-вторых, первый MCU в каждом пакете должен быть выровнен по байту. Это прежде всего из-за того, что MCU offset обозначает количество байт. В-третьих, DC значение в первом MCU каждого пакета должно кодироваться относительно нуля. Это сделано опять же из-за того, что пакет может потеряться и, тогда потеряется смещение и нельзя будет восстановить данные.</p>
<p>Я взял таблицы jpeg из <a href="https://github.com/daniestevez/ssdv/blob/master/ssdv.c">одной реализации</a>. Как выяснилось, таблицы Хаффмана стандартные, поэтому я взял их <a href="https://docs.oracle.com/javase/9/docs/api/javax/imageio/plugins/jpeg/JPEGHuffmanTable.html">из Java</a>. Я был сильно удивлён, что они вот так вот объявлены в Java классах. Насколько я понял, JDK использует нативный код, чтобы декодировать/кодировать jpeg.</p>
<p><img src="/img/decoding-jy1sat/JPEGImageWriter.png" alt=""></p>
<h2 id="декодирование">Декодирование</h2>
<h3 id="склейка-пакетов">Склейка пакетов</h3>
<p>Прежде, чем декодировать MCU, необходимо склеить пакеты. Как я уже писал, часть последнего MCU в пакете, может быть перенесена в следующий. Но следующий пакет может быть потерян. Всё это нужно учитывать в алгоритме склейки. У меня он получился следующим:</p>
<ol>
<li>Получение списка SSDV пакетов.</li>
<li>Взять SSDV пакет.</li>
<li>Определение того, был ли пакет потерян. Если да, то необходимо заполнить потерянные MCU чёрным цветом.</li>
<li>Определение того, принадлежит ли текущий пакет к новой картинке. Если да, то нужно завершить текущую и, если не хватает пакетов, заполнить чёрным.</li>
<li>Считывать DU (data unit) до тех пор, пока не завершиться текущий MCU. Количество DU зависит от цветовой субдискретизации. Об этом ниже.</li>
<li>Как только завершился MCU, его можно конвертировать из YCbCr в RGB и добавлять в BufferedImage.</li>
<li>Вернуться на шаг 2.</li>
</ol>
<p>Я постарался разбить весь код декодирования на логические классы, которые соответствуют спецификации jpeg. Это очень сильно упрощает понимание процесса декодирования jpeg и его отличие от процесса склейки пакетов.</p>
<p>Прежде, чем переходить к декодированию jpeg, я хотел бы описать <a href="https://ru.wikipedia.org/wiki/%D0%A6%D0%B2%D0%B5%D1%82%D0%BE%D0%B2%D0%B0%D1%8F_%D1%81%D1%83%D0%B1%D0%B4%D0%B8%D1%81%D0%BA%D1%80%D0%B5%D1%82%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D1%8F">цветовую субдискретизацию</a> и то, как она влияет на алгоритм. <a href="https://www.impulseadventure.com/photo/jpeg-decoder.html">Вот тут</a> Calvin Hass привёл отличную картинку о том, как это всё работает:</p>
<p><img src="/img/decoding-jy1sat/sequence_2x2.gif" alt=""></p>
<p>Каждый MCU состоит из всех трёх цветов. Каждый из этих цветов образует блок DU, которые идут друг за другом. При этом, Cb и Cr компоненты на практике не сильно влияют на восприятие картинки, поэтому их можно задать разными хитрыми способами относительно Y компонента. На картинке выше для пикселей в квадрате 2x2, значения Cb и Cr усредняются и выдаётся только одно. Итого получается, что блок Y имеет 4 блока DU каждый по 8х8 пикселей, а блоки Cb и Cr имеют только 1 блок DU по 8x8 пикселей. В таком случае цветовая субдискретизация задана как 2:1 и передаётся в поле Flags пакета SSDV. Чтобы сделать из 6 блоков DU один MCU 16x16 пикселей, я написал такой код:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> row <span style="color:#f92672">=</span> 0<span style="color:#f92672">;</span> row <span style="color:#f92672">&lt;</span> DataUnitDecoder<span style="color:#f92672">.</span><span style="color:#a6e22e">PIXELS_PER_DU</span><span style="color:#f92672">;</span> row<span style="color:#f92672">++)</span> <span style="color:#f92672">{</span>
	<span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> col <span style="color:#f92672">=</span> 0<span style="color:#f92672">;</span> col <span style="color:#f92672">&lt;</span> DataUnitDecoder<span style="color:#f92672">.</span><span style="color:#a6e22e">PIXELS_PER_DU</span><span style="color:#f92672">;</span> col<span style="color:#f92672">++)</span> <span style="color:#f92672">{</span>
		<span style="color:#66d9ef">int</span> cbCrSourceIndex <span style="color:#f92672">=</span> row <span style="color:#f92672">*</span> DataUnitDecoder<span style="color:#f92672">.</span><span style="color:#a6e22e">PIXELS_PER_DU</span> <span style="color:#f92672">+</span> col<span style="color:#f92672">;</span>
		<span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> subRow <span style="color:#f92672">=</span> 0<span style="color:#f92672">;</span> subRow <span style="color:#f92672">&lt;</span> yComponent<span style="color:#f92672">.</span><span style="color:#a6e22e">getMaxRows</span><span style="color:#f92672">();</span> subRow<span style="color:#f92672">++)</span> <span style="color:#f92672">{</span>
			<span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> subCol <span style="color:#f92672">=</span> 0<span style="color:#f92672">;</span> subCol <span style="color:#f92672">&lt;</span> yComponent<span style="color:#f92672">.</span><span style="color:#a6e22e">getMaxCols</span><span style="color:#f92672">();</span> subCol<span style="color:#f92672">++)</span> <span style="color:#f92672">{</span>
				<span style="color:#66d9ef">int</span> ySourceIndex <span style="color:#f92672">=</span> row <span style="color:#f92672">*</span> DataUnitDecoder<span style="color:#f92672">.</span><span style="color:#a6e22e">PIXELS_PER_DU</span> <span style="color:#f92672">*</span> yComponent<span style="color:#f92672">.</span><span style="color:#a6e22e">getMaxCols</span><span style="color:#f92672">()</span> <span style="color:#f92672">*</span> yComponent<span style="color:#f92672">.</span><span style="color:#a6e22e">getMaxRows</span><span style="color:#f92672">()</span> <span style="color:#f92672">+</span> subRow <span style="color:#f92672">*</span> DataUnitDecoder<span style="color:#f92672">.</span><span style="color:#a6e22e">PIXELS_PER_DU</span> <span style="color:#f92672">*</span> yComponent<span style="color:#f92672">.</span><span style="color:#a6e22e">getMaxCols</span><span style="color:#f92672">()</span> <span style="color:#f92672">+</span> col <span style="color:#f92672">*</span> yComponent<span style="color:#f92672">.</span><span style="color:#a6e22e">getMaxCols</span><span style="color:#f92672">()</span> <span style="color:#f92672">+</span> subCol<span style="color:#f92672">;</span>
				rgb<span style="color:#f92672">[</span>ySourceIndex<span style="color:#f92672">]</span> <span style="color:#f92672">=</span> convertToRgb<span style="color:#f92672">(</span>yComponent<span style="color:#f92672">.</span><span style="color:#a6e22e">getBuffer</span><span style="color:#f92672">()[</span>ySourceIndex<span style="color:#f92672">],</span> cbComponent<span style="color:#f92672">.</span><span style="color:#a6e22e">getBuffer</span><span style="color:#f92672">()[</span>cbCrSourceIndex<span style="color:#f92672">],</span> crComponent<span style="color:#f92672">.</span><span style="color:#a6e22e">getBuffer</span><span style="color:#f92672">()[</span>cbCrSourceIndex<span style="color:#f92672">]);</span>
			<span style="color:#f92672">}</span>
		<span style="color:#f92672">}</span>
	<span style="color:#f92672">}</span>
<span style="color:#f92672">}</span>
</code></pre></div><p>В данном примере <code>rgb[ySourceIndex]</code> - это массив 16x16 с RGB пикселами. Хорошая, кстати, алгоритмическая задачка для собеседования.</p>
<h3 id="декодирование-jpeg">Декодирование jpeg</h3>
<p>Тут никаких особенностей нет. Чтобы получить DU, необходимо:</p>
<ul>
<li>прочитать DC коэффициент</li>
<li>потом AC коэффициенты</li>
<li>выполнить zigzag преобразование</li>
<li>умножить на таблицу квантования</li>
<li>выполнить обратное дискретное косинусное преобразование</li>
</ul>
<p>Единственное, что стоит учитывать, так это то, что данных может не хватить из-за окончания пакета. Поэтому не полностью прочитанный DU необходимо прочитать ещё раз, когда новые данные будут доступны после склейки пакетов.</p>
<h2 id="результат">Результат</h2>
<p>Пару дней на обдумывание и реализацию, и вот код готов. Можно взять тестовые данные и попробовать получить картинку.</p>
<p><img src="/img/decoding-jy1sat/1.jpg" alt=""></p>
<p>Что-то пошло не так. Явно видно, что проблемы в склейке пакетов и в том, как цвета определяются. Я попробовал убрать Cb и Cr каналы, чтобы лучше увидеть ошибку.</p>
<p><img src="/img/decoding-jy1sat/2.jpg" alt=""></p>
<p>Первый пакет потерян, и я хорошо обрабатываю эту ситуацию. Начало картинки чёрное. Потом идёт блок и какой-то белый блок. Явно проблема в склейке пакетов. Я попробовал дебажить и нашёл ошибку в том, как выравнивается по байту первый MCU.</p>
<p><img src="/img/decoding-jy1sat/3.jpg" alt=""></p>
<p>Далее, методом пристального вглядывания, я обнаружил, что предыдущие DC значения для каждого из компонент должны быть свои. У меня же было одно значение на все Y, Cb, Cr.</p>
<p><img src="/img/decoding-jy1sat/4.jpg" alt=""></p>
<p>Чёрт. Эта картинка из космоса, но не космоса. Тем не менее Y канал выглядит вполне сносно и можно добавить цвета.</p>
<p><img src="/img/decoding-jy1sat/5.jpg" alt=""></p>
<p>Выглядит офигенно! Ещё бы не эти артефакты.</p>
<p><img src="/img/decoding-jy1sat/5-5.jpg" alt=""></p>
<p>Это явно проблема декодировщика. Y канал выглядел сносно, но что, если взглянуть только на Cb и Cr.</p>
<p><img src="/img/decoding-jy1sat/6.jpg" alt=""></p>
<p>Здесь артефакты выглядят отчётливее. Если увеличить, то они выглядят так.</p>
<p><img src="/img/decoding-jy1sat/6-6.jpg" alt=""></p>
<p>Соседние MCU закрашены равномерно. В то время, как проблемные MCU имеют странные коэффициенты сверху и снизу.</p>
<h3 id="прошла-неделя">Прошла неделя</h3>
<p>Всю неделю я пытался понять и отдебажить код. С одной стороны, если бы проблема была в склейке пакетов, то падали бы ошибки как раньше. Но их нет. Это значит, что склейка работает и биты правильно поступают в DU. С другой стороны, если бы проблема была в DC коэффициентах, то картинка бы выглядела совсем плохо. Но Y канал выглядел более или менее. Значит DC коэффициенты не при чём. Оставались AC коэффициенты, но там не чему было ломаться.</p>
<p>Так я и ходил кругами, пока не решил запустить программу <a href="https://www.impulseadventure.com/photo/jpeg-snoop.html">jpegsnoop</a> из под Windows виртуалки. В этой программе я открыл файл, который получил с помощью <a href="https://github.com/daniestevez/ssdv">другой реализации</a> SSDV. И включил максимально подробный вывод декодирования.</p>
<p>Спустя какой-то час я нашёл в чём была причина. Дело в том, что я взял таблицу квантования &ldquo;как есть&rdquo;. Однако, коэффициенты в этой таблице были записаны в zigzag порядке! Достаточно было изменить:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> 0<span style="color:#f92672">;</span> i <span style="color:#f92672">&lt;</span> zigzagDct<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span><span style="color:#f92672">;</span> i<span style="color:#f92672">++)</span> <span style="color:#f92672">{</span>
	dct<span style="color:#f92672">[</span>i<span style="color:#f92672">]</span> <span style="color:#f92672">=</span> zigzagDct<span style="color:#f92672">[</span>ZIGZAG_INDEXES<span style="color:#f92672">[</span>i<span style="color:#f92672">]]</span> <span style="color:#f92672">*</span> getDqt<span style="color:#f92672">(</span>isYComponent<span style="color:#f92672">)[</span>i<span style="color:#f92672">];</span>
<span style="color:#f92672">}</span>
</code></pre></div><p>На</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> 0<span style="color:#f92672">;</span> i <span style="color:#f92672">&lt;</span> zigzagDct<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span><span style="color:#f92672">;</span> i<span style="color:#f92672">++)</span> <span style="color:#f92672">{</span>
	dct<span style="color:#f92672">[</span>i<span style="color:#f92672">]</span> <span style="color:#f92672">=</span> zigzagDct<span style="color:#f92672">[</span>ZIGZAG_INDEXES<span style="color:#f92672">[</span>i<span style="color:#f92672">]]</span> <span style="color:#f92672">*</span> getDqt<span style="color:#f92672">(</span>isYComponent<span style="color:#f92672">)[</span>ZIGZAG_INDEXES<span style="color:#f92672">[</span>i<span style="color:#f92672">]];</span>
<span style="color:#f92672">}</span>
</code></pre></div><p>И получить финальный результат.</p>
<h2 id="финальный-результат">Финальный Результат</h2>
<p><img src="/img/decoding-jy1sat/7.jpg" alt=""></p>
<h2 id="послесловие">Послесловие</h2>
<p>Жаль, что из космоса я получил вполне земную картинку. Тем не менее, декодер полезен не только для того, чтобы декодировать jy1sat. Оказывается, около-лунный DSLWP-B тоже передавал в формате SSDV! А это значит, что мой декодер можно использовать, чтобы получить настоящие фотографии с орбиты луны. Как например эту.</p>
<p><img src="/img/decoding-jy1sat/image-of-moon-and-earth-taken-by-lo94-dslwp-b-credit-cees-bassa-2018-10-14.jpg" alt=""></p>
<p>Декодеры SSDV <a href="https://github.com/daniestevez/ssdv">уже есть</a>. Однако, я считаю, что <a href="https://github.com/dernasherbrezon/ssdv4j">мой</a> лучше по нескольким причинам:</p>
<ol>
<li>Понятный код. Вместо простыни на 1600 строчек, мой декодер разбит на логические классы и содержит комментарии. Это очень важно для того, чтобы можно было вносить изменения и фиксить баги.</li>
<li>В нём нет специфики пакетов спутников. Вместо этого, можно конвертировать пакеты спутников в стандартные SSDV пакеты и обработать их стандартным способом.</li>
<li>Он написан на Java под лицензией Apache 2.0. А это значит, что его можно использовать в <a href="https://github.com/dernasherbrezon/r2cloud">моём проекте r2cloud</a> или встраивать в закрытые коммерческие решения.</li>
<li>Он позволяет получить количество декодированных MCU. По этой метрике можно оценивать качество принятого сигнала.</li>
<li>Он позволяет сохранять картинку в любом другом формате, а не только в jpeg. Например, можно сохранить в png с альфа каналом и вместо пропущенных кусков сделать прозрачные области.</li>
</ol>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Abbreviated jpeg в Java</title>
      <link>https://dernasherbrezon.com/posts/abbreviated-jpeg-java/</link>
      <pubDate>Thu, 09 Jan 2020 21:11:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/abbreviated-jpeg-java/</guid>
      <description>Я думаю все, кто хоть раз запускал компьютер, знают, что такое jpeg. Этот стандарт появился в далёком 1991 году и с тех пор оброс различными расширениями и дополнительными возможностями. Для обычных пользователей все эти изменения не видны. Вы просто кликаете по файлу и видите красивую картинку. Для 99% разработчиков jpeg также представляет собой чёрный ящик. Максимум, с чем может столкнуться среднестатистический разработчик - это оптимизировать размер картинок с помощью jpegtran или сконвертировать один формат в другой с помощью ImageIO.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Abbreviated jpeg в Java</h1></header>
      		<div class='container entry-content'>
  <p>Я думаю все, кто хоть раз запускал компьютер, знают, что такое jpeg. Этот стандарт появился в далёком 1991 году и с тех пор оброс различными расширениями и дополнительными возможностями. Для обычных пользователей все эти изменения не видны. Вы просто кликаете по файлу и видите красивую картинку. Для 99% разработчиков jpeg также представляет собой чёрный ящик. Максимум, с чем может столкнуться среднестатистический разработчик - это оптимизировать размер картинок с помощью <a href="https://linux.die.net/man/1/jpegtran">jpegtran</a> или сконвертировать один формат в другой с помощью <a href="https://docs.oracle.com/javase/tutorial/2d/images/loadimage.html">ImageIO</a>.</p>
<p>Всё становится значительно сложнее, когда нужно получить картинку со спутника. Понятное дело, никто не будет придумывать совершенно новый способ кодирования картинок, только для того, чтобы передать фотографию. Но и обычные файлы для этого не подходят. Это, прежде всего, связно с шириной канала и возможными потерями сигнала.</p>
<p>Одним из способов передачи/хранения картинки является &ldquo;Abbreviated image&rdquo;. Однако, прежде, чем пытаться понять, что это такое, необходимо вспомнить формат хранения jpeg в обычном файле.</p>
<h2 id="обычный-файл">Обычный файл</h2>
<p>Если вкратце, то данные в jpeg файле хранятся с использованием маркеров. Маркер - это специальные 2 байта, которые идентифицируют тип блока и данные в нём. Например, структура обычного jpeg файла может быть следующая:</p>
<p><img src="/img/abbreviated-jpeg-java/sampleJpegStructure.jpg" alt=""></p>
<p>В данном примере, SOI - это маркер начала изображения, DQT - это маркер начала таблицы квантования, SOS - это маркер начала сканирования. Он содержит небольшую метаинформацию и непосредственно данные изображения. EOI - это маркер конца изображения.</p>
<p>В стандарте описано большое количество различных маркеров и их данных. Здесь наиболее интересные блоки - это таблицы квантования и таблицы кодирования хаффмана. В спецификации jpeg описаны рекомендованные значения для этих таблиц. Однако, ничто не мешает в каждом файле иметь свои собственные таблицы. Например, можно подобрать более оптимальные таблицы в зависимости от количества цветов в данном изображении.</p>
<h2 id="abbreviated-jpeg">Abbreviated jpeg</h2>
<p>Идея Abbreviated jpeg достаточно простая: выкинуть все таблицы из файла и хранить только данные изображения.</p>
<p><img src="/img/abbreviated-jpeg-java/abbreviatedJpeg.jpeg" alt=""></p>
<p>При этом, чтобы декодировать и показать изображение из этих файлов, необходимо заранее договориться о значениях в таблицах и других заголовках.</p>
<p>У такого способа хранения есть как свои достоинства, так и недостатки.</p>
<p>К достоинствам прежде всего следует отнести то, что размер файла чуть меньше. Также такие файлы устойчивы к повреждениям. Если отсутствует кусок файла или он повреждён, то достаточно найти следующий маркер RST и продолжить декодирование.</p>
<p>Недостатков также несколько. Во-первых, необходимо заранее договориться о параметрах файла. Это значит, что такой способ не подходит для web. Производители web браузеров совершенно точно не будут кодировать всевозможные таблицы для всех возможных комбинаций файлов. Во-вторых, современные каналы связи и диски достаточно большие, чтобы экономить на размере таблиц.</p>
<p>Несмотря на это, такой способ хранения и передачи изображений jpeg используется в узкоспециализированных системах. Например, формат <a href="https://ukhas.org.uk/guides:ssdv#packet_format">ssdv</a> использует Abbreviated image.</p>
<h3 id="поддержка-в-java">Поддержка в Java</h3>
<p>Я был сильно удивлён, когда узнал что поддержка такого экзотичного типа хранения jpeg файла поддерживается в java. В <a href="https://docs.oracle.com/en/java/javase/13/docs/api/java.desktop/javax/imageio/metadata/doc-files/jpeg_metadata.html">официальной документации</a> очень детально описано, что происходит при вызове различных методов API. К сожалению, за целый день пристального вглядывания в документацию, я так и не понял как же работать с таким форматом. Лишь на следующий день я решил бросить это дело и просто почитать исходники. Их оказалось, на удивление, не так много, и дело сдвинулось с мёртвой точки.</p>
<p>Итак, для того, чтобы прочитать такой файл нужно сделать 2 вещи. Во-первых, необходимо задать таблицы, о которых заранее договорились поставщик и получатель.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">JPEGImageReadParam param <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> JPEGImageReadParam<span style="color:#f92672">();</span>
param<span style="color:#f92672">.</span><span style="color:#a6e22e">setDecodeTables</span><span style="color:#f92672">(</span>qTables<span style="color:#f92672">,</span> DCHuffmanTables<span style="color:#f92672">,</span> ACHuffmanTables<span style="color:#f92672">);</span>
</code></pre></div><p>Во-вторых, необходимо передать эти параметры при чтении из файла:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">ImageReader jpgReader <span style="color:#f92672">=</span> ImageIO<span style="color:#f92672">.</span><span style="color:#a6e22e">getImageReadersByFormatName</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;jpg&#34;</span><span style="color:#f92672">).</span><span style="color:#a6e22e">next</span><span style="color:#f92672">();</span>
jpgReader<span style="color:#f92672">.</span><span style="color:#a6e22e">setInput</span><span style="color:#f92672">(</span><span style="color:#66d9ef">new</span> FileImageInputStream<span style="color:#f92672">(</span><span style="color:#66d9ef">new</span> File<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;test.jpeg&#34;</span><span style="color:#f92672">)));</span>
BufferedImage image  <span style="color:#f92672">=</span> jpgReader<span style="color:#f92672">.</span><span style="color:#a6e22e">read</span><span style="color:#f92672">(</span>0<span style="color:#f92672">,</span> param<span style="color:#f92672">);</span>
</code></pre></div><p>В результате <code>BufferedImage</code> будет содержать вполне обычное изображение, которое можно сохранить или преобразовать далее.</p>
<p>Несмотря на всё это, API есть куда расти. Например, в <code>JPEGImageReadParam</code> нельзя задать subsampling mode и <code>ColorSpace</code>. А это значит, что они должны быть в самом Abbreviated image. Это в свою очередь сводит на нет, устойчивость к повреждениям файла.</p>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Настройка проекта на Си</title>
      <link>https://dernasherbrezon.com/posts/setting-up-c/</link>
      <pubDate>Tue, 24 Dec 2019 18:29:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/setting-up-c/</guid>
      <description>У меня есть небольшой проект на Си, который позволяет сделать приватный apt репозиторий в облачном хранилище Selectel - apt-transport-swift. Почему именно на Си? Во-первых, я думал, что знаю Си. Во-вторых, в моём представлении все системные утилиты для массового пользования должны быть написаны на низкоуровневом языке. Это значит, что для запуска приложения у меня должны быть минимальное количество зависимостей и минимальное потребление памяти. Ведь я не знаю на каком железе будет запущена моя программа.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Настройка проекта на Си</h1></header>
      		<div class='container entry-content'>
  <p>У меня есть небольшой проект на Си, который позволяет сделать приватный apt репозиторий в облачном хранилище Selectel - <a href="https://github.com/dernasherbrezon/apt-transport-swift">apt-transport-swift</a>. Почему именно на Си? Во-первых, я думал, что знаю Си. Во-вторых, в моём представлении все системные утилиты для массового пользования должны быть написаны на низкоуровневом языке. Это значит, что для запуска приложения у меня должны быть минимальное количество зависимостей и минимальное потребление памяти. Ведь я не знаю на каком железе будет запущена моя программа. Однако, с Си есть некоторые проблемы - это очень старый язык, в котором есть много устаревших конструкций и подходов. Я потратил почти неделю на то, чтобы настроить всевозможные утилиты для улучшения качества проекта. Ниже, я хочу поделиться своими результатами.</p>
<h2 id="система-контроля-версий">Система контроля версий</h2>
<p>Git. Использовать какую-либо другую систему контроля версий в 2019 году было бы крайне эксцентрично. Я выбрал <a href="https://github.com/dernasherbrezon/apt-transport-swift">github</a>, так как там хранятся все мои проекты.</p>
<h2 id="сборка">Сборка</h2>
<p><a href="https://cmake.org">cmake</a>. Мне необходимо будет собирать тесты, считать code coverage и пр. Обычный make был бы слишком простым. Какие-то специальные сборочные системы, например Eclipse CDT, слишком привязаны к IDE и запускать их, например в launchpad, невозможно. С помощью cmake я мог бы собирать проект в Ubuntu и в MacOS.</p>
<h2 id="continuous-integration">Continuous integration</h2>
<p><a href="https://travis-ci.org/dernasherbrezon/apt-transport-swift">travis-ci</a>. Прежде всего, он бесплатный и хорошо интегрирован с github. Я его использую в нескольких проектах, и он вполне подходит для моих нужд.</p>
<p><img src="/img/setting-up-c/1.png" alt=""></p>
<h2 id="continuous-deployment">Continuous deployment</h2>
<p><a href="https://launchpad.net/~rodionovamp/+archive/ubuntu/apt-transport-swift">Launchpad</a>. Не является классическим сервисом/приложением для continuous deployment. Тем не менее предоставляет в какой-то мере deployment. Например, он может автоматически собрать исходники под разные версии Ubuntu, под разные архитектуры и задеплоить в <a href="https://help.ubuntu.ru/wiki/ppa">PPA</a>. Сам по себе, Launchpad - это мир в себе. Я постараюсь написать отдельную статью, как собрать проект под него и какие особенности при этом могут возникнуть.</p>
<p><img src="/img/setting-up-c/2.png" alt=""></p>
<h2 id="тесты">Тесты</h2>
<p><a href="https://github.com/libcheck/check">libcheck</a>. Для начала нужно отметить, что тесты для программы на Си существенно отличаются от тестов для таких языков как Java, Python, Ruby. Дело в том, что каждый тест нужно оборачивать в отдельную программу. Это нужно прежде всего, чтобы отловить memory access violation - наиболее частый тип ошибок. При таких ошибках программа обычно падает в coredump. Если тесты будут запускаться в рамках одного приложения, то ошибка в одном тесте будет валить все оставшиеся тесты. Это не очень хорошо, поэтому разработчики придумали делать fork тестов. Вообще с библиотеками для тестирования в мире Си всё достаточно сложно. Например, многие пытаются тестировать код embedded приложений, в которых очень важен размер программы и скорость, поэтому для каждого случая люди придумывают свою библиотеку тестирования. Иногда доходит <a href="http://www.jera.com/techinfo/jtns/jtn002.html">до абсурда</a>.</p>
<p>Отдельной головной болью является подключение этих библиотек. Дело в том, что в cmake модули и пакеты появились сравнительно недавно. И, видимо, чтобы не нарушить обратную совместимость, их поддержка выглядит очень специфической. Например, рекомендуемое подключение libcheck:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-cmake" data-lang="cmake">find_package(<span style="color:#e6db74">check</span> <span style="color:#e6db74">&lt;check_version</span> <span style="color:#e6db74">if</span> <span style="color:#e6db74">wanted&gt;</span> <span style="color:#e6db74">REQUIRED</span> <span style="color:#e6db74">CONFIG</span>)<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>target_link_libraries(<span style="color:#e6db74">myproj.test</span> <span style="color:#e6db74">Check::check</span>)<span style="color:#960050;background-color:#1e0010">
</span></code></pre></div><p>Со стороны выглядит компактно и просто. Однако, на практике тут прям совсем много проблем. Самая основная - эта конструкция работает только в <code>libcheck &gt;= 0.13.x</code>. При этом в последней LTS Ubuntu libcheck версии 0.10.x. А это значит:</p>
<ul>
<li>нужно писать простыню <a href="https://github.com/dernasherbrezon/apt-transport-swift/blob/master/cmake/FindCheck.cmake">FindCheck.cmake</a>, в которой <a href="https://github.com/libcheck/check/issues/236">есть ошибка</a>.</li>
<li>не забыть обновить на более правильный способ подключения в следующей версии Ubuntu.</li>
</ul>
<h2 id="тесты-памяти">Тесты памяти</h2>
<p><a href="https://valgrind.org">valgrind</a>. Не секрет, что написать абсолютно корректную программу на Си или C++ практически нереально. Это прежде всего связано с моделью управления памяти. Очень просто выделить объект и забыть его удалить в нужный момент. В современных языках программирования обычно вводят garbage collector, который следит за выделением памяти и удаляет неиспользуемые объекты. Однако, в Си это необходимо делать самому и на помощь приходит вполне стандартный инструмент - valgrind. Единственное, над чем мне пришлось попотеть - это добавить его в continuous integration и сделать так, чтобы всё падало, если есть утечка памяти. Я запускаю его следующим образом:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">set +e 

EXIT_CODE<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>
<span style="color:#66d9ef">for</span> file in test_*; <span style="color:#66d9ef">do</span>
	<span style="color:#f92672">[[</span> <span style="color:#e6db74">${</span>file<span style="color:#e6db74">}</span> <span style="color:#f92672">==</span> *.dSYM <span style="color:#f92672">]]</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#66d9ef">continue</span>
	valgrind -v --error-exitcode<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span> -q --tool<span style="color:#f92672">=</span>memcheck --leak-check<span style="color:#f92672">=</span>yes --show-reachable<span style="color:#f92672">=</span>yes ./<span style="color:#e6db74">${</span>file<span style="color:#e6db74">}</span>
	CURRENT_EXIT_CODE<span style="color:#f92672">=</span>$?
	<span style="color:#66d9ef">if</span> <span style="color:#f92672">[</span> <span style="color:#e6db74">${</span>CURRENT_EXIT_CODE<span style="color:#e6db74">}</span> !<span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">]</span>; <span style="color:#66d9ef">then</span>
		EXIT_CODE<span style="color:#f92672">=</span><span style="color:#e6db74">${</span>CURRENT_EXIT_CODE<span style="color:#e6db74">}</span> 
	<span style="color:#66d9ef">fi</span>  
<span style="color:#66d9ef">done</span>

exit <span style="color:#e6db74">${</span>EXIT_CODE<span style="color:#e6db74">}</span>
</code></pre></div><p>В этом скрипте, для каждого теста выполняется анализ памяти, и, если статус не равен 0, скрипт возвращает ненулевой результат. Если travis получает ненулевой результат, то он завершает <a href="https://github.com/dernasherbrezon/apt-transport-swift/blob/master/build_debug.sh">билд с ошибкой</a>. Псевдокод выглядит как-то так:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml"><span style="color:#f92672">script</span>:
  - <span style="color:#ae81ff">set -e</span>
  - <span style="color:#ae81ff">./run_tests.sh</span>
</code></pre></div><h2 id="code-coverage">Code coverage</h2>
<p><a href="https://ru.wikipedia.org/wiki/Gcov">gcov</a>. Многие думают, что считать покрытие тестами кода - это какой-то фетишизм педантов-максималистов. На самом деле, он прежде всего помогает найти неиспользуемый код, который можно удалить. И только во-вторую очередь позволяет понять насколько хорошо тесты написаны. Достигнуть 100% покрытия почти нереально, да и это зачастую не нужно. Многие сервисы, например sonarcloud, вполне это понимают и устанавливают границу в 80%. Судя по моему опыту, эта граница примерно соответствует тестам, которые проверяют успешное выполнение логики программы. Остальные 20% - это всевозможная обработка сложных граничных и многопоточных случаев.</p>
<p><img src="/img/setting-up-c/3.png" alt=""></p>
<p>Настройка gcov для связки travis и cmake выглядит нетривиально и многие в интернетах советуют переусложненные конфигурации. Мне же удалось сделать это проще.</p>
<p>Подключение debug информации:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-cmake" data-lang="cmake">if(<span style="color:#e6db74">CMAKE_BUILD_TYPE</span> <span style="color:#e6db74">MATCHES</span> <span style="color:#e6db74">Debug</span>)<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>	set(<span style="color:#e6db74">CMAKE_C_FLAGS</span> <span style="color:#e6db74">&#34;${CMAKE_C_FLAGS} -fprofile-arcs -ftest-coverage&#34;</span>)<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>endif()<span style="color:#960050;background-color:#1e0010">
</span></code></pre></div><p>Вызов gcov для каждого объекта:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-cmake" data-lang="cmake">if(<span style="color:#e6db74">CMAKE_BUILD_TYPE</span> <span style="color:#e6db74">MATCHES</span> <span style="color:#e6db74">Debug</span>)<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>	add_custom_target(<span style="color:#e6db74">&#34;coverage&#34;</span>)<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>	add_custom_command(<span style="color:#e6db74">TARGET</span> <span style="color:#e6db74">&#34;coverage&#34;</span> <span style="color:#e6db74">COMMAND</span> <span style="color:#e6db74">gcov</span> <span style="color:#f92672">${</span>CMAKE_BINARY_DIR<span style="color:#f92672">}</span><span style="color:#e6db74">/CMakeFiles/swiftlib.dir/src/*.c.o</span>)<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>endif()<span style="color:#960050;background-color:#1e0010">
</span></code></pre></div><p>При этом swiftlib содержит все объекты проекта за исключением main.c. Этот файл, в идеале, должен лишь содержать главный цикл или минимальный метод main:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">void</span>) {
    swift_start_main_loop();
}
</code></pre></div><h2 id="анализ-кода">Анализ кода</h2>
<p><a href="https://sonarcloud.io/organizations/dernasherbrezon-github/projects">sonarcloud</a>. Он поддерживает множество языков, в том числе Си, Java, Javascript, и я использую его во всех своих проектах. Удобно и бесплатно.</p>
<p><img src="/img/setting-up-c/4.png" alt=""></p>
<h2 id="выводы">Выводы.</h2>
<p>Мир Си странен и многообразен. Почти все инструменты, которые просто и быстро подключаются в современных языках программирования, здесь требуют доработки напильником. Однако, если есть желание разобраться с экосистемой, то всё возможно. После того как я всё настроил, стало хорошо видно, где стоит поработать. Например, я думал, что покрытие тестами в моём проекте примерно 60%. Однако, в реальности оно оказалось где-то 40%. Статический анализатор sonarcloud нашёл много серьёзных багов, связанных с памятью. Уже сейчас можно сказать, что время, потраченное на настройку, окупилось и принесло пользу.</p>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Сравнение JSP и VueJS</title>
      <link>https://dernasherbrezon.com/posts/compare-jsp-vuejs/</link>
      <pubDate>Sun, 15 Dec 2019 07:14:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/compare-jsp-vuejs/</guid>
      <description>Споры о том, насколько SPA лучше или хуже проверенных серверных технологий, не утихают до сих пор. Сторонники SPA (React, Angular, VueJS) в один голос говорят насколько это просто и удобно. Сторонники серверных технологий (PHP, JSP, ASP) ничего не говорят, потому что их мало и они заняты разработкой. Из-за того, что оба подхода достаточно разные, то и сравнивать их очень сложно. Зачастую сравнение сваливается во вкусовщину, так как нет людей, которые бы разрабатывали как с помощью одних, так и с помощью других.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Сравнение JSP и VueJS</h1></header>
      		<div class='container entry-content'>
  <p>Споры о том, насколько SPA лучше или хуже проверенных серверных технологий, не утихают до сих пор. Сторонники SPA (React, Angular, VueJS) в один голос говорят насколько это просто и удобно. Сторонники серверных технологий (PHP, JSP, ASP) ничего не говорят, потому что их мало и они заняты разработкой. Из-за того, что оба подхода достаточно разные, то и сравнивать их очень сложно. Зачастую сравнение сваливается во вкусовщину, так как нет людей, которые бы разрабатывали как с помощью одних, так и с помощью других. И даже если такие уникумы находятся, никто в здравом уме не будет реализовывать сложную функциональность одновременно и на той, и на другой технологии. Кроме меня.</p>
<blockquote>
<p>TL;TR Я смог разработать такой компонент без каких-либо сложностей.</p>
</blockquote>
<p><img src="/img/compare-jsp-vuejs/2.png" alt=""></p>
<h2 id="начало">Начало</h2>
<p>Так получилось, что <a href="https://r2server.ru">r2server</a> написан с помощью <a href="https://ru.wikipedia.org/wiki/JavaServer_Pages">JSP</a>, а <a href="https://github.com/dernasherbrezon/r2cloud-ui">r2cloud-ui</a> с помощью <a href="https://vuejs.org">VueJS</a>. И вот мне понадобилось реализовать компонент по отображению <a href="https://swagger.io/docs/specification/about/">OpenAPI</a> в обоих проектах. В этот момент возникла уникальная ситуация:</p>
<ul>
<li>Нужно реализовать абсолютно одинаковый компонент как в r2cloud-ui, так и в r2server.</li>
<li>У него должен быть один и тот же дизайн - <a href="https://getbootstrap.com">bootstrap4</a>. Несмотря на то, что приложения разные, я решил сделать максимально похожий user experience. Это удобно по нескольким причинам: во-первых, достаточно знать один набор компонент, во-вторых, пользователи, вполне очевидно, будут использовать и то, и другое приложение.</li>
</ul>
<h2 id="требования">Требования</h2>
<p><img src="/img/compare-jsp-vuejs/3.png" alt=""></p>
<p>Прежде, чем начать сравнивать фреймворки, я хотел бы описать требования:</p>
<ul>
<li>компонент должен быть не зависимым от приложения. Это прежде всего значит, что его можно встраивать не только в моё приложение, но и в любое другое.</li>
<li>он должен отображать описание OpenAPI с помощью bootstrap4. Это описание должно быть максимально похожим на стандартный <a href="https://petstore.swagger.io">swagger-ui</a>.</li>
<li>(опционально) 80% покрытия тестами.</li>
</ul>
<p>После того как были определены требования, я без проблем написал необходимый код. Результаты моих ощущений ниже.</p>
<h2 id="простота-старта">Простота старта</h2>
<p><span style="color: green;">JSP</span> vs <span style="color: red;">VueJS</span></p>
<p>Для JSP начало работы достаточно простое:</p>
<ul>
<li>создать стандартный maven проект</li>
<li>положить описание в <code>/META-INF/tags</code></li>
</ul>
<p>Однако, для VueJS старт очень запутанный. Я открыл <a href="https://ru.vuejs.org/v2/cookbook/packaging-sfc-for-npm.html">официальный гид</a> по созданию компонентов и увидел, что там рекомендуется начать с конфигурации <a href="https://rollupjs.org/guide/en/">rollup</a>. Несмотря на то, что стандартом индустрии является <a href="https://webpack.js.org">webpack</a>, я не нашёл упоминания о нём в документации. rollup действительно позволяет быстро начать разрабатывать компонент, но как только захочется посмотреть промежуточный результат, то тут ожидается облом. rollup просто компилирует файлы в разные форматы и ни о каком dev сервере речи нет.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json"><span style="color:#e6db74">&#34;scripts&#34;</span><span style="color:#960050;background-color:#1e0010">:</span> {
  <span style="color:#f92672">&#34;build&#34;</span>: <span style="color:#e6db74">&#34;npm run build:umd &amp; npm run build:es &amp; npm run build:unpkg&#34;</span>,
  <span style="color:#f92672">&#34;build:umd&#34;</span>: <span style="color:#e6db74">&#34;rollup --config build/rollup.config.js --format umd --file dist/vue-openapi-bootstrap.umd.js&#34;</span>,
  <span style="color:#f92672">&#34;build:es&#34;</span>: <span style="color:#e6db74">&#34;rollup --config build/rollup.config.js --format es --file dist/vue-openapi-bootstrap.esm.js&#34;</span>,
  <span style="color:#f92672">&#34;build:unpkg&#34;</span>: <span style="color:#e6db74">&#34;rollup --config build/rollup.config.js --format iife --file dist/vue-openapi-bootstrap.min.js&#34;</span>
}
</code></pre></div><h2 id="простота-упаковки">Простота упаковки</h2>
<p><span style="color: green;">JSP</span> vs <span style="color: green;">VueJS</span></p>
<p>Тут у обоих фреймворков нет проблем. Для JSP упаковка - это стандартная команда maven:</p>
<pre><code>mvn package
</code></pre><p>В VueJS соответственно:</p>
<pre><code>npm build
</code></pre><h2 id="тестирование">Тестирование</h2>
<p><span style="color: green;">JSP</span> vs <span style="color: red;">VueJS</span></p>
<p>Опять же, из-за rollup и общей путаницы с технологиями, начать тестировать компонент на VueJS нетривиально. Если честно, я так и не осилил переход на webpack с полноценными тестами и покрытием кода.</p>
<p>В JSP же всё относительно просто: я просто скопировал подход для тестирования тэгов, который <a href="https://dernasherbrezon.com/posts/jsp-tag-testing/">использовал ранее</a> и сразу получил страницу index.html, которая загружается в браузер простым кликом.</p>
<p><img src="/img/compare-jsp-vuejs/1.png" alt=""></p>
<h2 id="скорость-разработки">Скорость разработки</h2>
<p><span style="color: red;">JSP</span> vs <span style="color: green;">VueJS</span></p>
<p>Да, инженерная мысль шагнула далеко вперед за последние 20 лет и разрабатывать на VuejS получается значительно быстрее. Например, синтаксис чуть более компактный. Сравните вывод одного и того же блока на VueJS:</p>
<pre><code>&lt;p&gt;Available values:
{{ param.schema.items.enum.join(', ') }}
&lt;/p&gt;
</code></pre><p>И на JSP:</p>
<pre><code>&lt;p&gt;Available values:
&lt;c:forEach items=&quot;${curParam.schema.items.getEnum()}&quot; var=&quot;curEnum&quot; varStatus=&quot;enumStatus&quot;&gt;&lt;c:if test=&quot;${!enumStatus.first}&quot;&gt;, &lt;/c:if&gt;${curEnum}&lt;/c:forEach&gt;
&lt;/p&gt;
</code></pre><p>Ещё одной вещью, значительно ускоряющей разработку (не путать со стабильностью кода!), является отсутствие строгой типизации. Сама по себе доменная модель OpenAPI нетривиальная, поэтому в JSP мне приходилось загружать её из JSON с помощью специальной библиотеки <code>swagger-parser-v3</code>. И даже после того, как я её загрузил, мне приходилось делать различные приседания, чтобы сгруппировать объекты в более удобном виде:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">private</span> <span style="color:#66d9ef">static</span> Map<span style="color:#f92672">&lt;</span>String<span style="color:#f92672">,</span> Operation<span style="color:#f92672">&gt;</span> <span style="color:#a6e22e">getOperationsByType</span><span style="color:#f92672">(</span>PathItem item<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
	Map<span style="color:#f92672">&lt;</span>String<span style="color:#f92672">,</span> Operation<span style="color:#f92672">&gt;</span> result <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> HashMap<span style="color:#f92672">&lt;&gt;();</span>
	<span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>item<span style="color:#f92672">.</span><span style="color:#a6e22e">getGet</span><span style="color:#f92672">()</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
		result<span style="color:#f92672">.</span><span style="color:#a6e22e">put</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;get&#34;</span><span style="color:#f92672">,</span> item<span style="color:#f92672">.</span><span style="color:#a6e22e">getGet</span><span style="color:#f92672">());</span>
	<span style="color:#f92672">}</span>
	<span style="color:#f92672">...</span>
	<span style="color:#66d9ef">return</span> result<span style="color:#f92672">;</span>
<span style="color:#f92672">}</span>
</code></pre></div><p>В javascript же такой проблемы не было, так как json - это JavaScript Object Notation. Что как бы намекает на глубокую поддержку внутри самого языка. Из-за этого загрузка выглядела достаточно просто:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript"><span style="color:#a6e22e">openapi</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">response</span>.<span style="color:#a6e22e">data</span>
</code></pre></div><p>Следующей неудобной штукой при разработке были вспомогательные методы. Например, необходимо было в зависимости от http метода отобразить цвет. В VueJS - это делается с помощью объявления метода прямо в файле:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript"><span style="color:#a6e22e">methods</span><span style="color:#f92672">:</span> { 
  <span style="color:#a6e22e">getColorByMethod</span> (<span style="color:#a6e22e">method</span>) {
    ...
  }
}
</code></pre></div><p>И использование (всё в том же файле):</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">&lt;<span style="color:#f92672">span</span> <span style="color:#a6e22e">:class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;`badge ${getColorByMethod(method)}`&#34;</span>&gt;
</code></pre></div><p>В JSP же пришлось объявлять специальные функциональные методы в <code>jsp-openapi.tld</code>:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-xml" data-lang="xml"><span style="color:#f92672">&lt;function&gt;</span>
	<span style="color:#f92672">&lt;name&gt;</span>getColorByMethod<span style="color:#f92672">&lt;/name&gt;</span>
	<span style="color:#f92672">&lt;function-class&gt;</span>ru.r2cloud.openapi.OpenAPIHelper<span style="color:#f92672">&lt;/function-class&gt;</span>
	<span style="color:#f92672">&lt;function-signature&gt;</span>java.lang.String getColorByMethod(ru.r2cloud.openapi.OperationDetails)<span style="color:#f92672">&lt;/function-signature&gt;</span>
<span style="color:#f92672">&lt;/function&gt;</span>
</code></pre></div><p>Описывать их в java коде:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">OpenAPIHelper</span> <span style="color:#f92672">{</span>
	<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> String <span style="color:#a6e22e">getColorByMethod</span><span style="color:#f92672">(</span>OperationDetails method<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
		<span style="color:#f92672">...</span>
	<span style="color:#f92672">}</span>
<span style="color:#f92672">}</span>
</code></pre></div><p>И использовать внутри JSP:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">&lt;<span style="color:#f92672">span</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;badge ${openapiHelper:getColorByMethod(method)}&#34;</span>&gt;
</code></pre></div><h2 id="простота-переиспользования">Простота переиспользования</h2>
<p><span style="color: green;">JSP</span> vs <span style="color: green;">VueJS</span></p>
<p>Тут оба фреймворка постарались и сделали вполне неплохое переиспользование своих компонент. Подключить jsp tag в проект можно описав зависимость:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-xml" data-lang="xml"><span style="color:#f92672">&lt;dependency&gt;</span>
	<span style="color:#f92672">&lt;groupId&gt;</span>ru.r2cloud.openapi<span style="color:#f92672">&lt;/groupId&gt;</span>
	<span style="color:#f92672">&lt;artifactId&gt;</span>jsp-openapi<span style="color:#f92672">&lt;/artifactId&gt;</span>
	<span style="color:#f92672">&lt;version&gt;</span>1.0<span style="color:#f92672">&lt;/version&gt;</span>
<span style="color:#f92672">&lt;/dependency&gt;</span>
</code></pre></div><p>И добавив на страницу:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html"><span style="color:#960050;background-color:#1e0010">&lt;</span>%@ taglib prefix=&#34;openapi&#34; uri=&#34;https://github.com/dernasherbrezon/jsp-openapi&#34; %&gt;
&lt;<span style="color:#f92672">openapi:bootstrap4-openapi</span> <span style="color:#a6e22e">openapi</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;${entity}&#34;</span>/&gt;
</code></pre></div><p>Во VueJS примерно так же просто:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json"><span style="color:#e6db74">&#34;dependencies&#34;</span><span style="color:#960050;background-color:#1e0010">:</span> {
  <span style="color:#f92672">&#34;vue-openapi-bootstrap&#34;</span>: <span style="color:#e6db74">&#34;1.0.1&#34;</span>
}
</code></pre></div><p>Использование на странице:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">&lt;<span style="color:#f92672">template</span>&gt;
	&lt;<span style="color:#f92672">vue-openapi-bootstrap</span> <span style="color:#a6e22e">:openapi</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;openapi&#34;</span>/&gt;
&lt;/<span style="color:#f92672">template</span>&gt;

&lt;<span style="color:#f92672">script</span>&gt;
<span style="color:#66d9ef">import</span> <span style="color:#a6e22e">vueOpenapiBootstrap</span> <span style="color:#a6e22e">from</span> <span style="color:#e6db74">&#39;vue-openapi-bootstrap/src/vue-openapi-bootstrap&#39;</span>
<span style="color:#66d9ef">export</span> <span style="color:#66d9ef">default</span> {
  <span style="color:#a6e22e">components</span><span style="color:#f92672">:</span> {<span style="color:#a6e22e">vueOpenapiBootstrap</span>}
}
&lt;/<span style="color:#f92672">script</span>&gt;
</code></pre></div><h2 id="выводы">Выводы</h2>
<p>Несмотря на то, что JSP уже почти 20 лет, разрабатывать переиспользуемые компоненты на нём достаточно просто. Конечно, чувствуется возраст технологии и некоторые вещи можно было бы сделать проще. Тем не менее ужасов, которые рисуют поклонники javascript и SPA, нет. При правильном дизайне и тот, и другой фреймворк предоставляют достаточно мощные инструменты для написания и переиспользования компонентов.</p>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Регистрация пользователей: 5 обязательных вещей</title>
      <link>https://dernasherbrezon.com/posts/design-registration/</link>
      <pubDate>Thu, 12 Dec 2019 14:40:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/design-registration/</guid>
      <description>Есть множество причин по которым может потребоваться собственная регистрация в своём сервисе. Это может быть как скорость разработки (нет необходимости изучать многочисленные API для интеграции), так и дополнительные требования к приватности данных. В регистрации пользователя нет ничего сложного: достаточно спросить его имя и пароль, добавить соль к паролю и сохранить это в базу. Однако, по мере эксплуатации, возникают различные ситуации, которые были не предусмотрены при дизайне системы. Ниже я собрал 5 вещей, полученные кровью и потом, багами в проде и мучительными часами ожиданий обычных пользователей.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Регистрация пользователей: 5 обязательных вещей</h1></header>
      		<div class='container entry-content'>
  <p>Есть множество причин по которым может потребоваться собственная регистрация в своём сервисе. Это может быть как скорость разработки (нет необходимости изучать многочисленные API для интеграции), так и дополнительные требования к приватности данных. В регистрации пользователя нет ничего сложного: достаточно спросить его имя и пароль, добавить соль к паролю и сохранить это в базу. Однако, по мере эксплуатации, возникают различные ситуации, которые были не предусмотрены при дизайне системы. Ниже я собрал 5 вещей, полученные кровью и потом, багами в проде и мучительными часами ожиданий обычных пользователей.</p>
<h2 id="1-логин---это-email">1. Логин - это email</h2>
<p>В 2019 уже достаточно сложно встретить сервисы, которые регистрируют пользователя по никнейму. Но совсем недавно, лет 15 назад, большинство сервисов регистрировали пользователей по имени пользователя или никнейму. С тех пор многие компании переосмыслили регистрацию и требуют только email. Ведь для того, чтобы, например, восстановить пароль, никнейма недостаточно. А что произойдёт, если пользователь зарегистрировался на сайте по никнейму, добавил множество данных или оплатил доступ, а через несколько месяц забыл пароль и попытался восстановить аккаунт? Правильно, ничего не получится, так как он забыл добавить email к своему профилю. И такие ситуации случались постоянно.</p>
<p><img src="/img/design-registration/1.png" alt=""></p>
<p>К счастью, тёмные времена уже позади и можно смело сказать, что регистрация по емейлу или телефону - это стандарт де-факто.</p>
<h2 id="2-captcha-капча">2. Captcha (Капча)</h2>
<p>Captcha - Ваш друг и помощник в защите от спамеров. Стопроцентная защита от негодяев, пытающихся перебрать email адреса всех Ваших пользователей. Сейчас есть множество <a href="https://www.google.com/recaptcha/intro/v3.html">бесплатных сервисов</a>, которые позволяют добавить капчу быстро и просто.</p>
<p><img src="/img/design-registration/2.png" alt=""></p>
<h2 id="3-первый-логин-только-после-перехода-по-ссылке-активации-в-письме">3. Первый логин только после перехода по ссылке активации в письме</h2>
<p>За достаточно длинным названием правила стоит достаточно простой алгоритм:</p>
<ul>
<li>пользователь заходит на страницу регистрации</li>
<li>вводит свой email (см. правило 1)</li>
<li>сервис регистрирует аккаунт и отправляет письмо с подтверждением</li>
<li>пользователь открывает письмо и переходит по ссылке активации</li>
<li>вводит новый пароль, его подтверждение и сразу же логиниться</li>
</ul>
<p>Зачем такая достаточно сложная процедура? Во-первых, происходит проверка того, что пользователь действительно ввёл свой емейл и не опечатался. А во-вторых, проверка того, что почтовый ящик действительно существует. Сколько часов своей жизни я потратил, пытаясь вместе с пользователем восстановить доступ к его аккаунту. Дело в том, что служба поддержки никогда не сможет отличить опечатку в емейле от мошенника, пытающегося завладеть чужими данными. Здесь злую шутку сыграли браузеры, которые предлагают хранить пароли к сайтам и автоматически подставляют их при входе. Пользователь месяцами может не догадываться, что емейл, который он ввёл при регистрации не совпадает с его настоящим. И это будет продолжаться до тех пор, пока он не попытается восстановить пароль.</p>
<p><img src="/img/design-registration/3.png" alt=""></p>
<h2 id="4-убирайте-лишние-пробелы-в-логине">4. Убирайте лишние пробелы в логине</h2>
<p>Самые экзотические личности вводят свой логин при регистрации с пробелом. Возможно, Вы сможете отправить на него email с активацией, но никогда не сможете залогинить.</p>
<blockquote>
<p>&ldquo;<a href="mailto:info@example.com">info@example.com</a> &quot; != &ldquo;<a href="mailto:info@example.com">info@example.com</a>&rdquo;</p>
</blockquote>
<p>С точки зрения логина, пробелы в начале и конце не несут никакой информации и не являются частью емейл адреса. Но Ваша система аутентификации не знает этого. Ещё одной хорошей идеей будет приведение адреса в нижний регистр. Несмотря на то, что название ящика <a href="https://stackoverflow.com/questions/9807909/are-email-addresses-case-sensitive">чувствительно к регистру</a>, на практике почтовые сервера не позволяют регистрировать адреса в разном регистре. Седые волосы и <a href="https://github.com/dernasherbrezon/r2cloud/issues/72">дни на саппорте</a> никому не нужны. Простая операция сэкономит много нервов:</p>
<p><img src="/img/design-registration/4.png" alt=""></p>
<h2 id="5-проверьте-отправку-email-в-проде">5. Проверьте отправку email в проде</h2>
<p>Казалось бы, столько времени потрачено на реализацию, трафик начали лить и пользователи ровными рядами идут смотреть Ваш сервис. Но, несмотря на это, регистраций всё нет. Проверьте настройки почты на проде и убедитесь, что письма не попадают в папку &ldquo;спам&rdquo;. Будет крайне обидно, если из-за такой мелочи сорвётся грандиозный запуск и деньги на привлечение клиентов пропадут зря.</p>
<h2 id="успехов">Успехов</h2>
<p>Надеюсь эти 5 простых правил помогут Вам сделать простую и удобную регистрацию, а клиентов полюбить Ваш сервис.</p>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Переиспользование компонентов в JSP</title>
      <link>https://dernasherbrezon.com/posts/jsp-tagfile/</link>
      <pubDate>Sun, 08 Dec 2019 19:18:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/jsp-tagfile/</guid>
      <description>Несмотря на то, что технологии JSP уже почти 20 лет, она по-прежнему не перестаёт удивлять своей продуманностью. В частности, мне очень нравится как реализовано переиспользование компонентов. Если вкратце, то в JSP есть несколько способов.
include Позволяет вставлять в страницу кусок другой страницы. Обычно используется, если нужно переиспользовать блоки без параметров. Например:
&amp;lt;%@ include file=&amp;#34;/WEB-INF/jsp/header.jsp&amp;#34;%&amp;gt; &amp;lt;div class=&amp;#34;container&amp;#34;&amp;gt; &amp;lt;h1&amp;gt;Hello world!&amp;lt;/h1&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;%@ include file=&amp;#34;/WEB-INF/jsp/footer.jsp&amp;#34;%&amp;gt; Тэги Позволяют создавать блоки с параметрами. Сами тэги описываются в java коде.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Переиспользование компонентов в JSP</h1></header>
      		<div class='container entry-content'>
  <p>Несмотря на то, что технологии <a href="https://en.wikipedia.org/wiki/JavaServer_Pages">JSP</a> уже почти 20 лет, она по-прежнему не перестаёт удивлять своей продуманностью. В частности, мне очень нравится как реализовано переиспользование компонентов. Если вкратце, то в JSP есть несколько способов.</p>
<h3 id="include">include</h3>
<p>Позволяет вставлять в страницу кусок другой страницы. Обычно используется, если нужно переиспользовать блоки без параметров. Например:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html"><span style="color:#960050;background-color:#1e0010">&lt;</span>%@ include file=&#34;/WEB-INF/jsp/header.jsp&#34;%&gt;
&lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;container&#34;</span>&gt;
	&lt;<span style="color:#f92672">h1</span>&gt;Hello world!&lt;/<span style="color:#f92672">h1</span>&gt;
&lt;/<span style="color:#f92672">div</span>&gt;
<span style="color:#960050;background-color:#1e0010">&lt;</span>%@ include file=&#34;/WEB-INF/jsp/footer.jsp&#34;%&gt;
</code></pre></div><h3 id="тэги">Тэги</h3>
<p>Позволяют создавать блоки с параметрами. Сами тэги описываются в java коде. Например:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html"><span style="color:#960050;background-color:#1e0010">&lt;</span>%@ taglib prefix=&#34;c&#34; uri=&#34;http://java.sun.com/jsp/jstl/core&#34;%&gt;
&lt;<span style="color:#f92672">c:if</span> <span style="color:#a6e22e">test</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;${not empty header }&#34;</span>&gt;
	&lt;<span style="color:#f92672">h1</span>&gt;&lt;<span style="color:#f92672">c:out</span> <span style="color:#a6e22e">value</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;${header}&#34;</span>&gt;&lt;/<span style="color:#f92672">h1</span>&gt;
&lt;/<span style="color:#f92672">c:if</span>&gt;
</code></pre></div><p>При этом тэг объявлен в специальном .tld файле:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-xml" data-lang="xml"><span style="color:#f92672">&lt;tag&gt;</span>
    <span style="color:#f92672">&lt;description&gt;</span>
        Simple conditional tag, which evalutes its body if the
        supplied condition is true and optionally exposes a Boolean
        scripting variable representing the evaluation of this condition
    <span style="color:#f92672">&lt;/description&gt;</span>
    <span style="color:#f92672">&lt;name&gt;</span>if<span style="color:#f92672">&lt;/name&gt;</span>
    <span style="color:#f92672">&lt;tag-class&gt;</span>org.apache.taglibs.standard.tag.rt.core.IfTag<span style="color:#f92672">&lt;/tag-class&gt;</span>
    ...
 <span style="color:#f92672">&lt;/tag&gt;</span>
</code></pre></div><p>И реализация в Java классе:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">IfTag</span> <span style="color:#66d9ef">extends</span> ConditionalTagSupport <span style="color:#f92672">{</span>
    <span style="color:#a6e22e">@Override</span>
    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">int</span> <span style="color:#a6e22e">doStartTag</span><span style="color:#f92672">()</span> <span style="color:#66d9ef">throws</span> JspException <span style="color:#f92672">{</span>

        <span style="color:#75715e">// execute our condition() method once per invocation
</span><span style="color:#75715e"></span>        result <span style="color:#f92672">=</span> condition<span style="color:#f92672">();</span>

        <span style="color:#75715e">// expose variables if appropriate
</span><span style="color:#75715e"></span>        exposeVariables<span style="color:#f92672">();</span>

        <span style="color:#75715e">// handle conditional behavior
</span><span style="color:#75715e"></span>        <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>result<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
            <span style="color:#66d9ef">return</span> EVAL_BODY_INCLUDE<span style="color:#f92672">;</span>
        <span style="color:#f92672">}</span> <span style="color:#66d9ef">else</span> <span style="color:#f92672">{</span>
            <span style="color:#66d9ef">return</span> SKIP_BODY<span style="color:#f92672">;</span>
        <span style="color:#f92672">}</span>
    <span style="color:#f92672">}</span>
    <span style="color:#f92672">...</span>
<span style="color:#f92672">}</span>
</code></pre></div><p>Тэги можно кэшировать и сбрасывать на диск при горячей миграции servlet-контейнера.</p>
<h3 id="тэг-файлы">Тэг-файлы</h3>
<p>То же самое, что и обычные тэги, только описываются в .tag файле, который можно напрямую подключить в JSP страницу. Очень удобно, так как не надо создавать промежуточный .tld файл. Например:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html"><span style="color:#960050;background-color:#1e0010">&lt;</span>%@ tag pageEncoding=&#34;UTF-8&#34; %&gt;
<span style="color:#960050;background-color:#1e0010">&lt;</span>%@ attribute name=&#34;name&#34; required=&#34;true&#34; rtexprvalue=&#34;false&#34; %&gt;
&lt;<span style="color:#f92672">h1</span>&gt;${name}&lt;/<span style="color:#f92672">h1</span>&gt;
</code></pre></div><p>И использование:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html"><span style="color:#960050;background-color:#1e0010">&lt;</span>%@ taglib prefix=&#34;er&#34; tagdir=&#34;/WEB-INF/tags&#34; %&gt;
&lt;<span style="color:#f92672">er:title</span> <span style="color:#a6e22e">name</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Hello world&#34;</span>/&gt;
</code></pre></div><h2 id="переиспользование">Переиспользование</h2>
<p>Но это ещё не всё. Самое интересное - это возможность переиспользовать компоненты между разными проектами. Для этого достаточно собрать .jar файл с описанием тэгов. После этого его можно подключать и использовать в разных проектах.</p>
<p>До недавнего времени я успешно собирал различные библиотеки с обычными тэгами. Например, <a href="https://dernasherbrezon.com/posts/jsp-tag-testing/">jtimeago</a> - библиотека для отображения прошедшего времени в человеко-читабельном виде или <a href="https://github.com/dernasherbrezon/spring-security-taglib">spring-security-taglib</a> - библиотека для простой проверки ролей spring-security.</p>
<p>Однако, когда мне понадобилось отобразить спецификацию OpenAPI, обычные тэги уже не подошли. Их не так удобно использовать для отрисовки большого количества html-кода. Я не знал, можно ли переиспользовать продвинутые тэг-файлы, и сделал небольшое исследование. Каково было моё удивление, когда я узнал что это возможно!</p>
<h3 id="переиспользование-тэг-файлов">Переиспользование тэг-файлов</h3>
<p>По сравнению с обычными тэгами, библиотеку необходимо собрать особым образом:</p>
<p><img src="/img/jsp-tagfile/1.png" alt=""></p>
<p>Тэг-файл должен находится в подпапке <code>/META-INF/tag</code> и должен быть описан в .tld файле следующим образом:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-xml" data-lang="xml"><span style="color:#f92672">&lt;tag-file&gt;</span>
	<span style="color:#f92672">&lt;description&gt;</span>Tag for rendering OpenAPI specification using bootstrap4<span style="color:#f92672">&lt;/description&gt;</span>
	<span style="color:#f92672">&lt;display-name&gt;</span>jsp-openapi<span style="color:#f92672">&lt;/display-name&gt;</span>
	<span style="color:#f92672">&lt;name&gt;</span>bootstrap4-openapi<span style="color:#f92672">&lt;/name&gt;</span>
	<span style="color:#f92672">&lt;path&gt;</span>/META-INF/tags/bootstrap4-openapi.tag<span style="color:#f92672">&lt;/path&gt;</span>
<span style="color:#f92672">&lt;/tag-file&gt;</span>
</code></pre></div><p>После того как библиотека собрана, она подключается стандартным способом:</p>
<pre><code>&lt;%@ taglib prefix=&quot;openapi&quot; uri=&quot;https://github.com/dernasherbrezon/jsp-openapi&quot; %&gt;
</code></pre><p>И используется, как обычно:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">&lt;<span style="color:#f92672">body</span>&gt;
	&lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;container&#34;</span>&gt;
		&lt;<span style="color:#f92672">openapi:bootstrap4-openapi</span> <span style="color:#a6e22e">openapi</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;${entity}&#34;</span>/&gt;
	&lt;/<span style="color:#f92672">div</span>&gt;
&lt;/<span style="color:#f92672">body</span>&gt;
</code></pre></div><p>Из плюсов стоит отметить, что встроенный редактор .jsp в Eclipse отлично подхватывает такие библиотеки и позволяет делать auto-complete.</p>
<p><img src="/img/jsp-tagfile/2.png" alt=""></p>
<p>Ну и куда-ж без ложки дёгтя:</p>
<ol>
<li>Контейнеры, в частности jetty, до сих пор не могут загружать тэги из файлов в classpath. Можно забыть про <code>Workspace Resolution</code> maven артефактов при разработке.</li>
<li>Встроенный в Eclipse JSP Editor не может найти тэг внутри тэг-файла внутри библиотеки тэгов (тройное комбо!!):</li>
</ol>
<p><img src="/img/jsp-tagfile/3.png" alt=""></p>
<h2 id="послесловие">Послесловие</h2>
<p>Несмотря на своё 20-летие, технология JSP до сих пор позволяет делать 100% необходимых вещей. В ближайшее будущее я планирую написать о том, как я разрабатывал один и тот же компонент на JSP и модном VueJS. Будет интересно.</p>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Разговоры о приёме сигналов со спутников</title>
      <link>https://dernasherbrezon.com/posts/big-beard-theory/</link>
      <pubDate>Thu, 05 Dec 2019 22:31:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/big-beard-theory/</guid>
      <description>Зашёл в гости к подкасту Big Beard Theory поговорить о спутниках и приёме сигналов с них. Огромное спасибо Антону за приглашение и помощь в организации выпуска.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Разговоры о приёме сигналов со спутников</h1></header>
      		<div class='container entry-content'>
  <p>Зашёл в гости к подкасту Big Beard Theory поговорить о спутниках и приёме сигналов с них. Огромное спасибо Антону за приглашение и помощь в организации выпуска.</p>
<iframe src="https://castbox.fm/app/castbox/player/id2408958/id207875336?v=8.13.0&autoplay=0&hide_list=1" frameborder="0" width="100%" height="250"></iframe>
</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Работа с Json в 2019 году</title>
      <link>https://dernasherbrezon.com/posts/json-in-2019/</link>
      <pubDate>Wed, 04 Dec 2019 22:29:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/json-in-2019/</guid>
      <description>Введение В работе над своей небольшой библиотечкой jsp-openapi мне понадобилось сериализировать Java объекты в JSON. Я, недолго думая, подключил свою любимую библиотеку gson и пошёл дальше. Проект успешно проходил тест и собирался локально. Следующим моим шагом, как обычно, должна была стать сборка в travis-ci и подключение в sonarcloud.
Но что-то пошло не так&amp;hellip;
Вот ключевое место лога:
Caused by: java.lang.NoClassDefFoundError: java/sql/Time at com.google.gson.Gson.&amp;amp;lt;init&amp;amp;gt;(Gson.java:265) at com.google.gson.GsonBuilder.create(GsonBuilder.java:597) Оказывается, gson зависит от пакета java.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Работа с Json в 2019 году</h1></header>
      		<div class='container entry-content'>
  <h2 id="введение">Введение</h2>
<p>В работе над своей небольшой библиотечкой <a href="https://github.com/dernasherbrezon/jsp-openapi">jsp-openapi</a> мне понадобилось сериализировать Java объекты в JSON. Я, недолго думая, подключил свою любимую библиотеку gson и пошёл дальше. Проект успешно проходил тест и собирался локально. Следующим моим шагом, как обычно, должна была стать сборка в travis-ci и подключение в sonarcloud.</p>
<p>Но что-то <a href="https://travis-ci.org/dernasherbrezon/jsp-openapi/builds/620333411">пошло не так</a>&hellip;</p>
<p>Вот ключевое место лога:</p>
<pre><code>Caused by: java.lang.NoClassDefFoundError: java/sql/Time
	at com.google.gson.Gson.&amp;lt;init&amp;gt;(Gson.java:265)
	at com.google.gson.GsonBuilder.create(GsonBuilder.java:597)
</code></pre><p>Оказывается, gson <a href="https://github.com/google/gson/blob/22877d67ba44299e8d77eb841ab20c2087d46752/gson/src/main/java/module-info.java">зависит от пакета java.sql</a>. При сборке jdk9+, библиотека должна создавать файл module-info.java, в котором необходимо описывать эту зависимость.</p>
<p>В принципе, это не страшно. Я даже уже начал идти этим путем: создал module-info.java, начал разбираться как собирать проект на openjdk11 и oraclejdk8. Но тут меня осенило. Я же разрабатываю библиотеку тэгов. Для JSP. В 2019 году. Какая вообще Java 11? В лучшем случае её будут использовать в Java 8. И ещё. Библиотека рендеринга html ну совсем не может зависеть от java.sql. Тем более, что я нигде не использую эту зависимость.</p>
<p>Немного взгрустнув, я вздохнул и пошёл сложной дорогой: выбор другой JSON библиотеки.</p>
<h2 id="выбор-альтернатив">Выбор альтернатив</h2>
<p>Самое быстрое гугление выдает 3 альтернативы:</p>
<ul>
<li>Reference implementation <a href="https://github.com/stleary/JSON-java">json-java</a>.</li>
<li><a href="https://github.com/FasterXML/jackson">Jackson</a></li>
<li><a href="https://javaee.github.io/jsonp/">json-p</a></li>
</ul>
<p>Но прежде, чем выбирать какую-то одну, необходимо определиться с требованиями:</p>
<ul>
<li>минимальное количество зависимостей, но без фанатизма. Код всё равно будет выполняться на сервере</li>
<li>возможность сериализировать POJO.</li>
<li>возможность отбрасывать null поля. Из-за того, что я не контролирую <code>io.swagger.v3.oas.models.OpenAPI</code>, то я не могу вставить в него аннотации и прочие служебные конструкции. Сериализация null полей должна быть сконфигурирована извне</li>
<li>возможность pretty print. Получившийся json будет рендериться с помощью тэгов <code>pre</code>, поэтому он должен выглядеть хорошо</li>
</ul>
<h3 id="json-java">json-java</h3>
<p>Достаточно простой проект, мало кода, а значит быстро и ничего лишнего. Однако, сериализацию объектов через reflection не поддерживает и её придётся писать самому каждый раз. Не подходит.</p>
<h3 id="jackson">Jackson</h3>
<p>Нет, Вы только посмотрите на их readme. Если, с помощью Jackson нельзя собрать космический корабль, то я буду крайне удивлён.</p>
<p><img src="/img/json-in-2019/1.png" alt=""></p>
<p>После 15 минут вдумчивого анализа оказалось, что для минимальной работы требуется 3 библиотеки:</p>
<ul>
<li>jackson-core</li>
<li>jackson-annotations</li>
<li>jackson-databind</li>
</ul>
<p>Скрипя сердце, отложил, как формально подходящую под требования.</p>
<h3 id="jsonp">jsonp</h3>
<p>Чтобы начать работать с этой библиотекой, нужно добавить следующие зависимости:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-xml" data-lang="xml"><span style="color:#f92672">&lt;dependency&gt;</span>
    <span style="color:#f92672">&lt;groupId&gt;</span>javax.json<span style="color:#f92672">&lt;/groupId&gt;</span>
    <span style="color:#f92672">&lt;artifactId&gt;</span>javax.json-api<span style="color:#f92672">&lt;/artifactId&gt;</span>
    <span style="color:#f92672">&lt;version&gt;</span>1.1<span style="color:#f92672">&lt;/version&gt;</span>
<span style="color:#f92672">&lt;/dependency&gt;</span>

<span style="color:#f92672">&lt;dependency&gt;</span>
    <span style="color:#f92672">&lt;groupId&gt;</span>org.glassfish<span style="color:#f92672">&lt;/groupId&gt;</span>
    <span style="color:#f92672">&lt;artifactId&gt;</span>javax.json<span style="color:#f92672">&lt;/artifactId&gt;</span>
    <span style="color:#f92672">&lt;version&gt;</span>1.1<span style="color:#f92672">&lt;/version&gt;</span>
<span style="color:#f92672">&lt;/dependency&gt;</span>
</code></pre></div><p>Ох, только не glassfish. Почему выбор библиотеки может зависеть от личных предпочтений? Тем не менее, прочитав случайную <a href="https://blog.overops.com/the-ultimate-json-library-json-simple-vs-gson-vs-jackson-vs-json/">статью</a> о сравнении сферических коней, решил не брать jsonp по более объективным причинам: низкая производительность.</p>
<h2 id="вывод">Вывод</h2>
<p>Jackson, конечно, уступает в удобстве работы gson. Но за неимением лучшего пришлось выбрать его:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">JsonFactory jsonFactory <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> JsonFactory<span style="color:#f92672">();</span>
jsonFactory<span style="color:#f92672">.</span><span style="color:#a6e22e">configure</span><span style="color:#f92672">(</span>JsonGenerator<span style="color:#f92672">.</span><span style="color:#a6e22e">Feature</span><span style="color:#f92672">.</span><span style="color:#a6e22e">AUTO_CLOSE_TARGET</span><span style="color:#f92672">,</span> <span style="color:#66d9ef">false</span><span style="color:#f92672">);</span>
ObjectMapper mapper <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> ObjectMapper<span style="color:#f92672">(</span>jsonFactory<span style="color:#f92672">);</span>
mapper<span style="color:#f92672">.</span><span style="color:#a6e22e">enable</span><span style="color:#f92672">(</span>SerializationFeature<span style="color:#f92672">.</span><span style="color:#a6e22e">INDENT_OUTPUT</span><span style="color:#f92672">);</span>
mapper<span style="color:#f92672">.</span><span style="color:#a6e22e">setSerializationInclusion</span><span style="color:#f92672">(</span>Include<span style="color:#f92672">.</span><span style="color:#a6e22e">NON_NULL</span><span style="color:#f92672">);</span>
mapper<span style="color:#f92672">.</span><span style="color:#a6e22e">writeValue</span><span style="color:#f92672">(</span>w<span style="color:#f92672">,</span> value<span style="color:#f92672">.</span><span style="color:#a6e22e">getProperties</span><span style="color:#f92672">());</span>
</code></pre></div><p>На этом я не остановился и <a href="https://github.com/google/gson/issues/1629">выразил свою позицию</a> разработчикам gson. Шансы, что эту задачу реализуют, крайне малы, так как это значит отказываться от обратной совместимости с предыдущими версиями. И на такое разработчики вряд ли пойдут.</p>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Сигналы со спутников</title>
      <link>https://dernasherbrezon.com/posts/satellite-signal/</link>
      <pubDate>Thu, 28 Nov 2019 15:51:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/satellite-signal/</guid>
      <description>До того как заняться приёмом сигналов со спутников, я ничего не знал о радио сигналах. Тем более о радио сигналах со спутников. В моём представлении это было: навести антенну на спутник и выставить частоту приёма.
На самом деле частота сигнала меняется и на спектограмме выглядит как-то вот так:
Если схематично представить, то принимаемый сигнал будет выглядеть вот так:
С этим сигналом есть 2 проблемы (на самом деле больше):
 Эффект Доплера.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Сигналы со спутников</h1></header>
      		<div class='container entry-content'>
  <p>До того как заняться приёмом сигналов со спутников, я ничего не знал о радио сигналах. Тем более о радио сигналах со спутников. В моём представлении это было: навести антенну на спутник и выставить частоту приёма.</p>
<p>На самом деле частота сигнала меняется и на спектограмме выглядит как-то вот так:</p>
<p><img src="/img/satellite-signal/1.png" alt=""></p>
<p>Если схематично представить, то принимаемый сигнал будет выглядеть вот так:</p>
<p><img src="/img/satellite-signal/2.jpg" alt=""></p>
<p>С этим сигналом есть 2 проблемы (на самом деле больше):</p>
<ol>
<li><a href="https://ru.wikipedia.org/wiki/%D0%AD%D1%84%D1%84%D0%B5%D0%BA%D1%82_%D0%94%D0%BE%D0%BF%D0%BB%D0%B5%D1%80%D0%B0">Эффект Доплера</a>. Спутник движется очень быстро, поэтому частота будет смещаться. При этом смещение зависит от расстояния до спутника.</li>
<li>Постоянная составляющая сигнала (DC spike). Появляется при конвертации входящей частоты в рабочую. Обычно присутствует в супергетеродинной архитектуре радиоприёмника.</li>
</ol>
<p>Каждый из этих эффектов можно компенсировать:</p>
<ol>
<li>Зная положение спутника и станции приёма сигнала, можно очень точно рассчитать расстояние до спутника и смещение частоты в момент пролёта. Если сдвигать принимаемую частоту на это смещение, то можно выровнять сигнал и компенсировать эффект Доплера.</li>
<li>С DC spike можно бороться двумя способами: добавить фильтр, который будет сдвигать сигнал так, чтобы средняя мощность была равна 0, либо принимать на другой частоте, а сигнал смещать и отфильтровывать от DC spike.</li>
</ol>
<p>Я выбрал второй способ фильтрации постоянной составляющей, поэтому формула вычисления смещения для сигнала следующая:</p>
<pre><code>long startFrequency = частота сигнала в начале приёма
long endFrequency = частота сигнала по окончанию приёма
long satelliteFrequency = настоящая частота передачи сигнала спутником
long maxOffset = Math.max(Math.abs(satelliteFrequency - startFrequency), Math.abs(satelliteFrequency - endFrequency));
long bandwidth = ширина сигнала спутника // обычно задаётся производителем

long offset = maxOffset + bandwidth / 2;
</code></pre><p>После того как смещение посчитано, нужно настроить приёмник на эту частоту + смещение. А при обработке сигнала, необходимо сместить сигнал назад на это же смещение. Это можно сделать, например, с помощью <a href="http://blog.sdr.hu/grblocks/xlating-fir.html">Frequency Xlating FIR Filter</a>.</p>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Создание VueJS компонента</title>
      <link>https://dernasherbrezon.com/posts/creating-vuejs-component/</link>
      <pubDate>Sat, 23 Nov 2019 17:33:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/creating-vuejs-component/</guid>
      <description>Введение Мне очень нравится идея маленьких переиспользуемых компонент. Если передо мной встаёт задача добавить какой-нибудь функционал, я прежде всего трачу некоторое время на поиск уже существующего решения. Так и в этот раз. Немногие знают, что r2cloud - это полноценный REST сервер. А значит им можно управлять программно. Сейчас существует только один клиент для него - r2cloud-ui. Это приложение VueJS, которое предоставляет UI для управления. Однако, вся мощь REST сервисов заключается в том, что с ними можно взаимодействовать программно с помощью различных языков программирования.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Создание VueJS компонента</h1></header>
      		<div class='container entry-content'>
  <h2 id="введение">Введение</h2>
<p>Мне очень нравится идея маленьких переиспользуемых компонент. Если передо мной встаёт задача добавить какой-нибудь функционал, я прежде всего трачу некоторое время на поиск уже существующего решения. Так и в этот раз. Немногие знают, что <a href="http://github.com/dernasherbrezon/r2cloud">r2cloud</a> - это полноценный REST сервер. А значит им можно управлять программно. Сейчас существует только один клиент для него - <a href="https://github.com/dernasherbrezon/r2cloud-ui">r2cloud-ui</a>. Это приложение VueJS, которое предоставляет UI для управления. Однако, вся мощь REST сервисов заключается в том, что с ними можно взаимодействовать программно с помощью различных языков программирования. Это позволяет построить достаточно интересные интеграции и более сложные системы. Чтобы рассказать всему миру о том, как можно управлять r2cloud, я решил создать API документацию.</p>
<p>Самый простой создания документации - это записать все REST методы в html файл и добавить на сайт. Однако, за последние десятки лет, инженерная мысль шагнула дальше. Если описать REST API с помощью специальной схемы <a href="https://swagger.io/docs/specification/about">OpenAPI</a>, то на её основе можно:</p>
<ol>
<li>Сгенерировать документацию</li>
<li>Сгенерировать клиентскую библиотеку под различные языки программирования</li>
<li>Сгенерировать заглушку для серверного кода</li>
</ol>
<p>Второй и третий пункт у меня уже есть, а вот первый пункт мне как раз и нужен. Таким образом передо мной встала задача отрисовать спецификацию OpenAPI в VueJS.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">{
	<span style="color:#f92672">&#34;/health&#34;</span>: {
		<span style="color:#f92672">&#34;get&#34;</span>: {
			<span style="color:#f92672">&#34;tags&#34;</span>: [
				<span style="color:#e6db74">&#34;System&#34;</span>
			],
			<span style="color:#f92672">&#34;summary&#34;</span>: <span style="color:#e6db74">&#34;Check if r2cloud is up&#34;</span>,
			<span style="color:#f92672">&#34;responses&#34;</span>: {
				<span style="color:#f92672">&#34;200&#34;</span>: {
					<span style="color:#f92672">&#34;description&#34;</span>: <span style="color:#e6db74">&#34;If r2cloud is up&#34;</span>
				}
			}
		}
	}
}
</code></pre></div><p>Покопавшись немного в интернете я нашёл следующие наиболее близкие решения:</p>
<ul>
<li><strong><a href="https://www.npmjs.com/package/swagger-ui">swagger-ui</a></strong>. Стандартная библиотека, позволяющая отрисовать спецификацию OpenAPI с помощью собственных стилей и Javascript.</li>
<li><strong><a href="https://www.npmjs.com/package/@koumoul/vue-openapi">vue-openapi</a></strong>. Позволяет отрисовать спецификацию OpenAPI с помощью библиотеки стилей <a href="https://vuematerial.io">vue-material</a>.</li>
</ul>
<p>В обоих случаях используются собственные стили компонентов. Эти стили не сочетаются с <a href="https://getbootstrap.com">bootstrap</a>, поэтому я решил написать небольшой компонент - <strong><a href="https://www.npmjs.com/package/vue-openapi-bootstrap">vue-openapi-bootstrap</a></strong>. Он позволяет:</p>
<ul>
<li>отрисовывать спецификацию OpenAPI 3.x</li>
<li>UI максимально близко повторяет стандартный <a href="https://petstore.swagger.io/#/">swagger-ui</a></li>
<li>использует нативные компоненты из bootstrap 4.x и динамические компоненты из bootstrap-vue</li>
<li>отображает запросы и ответы API в формате json</li>
<li>улучшенное отображение доменных моделей</li>
</ul>
<h2 id="создание-компонента">Создание компонента</h2>
<p>Создание однофайлового компонента очень хорошо описано в <a href="https://ru.vuejs.org/v2/cookbook/packaging-sfc-for-npm.html">официальной документации</a>. В этой статье предлагается делать сборку компонента с помощью rollup. Насколько я понял, это ещё один способ сборки javascript кода, более легковесный, чем webpack. Из недостатков следует отметить отсутствие dev сервера и горячей перезагрузки модулей.</p>
<p>После того как написан весь boilerplate код и конфигурация сборки, написание компонента не представляет сложности. В случае моего компонента, мне удалось найти практически все стандартные компоненты bootstrap, которые позволили отобразить UI, похожий на swagger-ui.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">&lt;<span style="color:#f92672">b-card-body</span>&gt;
  &lt;<span style="color:#f92672">p</span> <span style="color:#a6e22e">v-if</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;method.deprecated&#34;</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;text-muted&#34;</span>&gt;Warning: Deprecated&lt;/<span style="color:#f92672">p</span>&gt;
  &lt;<span style="color:#f92672">p</span> <span style="color:#a6e22e">v-if</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;method.description&#34;</span>&gt;{{ method.description }}&lt;/<span style="color:#f92672">p</span>&gt;
  &lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">v-if</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;method.parameters &amp;&amp; method.parameters.length &gt; 0&#34;</span>&gt;
    &lt;<span style="color:#f92672">h4</span>&gt;Parameters&lt;/<span style="color:#f92672">h4</span>&gt;
</code></pre></div><p>Почему я выбрал UI совместимый со swagger-ui? Во-первых, у меня нет мнения о том, как должен выглядеть правильный UX для описания документации к API. А во-вторых, swagger-ui - это наиболее распространённый компонент для отображения OpenAPI документации.</p>
<p><img src="/img/creating-vuejs-component/1.png" alt=""></p>
<p>Наибольшая сложность была с описанием того, что есть в стандарте OpenAPI 3.x. Дело в том, что стандарт позволяет достаточно гибко описывать различные REST API. А это значит, что он достаточно обширен и многословен. Чтобы всё это описать, я взял стандартный openapi.json из <a href="https://petstore.swagger.io/#/">petstore</a> и отрисовал всевозможные варианты конфигурации.</p>
<h2 id="финальный-результат">Финальный результат</h2>
<p>Готовый компонент можно подключить следующим образом:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">npm install vue-openapi-bootstrap
</code></pre></div><p>Использовать на странице:</p>
<pre><code>&lt;template&gt;
  &lt;vue-openapi-bootstrap :openapi=&quot;openapi&quot;&gt;&lt;/vue-openapi-bootstrap&gt;
&lt;/template&gt;

&lt;script&gt;
import vueOpenapiBootstrap from 'vue-openapi-bootstrap/src/vue-openapi-bootstrap'
export default {
  components: {vueOpenapiBootstrap},
  data () {
    return {
      openapi: {}
    }
  }
}
&lt;/script&gt;
</code></pre><p>В результате получаются такие страницы:</p>
<p><img src="/img/creating-vuejs-component/2.png" alt=""></p>
<p>А вот так выглядит отображение документации в r2cloud-ui:</p>
<p><img src="/img/creating-vuejs-component/3.png" alt=""></p>
<p>Сразу после публикации в <a href="https://www.npmjs.com/package/vue-openapi-bootstrap">npmjs.com</a> в первые несколько дней, мой компонент был скачан 66 раз. Это лишний раз подтвердило мою мысль о том, что я на правильном пути и небольшой компонент востребован сообществом.</p>
<p><img src="/img/creating-vuejs-component/4.png" alt=""></p>
<h2 id="выводы">Выводы</h2>
<ul>
<li>VueJS продвигает создание небольших переиспользуемых компонент. Это очень мощная и правильная идея, которая позволяет собирать достаточно большие проекты из маленьких кусочков. Правильная реализация этой идеи делает создание компонентов действительно простым делом.</li>
<li>npmjs продвигает переиспользование кода. Как ещё объяснить те 66 скачиваний моего компонента, если я не давал рекламы и никому о нём не рассказывал?</li>
<li>Компонент есть куда улучшать: можно добавить поддержку отрисовки описаний с помощью markdown, задание доменной модели с помощью xml.</li>
</ul>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Тестирование maven плагинов</title>
      <link>https://dernasherbrezon.com/posts/testing-maven-plugins/</link>
      <pubDate>Fri, 15 Nov 2019 19:49:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/testing-maven-plugins/</guid>
      <description>Часть моей хобби инфраструктуры завязана на .deb пакеты и apt репозитории. Чтобы со всем этим работать из java, я написал несколько maven плагинов и выложил в открытый доступ. Один из этих плагинов - deb-maven-plugin. Он позволяет собирать из java проекта .deb пакет. Этот формат пакетов имеет достаточно сложную структуру и большое историческое наследие. Я очень тщательно разобрался с тем, как собирать такой пакет для java проектов и создал плагин, который сильно облегчает сборку.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Тестирование maven плагинов</h1></header>
      		<div class='container entry-content'>
  <p>Часть моей хобби инфраструктуры завязана на .deb пакеты и apt репозитории. Чтобы со всем этим работать из java, я написал несколько maven плагинов и выложил в открытый доступ. Один из этих плагинов - <a href="https://github.com/dernasherbrezon/deb-maven-plugin">deb-maven-plugin</a>. Он позволяет собирать из java проекта .deb пакет. <a href="https://ru.wikipedia.org/wiki/Deb_(%D1%84%D0%BE%D1%80%D0%BC%D0%B0%D1%82_%D1%84%D0%B0%D0%B9%D0%BB%D0%BE%D0%B2)">Этот формат пакетов</a> имеет достаточно сложную структуру и большое историческое наследие. Я очень тщательно разобрался с тем, как собирать такой пакет для java проектов и создал плагин, который сильно облегчает сборку. Со временем ко мне приходили различные разработчики и добавляли в этот плагин нужную им функциональность. Мы вместе исправляли ошибки. Всю идиллию портило только одно - полное отсутствие тестов. Каждое изменение, которое мы добавляли, могло потенциально сломать уже существующие проекты.</p>
<p>Однажды я решил проверить собранный пакет с помощью утилиты <a href="https://lintian.debian.org">lintian</a> и обнаружил множество критичных ошибок. Это сподвигло меня собраться с мыслями и всё-таки разобраться, как тестируются maven плагины. И поправить ошибки, о которых предупреждал lintian.</p>
<h2 id="требования">Требования</h2>
<p>Прежде чем начать писать тесты, необходимо определиться какие: интеграционные или юнит. Юнит-тесты для maven плагинов достаточно бесполезны. Дело в том, что maven плагин - это один большой класс, реализующий AbstractMojo. Иногда полезно иметь несколько вспомогательных классов, чтобы декомпозировать задачу. Но в большинстве случаев - это один большой класс, который нужно тестировать интеграционно.</p>
<p>Ещё одну вещь, которую юнит тесты не смогут проверить - то, как конфигурация пробрасывается внутрь плагина. До версии 3.0 каноничным способом указания конфигурации был javadoc определённого формата. Это крайне плохой и неудобный способ задания внешних параметров.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#75715e">/**
</span><span style="color:#75715e"> * @parameter default-value=&#34;${project.basedir}/src/main/deb&#34;;
</span><span style="color:#75715e"> */</span>
<span style="color:#66d9ef">private</span> String debBaseDir<span style="color:#f92672">;</span>
</code></pre></div><p>Соответственно необходимо протестировать правильность написания этого javadoc. Без полноценного запуска PlexusContainer это достаточно сложно. PlexusContainer - это DI контейнер, который чем-то похож на <a href="https://spring.io">Spring</a> и <a href="https://dagger.dev">Dagger</a>. Однако, из-за своей малой распространённости он имеет крайне скудную документацию. Определить какие компоненты доступны в контейнере можно только методом проб и ошибок. Основные настройки плагина можно получать из MavenProject:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#75715e">/**
</span><span style="color:#75715e"> * The maven project.
</span><span style="color:#75715e"> * 
</span><span style="color:#75715e"> * @parameter property=&#34;project&#34;
</span><span style="color:#75715e"> * @readonly
</span><span style="color:#75715e"> */</span>
<span style="color:#66d9ef">private</span> MavenProject project<span style="color:#f92672">;</span>
</code></pre></div><p>Такую конфигурацию можно проверить только интеграционными тестами. Нужно честно запустить PlexusContainer и загрузить тестовый pom.xml.</p>
<p>Если начать искать в сети &ldquo;тестирование maven плагинов&rdquo;, то можно найти <a href="https://maven.apache.org/plugin-developers/plugin-testing.html">официальную документацию</a>. В ней как раз описаны два способа:</p>
<ol>
<li>Интеграционные тесты с помощью плагина maven-plugin-testing-harness</li>
<li>Функциональные тесты с помощью maven-verifier</li>
</ol>
<p>Мне идеально подходил первый способ. Но для полноты картины я решил разобраться в чём же заключается второй способ. По своей сути maven-verifier ищет инсталляцию maven в системном свойстве MVN_HOME и запускает в отдельном процессе <code>mvn &lt;some plugin&gt;</code>. После этого проверяется, что процесс завершился без ошибки, что нет логов с ошибками и тому подобное. Этот способ идеально подходит для тестирования плагинов с разными версиями maven. В моём же случае хотелось бы запускать maven в одной и той же JVM, что и юнит тесты. Это быстро и позволяет оценить покрытие кода тестами.</p>
<h2 id="интеграционные-тесты">Интеграционные тесты</h2>
<p>Свои тесты я предполагал сделать следующим образом:</p>
<ul>
<li>создать конфигурацию проекта success, в которой использованы всевозможные настройки плагина</li>
<li>написать тест для конфигурации success</li>
<li>для того чтобы протестировать опции по-умолчанию или граничные значения, необходимо взять конфигурацию success и изменить (перезаписать) параметры</li>
</ul>
<p>В результате у меня получился следующий тест:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">
<span style="color:#a6e22e">@Rule</span>
<span style="color:#66d9ef">public</span> MojoRule mrule <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> MojoRule<span style="color:#f92672">();</span>

<span style="color:#a6e22e">@Rule</span>
<span style="color:#66d9ef">public</span> TemporaryFolder folder <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> TemporaryFolder<span style="color:#f92672">();</span>

<span style="color:#a6e22e">@Test</span>
<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">testSuccess</span><span style="color:#f92672">()</span> <span style="color:#66d9ef">throws</span> Exception <span style="color:#f92672">{</span>
	File basedir <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> File<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;src/test/resources/success&#34;</span><span style="color:#f92672">);</span>
	MavenProject mavenProject <span style="color:#f92672">=</span> mrule<span style="color:#f92672">.</span><span style="color:#a6e22e">readMavenProject</span><span style="color:#f92672">(</span>basedir<span style="color:#f92672">);</span> <span style="color:#75715e">// загрузка конфигурации проекта из pom.xml
</span><span style="color:#75715e"></span>	mavenProject<span style="color:#f92672">.</span><span style="color:#a6e22e">getBuild</span><span style="color:#f92672">().</span><span style="color:#a6e22e">setDirectory</span><span style="color:#f92672">(</span>folder<span style="color:#f92672">.</span><span style="color:#a6e22e">getRoot</span><span style="color:#f92672">().</span><span style="color:#a6e22e">getAbsolutePath</span><span style="color:#f92672">());</span>
	Mojo mm <span style="color:#f92672">=</span> mrule<span style="color:#f92672">.</span><span style="color:#a6e22e">lookupConfiguredMojo</span><span style="color:#f92672">(</span>mavenProject<span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;package&#34;</span><span style="color:#f92672">);</span> <span style="color:#75715e">// загрузка и конфигурирования Mojo для тестирования
</span><span style="color:#75715e"></span>	mm<span style="color:#f92672">.</span><span style="color:#a6e22e">execute</span><span style="color:#f92672">();</span>
	assertEquals<span style="color:#f92672">(</span>1<span style="color:#f92672">,</span> mavenProject<span style="color:#f92672">.</span><span style="color:#a6e22e">getAttachedArtifacts</span><span style="color:#f92672">().</span><span style="color:#a6e22e">size</span><span style="color:#f92672">());</span> <span style="color:#75715e">// получение .deb пакета
</span><span style="color:#75715e"></span>	Artifact artifact <span style="color:#f92672">=</span> mavenProject<span style="color:#f92672">.</span><span style="color:#a6e22e">getAttachedArtifacts</span><span style="color:#f92672">().</span><span style="color:#a6e22e">get</span><span style="color:#f92672">(</span>0<span style="color:#f92672">);</span> 
	assertDeb<span style="color:#f92672">(</span><span style="color:#66d9ef">new</span> File<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;src/test/resources/expected/success&#34;</span><span style="color:#f92672">),</span> artifact<span style="color:#f92672">.</span><span style="color:#a6e22e">getFile</span><span style="color:#f92672">(),</span> artifact<span style="color:#f92672">.</span><span style="color:#a6e22e">getClassifier</span><span style="color:#f92672">());</span> <span style="color:#75715e">// сравнение директории с ожидаемыми файлами и содержимого .deb пакета
</span><span style="color:#75715e"></span><span style="color:#f92672">}</span>
</code></pre></div><ul>
<li>MojoRule - это вспомогательный класс для удобной работы с PlexusContainer. В нём есть множество удобных методов для загрузки плагина из pom.xml и инициализации вспомогательных классов.</li>
<li>TemporaryFolder - это правило для junit, которое создаёт временную папку вначале теста и удаляет её в конце.</li>
</ul>
<p>В таком тесте можно загружать гарантированно правильную конфигурацию проекта, менять настройки MavenProject и проверять всевозможные граничные значения.</p>
<p>Самым сложным и одновременно долгим и неприятным оказалась реализация метода <code>assertDeb</code>. По сути этот метод должен рекурсивно сравнивать директории в ожидаемой папке и внутренности .deb пакета.</p>
<p>После того как я написал этот тест, обнаружилось множество ошибок в тестируемом коде. В частности структура .tar архива, который входит в .deb пакет, создавалась неправильно. По стандарту все вложенные директории должны присутствовать в .tar файле. Например, для файла usr/share/doc/copyright должны быть следующие записи в .tar:</p>
<pre><code>usr/
usr/share/
usr/share/doc/
usr/share/doc/copyright
</code></pre><p>Я же ошибочно создавал только:</p>
<pre><code>usr/share/doc/copyright
</code></pre><h2 id="выводы">Выводы</h2>
<p>Писать тесты для maven плагинов можно. Однако, это требует достаточно высокий порог вхождения и глубокого понимания того, как работает maven. Нужно быть как минимум готовым к тому, что придётся заглянуть в исходники. Результат же стоит того. Автоматические тесты позволяют спокойно редактировать код плагина без опаски сломать обратную совместимость с сотнями других проектов, которые его используют. Причём редактирование включает в себя улучшение производительности. А представьте, что 15% улучшение сможет улучшить тысячи сборок сотен проектов на 15%!</p>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>В поисках хорошего кода</title>
      <link>https://dernasherbrezon.com/posts/code-smells/</link>
      <pubDate>Thu, 14 Nov 2019 18:22:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/code-smells/</guid>
      <description>В январе 2019 года я поставил себе задачу добавить поддержку спутников из gr-satellites в свой проект r2cloud. На тот момент их было около 70. Это достаточно большое количество, добавление которых, по моим оценкам, может занять до конца года. Однако, как показал опыт, я справился где-то за месяц. Некоторые спутники уже сгорели в атмосфере, поэтому их нет смысла добавлять. Некоторые спутники не предоставляют формат своей телеметрии, поэтому полученные биты данных, так и остаются битами данных.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>В поисках хорошего кода</h1></header>
      		<div class='container entry-content'>
  <p>В январе 2019 года я поставил себе задачу добавить поддержку спутников из <a href="https://github.com/daniestevez/gr-satellites">gr-satellites</a> в свой проект <a href="https://github.com/dernasherbrezon/r2cloud">r2cloud</a>. На тот момент их было около 70. Это достаточно большое количество, добавление которых, по моим оценкам, может занять до конца года. Однако, как показал опыт, я справился где-то за месяц. Некоторые спутники уже сгорели в атмосфере, поэтому их нет смысла добавлять. Некоторые спутники не предоставляют формат своей телеметрии, поэтому полученные биты данных, так и остаются битами данных. Их я тоже не стал добавлять, так как лучше уж сделать поддержку спутников с открытым форматом данных. В итоге я добавил поддержку 23 спутников.</p>
<p>Здесь важно отметить, что разные спутники передают разную информацию. Некоторые передают <a href="https://github.com/dernasherbrezon/jradio/blob/master/src/main/java/ru/r2cloud/jradio/astrocast/NMEA0183.java">небольшое количество данных</a>, некоторые десятки и <a href="https://github.com/dernasherbrezon/jradio/blob/master/src/main/java/ru/r2cloud/jradio/eseo/Type1.java">сотни полей</a>.</p>
<p>Сделав задачу, я обнаружил, что названия полей зачастую не согласуются с правилами java. Большинство полей я просто взял из оригинальных спецификаций, которые ничего не знают про Java. Из-за этого <a href="https://sonarcloud.io/project/activity?custom_metrics=code_smells&amp;graph=custom&amp;id=ru.r2cloud%3Ajradio">sonarcloud</a> начал показывать более 6000 code smells (sic!).</p>
<p>Я никогда не встречал проекты с таким большим количеством плохо пахнущего кода. По оценкам sonarcloud, на исправление этого мне бы потребовалось около 40 дней. Сам по себе такой код не является ошибочным. Просто его неудобно читать, поддерживать и он плохо согласуется с остальным кодом на Java. С другой стороны, 40 дней подряд сидеть и делать код ещё чуть-чуть более лучшим, мне тоже не хотелось. Всё-таки это хобби-проект, а не каторга. Поэтому, чтобы хоть как-то исправить ситуацию, я решил каждый день делать золотой commit. Золотой commit - это исправление плохо пахнущего кода в отдельно взятом файле.</p>
<p><img src="/img/code-smells/sonarcloud.png" alt=""></p>
<p>С февраля по ноябрь я исправил почти все 6000. При этом моя гит история стала выглядеть следующим образом:</p>
<p><img src="/img/code-smells/github.png" alt=""></p>
<p>В итоге сейчас в проекте около 150 случаев дурно пахнущего кода. Большинство из них - это дублирование кода. В настройках по умолчанию sonarcloud создаёт новую проблему, если есть дублирующий код. Я не большой сторонник полностью переиспользуемого кода. В каких то случаях - это хорошо. Например, при описании бизнес-логики. В других случаях - это может сильно мешать читаемости и делает код сильно связанным. Например, при описании структур данных.</p>
<p>Ещё одна достаточно частая проблема, на которую sonarcloud ругается - это <a href="https://sonarcloud.io/organizations/dernasherbrezon-github/rules?open=squid%3AS3776&amp;rule_key=squid%3AS3776">сложность кода</a>. К сожалению, да. Мой проект действительно сложный, тут сложно что-либо поделать.</p>
<p><img src="/img/code-smells/complex.png" alt=""></p>
<h2 id="выводы">Выводы</h2>
<p>Какие можно сделать выводы из всего этого? Терпенье и труд всё перетрут.</p>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Я слежу за спутниками</title>
      <link>https://dernasherbrezon.com/posts/satellite-telemetry/</link>
      <pubDate>Thu, 24 Oct 2019 21:40:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/satellite-telemetry/</guid>
      <description>Вступление Иногда в разговоре с разными людьми речь заходит о моём хобби. В таком случае я говорю, что слежу за спутниками. Для большинства это объяснение не слишком-то информативно, поэтому оно идеально подходит для того, чтобы продолжить разговор и одновременно возбудить любопытство. Однако, не все могут лично со мной пообщаться, поэтому в этом посте я хотел бы рассказать о том, что такое - следить за спутниками.
Телеметрия Первое, что приходит людям на ум, когда говоришь &amp;ldquo;следить за спутниками&amp;rdquo; - это шпионские страсти.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Я слежу за спутниками</h1></header>
      		<div class='container entry-content'>
  <h2 id="вступление">Вступление</h2>
<p>Иногда в разговоре с разными людьми речь заходит о моём хобби. В таком случае я говорю, что слежу за спутниками. Для большинства это объяснение не слишком-то информативно, поэтому оно идеально подходит для того, чтобы продолжить разговор и одновременно возбудить любопытство. Однако, не все могут лично со мной пообщаться, поэтому в этом посте я хотел бы рассказать о том, что такое - следить за спутниками.</p>
<h2 id="телеметрия">Телеметрия</h2>
<p>Первое, что приходит людям на ум, когда говоришь &ldquo;следить за спутниками&rdquo; - это шпионские страсти. Наверное, потому что спутники, благодаря кино, неразрывно связаны со слежением, супер секретными технологиями и пр. Однако, в реальности это совсем не так. Вернее, не совсем так. Конечно, существуют и военные спутники, и спутники-шпионы, но подавляющее количество спутников совсем обычные. Они бывают как коммерческие, за доступ к которым необходимо заплатить, так и научные, доступ к которым сложно получить из-за сложной наземной аппаратуры. Бывают также студенческие - простые с открытым протоколом, доступные для всех.</p>
<p><img src="/img/satellite-telemetry/telemetry.png" alt=""></p>
<p>Когда речь заходит о слежении за спутниками, я прежде всего имею в виду простые спутники с открытым доступом и протоколом. Зачастую авторы этих спутников заинтересованы в том, чтобы как можно больше людей получили доступ. Прежде всего это связано с тем, что спутник пролетает над университетом достаточно быстро - в среднем 10 минут. За это время университетская станция приёма сигнала может получить только небольшое количество информации о спутнике. Но что происходило со спутником в других точках земли? На обратной стороне земли? У полюса? Именно поэтому владельцы небольших спутников поощряют огромную сеть радиолюбителей по всему миру собирать данные и отправлять им по электронной почте (sic!) или через API. Для этих целей радиолюбители устанавливают у себя дома, на крыше, в саду станции приёма сигнала и по интернету передают его назад владельцам спутника.</p>
<p>Какие же данные передаёт спутник? Большинство спутников передают телеметрию. Это сильно-упакованная бинарная структура с информацией о всех (или почти всех) узлах спутника. Она может включать в себя:</p>
<ul>
<li>напряжение и ток солнечных панелей</li>
<li>температура процессора, контроллеров, панелей, <a href="https://github.com/dernasherbrezon/jradio/blob/master/src/main/java/ru/r2cloud/jradio/eseo/Type1.java#L124">статус записи в память</a></li>
<li>показания гироскопов и статус раскрытия солнечного паруса</li>
</ul>
<p>Телеметрия транслируется со спутника на землю постоянно с небольшим интервалом.</p>
<p>Во многих спутниках установлены экспериментальные компоненты, за которыми необходимо наблюдать. Телеметрия как раз и предоставляет информацию о том, как ведет себя в космосе тот или иной компонент. И чем больше телеметрии собирается, тем более точная информация попадает к производителям. По результатам полученных данных можно делать улучшения и пробовать различные подходы.</p>
<h2 id="сложности">Сложности</h2>
<p>В теории любой желающий может направить антенну на спутник и получить данные. На практике же, получение данных со спутника - это достаточно нетривиальный процесс. Во-первых, каждый спутник передаёт сигнал немного по-разному. Это прежде всего связано с самой конструкцией спутника и его антенны. А поскольку конструкции спутников отличаются, то и способы передачи сигнала разные. Во-вторых, владельцы спутника должны раскрыть формат телеметрии. В противном случае полученные биты так и останутся битами данных, из которых нельзя понять, что они значат.</p>
<p>К счастью, производители всё больше и больше понимают полезность географически распределённой сети приёма сигналов. Это в свою очередь позволяет проектам вроде <a href="https://github.com/daniestevez/gr-satellites">gr-satellites</a> добавлять поддержку новых спутников и <a href="https://satnogs.org">станциям по всему миру</a> принимать сигналы.</p>
<h2 id="что-же-делать-с-телеметрией">Что же делать с телеметрией?</h2>
<p>Как я уже говорил выше, телеметрия нужна прежде всего владельцам спутников. Мой проект <a href="https://github.com/dernasherbrezon/r2cloud">r2cloud</a> как раз позволяет получать информацию со спутников и делать ее доступной для всех. Для этого я интегрировался с проектами <a href="https://satnogs.org">SatNOGS</a> и <a href="http://data.amsat-uk.org/missions">Amsat-UK Data warehouse</a>. Схема работы выглядит следующим образом:</p>
<p><img src="/img/satellite-telemetry/diagram.png" alt=""></p>
<ol>
<li>Базовая станция получает сигнал со спутника, демодулирует и декодирует его</li>
<li>Если настроена интеграция с <a href="https://r2server.ru">r2server.ru</a>, то данные отсылаются на центральный сервер</li>
<li>Далее, с центрального сервера информация может быть отправлена в другие сервисы.</li>
</ol>
<h3 id="satnogs">Satnogs</h3>
<p>Проект Satnogs - это глобальная сеть приёма сигналов со спутников. Она позволяет централизованно хранить информацию о наблюдениях, а так же предоставляет API для загрузки данных извне. Этот API позволяет загружать принятую телеметрию по протоколу <a href="http://www.pe0sat.vgnet.nl/decoding/tlm-decoding-software/sids/">SiDS</a>. Я написал <a href="https://github.com/dernasherbrezon/sids">небольшую библиотеку</a>, которая реализует данный протокол и позволяет загружать телеметрию из r2cloud в satnogs.</p>
<p><img src="/img/satellite-telemetry/satnogsTelemetryAPI.png" alt=""></p>
<p>Satnogs также предоставляет сервис <a href="https://dashboard.satnogs.org">https://dashboard.satnogs.org</a>. В этом сервисе можно создать дашборд на котором можно выводить различные показатели спутника и анализировать данные.</p>
<p><img src="/img/satellite-telemetry/satnogsDashboard.png" alt=""></p>
<h3 id="amsat-uk-data-warehouse">Amsat-UK Data warehouse</h3>
<p>Этот сервис агрегирует информацию со спутников Funcube-1, Nayif-1, Jy1sat, Eseo. Для этого сервиса я также написал <a href="https://github.com/dernasherbrezon/fcdwClient">небольшую библиотеку</a>.</p>
<p><img src="/img/satellite-telemetry/fcdw.png" alt=""></p>
<p>Графики в этом сервисе чуть попроще, тем не менее позволяют делать некоторые выводы о том, как работает спутник.</p>
<p><img src="/img/satellite-telemetry/fcdwGraphs.png" alt=""></p>
<p>При желании можно выгрузить все данные и проанализировать локально.</p>
<h2 id="нужна-помощь">Нужна помощь</h2>
<p>Сообществу крайне необходимо как можно больше станций приема сигнала. И каждый может помочь в этом. Достаточно лишь установить антенну и настроить станцию приёма. Вся станция стоит <a href="https://github.com/dernasherbrezon/r2cloud/wiki/Bill-of-materials">не больше 100$</a> и состоит из простых и заменяемых компонент. Чем больше станций расположено по всему миру, тем больше информации мы можем узнать о космосе.</p>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Синхронизация кадров в Метеор-М №2</title>
      <link>https://dernasherbrezon.com/posts/meteor-mn2-frame-synchronization/</link>
      <pubDate>Fri, 13 Sep 2019 22:30:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/meteor-mn2-frame-synchronization/</guid>
      <description>Введение Спутник Метеор-М №2 передаёт информацию согласно протоколу LRPT. Этот протокол определяет физический, канальный и сетевой уровни модели OSI. На физическом уровне используется QPSK модуляция. На канальном уровне LRPT подразумевает использование кадров фиксированного размера с интерливингом и несколькими методами коррекции ошибок. Однако, на практике Метеор-М №2 не использует часть алгоритмов из стандарта. В этой статье я хотел бы описать как необходимо синхронизировать и получать кадры Метеор-М №2.
Генерация кадров Прежде, чем делать получение кадров, необходимо понять как они создаются на спутнике.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Синхронизация кадров в Метеор-М №2</h1></header>
      		<div class='container entry-content'>
  <h2 id="введение">Введение</h2>
<p>Спутник Метеор-М №2 передаёт информацию согласно протоколу <a href="https://en.wikipedia.org/wiki/Low-rate_picture_transmission">LRPT</a>. Этот протокол определяет физический, канальный и сетевой уровни модели <a href="https://ru.wikipedia.org/wiki/%D0%A1%D0%B5%D1%82%D0%B5%D0%B2%D0%B0%D1%8F_%D0%BC%D0%BE%D0%B4%D0%B5%D0%BB%D1%8C_OSI">OSI</a>. На физическом уровне используется QPSK модуляция. На канальном уровне LRPT подразумевает использование кадров фиксированного размера с интерливингом и несколькими методами коррекции ошибок. Однако, на практике Метеор-М №2 не использует часть алгоритмов из стандарта. В этой статье я хотел бы описать как необходимо синхронизировать и получать кадры Метеор-М №2.</p>
<h2 id="генерация-кадров">Генерация кадров</h2>
<p>Прежде, чем делать получение кадров, необходимо понять как они создаются на спутнике. Алгоритм частично описан в стандарте LRPT и частично в интернете. Итак, первым шагом данные, которые необходимо отправить, разбиваются на кадры фиксированной длины. После этого, к каждому кадру добавляется синхро-маркер <code>1ACFFC1D</code></p>
<p><img src="/img/meteor-mn2-frame-synchronization/framing.png" alt=""></p>
<p>После этого данные кодируются свёрточным алгоритмом со скоростью 1/2. Из этого следуют две важные вещи:</p>
<ul>
<li>количество выходных данных увеличивается вдвое</li>
<li>синхро-маркер становится другим. Это очень важно понимать для правильной синхронизации кадров, о которой я напишу чуть позже</li>
</ul>
<p><img src="/img/meteor-mn2-frame-synchronization/convolutional.png" alt=""></p>
<p>И&hellip; На этом всё. Несмотря на то, что стандарт предписывает ещё дополнительные преобразования данных (спойлер: Метеор-М №2-2 их всё-таки реализует), Метеор-М №2 получившийся поток данных сразу отправляет QPSK модулятору.</p>
<p><img src="/img/meteor-mn2-frame-synchronization/qpskmod.png" alt=""></p>
<h2 id="синхронизация-кадров">Синхронизация кадров</h2>
<p>В общем виде, для того, чтобы синхронизировать кадры, необходимо найти синхро-маркер и прочитать фиксированное количество байт кадра. На практике же, такой подход будет находить крайне малое количество кадров. Прежде всего из-за помех в принимаемом сигнале. Поэтому все алгоритмы по синхронизации кадров сильно отличаются от алгоритмов генерации кадров.</p>
<p>Забегая вперёд скажу, что для декодирования свёрточного кода применяется <a href="https://ru.wikipedia.org/wiki/%D0%90%D0%BB%D0%B3%D0%BE%D1%80%D0%B8%D1%82%D0%BC_%D0%92%D0%B8%D1%82%D0%B5%D1%80%D0%B1%D0%B8">алгоритм Витерби</a>. При этом алгоритм работающий с мягкими решениями демодулятора в среднем на 2дб эффективнее, чем с жёсткими решениями. Это значит, что каждый входящий бит будет передаваться в виде байта.</p>
<p><img src="/img/meteor-mn2-frame-synchronization/softdecisions.png" alt=""></p>
<p>В самом простом виде, алгоритм синхронизации имеет некий регистр жёстких решений демодулятора, который он постоянно сравнивает с искомым синхро-маркером <code>035D49C24FF2686B</code>. Каждый последующий байт конвертируется в бит и добавляется в регистр.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">byte</span> bitToCheck<span style="color:#f92672">;</span>
<span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>inputByte <span style="color:#f92672">&gt;</span> 0<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
	bitToCheck <span style="color:#f92672">=</span> 1<span style="color:#f92672">;</span>
<span style="color:#f92672">}</span> <span style="color:#66d9ef">else</span> <span style="color:#f92672">{</span>
	bitToCheck <span style="color:#f92672">=</span> 0<span style="color:#f92672">;</span>
<span style="color:#f92672">}</span>
dataRegister <span style="color:#f92672">=</span> <span style="color:#f92672">(</span>dataRegister <span style="color:#f92672">&lt;&lt;</span> 1<span style="color:#f92672">)</span> <span style="color:#f92672">|</span> <span style="color:#f92672">(</span>bitToCheck <span style="color:#f92672">&amp;</span> 0x1<span style="color:#f92672">);</span>
</code></pre></div><p>Если регистр совпал с необходимым синхро-маркером, то из потока читается кадр фиксированного размера и декодируется с помощью алгоритма Витерби.</p>
<p>Этот алгоритм можно улучшить. Дело в том, что в синхро-маркере <code>035D49C24FF2686B</code> могут быть ошибочные биты. Алгоритм Витерби может скорректировать ошибочные биты как в самом синхро-маркере, так и в данных, идущих за ним. Зная это, можно искать синхромаркер с некоторой точностью. Например, для Метеор-М №2 на основе экспериментов я допускаю до 17 ошибочных бит в регистре или 26%. Тут важно понимать, что небольшой порог не позволит находить пакеты в шумном сигнале, а слишком большой порог даст много ложно-положительных срабатываний.</p>
<p>Чтобы сделать ещё одно улучшение, надо понимать устройство QPSK демодулятора. Любой некогерентный PSK демодулятор подвержен так называемой ошибке неоднозначности фазы.</p>
<p><img src="/img/meteor-mn2-frame-synchronization/phase_ambiguity.png" alt=""></p>
<p>Для алгоритма это значит, что нужно искать не <code>035D49C24FF2686B</code>, а 8 различных вариантов синхро-маркера. Для этого я создал класс <a href="https://github.com/dernasherbrezon/jradio/blob/314552e7f90e800e201b0af2fca43ebbb82fc8b5/src/main/java/ru/r2cloud/jradio/PhaseAmbiguityResolver.java">PhaseAmbiguityResolver</a>, который на вход принимает значение синхро-маркера, а на выходе выдаёт все возможные синхро-маркеры в зависимости от ошибки фазы.</p>
<p>Далее алгоритм меняется следующим образом. В потоке бит ищется 8 различных вариантов синхро-маркера. Как только синхро-маркер найден, читается кадр фиксированного размера. Далее, в зависимости от найденного синхро-маркера, каждые 2 бита данных вращаются по часовой стрелке или против. Это необходимо для того, чтобы устранить ошибку неоднозначности фазы в самом кадре.</p>
<h2 id="выводы">Выводы</h2>
<p>Несмотря на то, что алгоритмы формирования кадров достаточно простые, алгоритмы поиска уже значительно сложнее. Зачастую они ставят перед выбором: количество успешно найденных кадров или увеличенное время (CPU/память) на поиск. Текущий алгоритм синхронизации кадров даёт <a href="https://dernasherbrezon.com/posts/dsp-java/">вполне неплохие результаты</a>.</p>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Логирование из Java в Journald</title>
      <link>https://dernasherbrezon.com/posts/journald-java/</link>
      <pubDate>Tue, 03 Sep 2019 21:22:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/journald-java/</guid>
      <description>Недавно обнаружил одну интересную особенность journald, которую сразу же решил использовать в r2cloud.
Для начала немного о том, как вообще работает логирование. Большинство Linux дистрибутивов перешли на systemd. Эта система имеет множество различных фич, в том числе поддержку логирования - journald. Чем же это логирование лучше syslog:
 Структурированные логи. Каждая запись в логе имеет некоторую мета-информацию. Например, уровень (INFO, DEBUG, ERROR), дату, сообщение и пр. В syslog же, запись в логе это строка текста, которую нужно правильно парсить.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Логирование из Java в Journald</h1></header>
      		<div class='container entry-content'>
  <p>Недавно обнаружил одну интересную особенность journald, которую сразу же решил использовать в <a href="https://github.com/dernasherbrezon/r2cloud">r2cloud</a>.</p>
<p>Для начала немного о том, как вообще работает логирование. Большинство Linux дистрибутивов перешли на <a href="https://ru.wikipedia.org/wiki/Systemd">systemd</a>. Эта система имеет множество различных фич, в том числе поддержку логирования - journald. Чем же это логирование лучше syslog:</p>
<ol>
<li>Структурированные логи. Каждая запись в логе имеет некоторую мета-информацию. Например, уровень (INFO, DEBUG, ERROR), дату, сообщение и пр. В syslog же, запись в логе это строка текста, которую нужно правильно парсить.</li>
<li>Бинарные файлы логов. С помощью специальной команды journalctl можно фильтровать логи по разным полям из мета информации. Например, можно посмотреть все ошибки за последний день, показать ошибки авторизации в sshd и пр.</li>
<li>Интеграция с systemd. stderr и stdout каждого юнита по-умолчанию парсится и отправляется в journald.</li>
</ol>
<p>Изначально я писал логи в отдельный файл, как принято в старом добром enterprise. Однако, со временем понял, что лучше писать в stdout/stderr, где эти логи попадут в journald. Это хорошо по нескольким причинам:</p>
<ol>
<li>Все логи в одном месте. Можно посмотреть что происходило в системе в момент, когда приложение упало или потеряло сеть.</li>
<li>Ротация и централизованное хранение логов. Если приложение сойдёт с ума и начнёт слать безумное количество логов, то существует единая настройка в системе, которая контролирует сколько места будет отведено под логи.</li>
<li>Удобный поиск по логам с помощью journalctl.</li>
</ol>
<p>Я написал простейший конфиг для java.util.logging:</p>
<pre><code>handlers=java.util.logging.ConsoleHandler
.level=INFO
java.util.logging.ConsoleHandler.formatter=java.util.logging.SimpleFormatter
java.util.logging.SimpleFormatter.format=[%4$s] %5$s%6$s [%2$s]%n
</code></pre><p>Тут самое важное - это конфигурация formatter. Я оставил только минимальное количество информации: уровень лога, сообщение, stacktrace, название класса и метод. Дату я убрал, так как она уже будет выводиться в journalctl. Результат получился следующий:</p>
<pre><code>Aug 15 17:40:09 raspberrypi java[481]: [INFO] ================================= [ru.r2cloud.R2Cloud start]
Aug 15 17:40:09 raspberrypi java[481]: [INFO] =========== started ============= [ru.r2cloud.R2Cloud start]
Aug 15 17:40:09 raspberrypi java[481]: [INFO] ================================= [ru.r2cloud.R2Cloud start]
</code></pre><p>Какое-то время меня устраивало как выглядят логи. Однако, со временем у меня скопилось достаточно большое количество серверов и захотелось отправлять нотификации в телеграм, как только случиться ошибка. Но прежде, чем делать централизованное логирование, необходимо сделать так, чтобы приложение правильно проставляло уровень логирования.</p>
<p>К сожалению, все логи из stdout и stderr попадают с PRIORITY=6, что значит INFO. Нужно как-то из самой библиотеки логирования указать journald какой уровень у каждого сообщения.</p>
<p>И вот тут-то я и нашёл одну интересную особенность journald. Оказывается, если сообщение начинается на <code>&lt;номер&gt;</code>, то journald попытается его распарсить согласно <a href="https://tools.ietf.org/html/rfc5424#section-6.2">RFC-5424</a>. Согласно этому RFC, этот номер будет указывать на уровень логирования.</p>
<p>Я написал небольшую библиотечку <a href="https://github.com/dernasherbrezon/journald-formatter">journald-formatter</a>, которая форматирует <code>java.util.logging.Level</code> в соответствующий номер из RFC. Если указать следующую конфигурацию:</p>
<pre><code>handlers=java.util.logging.ConsoleHandler
.level=INFO
java.util.logging.ConsoleHandler.formatter=ru.r2cloud.logging.JournaldFormatter
java.util.logging.JournaldFormatter.format=&lt;%4$s&gt;%5$s%6$s [%2$s]%n
</code></pre><p>То она позволит journald правильно распарсить уровень логирования:</p>
<pre><code>Sep 03 21:00:51 raspberrypi java[1352]: ================================= [ru.r2cloud.R2Cloud start]
Sep 03 21:00:51 raspberrypi java[1352]: =========== started ============= [ru.r2cloud.R2Cloud start]
Sep 03 21:00:51 raspberrypi java[1352]: ================================= [ru.r2cloud.R2Cloud start]
</code></pre><p>И ошибки теперь легко искать в логах:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">journalctl -u r2cloud -p err -n <span style="color:#ae81ff">10</span>
</code></pre></div><pre><code>-- Logs begin at Thu 2016-11-03 17:16:42 GMT, end at Tue 2019-09-03 22:09:24 BST. --
Sep 03 22:09:24 raspberrypi java[1869]: unable to get weather tle
</code></pre><h3 id="что-дальше">Что дальше?</h3>
<ol>
<li>Неплохо было бы передавать время из JUL напрямую в journald. Сейчас journald проставляет время получения события, а не время, когда оно произошло внутри JVM.</li>
<li>Настроить централизованное логирование с нотификациями через телеграм. Кто знает как, пишите в комментариях.</li>
</ol>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>История одной картинки</title>
      <link>https://dernasherbrezon.com/posts/decoding-meteor-m/</link>
      <pubDate>Mon, 26 Aug 2019 08:31:17 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/decoding-meteor-m/</guid>
      <description>Введение В ноябре 2018 года команда конференции JPoint объявила о конкурсе докладов для будущей конференции. Я очень воодушевился и решил подать свою заявку. В своём докладе я хотел рассказать о том, как я декодировал сигнал со спутника Meteor-M 2. В декабре мне позвонили организаторы и мы немножко поговорили про меня и мой доклад. Он им показался интересным и они попросили меня набросать презентацию и текст.
На январских праздниках я засел за презентацию и сделал, как мне кажется, неплохой доклад.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>История одной картинки</h1></header>
      		<div class='container entry-content'>
  <h2 id="введение">Введение</h2>
<p>В ноябре 2018 года команда конференции JPoint <a href="https://habr.com/ru/company/jugru/blog/429814/">объявила</a> о конкурсе докладов для будущей конференции. Я очень воодушевился и решил подать свою заявку. В своём докладе я хотел рассказать о том, как я декодировал сигнал со спутника Meteor-M 2. В декабре мне позвонили организаторы и мы немножко поговорили про меня и мой доклад. Он им показался интересным и они попросили меня набросать презентацию и текст.</p>
<p>На январских праздниках я засел за презентацию и сделал, как мне кажется, неплохой доклад. Парням из организации конференции он очень понравился. К сожалению, дальше меня отсеяли и я не попал на конференцию. Они посоветовали мне попробовать попасть на Joker 2019, и вот недавно мой доклад опять не приняли.</p>
<p>Я потратил очень много усилий, чтобы его сделать, поэтому выложу его сюда, в мой блог.</p>
<h2 id="описание-слайдов">Описание слайдов</h2>
<p><img src="/img/decoding-meteor-m/slides1.jpg" alt=""></p>
<p>Итак, история началась несколько лет назад, когда я вдохновленный успехами частной космонавтики и г-на Маска решил сам прикоснуться к космосу. На глаза мне попалась статья об rtl-sdr о приёме сигналов со спутников. В тот момент я понял. Это оно.</p>
<p>Конечно, спутников много и непонятно с чего начать, какая антенна нужна, какой софт. Поэтому я решил начать с чего-то, что можно потрогать и увидеть. С метео-снимков. На орбите сейчас летает множество метео-спутников, но самые доступные - это NOAA и наш Meteor. Я посмотрел на картинки в интернете и мне понравились снимки Meteor. Они большего разрешения, цифровые и выглядят лучше.</p>
<p><img src="/img/decoding-meteor-m/slides2.jpg" alt=""></p>
<p>Метеор-М снимает землю 24 на 7 с 2014 года.</p>
<p><img src="/img/decoding-meteor-m/slides3.jpg" alt=""></p>
<p>Он движется по солнечно-синхронной орбите. Что значит солнечно-синхронная? Это значит спутник пролетает над каждым участком земли в одно и то же локальное время. Прямо над нами он пролетал с утра и будет пролетать еще раз вечером через Х часов. Как же он снимает землю?</p>
<p><img src="/img/decoding-meteor-m/slides4.jpg" alt=""></p>
<p>По сути метео-спутник - это такой большой сканер. Те кто видел зеленую полоску сканера, теперь чуть лучше представляют работу спутника.</p>
<p>Спутник сканирует одну полосу картинки и сразу же передает её на землю. Никакого FTP. Все, кто смог принять сигнал, принимают одну и ту же полосу.</p>
<p><img src="/img/decoding-meteor-m/slides5.jpg" alt=""></p>
<p>Что же нужно, чтобы получить этот сигнал? Нужен спутник, антенна, rtl-sdr, компьютер (raspberrypi вполне хватит) и java. Тут нужно немного рассказать, что каждый компонент делает. Итак:</p>
<ol>
<li>Спутник шлёт нам отсканированную полосу</li>
<li>По радио</li>
<li>На нашу антенну. Антенна - это очень важно. На простой кусок проволки вы вряд ли сможете принять сигнал со спутника. Я использую discone антенну. Это не самая эффективная антенна, зато всенаправленная и позволяет получать сигналы со множества спутников на разных частотах. Вообще для меня выбор антенны был самым сложным. Их великое множество, но какую выбрать? Для того, кто не разбирается в теории электромагнитных волн, задача непростая. Кто-то пишет на форуме, что у него отлично ловится на эту антенну, кто-то пишет что наоборот худшая антенна. Мне пришлось вслепую выбрать её и попробовать.</li>
<li>rtl-sdr. Этот usb-стик преобразует аналоговый сигнал в цифровой и усиливает. На выходе получается поток байт. Плохую антенну я решил компенсировать хорошей электроникой. Я использую более продвинутый rtl-sdr v3 с экранированием и помехоустойчивостью.</li>
<li>raspberrypi. Кто-нибудь слышал про него? Я думаю большинство если не попробовало, то хотя бы слышало. Как показывает практика, мощности этого компьютера вполне хватит, чтобы получать картинку со спутника.</li>
<li>Чтобы получить доступ к этому потоку байтов в user space необходимо воспользоваться libusb + librtlsdr. Эта связка правильно инициализирует usb соединение, выставляет нужные регистры на usb-стике и шлёт поток байт пользователю. Звучит просто? Вроде бы. Но есть сложность: у usb стика нет внутренней памяти. Если приложение немножко подтормозило, то данные просто потеряются. Этот участок наиболее критичный к задержкам и скорости. Подтормаживать может как и наш любимый GC, так и сама операционная система. Поэтому имеет смысл записать данные во время пролета спутника в файл и потом уже спокойно обработать в офлайн. Именно поэтому Java отлично подходит. Это не задача реального времени.</li>
<li>Демодуляция/Декодирование/Создание картинки.</li>
<li>Вэб сервер, который будет раздавать картинки.</li>
</ol>
<p><img src="/img/decoding-meteor-m/slides6.jpg" alt=""></p>
<p><img src="/img/decoding-meteor-m/slides7.jpg" alt=""></p>
<p>Сохранение raw сигнала в файл можно сделать одной командой в баше</p>
<p>Читать данные из USB не имеет смысла на Java. Их нужно быстро писать в файл без задержек. Если учесть, что сам raspberrypi работает не быстро, то лучше старого доброго С сложно придумать.</p>
<p><img src="/img/decoding-meteor-m/slides8.jpg" alt=""></p>
<p>Итак, спутник пролетел, я записал файл. Можно смело выдохнуть и начать экспериментировать. В документации на Метеор-М написано, что сигнал фазово-модулированный.</p>
<p><img src="/img/decoding-meteor-m/slides9.jpg" alt=""></p>
<p>На самом деле нет. Вот так выглядит реальный сигнал. Кто-нибудь видит здесь реки и моря? Или хотя бы какую то структуру? Что это вообще такое? Моему разочарованию не было предела. Мало того, что я не понимал записан ли сигнал, так ещё непонятно что делать дальше.</p>
<p><img src="/img/decoding-meteor-m/slides10.jpg" alt=""></p>
<p>Я засел за теорию. Записался на курс обработки сигналов на курсере, забросил его, начал читать новую книжку, нашел старую pdf-ку от Nasa, вдохновился Вояджерами и продолжил.</p>
<p>Это были помехи и мой первый урок вне enterprise. Физический мир не такой, как нам рисуют на картинках в интернете. Помехи бывают очень разнообразные: соседская антенна, шумящие комплектующие самого raspberrypi, которые по USB передают высокочастотный электромагнитный сигнал прямо в rtl-sdr, холм вдалеке, пролетающий самолет и тд. Я просто принял это к сведению и начал двигаться дальше к цели. Очевидно помехи будут сильнее, когда спутник будет показываться над горизонтом. Однако, я рассчитывал получить хороший сигнал, когда спутник будет точно над головой. Я нашел хорошее описание QPSK демодулятора в GNURadio и решил двигаться дальше.</p>
<p><img src="/img/decoding-meteor-m/slides11.jpg" alt=""></p>
<p>Итак, что же такое QPSK? Это вид модуляции, при которой меняется фаза. Вот видите этот кончик в центре? В этот момент фаза поменялась.</p>
<p><img src="/img/decoding-meteor-m/slides12.jpg" alt=""></p>
<p>При QPSK модуляции есть 4 позиции, где может меняться фаза. Положение фазы определяет биты.</p>
<p><img src="/img/decoding-meteor-m/slides13.jpg" alt=""></p>
<p>После демодуляции у меня получился поток бит. Вот оно, подумал я и расчехлил спецификацию на формат данных Метеора. Рано. Это ещё не данные. Для надёжной передачи данных используются алгоритмы коррекции ошибок и в протоколе их целых 3. Первый алгоритм - алгоритм декодирования Витерби.</p>
<p><img src="/img/decoding-meteor-m/slides14.jpg" alt=""></p>
<p>Он позволяет декодировать свёрточное кодирование и исправлять некоторое количество ошибок. Для начала наверное нужно рассказать, что такое свёрточное кодирование.</p>
<p><img src="/img/decoding-meteor-m/slides15.jpg" alt=""></p>
<p>Свёрточное кодирование берёт на вход поток бит и для каждого входного бита выдает 2 бита. Причём формула генерации этих бит может зависеть от предыдущих бит. Я написал пару тестов для кодирования и декодирования. Знаете, их писать просто прелестно. Чистая математика, понятные результаты. Не то, что тестирование покупок в интернет-магазине с помощью Селениума.</p>
<p><img src="/img/decoding-meteor-m/slides16.jpg" alt=""></p>
<p>Следующим этапом коррекции биты необходимо пропустить через де-скремблер. Вообще скремблирование - это процесс преобразования одних битов в другие. Это прежде всего нужно для того, чтобы получить последовательность бит близкую к нормальному распределению. Чем более случайное распределение 0 и 1 в последовательности, тем легче распознать 0 от 1 при демодуляции. Знаете, задаешь себе вопрос &ldquo;А почему хорошо нормальное распределение?&rdquo; и уже через пару часов обнаруживаешь себя читающим pdf от Nasa 70-х годов, где они обосновывают достаточно формальной математикой выбор полинома для скремблирования. Но меня прежде всего интересовал результат. Поэтому я просто принял к сведению и начал реализовывать.</p>
<p><img src="/img/decoding-meteor-m/slides17.jpg" alt=""></p>
<p>Последним шагом коррекции ошибок, необходимо вычислить коды рида-соломона и попробовать исправить потенциальные ошибки передачи данных. Сейчас я постараюсь в общих словах описать алгоритм. Он основан на теории полей. Поля - это определенная группа чисел обладающих определенными свойствами. Перемножая определенную матрицу с данными, мы получаем те же самые данные и биты чётности. Эти биты вместе с данными позволяют определить в каком бите ошибка и, что не мало важно, какое же значение бита должно быть. Тут я хочу сделать небольшое признание. Я не понял, как работает алгоритм. Вот совсем. 2 недели были потрачены почти впустую. Поэтому я просто взял имплементацию на С от Phil Karn и переписал на Java. Видимо, сказывалось отсутствие серьёзного математического образования. Я применил своё хорошее инженерное образование и просто выделил алгоритм в отдельный модуль с понятным интерфейсом.</p>
<p><img src="/img/decoding-meteor-m/slides18.jpg" alt=""></p>
<p>Настоящие биты. Смотрите, вот они. Ну не восхитительно ли? Между прочим эти 3 алгоритма так же используются для связи с Вояджерами. Так что, если у вас на даче есть 70-ти метровая тарелка, то Вы сможете попросить Вояджер помигать лампочкой.</p>
<p><img src="/img/decoding-meteor-m/slides19.jpg" alt=""></p>
<p>Итак, у нас есть набор бит, теперь можно из них собрать кадры канального уровня. Для тех, кто помнит модель OSI сюрпризов быть не должно. В универе мне нравился предмет сетевые технологии. Мы разбирали протокол HDLC. Прямо с тех лекций я помню что кадр - это структура фиксированной длины. У него есть заголовок и пользовательские данные. Пользовательские данные в данном случае - это пакеты сетевого уровня. Первое практическое применение знаний за последние 10 лет.</p>
<p><img src="/img/decoding-meteor-m/slides20.jpg" alt=""></p>
<p>Пакеты сетевого уровня уже могут быть произвольной длины и частично не попадать в один кадр.</p>
<p><img src="/img/decoding-meteor-m/slides21.jpg" alt=""></p>
<p>После склейки пакетов, можно начать переходить на прикладной уровень. Вот он. Вот где происходит формирование картинки. Уже близко. Итак, пакеты бывают 4-х типов. R, G, B и административный. Они содержат в себе закодированные с помощью jpeg кусочки полосы сканирования R, G, B каналов. Но тут Засада. Нельзя просто так взять и сохранить байты в файл, назвать его картинка_из_космоса.jpg и хвастаться друзьям. Это же полоса сканирования. А значит у неё нет шапки, нет описания таблиц jpeg. Это одна бесконечная jpeg картинка.</p>
<p><img src="/img/decoding-meteor-m/slides22.jpg" alt=""></p>
<p>Дело было значит весной. Спрашиваю я своего друга:</p>
<ul>
<li>А ты знаешь как декодировать jpeg?</li>
<li>Ну там просто. По алгоритму Хаффмана применить обратное преобразование фурье и получится матрица 8*8 значений пикселов. Ну а дальше их надо склеить подряд и получится картинка.</li>
</ul>
<p>А потом я прочитал несколько статей о декодировании&hellip; В общем я хочу рассказать лишь о структурах данных, которые приходят со спутника. Преобразование битов в матрицу 8*8 я, пожалуй, оставлю для любознательных.</p>
<p><img src="/img/decoding-meteor-m/slides23.jpg" alt=""></p>
<p>Итак, каждый пакет содержит 14 MCU. В терминологии jpeg - это Minimum Coding Unit. Матрица пикселей 8*8.</p>
<p><img src="/img/decoding-meteor-m/slides24.jpg" alt=""></p>
<p>Метеор-М передает 14 пакетов одного цвета, потом 14 пакетов другого цвета, потом 14 пакетов третьего цвета и в конце 1 административный пакет. Всё вместе это даёт одну полосу сканирования. 14 пакетов на 14 MCU на 8 пикселей дают картинку шириной 1568 пикселей. Неплохо.</p>
<p><img src="/img/decoding-meteor-m/slides25.jpg" alt=""></p>
<p>После того как получены непосредственные пикселы, остаётся дело техники и ImageIO. Вот оно. Бессонные ночи анализа QPSK сигнала, тщетные поиски таблицы AC для декодирования jpeg и наконец первый результат. И ценность этой картинки не в том, что я теперь умею видеть погоду на небе. Ценность в том, что вся эта связка из железа, Java, кучи алгоритмов - работает. Что за 100 долларов можно собрать станцию, которая действительно работает. Спустя несколько месяцев работы и бессонных ночей я увидел что-то не похожее на бесконечные биты и потоки. Настоящие реки и моря.</p>
<p><img src="/img/decoding-meteor-m/slides26.jpg" alt=""></p>
<p><img src="/img/decoding-meteor-m/slides27.jpg" alt=""></p>
<p>Внутренний enterprise-перфекционист начинает бухтеть. Хочется большего. Хочется убедиться, что результат действительно финальный.</p>
<p><img src="/img/decoding-meteor-m/slides28.jpg" alt=""></p>
<p>Так и знал. Баг. Важный урок. Даже если алгоритмы отработали верно, никогда не знаешь наверняка, где бага. Когда есть картинка, где можно увидеть багу - это хорошо. В данном случае понятно, что неправильно наложены каналы. Видимо, красный канал смещён на одну строчку выше. Как такое могло произойти? Всё очень просто. Помните я говорил, что полоса сканирования - это идущие друг за другом пакеты одного канала? А что будет, если один кадр пропущен? Например, из-за помех. Нужно правильно высчитать индекс следующего пакета из следующего кадра и пропустить нужно количество пикселей в картинке.</p>
<p><img src="/img/decoding-meteor-m/slides29.jpg" alt=""></p>
<p>Так-то лучше. Что ещё можно сделать? Меня смущает эта одинокая полоса. Видимо был пропущен один пакет. Опять же, непонятно из-за помех или из-за баги в коде. Скорее всего из-за кода. Если бы были помехи, то и другие пакеты были бы пропущены.</p>
<p>Баг склейки пакетов в разных фреймах. Проявлялся только тогда, когда пакет не влазил в один фрейм и нужно было перенести в следующий.</p>
<p><img src="/img/decoding-meteor-m/slides30.jpg" alt=""></p>
<p>Результат достаточно приличный.</p>
<p><img src="/img/decoding-meteor-m/slides31.jpg" alt=""></p>
<p>Меня только бесит эта черная полоса в середине картинки. Края у нее резкие, фон черный. Может быть действительно помехи? Например, когда спутник пролетает точно над антенной, свет с венеры отразился от верхних слоёв атмосферы и вызвал помеху?</p>
<p>Нет, похоже бага в самом спутнике.</p>
<pre>
Уважаемые форумчане! Отвечу на часть вопросов по приёму с Метеора №2 в метрах. 
ИК каналы сегодня начали работу: по запросу разработчика включали очистку радиационного холодильника. 
Дыра при приёме в метровом диапазоне обусловлена переполнением буфера БИС-МВ и никуда не денется, только если уменьшим поток. 
Т.е. будут работать не три камеры в видимом диапазоне, а только две. 
Это косяк разработчика. Хотели повысить качество сжатия картинки. 
Поэтому при нормальном освещении каждые 6 мин 23 сек идет белая полоса. 
Сегодня зависал формирователь цифровых потоков. При приеме в метрах шла "джинса". 
Перезапустили в районе 11-ти часов.
</pre>
<p>А что если ещё немножко подкрутить ручки демодулятора?</p>
<p><img src="/img/decoding-meteor-m/slides32.jpg" alt=""></p>
<p>Теперь в районе Каспия появились дополнительные кусочки снимка. Теперь наверное уже всё.</p>
<p><img src="/img/decoding-meteor-m/slides33.jpg" alt=""></p>
<p>Вот она эта картинка. И это была её история.</p>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Декодирование телеметрии Aistechsat-3</title>
      <link>https://dernasherbrezon.com/posts/aistechsat-3/</link>
      <pubDate>Wed, 21 Aug 2019 14:40:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/aistechsat-3/</guid>
      <description>Вступление Наступило лето, а это значит начался отпускной сезон. Самое время немного расслабиться и добавить декодирование телеметрии для новых спутников. С января Daniel добавил десяток новых спутников. Я начал с Aistechsat-3.
Декодирование Как и в других случаях я взял готовый демодулятор и реализовал его на Java. Daniel написал, что формат телеметрии задокументирован, но он не успел задекодировать телеметрию.
Казалось бы, что может пойти не так? Документация есть, данные есть. Надо просто написать код.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Декодирование телеметрии Aistechsat-3</h1></header>
      		<div class='container entry-content'>
  <h2 id="вступление">Вступление</h2>
<p>Наступило лето, а это значит начался отпускной сезон. Самое время немного расслабиться и добавить декодирование телеметрии для новых спутников. С января <a href="https://github.com/daniestevez/gr-satellites">Daniel</a> добавил десяток новых спутников. Я начал с Aistechsat-3.</p>
<h2 id="декодирование">Декодирование</h2>
<p>Как и в <a href="https://github.com/dernasherbrezon/jradio">других случаях</a> я взял готовый демодулятор и <a href="https://github.com/dernasherbrezon/jradio/blob/master/src/test/java/ru/r2cloud/jradio/aistechsat3/Aistechsat3Test.java">реализовал</a> его на Java. Daniel написал, что формат телеметрии <a href="https://www.amsat-ea.org/app/download/11302778/Aistechsat-3+TLM+codes%2C+modulation+and+format+v1.0_AMSAT_EA.pdf">задокументирован</a>, но он не успел задекодировать телеметрию.</p>
<p>Казалось бы, что может пойти не так? Документация есть, данные есть. Надо просто написать код.</p>
<p>На практике оказалось всё не так просто.</p>
<p>Каждый пакет начинается с <a href="https://github.com/libcsp/libcsp">CSP</a> заголовка. Тут всё понятно. Это не первый спутник, который использует этот протокол. Даже в таком урезанном виде как здесь.</p>
<p>Далее идёт небольшой заголовок и данные.</p>
<p><img src="/img/aistechsat-3/1.png" alt=""></p>
<p>Вот тут прекрасно всё. Во-первых, A3200 manual - это платная документация. Та ссылка, которая есть в спецификации ведёт на описание A3200 в интернет магазине. Во-вторых, непонятно сколько всего дата элементов может быть. Вот пример описания одного из типов радиомаяка:</p>
<p><img src="/img/aistechsat-3/2.png" alt=""></p>
<p>Как видно, никакого разделения на дата элементы тут нет. Изначально я сделал чтение дата элемента после каждой строчки. Это логично, так как каждая строчка имеет номер &ldquo;Elements&rdquo;, который хоть как то похож на &ldquo;Data element&rdquo;. Получилось что-то вроде следующего:</p>
<pre><code>DataFieldMeta
extmag
DataFieldMeta
gyro
DataFieldMeta
torquer_duty
...
</code></pre><p>Не сработало. Количество байт в сообщении значительно меньше.</p>
<p>Тогда я начал смотреть непосредственно в байты. Каждый радиомаяк всегда начинается на метадата. Например, после отбрасывания всех заголовков:</p>
<pre><code>2E1E5CA265820004C1150000432DB7B0C28CD4DE43CEEF8642F8DACDC281BDAA43B15FB900000000433600000000000043A8000000000000000000000706070600000706070607063F54A3DBDC3F094D823D9929D0BA8347B838A85029B9C6108FDBDC08CF360000000000000000000000000000000000800000008000000080000000AA925CA265820004000000000002003A003A3D8DFC993D956E1DBCA30789BC5E8BBB3C9D734B01020201010000B40851B8C0
</code></pre><p>Метадата занимает 8 байт. Последний из них - это некий Source. Если предположить, что он всегда одинаковый в рамках одного маяка, то можно попытаться найти его и таким образом найти все места, где должна быть метадата.</p>
<p>В данном примере можно поискать <code>20004</code>. Эти байты включают в себя секунды из временной метки. Получается ещё одно место, где записана метадата: <code>AA925CA265820004</code>. Осталось отсчитать количество байт от первой метки и вставить чтение метадаты. И как раз для типа 20 у меня не получился этот трюк. Если отсчитать с конца количество байт и вставить чтение метадаты, то она будет неправильной.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">{
	<span style="color:#f92672">&#34;checksum&#34;</span>:		<span style="color:#ae81ff">0</span>,	
	<span style="color:#f92672">&#34;source&#34;</span>:		<span style="color:#ae81ff">25986</span>,	
	<span style="color:#f92672">&#34;timestamp&#34;</span>:	<span style="color:#ae81ff">2861718690</span>	
}
</code></pre></div><p>Это значит только одно: количество байт между первой метадатой и второй неправильное. Я остановился в дебаге посмотреть, что же получается. suns_temp хоть и выглядит странно, но вполне логично: <code>[1798, 1798, 0, 1798, 1798, 1798]</code>. А вот уже следующее поле gyro выглядит неправильно: <code>[0.83062524, -2.15087787E17, -1.3929482E-37]</code>. Как правило, данные со спутника вряд ли могут содержать E17 и E-37. Я ещё раз проверил спецификацию, но не нашёл расхождения. Видимо в спецификации есть ошибки. А пересчитав количество байт между первой и второй метадатой я нашёл расхождение в 2 байта с тем, что указано в спецификации. Если добавить <code>dis.skip(2);</code>, то метадата отлично считывается и дальнейшие данные выглядят логично.</p>
<p>К счастью, это был единственный тип радиомаяка с ошибками в документации. Остальные мне удалось достаточно быстро декодировать.</p>
<p>Я использовал <a href="https://db.satnogs.org/api/telemetry/?page=38&amp;satellite=44103">открытые данные</a> Satnogs, чтобы найти всевозможные типы маяков. И не нашёл. Например, в спецификации сказано, что тип 30 будет отправляться каждые 60 секунд. По факту же, я ни разу его не встретил.</p>
<p>Зато я встретил множество недокументированных типов сообщений. 0x40:</p>
<pre><code>0180D78301400100012E1E5D1057690004000000000000000000000000000000000000000000000000000000000000412A6717
</code></pre><p>Или 0x3f:</p>
<pre><code>0180D783013F0100013B1A5D10576900044142C2115A2205B0CA63E6B5CA8989494A5B046B44CC6065456BB17045C8C1370000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000CFBA95A751FB7C4A515A09C946C9497046C99111439D28A59B855D10576900043F42686A3EDC03153EE9BC70BE32157BBF202419BF286A303EA4DAEE3E8997F4BD4F205B3B4880E83AB47643C26D172442C80000B8F27416D7BBC179
</code></pre><p>Получается, спецификация не содержит все типы сообщений.</p>
<p>Ещё одна интересная вещь, которая меня заинтересовала - размер сообщения. После того, как я полностью прочитываю из <code>DataInputStream</code> данные, там всё ещё остаётся 4 байта. Это очень похоже на CRC32. Обычно контрольная сумма берётся от всех данных, поэтому я написал следующий код:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">long</span> expectedCrc32 <span style="color:#f92672">=</span> Crc32c<span style="color:#f92672">.</span><span style="color:#a6e22e">calculate</span><span style="color:#f92672">(</span>data<span style="color:#f92672">,</span> 0<span style="color:#f92672">,</span> data<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span> <span style="color:#f92672">-</span> 4<span style="color:#f92672">);</span>
<span style="color:#66d9ef">long</span> actualCrc32 <span style="color:#f92672">=</span> <span style="color:#f92672">((</span>data<span style="color:#f92672">[</span>data<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span> <span style="color:#f92672">-</span> 4<span style="color:#f92672">]</span> <span style="color:#f92672">&amp;</span> 0xFFL<span style="color:#f92672">)</span> <span style="color:#f92672">&lt;&lt;</span> 24<span style="color:#f92672">)</span> <span style="color:#f92672">|</span> <span style="color:#f92672">((</span>data<span style="color:#f92672">[</span>data<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span> <span style="color:#f92672">-</span> 3<span style="color:#f92672">]</span> <span style="color:#f92672">&amp;</span> 0xFFL<span style="color:#f92672">)</span> <span style="color:#f92672">&lt;&lt;</span> 16<span style="color:#f92672">)</span> <span style="color:#f92672">|</span> <span style="color:#f92672">((</span>data<span style="color:#f92672">[</span>data<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span> <span style="color:#f92672">-</span> 2<span style="color:#f92672">]</span> <span style="color:#f92672">&amp;</span> 0xFFL<span style="color:#f92672">)</span> <span style="color:#f92672">&lt;&lt;</span> 8<span style="color:#f92672">)</span> <span style="color:#f92672">|</span> <span style="color:#f92672">(</span>data<span style="color:#f92672">[</span>data<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span> <span style="color:#f92672">-</span> 1<span style="color:#f92672">]</span> <span style="color:#f92672">&amp;</span> 0xFFL<span style="color:#f92672">);</span>

</code></pre></div><p>Контрольная сумма при этом не совпадала. Я решил попробовать взять контрольную сумму от данных без учёта CSP заголовка:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">long</span> expectedCrc32 <span style="color:#f92672">=</span> Crc32c<span style="color:#f92672">.</span><span style="color:#a6e22e">calculate</span><span style="color:#f92672">(</span>data<span style="color:#f92672">,</span> Header<span style="color:#f92672">.</span><span style="color:#a6e22e">LENGTH</span><span style="color:#f92672">,</span> data<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span> <span style="color:#f92672">-</span> 4 <span style="color:#f92672">-</span> Header<span style="color:#f92672">.</span><span style="color:#a6e22e">LENGTH</span><span style="color:#f92672">);</span>
<span style="color:#66d9ef">long</span> actualCrc32 <span style="color:#f92672">=</span> <span style="color:#f92672">((</span>data<span style="color:#f92672">[</span>data<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span> <span style="color:#f92672">-</span> 4<span style="color:#f92672">]</span> <span style="color:#f92672">&amp;</span> 0xFFL<span style="color:#f92672">)</span> <span style="color:#f92672">&lt;&lt;</span> 24<span style="color:#f92672">)</span> <span style="color:#f92672">|</span> <span style="color:#f92672">((</span>data<span style="color:#f92672">[</span>data<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span> <span style="color:#f92672">-</span> 3<span style="color:#f92672">]</span> <span style="color:#f92672">&amp;</span> 0xFFL<span style="color:#f92672">)</span> <span style="color:#f92672">&lt;&lt;</span> 16<span style="color:#f92672">)</span> <span style="color:#f92672">|</span> <span style="color:#f92672">((</span>data<span style="color:#f92672">[</span>data<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span> <span style="color:#f92672">-</span> 2<span style="color:#f92672">]</span> <span style="color:#f92672">&amp;</span> 0xFFL<span style="color:#f92672">)</span> <span style="color:#f92672">&lt;&lt;</span> 8<span style="color:#f92672">)</span> <span style="color:#f92672">|</span> <span style="color:#f92672">(</span>data<span style="color:#f92672">[</span>data<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span> <span style="color:#f92672">-</span> 1<span style="color:#f92672">]</span> <span style="color:#f92672">&amp;</span> 0xFFL<span style="color:#f92672">);</span>
</code></pre></div><p>И это на удивление сработало. Опять же, в документации ни слова про контрольную сумму. А ведь это очень мощный инструмент определения корректности данных.</p>
<h2 id="выводы">Выводы</h2>
<p>Мне удалось декодировать большинство радиомаяков, хотя и с некоторыми трудностями. В целом это было очень увлекательно и чем-то похоже на детективную историю с поиском улик.</p>
<p>С другой стороны, документация от <a href="http://www.aistechspace.com">Aistech</a> вызывает больше вопросов, чем ответов. Из-за того, что они используют радиолюбительский диапазон, им необходимо раскрыть протоколы. Однако, из-за того, что это коммерческая компания, им необходимо скрыть свои эксперименты на орбите и технологию работы спутников. Получается такая двоякая непростая ситуация для компании. Мне же кажется, что доступ к нелицензируемым радиочастотам сильно ускорит разработку коммерческих спутников и в целом положительно скажется на освоении космоса. Главное, чтобы этим не злоупотребляли. А вот тут сложно.</p>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Расчёт вероятности ошибки для BPSK демодулятора</title>
      <link>https://dernasherbrezon.com/posts/jradio-ber-bpsk/</link>
      <pubDate>Fri, 16 Aug 2019 10:22:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/jradio-ber-bpsk/</guid>
      <description>Введение Спустя несколько недель я наконец-то закончил одну очень важную задачу - расчёт вероятности ошибки в BSPK демодуляторе. Почему это важно? Демодулятор работает с сигналом, который проходит через физическую среду. В этой среде возможны сильные или слабые возмущения, которые непосредственно влияют на сигнал. И принимаемый сигнал может меняться со временем от хорошего до плохого и обратно. Из-за этого нельзя однозначно сказать демодулятор &amp;ldquo;работает&amp;rdquo; или &amp;ldquo;не работает&amp;rdquo;. Чтобы оценить его эффективность, необходимо симулировать среду передачи данных и сказать сколько ошибок он выдаёт при разных возмущениях среды.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Расчёт вероятности ошибки для BPSK демодулятора</h1></header>
      		<div class='container entry-content'>
  <h2 id="введение">Введение</h2>
<p>Спустя несколько недель я наконец-то закончил одну очень важную задачу - расчёт вероятности ошибки в BSPK демодуляторе. Почему это важно? Демодулятор работает с сигналом, который проходит через физическую среду. В этой среде возможны сильные или слабые возмущения, которые непосредственно влияют на сигнал. И принимаемый сигнал может меняться со временем от хорошего до плохого и обратно. Из-за этого нельзя однозначно сказать демодулятор &ldquo;работает&rdquo; или &ldquo;не работает&rdquo;. Чтобы оценить его эффективность, необходимо симулировать среду передачи данных и сказать сколько ошибок он выдаёт при разных возмущениях среды. После этого уже можно сравнивать с теоретическими значениями и делать выводы.</p>
<h2 id="описание-теста">Описание теста</h2>
<p>Для того чтобы симулировать поведение демодулятора, я написал специальный тест. За основу я взял идею <a href="https://destevez.net/2017/07/ber-simulation-in-gnu-radio/">Daniel Estevez</a> и <a href="https://github.com/dernasherbrezon/jradio/blob/master/src/test/java/ru/r2cloud/jradio/demod/BpskDemodulatorBer.java">реализовал её</a> на java.</p>
<p>Идея заключается в том, что подавая на вход BSPK модулятора множество &ldquo;1&rdquo;, необходимо получить множество &ldquo;1&rdquo; на выходе демодулятора. Если в результате получается &ldquo;0&rdquo;, то это значит ошибка. Если подсчитать количество &ldquo;0&rdquo; на выходе и поделить на общее количество полученных битов, то получится вероятность ошибки (BER).</p>
<p>К сожалению, просто передавать &ldquo;1&rdquo; и получать &ldquo;1&rdquo; не получится. Необходимо сделать несколько шагов:</p>
<ul>
<li>сначала все генерируемые биты необходимо скрэмблировать. Это делается для того, чтобы в передаваемом сигнале было примерно одинаковое количество &ldquo;0&rdquo; и &ldquo;1&rdquo;. Почему это важно? Дело в том, что демодулятор должен выполнить синхронизацию символов. Если в передаваемом сигнале будут только &ldquo;1&rdquo;, то ему будет сложно принять решение сколько символов пришло &ldquo;1111&rdquo; или &ldquo;11111&rdquo;. Если же в принимаемом сигнале будет вперемешку &ldquo;0&rdquo; и &ldquo;1&rdquo;, то сигнал будет достаточно сильно меняться по фазе. И это сильно поможет при синхронизации символов.</li>
<li>далее биты необходимо дифференциально закодировать. Это значит, что необходимо передавать &ldquo;1&rdquo;, только если сигнал сменился с &ldquo;0&rdquo; на &ldquo;1&rdquo; или с &ldquo;1&rdquo; на &ldquo;0&rdquo;. Для чего? Приёмник может начать принимать сигнал в противофазе. В итоге все полученные биты будут инвертированы относительно оригинального сигнала. Однако, если передавать информацию через изменение битов, то после дифференциального декодирования информация восстановится без ошибок.</li>
<li>генерация BPSK сигнала. Для генерации сигнала и приёма используется согласующий Root Raised Cosine фильтр.</li>
<li>симуляция физического канала передачи данных. Здесь происходит самое интересное. По сути, эта симуляция - математическая модель, описывающая возмущения физической среды. С помощью неё можно симулировать фазовые, частотные и амплитудные колебания, добавить белый гауссовский шум, добавить различные начальные смещения. В моей симуляции я использовал только белый гауссовский шум, чтобы можно было сравнить с <a href="https://dernasherbrezon.com/posts/ber-bpsk/">теоретическим расчётом</a>.</li>
<li>демодуляция BPSK сигнала. Собственно, блок, который я собираюсь тестировать.</li>
<li>дифференциальное декодирование и дескрэмблирование.</li>
</ul>
<p>На выходе я должен получить поток битов, на основе которых можно посчитать вероятность ошибки. Тут, правда, есть ещё несколько интересных моментов, которые стоит упомянуть. Во-первых, необходимо отбросить какое-то количество бит в самом начале. Они могут быть заведомо ошибочными, из-за начальной синхронизации демодулятора и дескремблера. Во-вторых, количество действительно неправильных бит должно быть поделено на 6. Это прежде всего связано с дифференциальным кодированием и скрэмблированием.</p>
<p>Если была принята ошибка, то дифференциальное декодирование добавит ещё одну. Это значит необходимо поделить на 2. Для скремблирования я использую полином <code>0b00000000000100001</code>. А это значит, что на любую ошибку на входе, будет сгенерировано 3 ошибки на выходе. Итого получается 2*3=6.</p>
<h2 id="результаты">Результаты</h2>
<p>Прежде чем получить финальный результат, я провёл несколько измерений для различных конфигураций демодулятора. Изначально демодулятор содержал блок эквалайзера. Он был нужен прежде всего для того, чтобы бороться с <a href="https://ru.wikipedia.org/wiki/%D0%9C%D0%BD%D0%BE%D0%B3%D0%BE%D0%BB%D1%83%D1%87%D0%B5%D0%B2%D0%BE%D0%B5_%D1%80%D0%B0%D1%81%D0%BF%D1%80%D0%BE%D1%81%D1%82%D1%80%D0%B0%D0%BD%D0%B5%D0%BD%D0%B8%D0%B5">многолучевым распространением</a>. Однако, на практике характеристики демодулятора сильно хуже теоретических:</p>
<p><a href="/img/jradio-ber-bpsk/lmsdd.m"><img src="/img/jradio-ber-bpsk/lmsdd.png" alt=""></a></p>
<p>Синей линией обозначается теоретическое значение, красной - практическое измерение.</p>
<p>Ещё одним фактором влияющим на результат является количество данных. Вот пример расчёта для 100000 переданных битов:</p>
<p><a href="/img/jradio-ber-bpsk/100000bit.m"><img src="/img/jradio-ber-bpsk/100000bit.png" alt=""></a></p>
<p>А вот тот же расчёт, но для 1000000 бит:</p>
<p><a href="/img/jradio-ber-bpsk/ber-bpsk-demodulator.m"><img src="/img/jradio-ber-bpsk/ber-bpsk-demodulator.png" alt="bpsk demodulator"></a></p>
<p>Как видно на картинке, практическая реализация BPSK демодулятора почти совпадает с <a href="https://dernasherbrezon.com/posts/ber-bpsk/">теоретическими расчётами</a>. Это даёт уверенности в текущей реализации и позволяет начать оптимизировать другие показатели демодулятора. Также я могу в любой момент запустить тест и проверить изменились ли характеристики. Это очень мощный инструмент отладки.</p>
<h2 id="что-дальше">Что дальше?</h2>
<p>Можно добавить различные искажения среды и измерить реакцию демодулятора на них. Из того, что доступно:</p>
<ol>
<li>Симуляция многолучевого распространения.</li>
<li>Симуляция частотных и фазовых колебаний.</li>
</ol>
<p>Ещё одной важной характеристикой является скорость захвата несущей. Допустим изначально сигнал смещён на некоторую частоту. Это может возникнуть из-за неточного генератора сигнала в rtl-sdr или генератора сигнала самого спутника. В таком случае демодулятор должен уметь подстраиваться и компенсировать разницу частот. На эту подстройку должно уходить время. Было бы неплохо измерить его, и, возможно, улучшить.</p>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Тестирование SDR Filter v1.1</title>
      <link>https://dernasherbrezon.com/posts/test-sdr-filter/</link>
      <pubDate>Thu, 08 Aug 2019 19:20:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/test-sdr-filter/</guid>
      <description>Одна из моих базовых станций принимает очень много помех. Из-за низкой чувствительности rtl-sdr, полезный сигнал почти нельзя получить. У меня возникла идея о том, что часть помех может приходить от USB разъёма RPi. Чтобы проверить эту идею, я недавно приобрёл SDR Filter v1.1 от компании ExpElectroLab и решил сделать на него небольшое видео ревью.
  Процесс тестирования Самое интересное началось сразу же после распаковки устройства. Дело в том, что входящий USB порт формата Type B.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Тестирование SDR Filter v1.1</h1></header>
      		<div class='container entry-content'>
  <p>Одна из моих базовых станций принимает очень много помех. Из-за <a href="https://dernasherbrezon.com/posts/dynamic-range/">низкой чувствительности</a> rtl-sdr, полезный сигнал почти нельзя получить. У меня возникла идея о том, что часть помех может приходить от USB разъёма RPi. Чтобы проверить эту идею, я недавно приобрёл SDR Filter v1.1 от компании ExpElectroLab и решил сделать на него небольшое видео ревью.</p>

<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube.com/embed/7n8nLey6yYo" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>

<h2 id="процесс-тестирования">Процесс тестирования</h2>
<p>Самое интересное началось сразу же после распаковки устройства. Дело в том, что входящий USB порт формата Type B. Поэтому просто подключить последовательно фильтр и rtl-sdr к компьютеру не получится. В комплекте устройства USB переходника нет, поэтому пришлось идти в ближайший магазин и покупать дополнительный кабель.</p>
<p>После подключения выясняется, что устройство не работает.</p>
<p>Я измерил напряжение на входящем и исходящем USB портах. На входе 4.7В, а на выходе 3.2В. Видимо стандартного напряжения компьютера недостаточно. Но на всякий случай я спросил у авторов, в чём же может быть проблема. Оказывается, надо покупать более короткий шнур. Это первое USB устройство на моей памяти, которое работает в зависимости от длины шнура. На сайте производителя об этом не сказано.</p>
<p><img src="/img/test-sdr-filter/description.png" alt=""></p>
<p>Мне пришлось заказать ещё один шнур, на этот раз покороче. После подключения, загорелась лампочка, но rtl-sdr по-прежнему не определялся. На этот раз напряжение на выходном USB порту было 3.5В. По-прежнему недостаточно. Я связался с автором ещё раз и попросил помощи. Автор посоветовал закоротить диод D1. У меня дома нет паяльника, поэтому я не могу проверить это решение.</p>
<h2 id="выводы">Выводы</h2>
<ol>
<li>SDR Filter явно имеет проблемы с питанием. Непонятно как авторы тестировали его.</li>
<li>Мне не удалось заставить его работать, поэтому он теперь просто валяется в коробке.</li>
</ol>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Тестирование FM фильтров с помощью RTL-SDR</title>
      <link>https://dernasherbrezon.com/posts/test-fm-filter/</link>
      <pubDate>Sun, 14 Jul 2019 14:20:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/test-fm-filter/</guid>
      <description>TL;TR; Фильтры тестировать можно, но выводы нужно делать аккуратно.
Постановка задачи Архитектура rtl sdr требует специального фильтра на входе. Поскольку сильнейшими источниками сигнала являются фм станции, то я решил поставить фм фильтры на входе приёмника. Но прежде, чем устанавливать их, мне хотелось измерить частотные характеристики фильтров и пощупать их в деле. Для этого я купил несколько фм фильтров и собрал стенд для их тестирования.
Описание стенда Тестирование заключается в том, что генератор сигнала создаёт широкополосный шум по всей ширине спектра.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Тестирование FM фильтров с помощью RTL-SDR</h1></header>
      		<div class='container entry-content'>
  <p>TL;TR; Фильтры тестировать можно, но выводы нужно делать аккуратно.</p>
<h2 id="постановка-задачи">Постановка задачи</h2>
<p>Архитектура rtl sdr требует специального фильтра на входе. Поскольку сильнейшими источниками сигнала являются фм станции, то я решил поставить фм фильтры на входе приёмника. Но прежде, чем устанавливать их, мне хотелось измерить частотные характеристики фильтров и пощупать их в деле. Для этого я купил несколько фм фильтров и собрал стенд для их тестирования.</p>
<h2 id="описание-стенда">Описание стенда</h2>
<p>Тестирование заключается в том, что генератор сигнала создаёт широкополосный шум по всей ширине спектра. Фильтр отфильтровывает только часть. Разница между сигналом с фильтром и без, и есть характеристика фильтра. Вот как выглядит мой стенд:</p>
<p><img src="/img/test-fm-filter/1.jpg" alt=""></p>
<h3 id="софт">Софт</h3>
<p>rtl_power - программа из стандартной поставки <a href="https://github.com/osmocom/rtl-sdr">rtl-sdr</a>. Она позволяет сканировать большой диапазон частот, разбивая его участки примерно 2Mhz и выполняя быстрое преобразование фурье. После этого, результаты преобразуются в dbm. Все измерения производились с помощью одних и тех же настроек:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">rtl_power -f 50M:150M:100k -g <span style="color:#ae81ff">0</span> -c 20% -i 2m -1
</code></pre></div><p><a href="http://github.com/dernasherbrezon/rtlSpectrum">rtlSpectrum</a> - небольшая программа для удобного отображения результатов и сравнения нескольких графиков.</p>
<h3 id="генератор-сигнала">Генератор сигнала</h3>
<p><img src="/img/test-fm-filter/noise-source.jpg" alt=""></p>
<p>Достаточно дешёвый и хороший генератор широкополосного сигнала. В описании сказано, что он должен работать от напряжения 12В. На практике же, это слишком большое напряжение для rtl-sdr, поэтому <a href="http://blog.radiospy.ru/testy/achx-metr-iz-svistka.html#more-1452">согласно рекомендациям</a> я подключил его к источнику питания 5В. Для сравнения я измерил его частотную характеристику на 5В и 12В:</p>
<p><img src="/img/test-fm-filter/5v-12v.png" alt=""></p>
<p>На картинке зелёный график - это 12В, жёлтый - 5В, оранжевый - без генератора. Как видно, разница между 5В и 12В составляет примерно 5дб.</p>
<h3 id="аттенюатор">Аттенюатор</h3>
<p><img src="/img/test-fm-filter/attenuator.jpg" alt=""></p>
<p><a href="https://ru.wikipedia.org/wiki/%D0%90%D1%82%D1%82%D0%B5%D0%BD%D1%8E%D0%B0%D1%82%D0%BE%D1%80">Аттенюатор</a> - это устройство для плавного понижения электромагнитных колебаний. Как в дальнейшем показали опыты, он крайне необходим, чтобы получить более или менее хорошие результаты. Я использовал аттенюатор -10db. Вот пример понижения частот в ФМ диапазоне:</p>
<p><img src="/img/test-fm-filter/compare-attenuator-5v.png" alt=""></p>
<p>Видно, что снижение мощности происходит на 9дб, что почти является заявленными 10дб.</p>
<p>Когда я начал тестировать фильтры, выяснилось, что снижение напряжения на генераторе до 5В недостаточно. Вот небольшое сравнение характеристики фильтра с аттенюатором и без:</p>
<p><img src="/img/test-fm-filter/rtl-sdr-attenuator-effect.png" alt=""></p>
<p>По своим характеристикам фильтр должен давать уменьшение мощности на -60дб. Однако, судя по графику, он даёт только -30дб. При работе аттенюатора появляется более явный результат фильтрации. Однако, минимальное значение по-прежнему -35дб. Этот эффект называется &ldquo;перегрузка&rdquo;. Мощность входного сигнала слишком большая, поэтому <a href="https://dernasherbrezon.com/posts/dynamic-range/">динамического диапазона</a> rtl-sdr не хватает и нижняя часть графика обрезается. Вот пример измерения того же фильтра на профессиональном оборудовании:</p>
<p><img src="/img/test-fm-filter/rtl-sdr-fm-filter-real.jpg" alt=""></p>
<h3 id="фм-фильтры">ФМ фильтры</h3>
<p>В тесте участвовали следующие фильтры:</p>
<ul>
<li><a href="https://www.rtl-sdr.com/rtl-sdr-com-broadcast-fm-band-stop-filter-88-108-mhz-reject-now-for-sale/">rtl-sdr.com FM reject filter</a></li>
<li><a href="https://www.ebay.com/itm/FM-Notch-Filter-88-108MHz-Excellent-Rejection-85dB-Bandstop-9th-order-FM-Trap/282342066492?hash=item41bce6093c:g:O2MAAOSw-0xYTW3W">gpio labs</a></li>
<li><a href="https://www.amazon.co.uk/NooElec-Distill-Barebones-Broadcast-Applications/dp/B076D354LW">Distill FM</a> от NooElec</li>
</ul>
<h3 id="rtl-sdr-приёмник">rtl-sdr приёмник</h3>
<p><img src="/img/test-fm-filter/rtl-sdr.jpg" alt=""></p>
<p>В качестве rtl-sdr приемника я использовал <a href="https://www.amazon.com/dp/B0129EBDS2/ref=as_li_ss_tl?ie=UTF8&amp;linkCode=sl1&amp;tag=rsv0f-20&amp;linkId=9806dfa291f74f7cdb49e2cfbe3d34eb">rtl-sdr.com</a>. У него хорошие характеристики и удобный SMA коннектор.</p>
<h2 id="результаты-теста">Результаты теста</h2>
<p><img src="/img/test-fm-filter/result.png" alt=""></p>
<p>Где:</p>
<ul>
<li>жёлтый - Distill FM. <a href="/img/test-fm-filter/nooelec_diff.csv">Данные</a></li>
<li>зелёный - gpio labs. <a href="/img/test-fm-filter/gpio_diff.csv">Данные</a></li>
<li>оранжевый - rtl-sdr.com FM reject filter. <a href="/img/test-fm-filter/rtlsdrcom_diff.csv">Данные</a></li>
</ul>
<p>По ссылкам можно скачать результат для каждого фильтра, загрузить в <a href="http://github.com/dernasherbrezon/rtlSpectrum">rtlSpectrum</a> и сравнить их на разных частотах.</p>
<p>Выводы:</p>
<ul>
<li>фильтры соответствуют заявленным характеристикам. По крайней мере на столько, на сколько позволяет судить стенд.</li>
<li>с помощью rtl-sdr и rtl_power можно измерять характеристики фильтров, но делать это нужно очень аккуратно.</li>
</ul>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Работа с bash pipe из java</title>
      <link>https://dernasherbrezon.com/posts/bash-pipe-in-java/</link>
      <pubDate>Tue, 09 Jul 2019 20:50:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/bash-pipe-in-java/</guid>
      <description>Постановка задачи Не так давно передо мной встала задача работать с нативным приложением из java. Это приложение - rtl_sdr. Суть его работы достаточно простая: оно подключается к USB, читает данные и пишет их в файл или в stdout.
А дальше Обычно нативные приложения не рекомендуется запускать из JVM. Дело в том, что как только управление передаётся из JVM вовне, то все предоставленные гарантии JVM теряются. Но если хочется, то вызвать приложение можно так:</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Работа с bash pipe из java</h1></header>
      		<div class='container entry-content'>
  <h2 id="постановка-задачи">Постановка задачи</h2>
<p>Не так давно передо мной встала задача работать с нативным приложением из java. Это приложение - rtl_sdr. Суть его работы достаточно простая: оно подключается к USB, читает данные и пишет их в файл или в stdout.</p>
<h2 id="а-дальше">А дальше</h2>
<p>Обычно нативные приложения не рекомендуется запускать из JVM. Дело в том, что как только управление передаётся из JVM вовне, то все предоставленные гарантии JVM теряются. Но если хочется, то вызвать приложение можно так:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">Process process <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> ProcessBuilder<span style="color:#f92672">().</span><span style="color:#a6e22e">command</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;rtl_sdr&#34;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;-arg1&#34;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;value1&#34;</span><span style="color:#f92672">,</span> <span style="color:#f92672">...).</span><span style="color:#a6e22e">start</span><span style="color:#f92672">();</span>
<span style="color:#66d9ef">int</span> exitCode <span style="color:#f92672">=</span> process<span style="color:#f92672">.</span><span style="color:#a6e22e">waitFor</span><span style="color:#f92672">();</span>
</code></pre></div><p>Здесь все достаточно просто:</p>
<ul>
<li>запускается процесс</li>
<li>Java поток ожидает пока приложение завершится</li>
</ul>
<p>Однако, тут сразу же возникает проблема: rtl_sdr будет работать пока не получит команду от пользователя остановиться. Поэтому этот метод никогда не завершится. Значит для этого необходимо сделать отдельный метод, который бы вызывался с другого потока:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">complete</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
	process<span style="color:#f92672">.</span><span style="color:#a6e22e">destroy</span><span style="color:#f92672">();</span>
<span style="color:#f92672">}</span>
</code></pre></div><h2 id="новые-требования">Новые требования</h2>
<p>Итак, код работает в проде уже несколько месяцев. Но тут выясняется, что raspberry pi не успевает записывать на флэшку. Я <a href="https://dernasherbrezon.com/posts/rtlsdr-gzip/">провел тесты</a> и убедился, что сжатие входящих данных сильно ускоряет систему и делает её более стабильной.</p>
<p>Самый простой способ сделать сжатие можно следующим способом:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">byte</span><span style="color:#f92672">[]</span> buf <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#66d9ef">byte</span><span style="color:#f92672">[</span>BUF_SIZE<span style="color:#f92672">];</span>
<span style="color:#66d9ef">while</span> <span style="color:#f92672">(!</span>Thread<span style="color:#f92672">.</span><span style="color:#a6e22e">currentThread</span><span style="color:#f92672">().</span><span style="color:#a6e22e">isInterrupted</span><span style="color:#f92672">())</span> <span style="color:#f92672">{</span>
	<span style="color:#66d9ef">int</span> r <span style="color:#f92672">=</span> process<span style="color:#f92672">.</span><span style="color:#a6e22e">getInputStream</span><span style="color:#f92672">().</span><span style="color:#a6e22e">read</span><span style="color:#f92672">(</span>buf<span style="color:#f92672">);</span>
	<span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>r <span style="color:#f92672">==</span> <span style="color:#f92672">-</span>1<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
		<span style="color:#66d9ef">break</span><span style="color:#f92672">;</span>
	<span style="color:#f92672">}</span>
	gzipOutputStream<span style="color:#f92672">.</span><span style="color:#a6e22e">write</span><span style="color:#f92672">(</span>buf<span style="color:#f92672">,</span> 0<span style="color:#f92672">,</span> r<span style="color:#f92672">);</span>
<span style="color:#f92672">}</span>
gzipOutputStream<span style="color:#f92672">.</span><span style="color:#a6e22e">flush</span><span style="color:#f92672">();</span>
</code></pre></div><p>Но такой способ оказался достаточно медленным. Дело в том, что данные копировались в память JVM, а потом уже в gzip. Но если не писать через JVM, то остаётся только способ каким-нибудь образом использовать bash pipe. Немного повозившись с реализацией, у меня получилось следующее:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">Process process <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> ProcessBuilder<span style="color:#f92672">().</span><span style="color:#a6e22e">command</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;rtl_sdr_wrapper.sh&#34;</span><span style="color:#f92672">).</span><span style="color:#a6e22e">start</span><span style="color:#f92672">();</span>
<span style="color:#66d9ef">int</span> exitCode <span style="color:#f92672">=</span> process<span style="color:#f92672">.</span><span style="color:#a6e22e">waitFor</span><span style="color:#f92672">();</span>
</code></pre></div><p>И код враппера:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">rtl_sdr -arg1 value1 ... | gzip &gt; output.gz
</code></pre></div><p>Почти сразу после релиза стало понятно, что сломалась остановка процесса. Дело в том, что этот bash скрипт создаёт 2 подпроцесса. При вызове <code>process.destroy();</code> завершается сам скрипт и gzip. rtl_sdr при этом остаётся работать. Пришлось повозиться с bash-магией и получилось следующее:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">_term<span style="color:#f92672">()</span> <span style="color:#f92672">{</span> 
  kill -TERM <span style="color:#e6db74">&#34;</span>$rtl<span style="color:#e6db74">&#34;</span> 2&gt;/dev/null
<span style="color:#f92672">}</span>

rtl_sdr -arg1 value1 ... | gzip &gt; output.gz &amp;

rtl<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>jobs -p<span style="color:#66d9ef">)</span>
child<span style="color:#f92672">=</span>$! 
wait <span style="color:#e6db74">&#34;</span>$child<span style="color:#e6db74">&#34;</span>
</code></pre></div><p>Что же здесь происходит?</p>
<ul>
<li>устанавливается обработчик сигнала TERM. Этот сигнал посылает JVM при вызове метода destroy</li>
<li>запускается pipe и переходит в фоновый режим</li>
<li>получается pid первого процесса - rtl_sdr</li>
<li>скрипт начинает ожидать, когда завершиться процесс rtl_sdr</li>
</ul>
<p>Последним штрихом необходимо правильно передать код возврата. Есть две ситуации завершения работы:</p>
<ul>
<li>Нормальная работа. При нормальной работе rtl_sdr всегда должна завершаться через kill. И тогда статус должен быть 143. Однако, если завершать pipe с помощью <code>kill -TERM</code>, то pipe вернёт код возврата последней команды - gzip. И тогда этот код передастся команде wait, и она пробросит его выше. Этот код будет 0.</li>
<li>Завершение с ошибкой. Код возврата в таком случае 0. Он должен опять же проброситься в команду wait и дальше в Java.</li>
</ul>
<p>Решается эта проблема следующей командой:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">set -o pipefail
</code></pre></div><p>Она заставляет pipe вернуть код первой команды, которая завершилась не статусом 0.</p>
<h2 id="выводы">Выводы</h2>
<p>Если необходимо оптимизировать обработку данных на уровне операционной системы, то можно использовать bash pipe. И да, его можно вызывать из Java. Надо только делать это очень осторожно.</p>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Динамический диапазон rtl-sdr</title>
      <link>https://dernasherbrezon.com/posts/dynamic-range/</link>
      <pubDate>Sun, 30 Jun 2019 22:22:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/dynamic-range/</guid>
      <description>Ниже я сделал перевод одной замечательной заметки Mile Kokotov о динамическом диапазоне rtl-sdr. Это очень важный показатель, которым я заинтересовался и решил разобраться. Возможно кому-нибудь это тоже будет полезно.
 Большинство людей думает, что наиболее важной характеристикой радиоприёмника является чувствительность, но это не совсем так. Вообще, спроектировать и произвести приёмник с высокой чувствительностью не проблема. Гораздо сложнее для инженеров спроектировать приёмник с большим динамическим диапазоном, который смог бы принимать как очень слабые сигналы, так и очень сильные одновременно.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Динамический диапазон rtl-sdr</h1></header>
      		<div class='container entry-content'>
  <blockquote>
<p>Ниже я сделал перевод одной замечательной <a href="https://www.qsl.net/z33t/dynamic_range_eng.html">заметки Mile Kokotov</a> о динамическом диапазоне rtl-sdr. Это очень важный показатель, которым я заинтересовался и решил разобраться. Возможно кому-нибудь это тоже будет полезно.</p>
</blockquote>
<p>Большинство людей думает, что наиболее важной характеристикой радиоприёмника является чувствительность, но это не совсем так. Вообще, спроектировать и произвести приёмник с высокой чувствительностью не проблема. Гораздо сложнее для инженеров спроектировать приёмник с большим динамическим диапазоном, который смог бы принимать как очень слабые сигналы, так и очень сильные одновременно.</p>
<p>Перегрузка приёмника означает то, что он больше не является линейным и сам по себе начинает генерировать сигналы, добавляя шум. Очень сильные сигналы на входе приёмника делают его менее чувствительным, таким образом он больше не может принимать слабые сигналы до тех пор, пока существует сильный сигнал рядом. Не стоит забывать, что на вход приёмнику приходят все сигналы, несмотря на то, что нам нужен только один конкретный. Соответственно, чем шире полоса приёма, тем больше нужен динамический диапазон для того, чтобы избежать перегрузки.</p>
<p>Качество sdr приёмника зависит от множества факторов. И одним из наиболее важных параметров, которые напрямую влияют на качество sdr приёмника, является его динамический диапазон.</p>
<h1 id="что-же-такое-динамический-диапазон">Что же такое &ldquo;динамический диапазон&rdquo;?</h1>
<p>В общем случае, динамический диапазон - это отношение самого сильного сигнала, который можно принять, к самому слабому.</p>
<p>Для цифровых сигналов динамический диапазон определяется количеством битов в сэмпле: самый сильный сигнал использует все возможные биты, самый слабый - только один бит.</p>
<p>В sdr уровень аналогового сигнала, поступающего в АЦП, может быть отрегулирован (вручную или с помощью АРУ) для того, чтобы максимально эффективно использовать доступный динамический диапазон.</p>
<p>Если аналоговый сигнал слишком сильный, то его нельзя представить соответствующими значениями битов. В таком случае АЦП подставляет максимальное или минимальное значение. Это называется отсечение и с точки зрения обработки сигналов представляет собой форму нелинейного сигнала. При этом появляются фантомные сигналы, которые копируют оригинальный на различных частотах.</p>
<p>Если аналоговый сигнал слишком слабый, то его присутствие не сможет дать даже одного бита выходного цифрового сигнала. На практике же, более грубое представление цифрового сигнала приводит к потере информации. Эту ситуацию называют шумом квантования.</p>
<p>Динамический диапазон АЦП - это отношение между самым сильным и самым слабым сигналом, которое может быть переведено в цифровой вид без искажений.</p>
<p>Самый сильный сигнал представляет собой максимальный входящий сигнал. Обычно 0dBFS (dBFS означает децибел по отношению к максимальному уровню) - это максимально возможный цифровой сигнал. При этом более слабые сигналы становятся отрицательными. Например, минимальный уровень шума может быть -60dBFS, -80dBFS, -100 dBFS в зависимости от качества sdr приёмника и соотношения сигнал/шум.</p>
<p><img src="/img/dynamic-range/1.jpg" alt=""></p>
<p>Динамический диапазон SDR зависит от количества бит <a href="https://dernasherbrezon.com/posts/sqnr/">согласно формуле</a>:</p>
<p>$$
SQNR = 20\log_{10}(2^n\sqrt{\dfrac{3}{2}})
$$</p>
<p>Где n - количество бит, SQNR - динамический диапазон.</p>
<p>Согласно формуле динамический диапазон АЦП 8 бит равен ~50dB, 12 бит 74dB и 16 бит 98dB.</p>
<p>Почему же динамический диапазон важен для SDR?</p>
<p>Кто-то может подумать, что достаточно иметь АРУ (автоматическая регулировка усиления), которая поддерживает входной сигнал на необходимом уровне и, поэтому не нужен большой динамический диапазон. Это может сработать, но не стоит забывать что sdr приёмник получает сигнал на АЦП гораздо большей ширины, нежели необходимо. Дополнительная ширина сигнала позволяет получить спектограмму всей доступной полосы частот, но это так же значит, что на АЦП попадает множество энергии, в том числе и от нежелательных частот. Эти частоты могут быть достаточно сильными по сравнению с сигналом, который необходимо получить.</p>
<p>В таком случае, уровень усиления должен быть равен суммарной мощности всего радио сигнала поступающего на АЦП. Это решит проблему &ldquo;слишком сильного&rdquo; сигнала, при этом самый слабый сигнал будет определяться динамическим диапазоном. Тем не менее при большом динамическом диапазоне шум квантирования уменьшается, позволяя принимать слабые узкополосные сигналы.</p>
<p>Улучшить качество сигнала можно еще одним способом - используя более узкий аналоговый фильтр. Это позволит сократить входную мощность и позволит усилить сигнал без отсечения. Однако, это работает если sdr имеет встроенный настраиваемый фильтр.</p>
<p>В крайнем случае можно использовать фильтр, равный полосе принимаемого сигнала. Недостатком этого метода является то, что нельзя будет увидеть полный спектр.</p>
<h1 id="ограничения-динамического-диапазона">Ограничения динамического диапазона</h1>
<p>Помимо количества бит АЦП, динамический диапазон может зависеть от шума и фантомных сигналов.</p>
<p>Если в приёмнике нет предусилителя, то его динамический диапазон ограничен динамическим диапазоном АЦП. Но если он есть, то динамический диапазон ограничен либо АЦП, либо предусилителем. При этом шум усилителя задаёт минимальный сигнал, который может быть оцифрован.</p>
<p>Динамический диапазон системы должен быть больше соотношения сигнал/шум. Если же он меньше, то входящий сигнал будет искажён приёмником, и узким местом такой системы будет мощность усилителя.</p>
<p>Фантомные сигналы намного более опасны, чем шум. Они имеют гораздо большую амплитуду нежели шум и она не зависит от выбранной полосы пропускания. Эти сигналы появляются в результате нелинейности АЦП. SFDR для АЦП определяется как отношение RMS амплитуды сигнала к RMS амплитуды самого большего фантомного сигнала. SFDR представлен на картинке ниже:</p>
<p><img src="/img/dynamic-range/sfdr.jpg" alt="SFDR"></p>
<h1 id="использование-децимации">Использование децимации</h1>
<p>Есть некоторое заблуждение связанное с динамическим диапазоном широкополосных АЦП. Оно заключается в том, что АЦП работающее на 20МГц с динамическим диапазоном 74dB не может быть лучше радиоприёмника с динамическим диапазоном 85dB. Проблема в том, что сравнивается белое с пушистым. Нельзя говорить о динамическом диапазоне не упоминая ширину канала. Для радиолюбительского радио - это ширина приёмника. Она может быть 2400Гц для SSB или 500Гц для морзе.</p>
<p>На самом деле в некоторых sdr приёмниках используется децимация. Процесс децимации заключается в том, что цифровой сигнал, полученный с гораздо большей частотой дискретизации, уменьшается до интересующей частоты дискретизации. В результате динамический диапазон увеличивается за счёт &ldquo;усиления обработки&rdquo;. Усиление достигается за счёт того, что удаляется шум вне интересующей полосы частот, тем самым увеличивая соотношение сигнал/шум.</p>
<p>Например, Если взять 12-битный АЦП, работающий с частотой дискретизации 10МГц, то с помощью децимации можно увеличивать динамический диапазон на 3dB при каждом увеличении децимации в 2 раза:</p>
<table>
<thead>
	<tr>
		<th>Децимация</th>
		<th>alias-free bandwidth (Mhz)</th>
		<th>Увеличение (dB)</th>
		<th>Динамический диапазон (dB)</th>
	</tr>
</thead>
<tbody>
	<tr>
		<td>0</td>
		<td>8</td>
		<td>0</td>
		<td>74</td>
	</tr>
	<tr>
		<td>2</td>
		<td>4</td>
		<td>3</td>
		<td>77</td>
	</tr>
	<tr>
		<td>4</td>
		<td>2</td>
		<td>6</td>
		<td>80</td>
	</tr>
	<tr>
		<td>8</td>
		<td>1</td>
		<td>9</td>
		<td>83</td>
	</tr>
	<tr>
		<td>16</td>
		<td>0.5</td>
		<td>12</td>
		<td>86</td>
	</tr>
	<tr>
		<td>32</td>
		<td>0.25</td>
		<td>15</td>
		<td>89</td>
	</tr>
	<tr>
		<td>64</td>
		<td>0.125</td>
		<td>18</td>
		<td>92</td>
	</tr>
</tbody>
</table>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Расчёт SQNR</title>
      <link>https://dernasherbrezon.com/posts/sqnr/</link>
      <pubDate>Thu, 27 Jun 2019 21:22:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/sqnr/</guid>
      <description>Введение Если открыть спецификацию на любой rtl-sdr приемник, то можно увидеть следующую характеристику: АЦП - 8 бит. Почему эта характеристика важна? Почему о ней пишут и что она значит? Я решил разобраться и провёл небольшое расследование.
SQNR АЦП преобразует сигнал из аналогового вида в цифровой. Это преобразование по своей сути всегда неточное. Дело в том, что аналоговый сигнал непрерывный, а цифровой - набор отсчетов. Процесс преобразования сигнала называется квантированием. При этом часть информации теряется, а значит, в терминах обработки сигнала появляется шум.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Расчёт SQNR</h1></header>
      		<div class='container entry-content'>
  <h1 id="введение">Введение</h1>
<p>Если открыть спецификацию на любой rtl-sdr приемник, то можно увидеть следующую характеристику: АЦП - 8 бит. Почему эта характеристика важна? Почему о ней пишут и что она значит? Я решил разобраться и провёл небольшое расследование.</p>
<h1 id="sqnr">SQNR</h1>
<p>АЦП преобразует сигнал из аналогового вида в цифровой. Это преобразование по своей сути всегда неточное. Дело в том, что аналоговый сигнал непрерывный, а цифровой - набор отсчетов. Процесс преобразования сигнала называется квантированием. При этом часть информации теряется, а значит, в терминах обработки сигнала появляется шум. Этот шум называется шумом квантования. Обычно правда используют другой параметр - отношение сигнала к шуму квантирования (SQNR).</p>
<p>$$
SQNR = 20\log_{10}(\dfrac{V_{rms}}{V_{e}})
$$</p>
<p>где \(V_{rms}\) - это средне квадратичное сигнала (синусоиды),
\(V_{e}\) - это средне квадратичное ошибки квантирования.</p>
<p>В общем случае среднее квадратичное (RMS) это:</p>
<p>$$
V_{rms} = {\sqrt{{\dfrac{V_1^2 + V_2^2 &hellip; V_N^2 }{N}}}}
$$</p>
<p>Средне-квадратичные синусоиды лучше представить графически:</p>
<p><a href="/img/sqnr/rms_sinusoid.m"><img src="/img/sqnr/rms_sinusoid.png" alt=""></a></p>
<p>Поскольку верхняя часть равна нижней, то значение RMS не зависит от того, как много половинок проинтегрировано. Поэтому достаточно проинтегрировать только зеленую часть. RMS синусоиды вычисляются следующим образом:</p>
<p>$$
V_{rms} = {\sqrt{\dfrac{1}{T}\int_{0}^{T}x^2(t)dt}}
$$</p>
<p>Где \(x^2(t)\) - это уравнение синусоиды.</p>
<p>Уравнение в данном случае лучше записать в следующем виде:</p>
<p>$$
\begin{align}
x(t) = x_{peak}sin(t\dfrac{2\pi}{T}), \newline
V_{rms} = {\sqrt{\dfrac{x_{peak}^2}{T}\int_{0}^{T}\dfrac{1}{2}(1-cos(2\dfrac{2\pi}{T}t)dt}} \newline
= {\sqrt{\dfrac{x_{peak}^2}{2T}(T - sin(\dfrac{4\pi}{T}t)\dfrac{T}{4\pi}\Big|_0^T)}} \newline
= {\sqrt{\dfrac{x_{peak}^2}{2T}(T - \dfrac{T}{4\pi}(sin(4\pi) - sin(0))}} \newline
= \dfrac{x_{peak}}{\sqrt{2}}
\end{align}
$$</p>
<p>Теперь нужно найти \(x_{peak}\). Его можно выразить следующим образом:</p>
<p>$$
x_{peak} = \dfrac{q2^n}{2}
$$</p>
<p>Где n - это количество битов АЦП, q - разница уровня между двумя соседними битами. Если подставить в формулу, то получится следующее:</p>
<p>$$
V_{rms} = \dfrac{q2^n}{2\sqrt{2}}
$$</p>
<p>Теперь необходимо найти \(V_{e}\). Как доказал <a href="http://oldweb.mit.bme.hu/books/quantization/papers/Bennett.pdf">Bennett</a>, ошибка описывается пилообразной волной. Она получается из следующего графика:</p>
<p><a href="/img/sqnr/rms_error.m"><img src="/img/sqnr/rms_error.png" alt=""></a></p>
<p>Где синий график - это аналоговый сигнал, а красный - это цифровой.</p>
<p>Если вычесть один из другого, то как раз получится пилообразная волна:</p>
<p><a href="/img/sqnr/rms_sawtooth.m"><img src="/img/sqnr/rms_sawtooth.png" alt=""></a></p>
<p>Этот график описывается формулой:</p>
<p>$$
e(t) = st, \dfrac{-q}{2s} &lt; t &lt; \dfrac{q}{2s}
$$</p>
<p>Для линейного графика RMS будет выглядеть следующим образом:</p>
<p>$$
\begin{align}
V_{e} = \sqrt{\dfrac{s}{q}\int_{-q/2s}^{q/2s}(st)^2dt} \newline
= \dfrac{q}{\sqrt{12}}
\end{align}
$$</p>
<p>Теперь если подставить все значения в формулу:</p>
<p>$$
\begin{align}
SQNR = 20\log_{10}(\dfrac{V_{rms}}{V_{e}}) \newline
= 20\log_{10}(\dfrac{q2^n / 2\sqrt{2}}{q / \sqrt{12}}) \newline
= 20\log_{10}(2^n\sqrt{\dfrac{3}{2}})
\end{align}
$$</p>
<p>После этого можно построить график зависимости SQNR от числа битов:</p>
<p><a href="/img/sqnr/sqnr.m"><img src="/img/sqnr/sqnr.png" alt=""></a></p>
<h1 id="выводы">Выводы</h1>
<p>Из этого графика можно сделать интересные выводы. Например, динамический диапазон rtl-sdr не может быть больше 50db. Это очень важно применительно к измерению качества фильтров. Например, большинство FM фильтров имеют коэффициент ослабления около 60db. А это значит что с помощью rtl-sdr нельзя будет измерить такие фильтры.</p>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>JavaFX в 2019</title>
      <link>https://dernasherbrezon.com/posts/javafx-in-2019/</link>
      <pubDate>Sun, 16 Jun 2019 10:20:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/javafx-in-2019/</guid>
      <description>Зачем? Зачем вообще кому-то писать толстый клиент в 2019 году? Web и atom уже победили. Можно поставить браузер или еще 8Гб оперативной памяти и получить переливающееся приложение. К сожалению, не все задачи можно решать через web. Для измерения АЧХ фильтров, мне необходимо было достаточно простое приложение:
 запуск rtl_power и вывод результатов в виде графика чтение .csv файла и вывод в виде графика график должен реагировать на мышь и показывать текущее значение по X и Y  Понятно, что для такого простого приложения использовать web + web server или atom - это слишком.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>JavaFX в 2019</h1></header>
      		<div class='container entry-content'>
  <h2 id="зачем">Зачем?</h2>
<p>Зачем вообще кому-то писать толстый клиент в 2019 году? Web и <a href="https://atom.io">atom</a> уже победили. Можно поставить браузер или еще 8Гб оперативной памяти и получить переливающееся приложение. К сожалению, не все задачи можно решать через web. Для измерения АЧХ фильтров, мне необходимо было достаточно простое приложение:</p>
<ul>
<li>запуск <a href="http://kmkeen.com/rtl-power/">rtl_power</a> и вывод результатов в виде графика</li>
<li>чтение .csv файла и вывод в виде графика</li>
<li>график должен реагировать на мышь и показывать текущее значение по X и Y</li>
</ul>
<p>Понятно, что для такого простого приложения использовать web + web server или atom - это слишком. Другими альтернативами были <a href="https://developer.apple.com/swift/">swift</a>, <a href="https://www.qt.io">QT</a> или какой-нибудь <a href="https://dotnet.microsoft.com">.NET</a>. Но у всех у них есть один фатальный недостаток - они не на Java. Вообще, это не первое приложение, которое я писал на Java для десктопа. В далёком 2006 году у меня был небольшой компонент MultiLineTable, который работал поверх стандартного JTable из <a href="https://ru.wikipedia.org/wiki/Swing">Swing</a>. Он позволял делать сложную таблицу со вложенными столбцами.</p>
<p><img src="/img/javafx-in-2019/8536_original.jpg" alt=""></p>
<h2 id="процесс">Процесс</h2>
<p>По сравнению с 2006 годом, прогресс шагнул вперед. Теперь при разработке многие компоненты явно указывают на стандартный паттерн MVC.</p>
<p><img src="/img/javafx-in-2019/mvc.png" alt=""></p>
<p>В случае JavaFX:</p>
<ul>
<li>Model - FXML. Особый XML в котором описывается то, как компоненты будут расположены на формах. Поддерживаются вложенные XML, импорт XML и прочие приятные штуки. Писать модульный и переиспользуемый UI стало проще и стандартнее. Не обошлось и без ложки дегтя: расположение компонентов надо по-прежнему описывать с помощью различных Layout. С ними есть единственная проблема - никогда не знаешь, как будет выглядеть форма, пока не запустишь.</li>
<li>View - CSS. Все стили можно и нужно добавлять отдельным .css файлом. Тут не надо обольщаться - это не настоящий CSS. Многие атрибуты сделаны очень похожими на CSS, но их количество ограничено.</li>
<li>Controller - Controller. В JavaFX он прямо так и называется. Его можно явно привязать к форме. Вот пример:</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-xml" data-lang="xml"><span style="color:#f92672">&lt;BorderPane</span> <span style="color:#a6e22e">fx:id=</span><span style="color:#e6db74">&#34;borderPane&#34;</span>
	<span style="color:#a6e22e">xmlns:fx=</span><span style="color:#e6db74">&#34;http://javafx.com/fxml&#34;</span>
	<span style="color:#a6e22e">fx:controller=</span><span style="color:#e6db74">&#34;ru.r2cloud.rtlspectrum.Controller&#34;</span><span style="color:#f92672">&gt;</span>
<span style="color:#f92672">&lt;/BorderPane&gt;</span>
</code></pre></div><p>И потом использовать методы из контроллера:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-xml" data-lang="xml"><span style="color:#f92672">&lt;Button</span> <span style="color:#a6e22e">text=</span><span style="color:#e6db74">&#34;Run now&#34;</span> <span style="color:#a6e22e">onAction=</span><span style="color:#e6db74">&#34;#runNow&#34;</span> <span style="color:#f92672">/&gt;</span>
</code></pre></div><p>runNow - это публичный метод контроллера.</p>
<p>С помощью всех этих новых технологий и <a href="https://stackoverflow.com">stackoverflow</a> мне удалось за пару дней сделать вполне достойное приложение:</p>
<ul>
<li>асинхронные задачи</li>
<li>progress bar</li>
<li>отображение достаточно кастомизированного LineChart</li>
</ul>
<p><img src="/img/javafx-in-2019/white.png" alt=""></p>
<h2 id="передовой-javafx">Передовой JavaFX</h2>
<p>Несмотря на вполне рабочий результат, внутренний перфекционист не давал мне спать. Поэтому я потратил еще около 4 дней на исследования.</p>
<h3 id="тёмная-тема">Тёмная тема</h3>
<p>Во-первых, мне захотелось сделать тёмную тему в приложении. Дело в том, что MacOS у меня переключен на тёмную тему и многие приложения автоматически (или нет?) стали выглядеть в тон основным элементам ОС. Я решил узнать, можно ли поставить тёмную тему средствами JavaFX. Нельзя. По-умолчанию, все приложения JavaFX запускаются со стандартными стилями для заданной ОС. Вместе с умельцами со stackoverflow мне удалось сделать нечто похожее на тёмную тему.</p>
<ul>
<li>все стили JavaFX зависят от одного базового стиля &ldquo;-fx-base&rdquo;, поэтому, изменив его на тёмный, можно поменять стиль всего приложения.</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-css" data-lang="css">.<span style="color:#a6e22e">root</span> {
    <span style="color:#960050;background-color:#1e0010">-</span>fx-base: rgba(<span style="color:#ae81ff">60</span>, <span style="color:#ae81ff">63</span>, <span style="color:#ae81ff">65</span>, <span style="color:#ae81ff">255</span>);
}
</code></pre></div><ul>
<li>Определить какая сейчас тема установлена в операционной системе можно через системную команду. Она возвращает &ldquo;Dark&rdquo; для тёмной темы.</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">ProcessBuilder builder <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> ProcessBuilder<span style="color:#f92672">().</span><span style="color:#a6e22e">command</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;/usr/bin/defaults&#34;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;read&#34;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;-g&#34;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;AppleInterfaceStyle&#34;</span><span style="color:#f92672">);</span>
Process process<span style="color:#f92672">;</span>
<span style="color:#66d9ef">try</span> <span style="color:#f92672">{</span>
	process <span style="color:#f92672">=</span> builder<span style="color:#f92672">.</span><span style="color:#a6e22e">start</span><span style="color:#f92672">();</span>
	<span style="color:#66d9ef">int</span> resultCode <span style="color:#f92672">=</span> process<span style="color:#f92672">.</span><span style="color:#a6e22e">waitFor</span><span style="color:#f92672">();</span>
	<span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>resultCode <span style="color:#f92672">!=</span> 0<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
		<span style="color:#66d9ef">return</span> <span style="color:#66d9ef">false</span><span style="color:#f92672">;</span>
	<span style="color:#f92672">}</span>
<span style="color:#f92672">}</span> <span style="color:#66d9ef">catch</span> <span style="color:#f92672">(</span>Exception e1<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
	e1<span style="color:#f92672">.</span><span style="color:#a6e22e">printStackTrace</span><span style="color:#f92672">();</span>
	<span style="color:#66d9ef">return</span> <span style="color:#66d9ef">false</span><span style="color:#f92672">;</span>
<span style="color:#f92672">}</span>
</code></pre></div><p>Результат вполне неплох:</p>
<p><img src="/img/javafx-in-2019/dark.png" alt=""></p>
<p>Но шапка окна по-прежнему светлая! Ее, конечно, можно убрать, нарисовать свою тёмную и сэмулировать работу, но тогда придется эмулировать работу для каждой ОС. И в каждой ОС она выглядит и работает по-разному. В общем, я решил, что усилия и потенциальные баги не стоят того.</p>
<h3 id="выделение-текста">Выделение текста</h3>
<p>rtlSpectrum на старте отображает небольшую подсказку с чего начать. В частности, есть текст команды для генерации .csv файла.</p>
<p><img src="/img/javafx-in-2019/selectText.png" alt=""></p>
<p>Очевидно, что эту команду надо бы дать скопировать. Как бы не так. Современные браузеры приучили нас к тому, что в любом приложении можно выделить текст. Однако, это не так в десктоп-приложениях: чтобы выделить текст в Label, необходимо приложить усилия. В частности для JavaFX необходимо сделать фиктивный Node и заменить Label на Input с хитрым стилем, который бы мимикрировал под Label. Слишком сложно для такого простого улучшения.</p>
<h3 id="жирный-текст">Жирный текст</h3>
<p>Начальную подсказку надо было как-то выделить. &ldquo;Getting started&rdquo; явно терялась среди пары абзацев текста. Самое очевидное - это сделать размер шрифта больше и сделать его жирным. Оказывается, на Mac OS шрифт по-умолчанию <a href="https://bugs.openjdk.java.net/browse/JDK-8176835">не поддерживает bold</a>. На дворе 2019 год и Java не может отрисовать жирный шрифт. Решением стало использовать другой шрифт - &ldquo;Arial&rdquo;.</p>
<h2 id="сборка">Сборка</h2>
<p>Итак, приложение написано, шрифты побеждены, настало время сделать то, без чего ни одно приложение не может обойтись - сборка и дистрибьюция. Поскольку я знаю только <a href="https://ru.wikipedia.org/wiki/Java_Web_Start">Java Web start</a> и он, вроде как, давно умер, то я начал фантазировать на тему того, чего я бы хотел от идеальной дистрибьюции:</p>
<ul>
<li>нативное приложение</li>
<li>без зависимостей на jre</li>
<li>с инсталлятором</li>
<li>с иконкой</li>
<li>с gpg подписью и компанией &ldquo;dernasherbrezon&rdquo;</li>
</ul>
<p>Для начала необходимо собрать нативное приложение. Быстрый поиск в интернете ни к чему не привел. С одной стороны есть множество статей, как собрать приложение с помощью ant-javafx.jar, а с другой JavaFX была удалена из JDK начиная с версии 11. К сожалению, я не смог восстановить хронологию событий, но похоже новый способ через jmod и jlink должен был быть гораздо правильнее. Команда Jmod предназначена для того, чтобы собрать модуль. Этот модуль отличается от .jar тем, что может включать в себя нативные библиотеки, скрипты и пр. Jlink используется для линковки этого модуля и JRE. В результате получается сборка JRE, в которой установлены только модули нужные для работы приложения.</p>
<p>Поскольку приложение у меня собирается с помощью maven, то первым делом я начал искать плагины. Вот тут меня ждало первое разочарование. Официальный плагин <a href="https://maven.apache.org/plugins/maven-jmod-plugin/">maven-jmod-plugin</a> находится 2 года в статусе альфа. Почему? Неужели никто не использует новую модульную систему? При попытке использовать плагин, выскакивает ошибка <a href="https://issues.apache.org/jira/projects/MJMOD/issues/MJMOD-17">раз</a> и <a href="https://issues.apache.org/jira/projects/MJMOD/issues/MJMOD-7">два</a>. Я бросил это дело и решил вручную выполнить необходимые команды и посмотреть, действительно ли то, что получается, мне нужно.</p>
<p>После того как произошла сборка jmod, необходимо выполнить команду jlink:</p>
<pre><code>jlink --module-path &quot;target/jmods/&quot; --add-modules rtlSpectrum --output ./target/image/
</code></pre><p>И&hellip;ошибка:</p>
<pre><code>Error: Hash of javafx.base (a0351b6767b462b64c66b4cd99d6bfc1763761d1a27ce7c6c19e4db5ba33abc8) differs to expected hash (6ff380e1321d8dcc64b22151ebe8fb31eb10c4484040e49e452ca88d25c1b754) recorded in java.base
</code></pre><p>Откуда это вообще взялось? Что за хэш? Я ведь такого не генерировал. В тщетных попытках исправить ошибку я провел еще пару часов. В результате оказалось, что jmod может хранить в себе хэши других jmod, на которые ссылается.</p>
<pre><code>jmod describe $JAVA_HOME/jmods/java.base.jmod | grep javafx.base
hashes javafx.base SHA-256 6ff380e1321d8dcc64b22151ebe8fb31eb10c4484040e49e452ca88d25c1b754
</code></pre><p>Но в 11 версии же нет JavaFX! Оказывается в liberica jdk <a href="https://bell-sw.com/pages/java-11.0.3/">JavaFX включён</a>. Что же получается? Есть JDK/JRE в которых JavaFX модуль есть, а есть те в которых его нет. Если я буду писать приложение, которое зависит от JavaFX, то мне нужно его вместе с приложением поставлять или извне ожидать? В общем, явно существует путаница с тем, как паковать приложение.</p>
<p>Выкинув JavaFX из maven зависимостей, мне удалось собрать образ приложения. Он занимает ~100Мб и запускается командой <code>./bin/java -m  rtlSpectrum</code>. Простое приложение по выводу графика не должно занимать 100мегабайт. В результирующем образе нет rtlSpectrum.sh или просто rtlSpectrum. Этот образ - просто сборка jre, в которой по-умолчанию есть rtlSpectrum.</p>
<p>Все это привело меня к мысли о том, что надо делать по-старинке. Я откатился на java 8, где JavaFX есть по-умолчанию и начал собирать обычный jar. В итоге приложение мультиплатформенное, весит 26кб и требует java.</p>
<h2 id="что-дальше">Что дальше?</h2>
<p>За 6 дней у меня получилось написать достаточно простое приложение для десктопа. Его можно скачать на <a href="https://github.com/dernasherbrezon/rtlSpectrum/releases">github</a>, CI/CD сделан с помощью travis, качество кода анализируется sonarcloud. Из того, что не хватает:</p>
<ul>
<li>Тестирование с помощью <a href="https://github.com/TestFX/TestFX">TestFx</a></li>
<li>Измерение скорости запуска и потребления памяти в сравнении с нативным приложением</li>
</ul>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Время в Raspberrypi</title>
      <link>https://dernasherbrezon.com/posts/time-raspberrypi/</link>
      <pubDate>Sat, 08 Jun 2019 14:22:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/time-raspberrypi/</guid>
      <description>Разобраться со временем в Raspberrypi (RPi) меня сподвиг один достаточно неприятный баг. В какой-то момент моя базовая станция r2cloud просто переставала отправлять данные на сервер. В логах приложения при этом появляется следующая ошибка:
Jun 07 09:17:51 raspberrypi java[472]: java.lang.IllegalArgumentException: Bad sample time: 1559899071. Last update time was 1559902330, at least one second step is required Jun 07 09:17:51 raspberrypi java[472]: at com.aerse.core.RrdDb.store(RrdDb.java:799) Jun 07 09:17:51 raspberrypi java[472]: at com.aerse.core.Sample.update(Sample.java:194)  Что же это означает?</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Время в Raspberrypi</h1></header>
      		<div class='container entry-content'>
  <p>Разобраться со временем в Raspberrypi (RPi) меня сподвиг один достаточно неприятный баг. В какой-то момент моя базовая станция r2cloud просто переставала отправлять данные на сервер. В логах приложения при этом появляется следующая ошибка:</p>
<pre><code>Jun 07 09:17:51 raspberrypi java[472]: java.lang.IllegalArgumentException: Bad sample time: 1559899071. Last update time was 1559902330, at least one second step is required
Jun 07 09:17:51 raspberrypi java[472]:         at com.aerse.core.RrdDb.store(RrdDb.java:799)
Jun 07 09:17:51 raspberrypi java[472]:         at com.aerse.core.Sample.update(Sample.java:194)
</code></pre>
<p>Что же это означает? Тут нужно сделать небольшой экскурс в rrd. RRD расшифровывается как round robin database - <a href="https://ru.wikipedia.org/wiki/%D0%A6%D0%B8%D0%BA%D0%BB%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B0%D1%8F_%D0%B1%D0%B0%D0%B7%D0%B0_%D0%B4%D0%B0%D0%BD%D0%BD%D1%8B%D1%85">циклическая база данных</a>. Новые метрики перезаписывают старые. У каждой метрики есть время и значение. Важным требованием является то, что метрики должны идти по возрастанию времени. Нельзя записать метрику 5 недель назад, так как данные 5 недель назад могли быть уже перезаписаны 1 неделю назад. Соответственно, при попытке записи метрики с некорректным временем возникает ошибка.</p>
<p>При создании метрики я беру текущее время:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">db<span style="color:#f92672">.</span><span style="color:#a6e22e">createSample</span><span style="color:#f92672">();</span>
<span style="color:#f92672">...</span>
<span style="color:#66d9ef">public</span> Sample <span style="color:#a6e22e">createSample</span><span style="color:#f92672">()</span> <span style="color:#66d9ef">throws</span> IOException <span style="color:#f92672">{</span>
	<span style="color:#66d9ef">return</span> createSample<span style="color:#f92672">(</span>Util<span style="color:#f92672">.</span><span style="color:#a6e22e">getTime</span><span style="color:#f92672">());</span>
<span style="color:#f92672">}</span>
<span style="color:#f92672">...</span>
<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">long</span> <span style="color:#a6e22e">getTime</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
    <span style="color:#66d9ef">return</span> <span style="color:#f92672">(</span>System<span style="color:#f92672">.</span><span style="color:#a6e22e">currentTimeMillis</span><span style="color:#f92672">()</span> <span style="color:#f92672">+</span> 500L<span style="color:#f92672">)</span> <span style="color:#f92672">/</span> 1000L<span style="color:#f92672">;</span>
<span style="color:#f92672">}</span>
</code></pre></div><p>Получается, в базе хранится метрика в будущем. Всё это указывает на явные проблемы с системным временем.</p>
<h2 id="так-как-же-работает-время-в-raspberrypi">Так как же работает время в Raspberrypi?</h2>
<p>В RPi, а так же в различных embedded системах время работает не так, как в обычных компьютерах. В обычных компьютерах используется так называемые <a href="https://ru.wikipedia.org/wiki/%D0%A7%D0%B0%D1%81%D1%8B_%D1%80%D0%B5%D0%B0%D0%BB%D1%8C%D0%BD%D0%BE%D0%B3%D0%BE_%D0%B2%D1%80%D0%B5%D0%BC%D0%B5%D0%BD%D0%B8">часы реального времени</a> (RTC). Это специальный чип с независимым источником питания, который постоянно увеличивает счётчик времени. Даже если отключить компьютер, эта схема будет работать и увеличивать счётчик времени.</p>
<p><img src="/img/time-raspberrypi/rtc.jpg" alt=""></p>
<p>Вот действия при включении питания компьютера:</p>
<ol>
<li>компьютер загружается</li>
<li>ядро линукса получает время от RTC</li>
<li>стартуют сетевые службы и поднимаются сетевые интерфейсы</li>
<li>стартует NTPD, который получает текущее время из интернета по протоколу <a href="https://ru.wikipedia.org/wiki/NTP">NTP</a></li>
<li>он корректирует системное время и время RTC.</li>
<li>стартуют остальные службы и процессы</li>
</ol>
<p>Важно понимать, что RTC не является очень точным источником времени. Из-за этого на шаге 5 системные часы могут быть скорректированы. Обычно это совсем небольшая разница - секунды, редко - минуты.</p>
<p>В современных дистрибутивах NTPD обычно заменяют на <a href="https://wiki.archlinux.org/index.php/Systemd-timesyncd_(%D0%A0%D1%83%D1%81%D1%81%D0%BA%D0%B8%D0%B9)">systemd-timesyncd</a>. Эта более легковесная служба времени:</p>
<ol>
<li>содержит в себе легковесный NTP-клиент</li>
<li>получает список NTP серверов по протоколу DHCP от маршрутизатора</li>
</ol>
<p>Как же это работает в RPi? Совсем по-другому. Дело в том, что в RPi нет RTC чипа. В результате загрузка системы выглядит следующим образом:</p>
<ol>
<li>RPi загружается</li>
<li>стартует служба <a href="https://manpages.debian.org/jessie/fake-hwclock/fake-hwclock.8.en.html">fake-hwclock</a>. Она читает текущее время из файла <code>/etc/fake-hwclock.data</code></li>
<li>стартуют сетевые службы и поднимаются сетевые интерфейсы</li>
<li>стартует NTPD</li>
<li>он корректирует системное время, а fake-hwclock сохраняет текущее правильное время в файл</li>
<li>стартуют остальные службы и процессы</li>
</ol>
<h2 id="что-же-тут-может-пойти-не-так">Что же тут может пойти не так?</h2>
<ol>
<li>При самой первой загрузке в файле <code>/etc/fake-hwclock.data</code> лежит время сборки операционной системы</li>
<li>Если в RPi не настроена сеть, то время надо будет конфигурировать вручную</li>
<li>Если в RPi не настроена сеть и его выключить, то при следующем старте время продолжит увеличиваться с момента выключения. И если RPI будет выключен на час, значит время будет отличаться на час. Если на день, то на день.</li>
</ol>
<p>Но не это всё стало причиной бага. Если внимательно присмотреться, то и в случае с rtc, и в случае с fake-hwclock между шагом 5 и 6 существует race condition. NTPD или systemd-timesyncd обновят время асинхронно от старта операционной системы. А это значит, приложение может получить сначала время в будущем, а потом в прошлом.</p>
<h2 id="выводы">Выводы</h2>
<p>У этого исследования есть два вывода:</p>
<ol>
<li>я знаю причину возникновения ошибки</li>
<li>мне придётся обновить документацию. Теперь я не могу утверждать, что моя базовая станция может работать без интернета. Даже если вручную сохранить последние TLE спутников, без интернета текущее время может скакать очень сильно. А это значит, нельзя будет запланировать наблюдение.</li>
<li>возможно, хорошим выходом из ситуации может стать <a href="https://thepihut.com/blogs/raspberry-pi-tutorials/17209332-adding-a-real-time-clock-to-your-raspberry-pi">RTC для RPi</a></li>
</ol>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Расчёт мощности радиосигнала</title>
      <link>https://dernasherbrezon.com/posts/power-in-radio-channel/</link>
      <pubDate>Wed, 29 May 2019 07:48:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/power-in-radio-channel/</guid>
      <description>Нашёл в Интернете совершенно потрясающую визуализацию изменения мощности при передаче радио сигнала:

Это картинка описывает как изменяется мощность от передатчика к приёмнику. Формула следующая:
$$ P_r = P_t - L_{tc} + G_{ta} - L_{all} + G_{ra} - L_{rc} $$
Где,
 \( P_r \) - результирующая мощность полученного сигнала \( P_t \) - мощность передачи сигнала \(L_{tc}\) - потери в кабеле при передаче сигнала от передатчика на его антенну \(G_{ta}\) - усиление антенны \(L_{all}\) - потери в среде \(G_{ra}\) - усиление принимающей антенны \(L_{rc}\) - потери в кабеле приёмника  Большинство параметров достаточно очевидны, но собранные все вместе они дают хорошую картину изменения мощности.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Расчёт мощности радиосигнала</h1></header>
      		<div class='container entry-content'>
  <p>Нашёл в Интернете совершенно потрясающую визуализацию изменения мощности при передаче радио сигнала:</p>
<p><a href="https://www.cdt21.com/resources/TechnicalArticle/article9.asp"><img src="/img/power-in-radio-channel/level2-2.gif" alt=""></a></p>
<p>Это картинка описывает как изменяется мощность от передатчика к приёмнику. Формула следующая:</p>
<p>$$
P_r = P_t - L_{tc} + G_{ta} - L_{all} + G_{ra} - L_{rc}
$$</p>
<p>Где,</p>
<ul>
<li>\( P_r \) - результирующая мощность полученного сигнала</li>
<li>\( P_t \) - мощность передачи сигнала</li>
<li>\(L_{tc}\) - потери в кабеле при передаче сигнала от передатчика на его антенну</li>
<li>\(G_{ta}\) - усиление антенны</li>
<li>\(L_{all}\) - потери в среде</li>
<li>\(G_{ra}\) - усиление принимающей антенны</li>
<li>\(L_{rc}\) - потери в кабеле приёмника</li>
</ul>
<p>Большинство параметров достаточно очевидны, но собранные все вместе они дают хорошую картину изменения мощности. Так, например, чтобы увеличить мощность принимаемого сигнала, надо уменьшить потери на различных участках и/или увеличить усиление антенн.</p>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Расчёт вероятности ошибки для BPSK</title>
      <link>https://dernasherbrezon.com/posts/ber-bpsk/</link>
      <pubDate>Sun, 05 May 2019 18:22:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/ber-bpsk/</guid>
      <description>Введение Моя сеть приёма сигналов со спутников r2cloud постепенно растёт. Однако уровень приёма оставляет желать лучшего. Несмотря на то, что на спектограмме виден сигнал, демодулятор не может восстановить его. В попытках найти проблему, я понял, что мне не хватает фундаментальных знаний по теории обработки сигналов и некоторой математики. Дело в том, что в интернете зачастую выкладываются демодуляторы без обоснования их работы. Меня это не устраивает, потому что нужны метрики по которым я буду понимать насколько один алгоритм эффективнее другого.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Расчёт вероятности ошибки для BPSK</h1></header>
      		<div class='container entry-content'>
  <h2 id="введение">Введение</h2>
<p>Моя сеть приёма сигналов со спутников <a href="https://github.com/dernasherbrezon/r2cloud">r2cloud</a> постепенно растёт. Однако уровень приёма оставляет желать лучшего. Несмотря на то, что на спектограмме виден сигнал, демодулятор не может восстановить его. В попытках найти проблему, я понял, что мне не хватает фундаментальных знаний по теории обработки сигналов и некоторой математики. Дело в том, что в интернете зачастую выкладываются демодуляторы без обоснования их работы. Меня это не устраивает, потому что нужны метрики по которым я буду понимать насколько один алгоритм эффективнее другого. И стал ли новый код лучше, если я добавлю какой-нибудь другой блок в обработку.</p>
<p>Всё это привело меня к \( E_b / N_0 \). Эта метрика показывает отношение энергии сигнала, приходящейся на 1 бит принимаемого сообщения (\( E_b \)), к энергетической спектральной плотности шума (\( N_0 \)). Почему она так важна? Дело в том, что она не зависит от способа модуляции сигнала и пропускной способности канала. Из-за этого её можно использовать, чтобы сравнивать различные модуляции между собой. Обычно строят график отношения \( E_b / N_0 \) к вероятности ошибки (BER). Вот <a href="https://ru.wikipedia.org/wiki/Eb/N0">пример</a> графика сравнения BPSK/QPSK/8-PSK/16-PSK:</p>
<p><img src="/img/ber-bpsk/PSK_BER_curves.svg" alt=""></p>
<p>Что из этого графика можно понять?</p>
<ol>
<li>Если увеличивать энергию передаваемого бита, то уменьшается вероятность возникновения ошибки.</li>
<li>В BPSK/QPSK ошибка возникает значительно реже, чем в 8-PSK и 16-PSK при одинаковых значениях энергии передаваемого бита.</li>
<li>График, например, читается следующим образом: при \( E_b / N_0 \) равным 4 децибелла и BPSK модуляции можно получить 1 ошибочный бит на каждые 100 полученных.</li>
</ol>
<p>Мне же график прежде всего нужен:</p>
<ol>
<li>Сравнивать теоретические значения с практической реализацией демодулятора. Прямо сейчас я точно знаю, что различия есть из-за ограниченной точности АЦП. Дело в том, что rtl-sdr имеет разрешающую способность 8 бит. А в теории числа могут быть бесконечной точности. Именно эта разница и должна давать ошибку.</li>
<li>Анализировать улучшится ли демодулятор, если добавить какой-то определённый блок. Как минимум я хочу попробовать различные алгоритмы получения несущего сигнала и компенсации <a href="https://ru.wikipedia.org/wiki/%D0%9C%D0%BD%D0%BE%D0%B3%D0%BE%D0%BB%D1%83%D1%87%D0%B5%D0%B2%D0%BE%D0%B5_%D1%80%D0%B0%D1%81%D0%BF%D1%80%D0%BE%D1%81%D1%82%D1%80%D0%B0%D0%BD%D0%B5%D0%BD%D0%B8%D0%B5">многолучевого распространения</a>.</li>
</ol>
<p>Ну и для того, чтобы понять математику, я решил проделать выводы сам. Ниже я буду рассчитывать вероятности ошибки для BPSK (см. синий график выше). Вдохновение я черпал у <a href="http://www.dsplog.com/2007/08/05/bit-error-probability-for-bpsk-modulation/">dsplog</a> плюс добавлял свои мысли.</p>
<h2 id="дано">Дано</h2>
<p>Прежде всего необходимо описать физику процесса. Схема процесса показана ниже:</p>
<p><img src="/img/ber-bpsk/bpsk.png" alt=""></p>
<ol>
<li>Изначальное сообщение кодируется в аналоговый сигнал. &ldquo;1&rdquo; кодируется в \(+\sqrt{E_b}\), &ldquo;0&rdquo; кодируется в \(-\sqrt{E_b}\). Почему именно как корень из \(E_b\)? Не знаю. Это единственное место, где я не разобрался.</li>
<li>После этого сигнал складывается с <a href="https://ru.wikipedia.org/wiki/%D0%90%D0%B4%D0%B4%D0%B8%D1%82%D0%B8%D0%B2%D0%BD%D1%8B%D0%B9_%D0%B1%D0%B5%D0%BB%D1%8B%D0%B9_%D0%B3%D0%B0%D1%83%D1%81%D1%81%D0%BE%D0%B2%D1%81%D0%BA%D0%B8%D0%B9_%D1%88%D1%83%D0%BC">аддитивным белым гауссовским шумом</a>.</li>
<li>Далее сигнал демодулируется.</li>
</ol>
<p>Модулированный BPSK сигнал выглядит следующим образом:</p>
<p><a href="/img/ber-bpsk/bpsk-constellation.m"><img src="/img/ber-bpsk/bpsk-constellation.png" alt=""></a></p>
<p>Красными точками обозначается сигнал без шума. Синими - сигнал с добавлением белого гауссовского шума. Как демодулируется этот сигнал? Все точки, которые больше &ldquo;0&rdquo; становятся &ldquo;1&rdquo;, а те, что меньше &ldquo;0&rdquo; становятся &ldquo;0&rdquo;. На рисунке выше все синие точки достаточно далеко от &ldquo;0&rdquo;, поэтому информацию можно однозначно восстановить. Но что если шум будет сильнее?</p>
<p><a href="/img/ber-bpsk/ber-awgn.m"><img src="/img/ber-bpsk/ber-awgn.png" alt=""></a></p>
<p>Тут уже не всё так однозначно. Видно, что некоторые точки закодированные как &ldquo;1&rdquo; на самом деле оказались меньше &ldquo;0&rdquo;. И если бы я попытался их демодулировать, то получил бы неправильную информацию.</p>
<h2 id="решение">Решение</h2>
<p>Теперь, когда стало понятно влияние шума на результат демодуляции, можно переходить к графику зависимости вероятности от энергии сигнала. Этот график поможет посчитать вероятность ошибок для различных входных значений. Для начала возьмём сигнал без шума. Вероятность получения &ldquo;0&rdquo; или &ldquo;1&rdquo; всегда 1.</p>
<p><a href="/img/ber-bpsk/no-error-bpsk.m"><img src="/img/ber-bpsk/no-error-bpsk.png" alt=""></a></p>
<p>Частота получения ошибочных битов (Bit error rate) будет 0. Т.е. 0 ошибочных битов на бесконечное количество принятых. В случае наличия гауссовского шума, вероятность получения определяется гауссовской функцией вероятности:</p>
<p><a href="/img/ber-bpsk/awgn-bpsk.m"><img src="/img/ber-bpsk/awgn-bpsk.png" alt=""></a></p>
<p>Гауссовский шум определяется следующей формулой:</p>
<p>$$
p(x) = \dfrac{1}{\sqrt{2\pi\sigma^2}}e^\dfrac{-(x-\mu)^2}{2\sigma^2}
$$</p>
<p>Где:</p>
<ul>
<li>\(\mu=0\),</li>
<li>\(\sigma^2=N_0/2\)</li>
</ul>
<p>При передаче &ldquo;1&rdquo; \(\mu=+\sqrt{E_b}\), при &ldquo;0&rdquo; \(\mu=-\sqrt{E_b}\). Подставляя это в формулу:</p>
<p>$$
\begin{align}
P(x|s_0)=\dfrac{1}{\sqrt{\pi N_0}}e^\dfrac{-(x+\sqrt{E_b})^2}{N_0} \newline
P(x|s_1)=\dfrac{1}{\sqrt{\pi N_0}}e^\dfrac{-(x-\sqrt{E_b})^2}{N_0}
\end{align}
$$</p>
<p>Теперь самое интересное.</p>
<p><img src="/img/ber-bpsk/awgn-bpsk-error.png" alt=""></p>
<p>На этом рисунке показаны области возникновения ошибки. Зелёная область - это место, где возникает ошибка при передаче &ldquo;1&rdquo;, красная - при передаче &ldquo;0&rdquo;. Общую вероятность ошибки можно записать с помощью формулы полной вероятности:</p>
<p>$$
P(error)=\dfrac{1}{2}P(error|s_0) + \dfrac{1}{2}P(error|s_1)
$$</p>
<p>После этого необходимо найти каждую из вероятностей:</p>
<p>$$
\begin{align}
P(error|s_0) = \int_{0}^{\infty}P(x|s_0)dx = \dfrac{1}{\sqrt{\pi N_0}}\int_{0}^{\infty}e^\dfrac{-(x+\sqrt{E_b})^2}{N_0}dx \newline
P(error|s_1) = \int_{-\infty}^{0}P(x|s_1)dx = \dfrac{1}{\sqrt{\pi N_0}}\int_{-\infty}^{0}e^\dfrac{-(x-\sqrt{E_b})^2}{N_0}dx
\end{align}
$$</p>
<p>Обычно вероятность ошибки записывают с помощью <a href="https://ru.wikipedia.org/wiki/%D0%A4%D1%83%D0%BD%D0%BA%D1%86%D0%B8%D1%8F_%D0%BE%D1%88%D0%B8%D0%B1%D0%BE%D0%BA">функции ошибок</a>:</p>
<p>$$
erfc(x)=\dfrac{2}{\sqrt\pi}\int_{0}^{x}e^{-t^2}dt
$$</p>
<p>Для этого необходимо сделать следующее:</p>
<p>$$
z=\dfrac{y+\sqrt{E_b}}{\sqrt{N_0}} =&gt; z\sqrt{N_0} = y + \sqrt{E_b}
$$</p>
<p>Заменить пределы интегрирования:</p>
<p>$$
\begin{align}
y=0 =&gt; z = \dfrac{\sqrt{E_b}}{\sqrt{N_0}} \newline
y=\infty =&gt; z = \infty
\end{align}
$$</p>
<p>Получившаяся ошибка записывается как:</p>
<p>$$
\begin{align}
P(error|s_0)=\dfrac{1}{\sqrt{\pi N_0}}\int_\limits{\sqrt{\dfrac{E_b}{N_0}}}^{\infty}e^{-z^2}\sqrt{N_0}dz
=\dfrac{1}{\sqrt{\pi}}\int_\limits{\sqrt{\dfrac{E_b}{N_0}}}^{\infty}e^{-z^2}dz
=\dfrac{1}{2}erfc(\sqrt{\dfrac{E_b}{N_0}})
\end{align}
$$</p>
<p>Аналогично можно найти ошибку при передаче &ldquo;1&rdquo;:</p>
<p>$$
\begin{align}
P(error|s_1)=1-P(s_1)=1-\dfrac{1}{2}erfc(-\sqrt{\dfrac{E_b}{N_0}})
\end{align}
$$</p>
<p>Можно воспользоваться свойством функции ошибок:</p>
<p>$$
\begin{align}
erfc(-x)=2-erfc(x) =&gt; P(error|s_1) = \dfrac{1}{2}erfc(\sqrt{\dfrac{E_b}{N_0}})
\end{align}
$$</p>
<p>Если подставить в формулу полной вероятности:</p>
<p>$$
P(error)=\dfrac{1}{2}(\dfrac{1}{2}erfc(\sqrt{\dfrac{E_b}{N_0}})) + \dfrac{1}{2}(\dfrac{1}{2}erfc(\sqrt{\dfrac{E_b}{N_0}}))=\dfrac{1}{2}erfc(\sqrt{\dfrac{E_b}{N_0}})
$$</p>
<h2 id="ответ">Ответ</h2>
<p>Получившийся график:</p>














<img src="/img/ber-bpsk/ber-bpsk.png">


</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Подписанные ссылки</title>
      <link>https://dernasherbrezon.com/posts/signed-urls/</link>
      <pubDate>Wed, 01 May 2019 18:22:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/signed-urls/</guid>
      <description>Почти все REST сервисы имеют аутентификацию. Есть несколько способов её сделать:
 basic. В каждый запрос добавляется заголовок &amp;ldquo;Authorization&amp;rdquo; с логином и паролем.  GET / HTTP/1.1 Host: example.org Authorization: Basic Zm9vOmJhcg==  token. REST сервис обменивает логин и пароль на специальный токен аутентификации. Клиент должен все последующие запросы делать с этим токеном.  GET / HTTP/1.1 Host: example.org Authorization: Bearer 9yro9yueihfw497y33497y3oeiruhfvskdgjhfaowidayuh Аутентификация на основе токенов наиболее безопасная и гибкая. Токены можно отзывать и обновлять, в них можно класть дополнительную информацию.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Подписанные ссылки</h1></header>
      		<div class='container entry-content'>
  <p>Почти все REST сервисы имеют аутентификацию. Есть несколько способов её сделать:</p>
<ul>
<li>basic. В каждый запрос добавляется заголовок &ldquo;Authorization&rdquo; с логином и паролем.</li>
</ul>
<pre><code>GET / HTTP/1.1
Host: example.org
Authorization: Basic Zm9vOmJhcg==
</code></pre><ul>
<li>token. REST сервис обменивает логин и пароль на специальный токен аутентификации. Клиент должен все последующие запросы делать с этим токеном.</li>
</ul>
<pre><code>GET / HTTP/1.1
Host: example.org
Authorization: Bearer 9yro9yueihfw497y33497y3oeiruhfvskdgjhfaowidayuh
</code></pre><p>Аутентификация на основе токенов наиболее безопасная и гибкая. Токены можно <a href="https://ru.wikipedia.org/wiki/OAuth">отзывать и обновлять</a>, в них можно <a href="https://ru.wikipedia.org/wiki/JSON_Web_Token">класть дополнительную информацию</a>. С ними очень удобно работать из <a href="https://ru.wikipedia.org/wiki/%D0%9E%D0%B4%D0%BD%D0%BE%D1%81%D1%82%D1%80%D0%B0%D0%BD%D0%B8%D1%87%D0%BD%D0%BE%D0%B5_%D0%BF%D1%80%D0%B8%D0%BB%D0%BE%D0%B6%D0%B5%D0%BD%D0%B8%D0%B5">SPA приложений</a>. Например, доступ к защищённому ресурсу можно сделать следующим образом:</p>
<ul>
<li>Установить единый токен для всех запросов</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript"><span style="color:#a6e22e">axios</span>.<span style="color:#a6e22e">defaults</span>.<span style="color:#a6e22e">headers</span>.<span style="color:#a6e22e">common</span>[<span style="color:#e6db74">&#39;Authorization&#39;</span>] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;Bearer &#39;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">token</span>
</code></pre></div><ul>
<li>Делать вызовы к защищённым методам</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript"><span style="color:#a6e22e">$http</span>.<span style="color:#a6e22e">get</span>(<span style="color:#e6db74">&#39;/admin/config/general&#39;</span>).<span style="color:#a6e22e">then</span>(<span style="color:#66d9ef">function</span> (<span style="color:#a6e22e">response</span>) {
	<span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">response</span>)
})
</code></pre></div><p>Но что делать, если необходимо защитить статические ресурсы? Например, в <a href="https://github.com/dernasherbrezon/r2cloud">r2cloud</a> статические ресурсы это снимки со спутников, телеметрия и метрики производительности. Есть несколько способов.</p>
<h3 id="data-src-атрибут">Data-src атрибут</h3>
<p>Схема работы следующая:</p>
<ul>
<li>Вместо обычного <code>src</code> атрибута, указывается <code>data-src</code></li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">&lt;<span style="color:#f92672">img</span> <span style="color:#a6e22e">data-src</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;/admin/observation/picture.png&#34;</span>&gt;
</code></pre></div><ul>
<li>После загрузки страницы код на javascript должен проходить по всем элементам img, загружать через ajax картинки и проставлять их в тэг <code>src</code></li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript"><span style="color:#a6e22e">$</span>(<span style="color:#e6db74">&#34;img&#34;</span>).<span style="color:#a6e22e">attr</span>(<span style="color:#e6db74">&#34;src&#34;</span>, <span style="color:#e6db74">&#34;data:image/png;base64,&#34;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">response</span>);
</code></pre></div><p>У этого метода есть один большой недостаток: необходимо на каждой странице выполнять javascript код, который будет подгружать картинки. Но есть и другой способ.</p>
<h3 id="подписанные-ссылки">Подписанные ссылки</h3>
<p>Суть метода заключается в том, что к ссылке добавляется подпись. Эта подпись обладает следующими свойствами:</p>
<ul>
<li>позволяет получить данные без использования заголовка <code>Authorization</code>.</li>
<li>короткоживущая. Подпись содержит в себе время создания ссылки. Это время проверяется на сервере, и если оно превышает время жизни ссылки, то её данные нельзя получить.</li>
<li>её нельзя подделать. Она сгенерирована с использованием секретного ключа, который известен только на сервере.</li>
</ul>
<p>Вот как выглядит использование таких ссылок на странице:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">&lt;<span style="color:#f92672">img</span> <span style="color:#a6e22e">src</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;/img/a.jpg?hash=3679d97d8b1d497743cd8da8ba0440f5&amp;timestamp=1508716800000&#34;</span>&gt;
</code></pre></div><p>Где <code>hash</code> - это подпись, <code>timestamp</code> - время генерации ссылки. На сервере подпись можно <a href="https://github.com/dernasherbrezon/r2cloud/blob/master/src/main/java/ru/r2cloud/util/SignedURL.java">генерировать</a> следующим образом:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">computeMD5<span style="color:#f92672">(</span>path <span style="color:#f92672">+</span> timestamp <span style="color:#f92672">+</span> password<span style="color:#f92672">)</span>
</code></pre></div><p>Здесь нужно обратить внимание на то, что время включено в алгоритм генерации подписи. Это позволит защититься от <a href="https://ru.wikipedia.org/wiki/%D0%90%D1%82%D0%B0%D0%BA%D0%B0_%D0%BF%D0%BE%D0%B2%D1%82%D0%BE%D1%80%D0%BD%D0%BE%D0%B3%D0%BE_%D0%B2%D0%BE%D1%81%D0%BF%D1%80%D0%BE%D0%B8%D0%B7%D0%B2%D0%B5%D0%B4%D0%B5%D0%BD%D0%B8%D1%8F">атак повторного воспроизведения</a>.</p>
<h3 id="кэширование">Кэширование</h3>
<p>Данные, полученные по подписанным ссылкам, могут быть кэшированы браузером. Из-за этого необходимо аккуратно выставить заголовки ответа: не кэшировать на прокси серверах и кэшировать в браузере только на время жизни ссылки:</p>
<pre><code>Cache-Control: private, max-age=600
Last-Modified: Wed, 15 Nov 1995 04:58:08 GMT
</code></pre>
</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Тестирование ошибок файловой системы</title>
      <link>https://dernasherbrezon.com/posts/test-fs-failures/</link>
      <pubDate>Sat, 20 Apr 2019 21:50:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/test-fs-failures/</guid>
      <description>Большинство статей в моём блоге посвящены интересным вещам, с которыми я периодически сталкиваюсь. Эта статья не исключение. В одном из моих проектов - r2cloud я столкнулся с одной интересной ошибкой.
Вот, что мне удалось восстановить глядя на логи и исходный код:
 Диск полностью заполнился В какой-то момент времени обновилась конфигурация. Например, обновилось текущее значение PPM При попытке записать в файл, происходит ошибка IOException &amp;ldquo;no disk space&amp;rdquo; Файл пользовательских настроек полностью портится.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Тестирование ошибок файловой системы</h1></header>
      		<div class='container entry-content'>
  <p>Большинство статей в моём блоге посвящены интересным вещам, с которыми я периодически сталкиваюсь. Эта статья не исключение. В одном из моих проектов - <a href="http://github.com/dernasherbrezon/r2cloud">r2cloud</a> я столкнулся с одной интересной ошибкой.</p>
<p>Вот, что мне удалось восстановить глядя на логи и исходный код:</p>
<ol>
<li>Диск полностью заполнился</li>
<li>В какой-то момент времени обновилась конфигурация. Например, обновилось текущее значение <a href="https://davidnelson.me/?p=371">PPM</a></li>
<li>При попытке записать в файл, происходит ошибка IOException &ldquo;no disk space&rdquo;</li>
<li>Файл пользовательских настроек полностью портится. В зависимости от того, сколько диска было свободно, он становится либо частично записанным, либо пустым.</li>
</ol>
<p>Эта ошибка достаточно критичная. Дело в том, что с появлением большого количества спутников, диск будет периодически заполнятся. То есть, &ldquo;no disk space&rdquo; будет достаточно часто возникать. При этом пользовательские настройки не должны пропадать! Даже если диск полностью заполнен, приложение должно работать и отправлять в <a href="https://r2server.com">r2server</a> данные.</p>
<p>Исправить эту ошибку достаточно просто, однако, возникает немаловажный вопрос: а как вообще тестировать отказ файловой системы? И &ldquo;no disk space&rdquo; в частности?</p>
<h2 id="теория">Теория</h2>
<p>До JDK7 необходимо было бы создавать ещё один слой абстракции над файловой системой и делать его mock во время тестирования. В JDK7 появился специальный слой, абстрагирующий файловую систему: <code>java.nio.file.FileSystem</code>. Изначально <a href="http://github.com/dernasherbrezon/r2cloud">r2cloud</a> был написан на основе старого <code>java.io.File</code>, поэтому его необходимо переписать на новый API:</p>
<p><img src="/img/test-fs-failures/api.png" alt=""></p>
<h2 id="mockfilesystem">MockFileSystem</h2>
<p>Во время тестирования FileSystem необходимо заменить на MockFileSystem, которая генерирует IOException по заранее сконфигурированному сценарию. К сожалению, я не нашёл такую файловую систему, поэтому написал свою <a href="http://github.com/dernasherbrezon/mockfs">mockfs</a>.</p>
<p>Она позволяет проксировать запросы к файловой системе по-умолчанию и генерировать IOException при доступе к определённым файлам.</p>
<p>Тест при этом выглядит следующим образом.</p>
<p>Инициализация. Чтобы MockFileSystem использовалась, необходимо её передавать компонентам извне.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">	<span style="color:#a6e22e">@Before</span>
	<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">start</span><span style="color:#f92672">()</span> <span style="color:#66d9ef">throws</span> Exception <span style="color:#f92672">{</span>
		fs <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> MockFileSystem<span style="color:#f92672">(</span>FileSystems<span style="color:#f92672">.</span><span style="color:#a6e22e">getDefault</span><span style="color:#f92672">());</span>
		config <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> TestConfiguration<span style="color:#f92672">(</span>tempFolder<span style="color:#f92672">,</span> fs<span style="color:#f92672">);</span>
	<span style="color:#f92672">}</span>
</code></pre></div><p>Сам тест при этом выглядит следующим образом:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">	<span style="color:#a6e22e">@Test</span>
	<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">testCorruptedAfterFailedWrite</span><span style="color:#f92672">()</span> <span style="color:#66d9ef">throws</span> Exception <span style="color:#f92672">{</span>
		String lat <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;53.40&#34;</span><span style="color:#f92672">;</span>
		config<span style="color:#f92672">.</span><span style="color:#a6e22e">setProperty</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;locaiton.lat&#34;</span><span style="color:#f92672">,</span> lat<span style="color:#f92672">);</span>
		config<span style="color:#f92672">.</span><span style="color:#a6e22e">update</span><span style="color:#f92672">();</span>

		fs<span style="color:#f92672">.</span><span style="color:#a6e22e">mock</span><span style="color:#f92672">(</span>config<span style="color:#f92672">.</span><span style="color:#a6e22e">getTempDirectoryPath</span><span style="color:#f92672">(),</span> <span style="color:#66d9ef">new</span> FailingByteChannelCallback<span style="color:#f92672">(</span>3<span style="color:#f92672">));</span>
		Path userParentPath <span style="color:#f92672">=</span> fs<span style="color:#f92672">.</span><span style="color:#a6e22e">getPath</span><span style="color:#f92672">(</span>TestConfiguration<span style="color:#f92672">.</span><span style="color:#a6e22e">getUserSettingsLocation</span><span style="color:#f92672">(</span>tempFolder<span style="color:#f92672">)).</span><span style="color:#a6e22e">getParent</span><span style="color:#f92672">();</span>
		fs<span style="color:#f92672">.</span><span style="color:#a6e22e">mock</span><span style="color:#f92672">(</span>userParentPath<span style="color:#f92672">,</span> <span style="color:#66d9ef">new</span> FailingByteChannelCallback<span style="color:#f92672">(</span>3<span style="color:#f92672">));</span>

		String newLat <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;23.40&#34;</span><span style="color:#f92672">;</span>
		config<span style="color:#f92672">.</span><span style="color:#a6e22e">setProperty</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;locaiton.lat&#34;</span><span style="color:#f92672">,</span> newLat<span style="color:#f92672">);</span>
		<span style="color:#66d9ef">try</span> <span style="color:#f92672">{</span>
			config<span style="color:#f92672">.</span><span style="color:#a6e22e">update</span><span style="color:#f92672">();</span>
			fail<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;config should not be updated&#34;</span><span style="color:#f92672">);</span>
		<span style="color:#f92672">}</span> <span style="color:#66d9ef">catch</span> <span style="color:#f92672">(</span>Exception e<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
			<span style="color:#75715e">// expected
</span><span style="color:#75715e"></span>		<span style="color:#f92672">}</span>
		
		fs<span style="color:#f92672">.</span><span style="color:#a6e22e">removeMock</span><span style="color:#f92672">(</span>config<span style="color:#f92672">.</span><span style="color:#a6e22e">getTempDirectoryPath</span><span style="color:#f92672">());</span>
		fs<span style="color:#f92672">.</span><span style="color:#a6e22e">removeMock</span><span style="color:#f92672">(</span>userParentPath<span style="color:#f92672">);</span>

		config <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> TestConfiguration<span style="color:#f92672">(</span>tempFolder<span style="color:#f92672">,</span> fs<span style="color:#f92672">);</span>
		assertEquals<span style="color:#f92672">(</span>lat<span style="color:#f92672">,</span> config<span style="color:#f92672">.</span><span style="color:#a6e22e">getProperty</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;locaiton.lat&#34;</span><span style="color:#f92672">));</span>
	<span style="color:#f92672">}</span>
</code></pre></div><ul>
<li>В самом начале происходит запись в файл.</li>
<li>Потом идёт установка поведения файловой системы. В данной случае MockFileSystem будет выбрасывать IOException после записи 3 байт.</li>
<li>Очистка mock объектов.</li>
<li>Загрузка данных из файла и проверка того, что предыдущее значение успешно было загружено.</li>
</ul>
<p>После того как тест был написан, исправление ошибки достаточно простое:</p>
<ul>
<li>делать запись во временный файл</li>
<li>атомарно перезаписывать временный файл в результирующий</li>
</ul>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Сжимание I/Q потока на Raspberrypi</title>
      <link>https://dernasherbrezon.com/posts/rtlsdr-gzip/</link>
      <pubDate>Mon, 04 Mar 2019 17:22:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/rtlsdr-gzip/</guid>
      <description>Недавно я добавил поддержку более 20 спутников в r2cloud. Из-за этого принимаемых данных стало значительно больше и диск переполнился. Чтобы как-то решить эту проблему, я уменьшил количество сохраняемых наблюдений. Теперь сохраняются последние 3 наблюдения для каждого спутника. Это не сильно помогло:
Дело в том, что при пролёте спутника, я сохраняю данные в raw I/Q с частотой пример 240 000 сэмплов в секунду. Это создаёт файл:
240 000 байт/сек * 2 (канала) * 12 минут = 288000000 байт = ~288мб Почему такая большая частота?</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Сжимание I/Q потока на Raspberrypi</h1></header>
      		<div class='container entry-content'>
  <p>Недавно я добавил поддержку более 20 спутников в <a href="https://github.com/dernasherbrezon/r2cloud">r2cloud</a>. Из-за этого принимаемых данных стало значительно больше и диск переполнился. Чтобы как-то решить эту проблему, я уменьшил количество сохраняемых наблюдений. Теперь сохраняются последние 3 наблюдения для каждого спутника. Это не сильно помогло:</p>
<p><img src="/img/rtlsdr-gzip/1.png" alt=""></p>
<p>Дело в том, что при пролёте спутника, я сохраняю данные в raw I/Q с частотой пример 240 000 сэмплов в секунду. Это создаёт файл:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#ae81ff">240</span> <span style="color:#ae81ff">000</span> байт/сек * <span style="color:#ae81ff">2</span> <span style="color:#f92672">(</span>канала<span style="color:#f92672">)</span> * <span style="color:#ae81ff">12</span> минут <span style="color:#f92672">=</span> <span style="color:#ae81ff">288000000</span> байт <span style="color:#f92672">=</span> ~288мб
</code></pre></div><p>Почему такая большая частота? Кубсаты обычно занимают гораздо меньшую полосу частот, но дело в том, что rtl-sdr не умеет меньше. Поэтому необходимо сохранить данные с такой частотой, а потом даунсэмплировать в более низкую.</p>
<p>Конвертация в .wav файл с частотой 48 000 сэмплов в секунду занимает слишком много времени. Так что, пока она происходит, запускается следующее наблюдение. Предыдущий файл не успевает конвертироваться, и запускается ещё одно наблюдение и так далее. Всё это приводит к тому, что диск переполняется.</p>
<p>Чтобы этого избежать, я придумал следующее:</p>
<ol>
<li>Не запускать следующее наблюдение, если не произведено даунсэмплирование предыдущего</li>
<li>Сохранять данные на диск сразу в сжатом виде</li>
</ol>
<p>Первый пункт было достаточно просто <a href="https://github.com/dernasherbrezon/r2cloud/commit/ba4550407a352d85134c0a9986e84e6bba184f89">реализовать</a>. Для второго пункта необходимо было провести тестирование, о котором я и хочу написать дальше.</p>
<h2 id="тестирование">Тестирование</h2>
<p>Тестирование заключается в сравнении старого способа (писать данные напрямую на диск) и нового.</p>
<p>Скрипт для запуска старого способа следующий:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">timeout 10m vmstat <span style="color:#ae81ff">1</span> &gt; ~/nogz_vmstat.txt &amp;
timeout 10m rtl_sdr -f <span style="color:#ae81ff">145952432</span> -s <span style="color:#ae81ff">240000</span> -g <span style="color:#ae81ff">45</span> -p <span style="color:#ae81ff">7</span> /tmp/nogz.raw &amp;
</code></pre></div><p>В результате получаются следующие графики загрузки CPU (us) и диска (wa):</p>
<p><img src="/img/rtlsdr-gzip/2.png" alt=""></p>
<p>Новый способ запускается следующим образом:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">timeout 10m vmstat <span style="color:#ae81ff">1</span> &gt; ~/gz_vmstat.txt &amp;
timeout 10m rtl_sdr -f <span style="color:#ae81ff">145952432</span> -s <span style="color:#ae81ff">240000</span> -g <span style="color:#ae81ff">45</span> -p <span style="color:#ae81ff">7</span> - | gzip &gt; /tmp/gz.raw.gz &amp;
</code></pre></div><p>И получается:</p>
<p><img src="/img/rtlsdr-gzip/3.png" alt=""></p>
<p>На диске при этом:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">pi@raspberrypi:/tmp $ ls -lh
-rw-r--r-- <span style="color:#ae81ff">1</span> pi   pi    47M Apr  <span style="color:#ae81ff">2</span> 21:30 gz.raw.gz
-rw-r--r-- <span style="color:#ae81ff">1</span> pi   pi   275M Apr  <span style="color:#ae81ff">2</span> 21:17 nogz.raw
</code></pre></div><h2 id="выводы">Выводы</h2>
<ol>
<li>Запись на диск ожидаемо потребляет CPU в районе 10%</li>
<li>Простоя из-за большого потока данных на флэшку меньше при использовании gzip. Тоже ожидаемо</li>
<li>Потребление диска уменьшилось почти в 6 раз!</li>
</ol>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Производительность rtl_sdr на Raspberrypi</title>
      <link>https://dernasherbrezon.com/posts/rtlsdr-perf/</link>
      <pubDate>Sat, 02 Mar 2019 18:22:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/rtlsdr-perf/</guid>
      <description>Очень часто в сети можно встретить гиды по быстрой сборке на коленке анализатора радио с помощью rtl_sdr и raspberrypi. Большинство таких гидов ограничивается достаточно простым описанием: &amp;ldquo;возьмите одно, вставьте другое, потом немного питоновских скриптов и у вас всё получится&amp;rdquo;. Для новичков и просто любителей DIY - это прекрасный подход. Можно достаточно быстро познакомится с технологией и увидеть результат. Но что делать если нужно собрать что-то более продвинутое? Что если важна производительность?</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Производительность rtl_sdr на Raspberrypi</h1></header>
      		<div class='container entry-content'>
  <p>Очень часто в сети можно встретить гиды по быстрой сборке на коленке анализатора радио с помощью rtl_sdr и raspberrypi. Большинство таких гидов ограничивается достаточно простым описанием: &ldquo;возьмите одно, вставьте другое, потом немного питоновских скриптов и у вас всё получится&rdquo;. Для новичков и просто любителей DIY - это прекрасный подход. Можно достаточно быстро познакомится с технологией и увидеть результат. Но что делать если нужно собрать что-то более продвинутое? Что если важна производительность? Для этого необходимо провести более серьезные тесты.</p>
<p>Один из таких тестов - производительность системы во время записи сигнала. Дело в том, что есть несколько способов обработки сигнала с rtl_sdr:</p>
<ol>
<li>В реальном времени. Сигнал считывается из rtl_sdr и сразу же демодулируется. Результат либо сохраняется на диск, либо отправляется по сети дальше.</li>
<li>В отложенном режиме.</li>
</ol>
<ul>
<li>предобработки. Сигнал считывается, немного трансформируется и сохраняется на диск. После завершения наблюдения он демодулируется. Например, во время пролёта спутника, сигнал считывается, децимируется и сохраняется на диск. Обычно это делается для того, чтобы уменьшить размер файла на диске. rtl_sdr поддерживает минимальную ширину 240 КГц. Если ширина сигнала меньше, например, 150 КГц, то имеет смысл уменьшить частоту дискретизации.</li>
<li>сырые данные. Сигнал считывается и напрямую сохраняется в файл. Такой вариант наиболее быстрый, поскольку не требует обработки. С другой стороны он наиболее требовательный к размеру диска.</li>
</ul>
<h2 id="описание-теста">Описание теста</h2>
<p>В своём проекте <a href="https://github.com/dernasherbrezon/r2cloud">r2cloud</a> я занимаюсь обработкой телеметрии различных спутников. Поэтому мне интересно было померить поведение системы при обработке сигнала в отложенном режиме. Для этого я провёл несколько тестов:</p>
<ul>
<li>предобработка. В этих тестах я считывал данные из rtl_sdr и делал децимацию с помощью программы <a href="http://sox.sourceforge.net">sox</a>. Передачу данных от одной программы к другой можно сделать через <a href="https://www.gnu.org/software/bash/manual/html_node/Pipelines.html">pipe</a>.
<ul>
<li>pipe сделан в Java. Поскольку сама обработка сигнала написана на Java, то и pipe я реализовал на Java. Я создавал sox процесс, затем rtl_sdr процесс, и вручную копировал байты из stdin rtl_sdr в sox. Последний писал результат на диск в файл. Я сделал специальный проект <a href="https://github.com/dernasherbrezon/rtlsdr-pipe-tester">rtlsdr-pipe-tester</a>, чтобы лучше локализовать алгоритм работы.</li>
</ul>
</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">java -jar rtlsdr-pipe-tester-0.0.1-SNAPSHOT-jar-with-dependencies.jar
</code></pre></div><ul>
<li>pipe сделан в bash. То же самое, только команды запускаются в bash. Для измерения скорости записи на диск использовалась команда <a href="https://linux.die.net/man/1/pv">pv</a>.</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">rtl_sdr -f <span style="color:#ae81ff">137900000</span> -s <span style="color:#ae81ff">1440000</span> -g <span style="color:#ae81ff">45</span> -p <span style="color:#ae81ff">0</span> - | pv --numeric --bytes 2&gt;raw.txt | sox --type raw --rate <span style="color:#ae81ff">1440000</span> --encoding unsigned-integer --bits <span style="color:#ae81ff">8</span> --channels <span style="color:#ae81ff">2</span> - /tmp/test.wav rate <span style="color:#ae81ff">150000</span>
</code></pre></div><ul>
<li>сырые данные</li>
<li>raspberrypi 1 и raspberrypi 3. Новая версия имеет большее количество процессоров. Мне хотелось понять, влияет ли количество процессоров на производительность задачи.</li>
<li>использование <a href="https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=f7d34b445abc00e979b7cf36b9580ac3d1a47cd8">usbfs zerocopy</a> (появилось в rtl_sdr 0.6.x) и нет. В этом режиме процесс может читать память драйвера напрямую, без копирования через память ядра Linux. В теории это должно уменьшить нагрузку на систему и сделать её более стабильной.</li>
</ul>
<h2 id="raspberrypi-1">RaspberryPI 1</h2>
<p><img src="/img/rtlsdr-perf/1.png" alt=""></p>
<p>Среднее значение 820 кбайт/сек для bash и 800 кбайт/сек для Java. Это совсем не то что должно быть. Дело в том, что я запрашиваю 1440000 сэмплов в секунду. Каждый сэмпл содержит в себе I и Q пару по одному байту. Итого мне нужно 2880 кбайт/сек. Похоже сэмплы теряются. Загрузка CPU при этом следующая:</p>
<p><img src="/img/rtlsdr-perf/2.png" alt=""></p>
<p>На графики видны падения использования CPU. Согласно полной статистике из <a href="https://en.wikipedia.org/wiki/Vmstat">vmstat</a> в это время происходит 100% wa. Система явно не справляется с нагрузкой.</p>
<h2 id="raspberrypi-1---zerocopy">RaspberryPI 1 - zerocopy</h2>
<p><img src="/img/rtlsdr-perf/3.png" alt=""></p>
<p>Большой разброс в значениях в обработке с помощью bash pipe - на самом деле хороший признак. Это значит, что система успевает обработать данные и периодически наполняет внутренние буфера для копирования. Конечно, можно было бы и лучше - сразу копировать данные, как только они появляются. Тем не менее среднее значение в районе 2880 кбайт/сек, что очень хорошо.</p>
<p>Копирование с помощью Java pipe по-прежнему 800 кбайт/сек, что значит выигрыша zerocopy не даёт.</p>
<p><img src="/img/rtlsdr-perf/4.png" alt=""></p>
<p>При этом график потребления CPU выглядит достаточно интересным. С одной стороны, видно, что потребление при bash pipe снизилось до 35 процентов. С другой стороны, всё равно остались участки, где wa 100 и CPU простаивает. У меня есть подозрение, что нужно оптимизировать запись на диск. Дело в том, что в raspberrypi диск - это флэш карта. Видимо она не справляется с нагрузкой.</p>
<h2 id="raspberrypi-3">RaspberryPI 3</h2>
<p><img src="/img/rtlsdr-perf/5.png" alt=""></p>
<p>Для RaspberryPi 3 ситуация выглядит получше. Похоже производительность хватает, чтобы обработать 2880 кбайт/сек.</p>
<p><img src="/img/rtlsdr-perf/6.png" alt=""></p>
<p>Потребление CPU около 19%. Для 4-х ядерного процессора RaspberryPi 3 это значит, что одно ядро почти полностью загружено.</p>
<h2 id="raspberrypi-3---zerocopy">RaspberryPI 3 - zerocopy</h2>
<p><img src="/img/rtlsdr-perf/7.png" alt=""></p>
<p>Скорость обработки более-менее стабильная 2880 кбайт/сек.</p>
<p><img src="/img/rtlsdr-perf/8.png" alt=""></p>
<p>А вот загрузка CPU достаточно неожиданная. При использовании zerocopy, я бы ожидал, что она уменьшится. В реальности же она осталась неизменной. Возможно операционная система запустила sox на втором ядре. Тогда небольшая загрузка на первом ядре (rtl_sdr) и небольшая нагрузка на втором ядре (sox) в сумме как раз дают около 19% загрузки CPU в сумме.</p>
<h2 id="выводы">Выводы</h2>
<ol>
<li>RaspberryPi 3 значительно мощнее RaspberryPi 1</li>
<li>Использование rtl_sdr 0.6.x c usbfs zerocopy значительно уменьшает нагрузку на систему</li>
</ol>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Тестирование JSP тэгов</title>
      <link>https://dernasherbrezon.com/posts/jsp-tag-testing/</link>
      <pubDate>Sat, 02 Mar 2019 12:48:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/jsp-tag-testing/</guid>
      <description>Недавно для себя открыл совершенно бесплатный для open source проектов sonarcloud. Я верю, что статичный анализ кода - это очень полезная штука, поэтому сразу же решил перевести свои наиболее популярные проекты туда.
Среди них был достаточно маленький проект jtimeago. Это небольшая библиотека jsp тэгов для вывода дат.
После добавления проекта через travis, я увидел, что jtimeago полностью зеленый.
Если зайти на страницу проекта в sonarcloud, то видно, что все показатели хорошие за исключением нескольких мелких code smells.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Тестирование JSP тэгов</h1></header>
      		<div class='container entry-content'>
  <p>Недавно для себя открыл совершенно бесплатный для open source проектов <a href="https://sonarcloud.io/organizations/dernasherbrezon-github/projects">sonarcloud</a>. Я верю, что статичный анализ кода - это очень полезная штука, поэтому сразу же решил перевести свои наиболее популярные проекты туда.</p>
<p>Среди них был достаточно маленький проект <a href="https://github.com/dernasherbrezon/jtimeago">jtimeago</a>. Это небольшая библиотека jsp тэгов для вывода дат.</p>
<p>После добавления проекта через travis, я увидел, что jtimeago полностью зеленый.</p>
<p><img src="/img/jsp-tag-testing/1.png" alt=""></p>
<p>Если зайти на страницу проекта в sonarcloud, то видно, что все показатели хорошие за исключением нескольких мелких code smells. Исправить их можно было достаточно тривиально, что я и решил сделать.</p>
<p>Однако, после моего коммита sonarcloud начал выдавать статус &ldquo;Failed&rdquo;.</p>
<p><img src="/img/jsp-tag-testing/2.png" alt=""></p>
<p>Оказывается в нём есть несколько метрик, которые влияют на финальный статус проекта:</p>
<ul>
<li>количество критичных багов</li>
<li>процент покрытия кода тестами за последние 30 дней</li>
<li>процент дублирующего кода за последние 30 дней</li>
</ul>
<p>После моего героического изменения кода, он стал отображаться как не тестируемый за последние 30 дней. Тут нужно понимать, что код - это несколько классов для JSP. Внутри него есть сильная привязка к servlet api, которую так просто нельзя замокать. Но и оставлять такой простой проект в статусе &ldquo;Quality: Failed&rdquo; мне не позволяла гордость. Я засучил рукава и принялся исследовать.</p>
<p>Сами классы реализуют <code>javax.servlet.jsp.tagext.TagSupport</code>. Это часть спецификации J2EE для создания тэгов в JSP. Надо сказать технология достаточно древняя и во время её проектирования ни о каком юнит тестировании ещё не думали. Исходя из этого я решил поднимать честный web контейнер для каждого теста, рендерить страницу и сравнивать с результатом.</p>
<p>Jetty - это легковесный web контейнер, который полностью реализует спецификацию j2ee. Его удобно запускать в embedded режиме. Так же в самом Jetty проекте есть несколько модулей для тестирования, которые предоставляют достаточно удобные функции. Подключается так:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-xml" data-lang="xml"><span style="color:#f92672">&lt;dependency&gt;</span>
	<span style="color:#f92672">&lt;groupId&gt;</span>org.eclipse.jetty<span style="color:#f92672">&lt;/groupId&gt;</span>
	<span style="color:#f92672">&lt;artifactId&gt;</span>jetty-http<span style="color:#f92672">&lt;/artifactId&gt;</span>
	<span style="color:#f92672">&lt;version&gt;</span>${jetty.version}<span style="color:#f92672">&lt;/version&gt;</span>
	<span style="color:#f92672">&lt;classifier&gt;</span>tests<span style="color:#f92672">&lt;/classifier&gt;</span>
	<span style="color:#f92672">&lt;scope&gt;</span>test<span style="color:#f92672">&lt;/scope&gt;</span>
<span style="color:#f92672">&lt;/dependency&gt;</span>
</code></pre></div><p>После чего будет доступен класс <code>org.eclipse.jetty.http.HttpTester</code>. С помощью него можно удобно выполнять HTTP запросы и получать ответы:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">HttpTester<span style="color:#f92672">.</span><span style="color:#a6e22e">Request</span> request <span style="color:#f92672">=</span> HttpTester<span style="color:#f92672">.</span><span style="color:#a6e22e">newRequest</span><span style="color:#f92672">();</span>
HttpTester<span style="color:#f92672">.</span><span style="color:#a6e22e">Response</span> response<span style="color:#f92672">;</span>

request<span style="color:#f92672">.</span><span style="color:#a6e22e">setMethod</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;GET&#34;</span><span style="color:#f92672">);</span>
request<span style="color:#f92672">.</span><span style="color:#a6e22e">setVersion</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;HTTP/1.0&#34;</span><span style="color:#f92672">);</span>
request<span style="color:#f92672">.</span><span style="color:#a6e22e">setHeader</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Host&#34;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;tester&#34;</span><span style="color:#f92672">);</span>
request<span style="color:#f92672">.</span><span style="color:#a6e22e">setURI</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;/&#34;</span> <span style="color:#f92672">+</span> pageName <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;.jsp&#34;</span><span style="color:#f92672">);</span>
response <span style="color:#f92672">=</span> HttpTester<span style="color:#f92672">.</span><span style="color:#a6e22e">parseResponse</span><span style="color:#f92672">(</span>HttpTester<span style="color:#f92672">.</span><span style="color:#a6e22e">from</span><span style="color:#f92672">(</span>localConnector<span style="color:#f92672">.</span><span style="color:#a6e22e">getResponse</span><span style="color:#f92672">(</span>request<span style="color:#f92672">.</span><span style="color:#a6e22e">generate</span><span style="color:#f92672">())));</span>
</code></pre></div><p>Сами тесты достаточно простые. Создаётся jsp страница</p>
<pre><code>&lt;%@page contentType=&quot;text/html; charset=UTF-8&quot; pageEncoding=&quot;UTF-8&quot; trimDirectiveWhitespaces=&quot;true&quot; %&gt;
&lt;%@ taglib prefix=&quot;ta&quot; uri=&quot;https://github.com/dernasherbrezon/jtimeago&quot; %&gt;
&lt;%
	java.util.Date comment = new java.util.Date(1534320716000L);
	pageContext.setAttribute(&quot;comment&quot;, comment);
%&gt;
&lt;ta:formatDate value=&quot;${comment}&quot; var=&quot;outputCommentDate&quot; pattern=&quot;dd MMM yyyy HH:mm&quot; /&gt;
${outputCommentDate}
</code></pre><p>Для неё создаётся соответствующий файл проверки результатов:</p>
<pre><code>15 Aug 2018 08:11
</code></pre><p>Параметризованный junit тест проходит по всем файлам в директории и выполняет один и тот же код: запросить страницу и сравнить её с ожидаемой. После того как я написал несколько тестов, оказалось, что у меня есть несколько багов:</p>
<ol>
<li>Если указать аттрибут var и при этом не указывать scope, то JSP вернёт ошибку 502. По умолчанию scope оказывался равен 0, а это неверное значение.</li>
<li>Изначально scope можно было задавать цифрами. Эти цифры достаточно неочевидны и не совместимы с jstl. Поскольку я старался сделать тэг максимально похожим на fmt:formatDate, то и семантику необходимо было сохранить. scope должен задаваться строкой и конвертироваться в число.</li>
<li>Геттеры необязательно указывать для аттрибутов тэга.</li>
</ol>
<p>После всех исправлений покрытие тестами улучшилось и проект снова стал зелёным:</p>
<p><img src="/img/jsp-tag-testing/3.png" alt=""></p>
<p>Несмотря на то, что sonar считает проект зелёным и тэг отрабатывает в настоящем web контейнере как надо, мне не хватает тестов соответствия спецификации. J2EE стандарт достаточно большой с множеством хитрых требований, которые не все полностью реализуют. Например, тэги могут создаваться и кэшироваться на диск. Для этого <code>javax.servlet.jsp.tagext.TagSupport</code> реализует интерфейс <code>java.io.Serializable</code>. J2EE ожидает, что после сериализации кэша тэгов на диск, его можно восстановить и он будет работать. На практике необходимо, чтобы каждый тэг правильно реализовывал <code>java.io.Serializable</code>. Я пока не придумал, как это можно сделать.</p>
<h2 id="выводы">Выводы</h2>
<ol>
<li>Sonarcube достаточно мощный и простой в настройке инструмент. Пользуйтесь им для своих проектов.</li>
<li>Процент покрытия тестами кода - важный параметр.</li>
<li>Даже если в проекте всего 3 класса, то тесты нужны.</li>
</ol>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Приватный репозиторий в Ubuntu</title>
      <link>https://dernasherbrezon.com/posts/ubuntu-private-repo/</link>
      <pubDate>Thu, 07 Jun 2018 10:07:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/ubuntu-private-repo/</guid>
      <description>В Ubuntu репозитории – это специальные сервера-хранилища для приложений. Если Вы разрабатываете коммерческое приложение и запускаете его в Ubuntu, то логично положить его в репозиторий. А потом управлять этим приложением так же, как и обычными системными приложениями. Для этого нужно поднять в локальной сети или облаке apache, настроить логин и пароль, не забывать его обновлять&amp;hellip; Но что если есть другой способ?
Облачные хранилища С помощью apt-transport-s3 можно превратить bucket в приватный apt репозиторий.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Приватный репозиторий в Ubuntu</h1></header>
      		<div class='container entry-content'>
  <p>В Ubuntu репозитории – это специальные сервера-хранилища для приложений. Если Вы разрабатываете коммерческое приложение и запускаете его в Ubuntu, то логично положить его в репозиторий. А потом управлять этим приложением так же, как и обычными системными приложениями. Для этого нужно поднять в локальной сети или облаке apache, настроить логин и пароль, не забывать его обновлять&hellip; Но что если есть другой способ?</p>
<h2 id="облачные-хранилища">Облачные хранилища</h2>
<p>С помощью <a href="https://packages.debian.org/sid/apt-transport-s3">apt-transport-s3</a> можно превратить bucket в приватный apt репозиторий. Однако, у этого способа появились следующие недостатки:</p>
<ul>
<li>Некоторые адреса Амазона заблокированы в России</li>
<li>Данные находятся в Европе, поэтому может быть медленно.</li>
</ul>
<p>Какие же есть альтернативы?</p>
<p>Самой известной считается <a href="https://docs.openstack.org/swift/latest/">Openstack Swift</a>. Swift (OpenStack Object Storage) — это полностью распределенное «безграничное» хранилище, которое характеризуется отказоустойчивостью и высокой надежностью. Создано как конкурент Amazon S3. Его преимущества:</p>
<ul>
<li>В России как минимум 2 провайдера предоставляют Swift как сервис: <a href="http://lib.clodo.ru/cloud-storage/cloudstorage.html">Clodo</a> и <a href="https://selectel.ru/services/cloud/storage/">Selectel</a></li>
<li>Данные находятся в России</li>
<li>Если Вы достаточно большие, то можете поднять его у себя</li>
<li>Все плюсы облачного хранилища: оплата за непосредственно используемые ресурсы, распределенное хранение, отказоустойчивость, 24/7.</li>
</ul>
<p>Из недостатков можно выделить лишь полное отсутствие интеграции с Ubuntu. Это сложно назвать недостатком, если Вы программист. Поэтому я написал интеграцию сам: <a href="https://github.com/dernasherbrezon/apt-transport-swift">apt-transport-swift</a>.</p>
<h1 id="разработка">Разработка</h1>
<p>Для начала нужно немного погрузиться в то, как apt взаимодействует с репозиториями. Для того чтобы получить информацию из репозитория, apt:</p>
<ul>
<li>находит соответствующий метод из списка установленных. Все они лежат в папке: /usr/lib/apt/methods/</li>
<li>отправляет ему необходимые команды согласно протоколу</li>
</ul>
<p>По умолчанию доступно достаточно много методов: http, ftp, cdrom, file, ssh и тд. Все они работают следующим образом:</p>
<ul>
<li>каждый метод - это отдельная программа</li>
<li>на вход apt отправляет через stdin команды для выполнения</li>
<li>на выходе через stdout метод должен вернуть результат работы</li>
</ul>
<p>Команды и ответы передаются в текстовом виде очень похожим на http. Например:</p>
<pre><code>100 Capabilities
Version: 1.2
Pipeline: true
Send-Config: true
</code></pre><p>Эту команду отправляет метод, чтобы получить конфигурацию apt.conf:</p>
<pre><code>600 URI Acquire
URI: swift://container/dists/stretch/InRelease
Filename: dists_stretch_InRelease
Expected-SHA1: 123
Last-Modified: Wed, 23 May 2018 14:13:16 GMT
</code></pre><p>Эту команду отправляет apt, когда необходимо скачать файл. Когда метод закончил скачивание, он возвращает:</p>
<pre><code>201 URI Done
URI: swift://container/dists/stretch/InRelease
Filename: dists_stretch_InRelease
Expected-SHA1: 123
Size: 762361
Last-Modified: Wed, 23 May 2018 14:13:16 GMT
</code></pre><p>Поскольку все методы написаны на C++, я решил тоже написать на C++. После двух недель, мои глаза стали вытекать, и я решил начать с чего-нибудь попроще. С. Программа выглядела достаточно простой, но результат не удовлетворял моих высоких стандартов качества. Еще две недели пришлось потратить на изучение утечек памяти, инструментов тестирования и настройки билда в <a href="https://travis-ci.org/dernasherbrezon/apt-transport-swift">Travis</a>.</p>
<h1 id="всё-вместе">Всё вместе</h1>
<p>В результате я получил следующую схему для Java проектов:</p>
<p><img src="/img/ubuntu-private-repo/xxiubje3ios6bvc16lre6dl-vlq.png" alt=""></p>
<ol>
<li>Сборка .deb артефакта с помощью <a href="https://github.com/dernasherbrezon/deb-maven-plugin">deb-maven-plugin</a>. pom.xml:</li>
</ol>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-xml" data-lang="xml"><span style="color:#f92672">&lt;plugins&gt;</span>
...
	<span style="color:#f92672">&lt;plugin&gt;</span>
		<span style="color:#f92672">&lt;groupId&gt;</span>com.aerse.maven<span style="color:#f92672">&lt;/groupId&gt;</span>
		<span style="color:#f92672">&lt;artifactId&gt;</span>deb-maven-plugin<span style="color:#f92672">&lt;/artifactId&gt;</span>
		<span style="color:#f92672">&lt;version&gt;</span>1.4<span style="color:#f92672">&lt;/version&gt;</span>
		<span style="color:#f92672">&lt;executions&gt;</span>
			<span style="color:#f92672">&lt;execution&gt;</span>
				<span style="color:#f92672">&lt;id&gt;</span>package<span style="color:#f92672">&lt;/id&gt;</span>
				<span style="color:#f92672">&lt;phase&gt;</span>package<span style="color:#f92672">&lt;/phase&gt;</span>
				<span style="color:#f92672">&lt;goals&gt;</span>
					<span style="color:#f92672">&lt;goal&gt;</span>package<span style="color:#f92672">&lt;/goal&gt;</span>
				<span style="color:#f92672">&lt;/goals&gt;</span>
			<span style="color:#f92672">&lt;/execution&gt;</span>
		<span style="color:#f92672">&lt;/executions&gt;</span>
		<span style="color:#f92672">&lt;configuration&gt;</span>
			<span style="color:#f92672">&lt;unixUserId&gt;</span>ubuntu<span style="color:#f92672">&lt;/unixUserId&gt;</span>
			<span style="color:#f92672">&lt;unixGroupId&gt;</span>ubuntu<span style="color:#f92672">&lt;/unixGroupId&gt;</span>
			<span style="color:#f92672">&lt;osDependencies&gt;</span>
				<span style="color:#f92672">&lt;openjdk-7-jdk&gt;&lt;/openjdk-7-jdk&gt;</span>
				<span style="color:#f92672">&lt;nginx&gt;&lt;/nginx&gt;</span>
			<span style="color:#f92672">&lt;/osDependencies&gt;</span>
			<span style="color:#f92672">&lt;javaServiceWrapper&gt;</span>true<span style="color:#f92672">&lt;/javaServiceWrapper&gt;</span>
			<span style="color:#f92672">&lt;fileSets&gt;</span>
				<span style="color:#f92672">&lt;fileSet&gt;</span>
					\<span style="color:#f92672">&lt;source&gt;</span>${basedir}/src/main/deb<span style="color:#f92672">&lt;/source&gt;</span>
					<span style="color:#f92672">&lt;target&gt;</span>/<span style="color:#f92672">&lt;/target&gt;</span>
				<span style="color:#f92672">&lt;/fileSet&gt;</span>
			<span style="color:#f92672">&lt;/fileSets&gt;</span>
		<span style="color:#f92672">&lt;/configuration&gt;</span>
	<span style="color:#f92672">&lt;/plugin&gt;</span>
...
<span style="color:#f92672">&lt;/plugins&gt;</span>
</code></pre></div><ol start="2">
<li>Дистрибьюция артефакта в apt репозиторий. <a href="https://github.com/dernasherbrezon/apt-maven-plugin">Плагин</a> проинициализирует репозиторий, если он изначально пустой. pom.xml:</li>
</ol>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-xml" data-lang="xml"><span style="color:#f92672">&lt;plugins&gt;</span>
...
  <span style="color:#f92672">&lt;plugin&gt;</span>
    <span style="color:#f92672">&lt;groupId&gt;</span>com.aerse.maven<span style="color:#f92672">&lt;/groupId&gt;</span>
    <span style="color:#f92672">&lt;artifactId&gt;</span>apt-maven-plugin<span style="color:#f92672">&lt;/artifactId&gt;</span>
    <span style="color:#f92672">&lt;version&gt;</span>1.9<span style="color:#f92672">&lt;/version&gt;</span>
    <span style="color:#f92672">&lt;executions&gt;</span>
      <span style="color:#f92672">&lt;execution&gt;</span>
        <span style="color:#f92672">&lt;id&gt;</span>deploy<span style="color:#f92672">&lt;/id&gt;</span>
        <span style="color:#f92672">&lt;goals&gt;</span>
          <span style="color:#f92672">&lt;goal&gt;</span>deploy<span style="color:#f92672">&lt;/goal&gt;</span>
        <span style="color:#f92672">&lt;/goals&gt;</span>
      <span style="color:#f92672">&lt;/execution&gt;</span>
    <span style="color:#f92672">&lt;/executions&gt;</span>
	<span style="color:#f92672">&lt;configuration&gt;</span>
		<span style="color:#f92672">&lt;component&gt;</span>main<span style="color:#f92672">&lt;/component&gt;</span>
		<span style="color:#f92672">&lt;codename&gt;</span>myrepo<span style="color:#f92672">&lt;/codename&gt;</span>
		<span style="color:#f92672">&lt;sign&gt;</span>true<span style="color:#f92672">&lt;/sign&gt;</span>
		<span style="color:#f92672">&lt;keyname&gt;</span>name<span style="color:#f92672">&lt;/keyname&gt;</span>
		<span style="color:#f92672">&lt;passphraseServerId&gt;</span>gpg.passphrase<span style="color:#f92672">&lt;/passphraseServerId&gt;</span>
	<span style="color:#f92672">&lt;/configuration&gt;</span>
  <span style="color:#f92672">&lt;/plugin&gt;</span>
...
<span style="color:#f92672">&lt;/plugins&gt;</span>
</code></pre></div><p>settings.xml:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-xml" data-lang="xml"><span style="color:#f92672">&lt;settings&gt;</span>
  ...
  <span style="color:#f92672">&lt;servers&gt;</span>
    ...
    <span style="color:#f92672">&lt;server&gt;</span>
      <span style="color:#f92672">&lt;id&gt;</span>gpg.passphrase<span style="color:#f92672">&lt;/id&gt;</span>
      <span style="color:#f92672">&lt;passphrase&gt;</span>passphrase<span style="color:#f92672">&lt;/passphrase&gt;</span>
    <span style="color:#f92672">&lt;/server&gt;</span>
    ...
  <span style="color:#f92672">&lt;/servers&gt;</span>
  ...
<span style="color:#f92672">&lt;/settings&gt;</span>
</code></pre></div><ol start="3">
<li>В maven есть такое понятие как wagon. Это особая точка расширения, позволяющая добавить новый протокол. С помощью <a href="https://github.com/dernasherbrezon/swift-maven">swift-maven</a> я добавил поддержку протокола swift. pom.xml:</li>
</ol>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-xml" data-lang="xml"><span style="color:#f92672">&lt;project&gt;</span>
  ...
  <span style="color:#f92672">&lt;distributionManagement&gt;</span>
    <span style="color:#f92672">&lt;repository&gt;</span>
      <span style="color:#f92672">&lt;id&gt;</span>private-repo<span style="color:#f92672">&lt;/id&gt;</span>
      <span style="color:#f92672">&lt;url&gt;</span>swift://api.selcdn.ru/v3<span style="color:#f92672">&lt;/url&gt;</span>
    <span style="color:#f92672">&lt;/repository&gt;</span>
  <span style="color:#f92672">&lt;/distributionManagement&gt;</span>
  ...

  <span style="color:#f92672">&lt;build&gt;</span>
    ...
    <span style="color:#f92672">&lt;extensions&gt;</span>
      ...
      <span style="color:#f92672">&lt;extension&gt;</span>
        <span style="color:#f92672">&lt;groupId&gt;</span>com.aerse<span style="color:#f92672">&lt;/groupId&gt;</span>
        <span style="color:#f92672">&lt;artifactId&gt;</span>swift-maven<span style="color:#f92672">&lt;/artifactId&gt;</span>
        <span style="color:#f92672">&lt;version&gt;</span>1.1<span style="color:#f92672">&lt;/version&gt;</span>
      <span style="color:#f92672">&lt;/extension&gt;</span>
      ...
    <span style="color:#f92672">&lt;/extensions&gt;</span>
    ...
  <span style="color:#f92672">&lt;/build&gt;</span>  
<span style="color:#f92672">&lt;/project&gt;</span>
</code></pre></div><p>settings.xml:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-xml" data-lang="xml"><span style="color:#f92672">&lt;settings&gt;</span>
  ...
  <span style="color:#f92672">&lt;servers&gt;</span>
    ...
    <span style="color:#f92672">&lt;server&gt;</span>
      <span style="color:#f92672">&lt;id&gt;</span>private-repo<span style="color:#f92672">&lt;/id&gt;</span>
      <span style="color:#f92672">&lt;username&gt;</span>username<span style="color:#f92672">&lt;/username&gt;</span>
      <span style="color:#f92672">&lt;password&gt;</span>password<span style="color:#f92672">&lt;/password&gt;</span>
    <span style="color:#f92672">&lt;/server&gt;</span>
    ...
  <span style="color:#f92672">&lt;/servers&gt;</span>
  ...
<span style="color:#f92672">&lt;/settings&gt;</span>
</code></pre></div><ol start="4">
<li>В качестве облачного хранения данных я выбрал <a href="https://selectel.com/?ref_code=9AMKYUS5Md3m">Selectel</a>. Они поддерживают API Swift v3.</li>
<li><a href="https://github.com/dernasherbrezon/apt-transport-swift">apt-transport-swift</a> реализует swift протокол для apt.</li>
</ol>
<pre><code>#: cat /etc/apt/sources.list.d/privaterepo.list

deb swift://container myrepo main
</code></pre><p>И конфигурация:</p>
<pre><code>#: cat /etc/apt/apt.conf.d/80privaterepo

Swift {
 Container0 {
   Name &quot;container&quot;;
   URL &quot;https://api.selcdn.ru&quot;;
   Username &quot;username&quot;;
   Password &quot;password&quot;;
 };
};
</code></pre><h1 id="результат">Результат</h1>
<p>Хочется отметить, что схема не добавляет никаких новых сущностей в уже существующие инструменты. Всё реализовано в виде плагинов и должно работать независимо друг от друга. Например, с помощью <a href="https://github.com/dernasherbrezon/apt-maven-plugin">apt-maven-plugin</a> можно деплоить в S3.</p>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>DSP на Java</title>
      <link>https://dernasherbrezon.com/posts/dsp-java/</link>
      <pubDate>Thu, 08 Mar 2018 17:22:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/dsp-java/</guid>
      <description>Java - язык программирования общего назначения. Общего назначения - значит можно писать почти любые программы. Вот я и попытался написать программу, которую обычно пишут на С или C++. Под катом я попытаюсь рассказать, как я декодировал спутниковые снимки с Метеор-М №2.
Предисловие Когда я впервые заинтересовался декодированием спутниковых сигналов, то был, прямо говоря, удивлён. Сейчас софт для декодирования сигналов выглядит так же, как и библиотеки общего назначения лет 20 назад. Каждый пишет, что хочет, в каком хочет формате и совершенно не заботится о результатах.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>DSP на Java</h1></header>
      		<div class='container entry-content'>
  <p>Java - язык программирования общего назначения. Общего назначения - значит можно писать почти любые программы. Вот я и попытался написать программу, которую обычно пишут на С или C++. Под катом я попытаюсь рассказать, как я декодировал спутниковые снимки с <a href="https://ru.wikipedia.org/wiki/%D0%9C%D0%B5%D1%82%D0%B5%D0%BE%D1%80-%D0%9C_%E2%84%962">Метеор-М №2</a>.</p>
<p><img src="/img/dsp-java/evf0t2iu5xcammoaobfgopwewai.png" alt="DSP in Java"></p>
<h1 id="предисловие">Предисловие</h1>
<p>Когда я впервые заинтересовался декодированием спутниковых сигналов, то был, прямо говоря, удивлён. Сейчас софт для декодирования сигналов выглядит так же, как и библиотеки общего назначения лет 20 назад. Каждый пишет, что хочет, в каком хочет формате и совершенно не заботится о результатах. Яркий тому пример - декодирование сигнала с Метеор-М. <a href="https://www.rtl-sdr.com/rtl-sdr-tutorial-receiving-meteor-m-n2-lrpt-weather-satellite-images-rtl-sdr/">Обычно</a> алгоритм получения картинки выглядит следующим образом:</p>
<ol>
<li>Записать сигнал</li>
<li>Запустить SDR# с определёнными плагинами и настройками и демодулировать сигнал. На выходе получается бинарный файл.</li>
<li>Запустить LRPToffLineDecoder и на вход передать бинарный файл, полученный ранее.</li>
<li>Из LRPToffLineDecoder сохранить картинку куда-нибудь.</li>
</ol>
<p>Видимо, всех радиолюбителей такой подход устраивал, если за 9 лет существования спутника на орбите, ничего лучше не было придумано. Но для <a href="https://github.com/dernasherbrezon/r2cloud">автоматического</a> получения картинки такой подход не работает:</p>
<ol>
<li>Весь софт работает под Windows</li>
<li>Нельзя запускать в headless режиме. Софт - это формочки с кнопочками.</li>
<li>Невозможно получить обратную связь по приёму сигнала. Нет никаких метрик, по которым можно было бы оценить хорошо или плохо была принята картинка.</li>
</ol>
<p>Из-за этого я забросил вэб формочки кровавого энтепрайза и начал долгое погружение в гремучий мир DSP. На полное декодирование сигнала у меня ушло 2 месяца свободного времени.</p>
<p>Разбор сигнала логически можно представить как две фазы:</p>
<ol>
<li>Демодуляция. Преобразование аудио-сигнала в информацию.</li>
<li>Декодирование. Преобразование информации в понятный пользователю вид.</li>
</ol>
<h1 id="демодуляция">Демодуляция</h1>
<p>Согласно <a href="http://meteor.robonuka.ru/wp-content/uploads/2014/08/pdf_spe_95413_eps_hrpt-lrpt.pdf">официальной документации</a> сигнал модулирован с помощью <a href="https://ru.wikipedia.org/wiki/%D0%A4%D0%B0%D0%B7%D0%BE%D0%B2%D0%B0%D1%8F_%D0%BC%D0%B0%D0%BD%D0%B8%D0%BF%D1%83%D0%BB%D1%8F%D1%86%D0%B8%D1%8F">QPSK</a>. Если вкратце, то для передачи двух бит информации используется одно положение фазы.</p>
<p>Итак, нужно демодулировать QPSK сигнал на Java. То ли никому это неинтересно, то ли Java медленная, но я не нашёл ни одной библиотеки, которые бы это делали. Поэтому я взял <a href="https://github.com/otti-soft/meteor-m2-lrpt">существующий</a> проект демодуляции QPSK сигнала для GNURadio и начал переписывать блоки на Java.</p>
<p><img src="/img/dsp-java/jcsaroyobfqo11zvh3jino1qq7i.png" alt="QPSK demodulation"></p>
<h2 id="блоки-демодуляции">Блоки демодуляции</h2>
<p><strong>WavFile source</strong> и <strong>Float to Complex</strong>. Чтение из .wav файла <a href="https://ru.wikipedia.org/wiki/%D0%A1%D0%B8%D0%BD%D1%84%D0%B0%D0%B7%D0%BD%D0%B0%D1%8F_%D0%B8_%D0%BA%D0%B2%D0%B0%D0%B4%D1%80%D0%B0%D1%82%D1%83%D1%80%D0%BD%D0%B0%D1%8F_%D1%81%D0%BE%D1%81%D1%82%D0%B0%D0%B2%D0%BB%D1%8F%D1%8E%D1%89%D0%B8%D0%B5_%D1%81%D0%B8%D0%B3%D0%BD%D0%B0%D0%BB%D0%B0">IQ</a> сигнала. Значения записаны в файле последовательно. Сначала реальная часть, потом мнимая, потом реальная и так далее. В GNURadio есть свои типы данных и каждый блок рассчитан для работы только с определёнными. Так как у нас QPSK модуляция, то нам нужно использовать комплексные числа. Здесь ничего сложного, так как в Java есть поддержка .wav файлов - AudioSystem.getAudioInputStream(inputStream).</p>
<p><strong>Low Pass Filter</strong>. Это первый фильтр, который предназначен для фильтрации низких частот. Так как наш сигнал занимает 130Mhz, то нам надо отфильтровать лишние частоты.</p>
<p><img src="/img/dsp-java/yp4g51xrjxss0v9ho9sqt8rdd4y.png" alt="lowpass"></p>
<p>На картинке выше, частоты нашего сигнала обведены зелёным. Остальные частоты справа должны быть отфильтрованы. Это делается с помощью <a href="https://ru.wikipedia.org/wiki/%D0%A4%D0%B8%D0%BB%D1%8C%D1%82%D1%80_%D1%81_%D0%BA%D0%BE%D0%BD%D0%B5%D1%87%D0%BD%D0%BE%D0%B9_%D0%B8%D0%BC%D0%BF%D1%83%D0%BB%D1%8C%D1%81%D0%BD%D0%BE%D0%B9_%D1%85%D0%B0%D1%80%D0%B0%D0%BA%D1%82%D0%B5%D1%80%D0%B8%D1%81%D1%82%D0%B8%D0%BA%D0%BE%D0%B9">КИХ-фильтра</a>. Для программиста это выглядит как:</p>
<ol>
<li>Взять последние N значений, текущее и положить в массив</li>
<li>Перемножить получившийся массив с заранее заданным (вычисляется из ЛАФЧХ фильтра). По сути, перемножение одного вектора на другой.</li>
<li>Все значения результирующего массива сложить.</li>
<li>Это и будет результат.</li>
</ol>
<p><strong><a href="https://ru.wikipedia.org/wiki/%D0%90%D0%B2%D1%82%D0%BE%D0%BC%D0%B0%D1%82%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B0%D1%8F_%D1%80%D0%B5%D0%B3%D1%83%D0%BB%D0%B8%D1%80%D0%BE%D0%B2%D0%BA%D0%B0_%D1%83%D1%81%D0%B8%D0%BB%D0%B5%D0%BD%D0%B8%D1%8F">AGC</a></strong>. Автоматическая регулировка усиления.</p>
<p><img src="/img/dsp-java/hcpmhaclhse8f7-ye05iml_sjvi.png" alt="agc"></p>
<p>С точки зрения реализации - перемножение входного сигнала на некий уровень и вычисление следующего уровня в зависимости от текущего.</p>
<p><strong><a href="https://en.wikipedia.org/wiki/Root-raised-cosine_filter">Root Raised Cosine Filter</a></strong>. Используется для уменьшения <a href="https://en.wikipedia.org/wiki/Intersymbol_interference">Intersymbol interference</a>. Если вкратце, то при получении сигнала одни уровни переданного сигнала могут накладываться на последующие. Чтобы выделить максимальный уровень сигнала между символами, применяют этот фильтр. Работает так же как и Low Pass Filter, но использует другую <a href="https://ru.wikipedia.org/wiki/%D0%9B%D0%BE%D0%B3%D0%B0%D1%80%D0%B8%D1%84%D0%BC%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B0%D1%8F_%D0%B0%D0%BC%D0%BF%D0%BB%D0%B8%D1%82%D1%83%D0%B4%D0%BD%D0%BE-%D1%84%D0%B0%D0%B7%D0%BE%D0%B2%D0%B0%D1%8F_%D1%87%D0%B0%D1%81%D1%82%D0%BE%D1%82%D0%BD%D0%B0%D1%8F_%D1%85%D0%B0%D1%80%D0%B0%D0%BA%D1%82%D0%B5%D1%80%D0%B8%D1%81%D1%82%D0%B8%D0%BA%D0%B0#%D0%9B%D0%90%D0%A7%D0%A5_2">ЛАФЧХ</a></p>
<p><img src="/img/dsp-java/42kvsx8xtrx3k14qehe1jziunde.png" alt="rrcf"></p>
<p><strong><a href="https://ru.wikipedia.org/wiki/%D0%A4%D0%B0%D0%B7%D0%BE%D0%B2%D0%B0%D1%8F_%D0%B0%D0%B2%D1%82%D0%BE%D0%BF%D0%BE%D0%B4%D1%81%D1%82%D1%80%D0%BE%D0%B9%D0%BA%D0%B0_%D1%87%D0%B0%D1%81%D1%82%D0%BE%D1%82%D1%8B">Costas Loop</a></strong> - это алгоритм фазовой подстройки частоты. Для чего он нужен? Например, для того, чтобы корректировать доплеровское смещение частоты. Так как, мы точно знаем, что фаза у нас скачет по четырём уровням, то можно сравнивать значение двух разных фаз. Если оно отличается на дельту, то корректировать частоту. Это ярче всего видно на картинках внизу.</p>
<p><img src="/img/dsp-java/it-g9hju18tmhnqq0twuj2qizja.png" alt="before costas loop"></p>
<p>До коррекции частоты, у нас круг (почти). Это значит, что частота немного меняется каждый раз, и точки фазы не попадают в одно и то же место.</p>
<p><img src="/img/dsp-java/um77gdjsnwyirvj1joikwgb8qk4.png" alt="after costas loop"></p>
<p>Здесь уже значительно лучше - видны 4 отчётливые точки фазы.</p>
<p><strong><a href="https://www.tablix.org/~avian/blog/archives/2015/03/notes_on_m_m_clock_recovery/">Clock recovery MM</a></strong>. Этот блок пытается восстановить шаг часов передатчика и отбрасывает все сэмплы, которые не относятся к изменению уровня. Примерная схема работы изображена ниже:</p>
<p><img src="/img/dsp-java/n1i8mli4sagj4lh-qc_6wif7kjw.jpg" alt="clock recovery in a nutshell"></p>
<p>После того как все лишние сэмплы выкинуты, получается хорошее QPSK созвездие.</p>
<p><img src="/img/dsp-java/cxrwwpey0e-solb-mig03ua1dvs.png" alt="clock recovery"></p>
<p><strong>Constellation Soft Decoder</strong>. Этот блок преобразует координаты в вероятность битов. Тут надо остановиться поподробнее, так это очень важно в дальнейшем. Допустим все точки у которых координаты положительные будут отображаться в пару &ldquo;00&rdquo;.</p>
<p><img src="/img/dsp-java/s3bddzcvb9z7te0u7y2hjhyt6ua.png" alt="initial"></p>
<p>Теперь допустим, что мы получили значение в красной точке.</p>
<p><img src="/img/dsp-java/nerub3aklfpmzkksbtdbyo0ik90.png" alt="hard decision"></p>
<p>Если мы будем делать жёсткое решение, то координаты красной точки мы преобразуем в пару &ldquo;00&rdquo;. При этом мы потеряем информацию о том, что точка-то почти &ldquo;01&rdquo; (в нижним квадранте). А эта информация на самом деле может помочь в декодировании. Есть алгоритмы, которые дают лучшие результаты, если передать эту информацию. Поэтому вместо того, чтобы принимать жёсткое решение, надо посчитать вероятность 0 и вероятность 1. Например, 100% вероятность нахождения в правом верхнем квадранте будет 255,255. Использование мягких решений увеличивает поток данных в 8 раз, зато даёт более лучшие результаты при декодировании сигнала. Для того чтобы посчитать мягкое решение, необходимо рассчитать расстояние между текущей точкой и каждой из точек созвездия.</p>
<p><strong>Rail</strong>, <strong>Float to char</strong>, <strong>File sink</strong>. Эти блоки немного преобразуют результаты и записывают их в файл. Для моего декодера записывать результаты в промежуточный файл не надо. Но в целях отладки было крайне полезно сначала демодулировать сигнал из Java, а затем посмотреть может ли LRPToffLineDecoder извлечь картинку.</p>
<h1 id="декодирование">Декодирование</h1>
<p>Итак, у нас есть поток 0 и 1 из которого нужно получить картинку. Для начала необходимо открыть <a href="http://planet.iitp.ru/spacecraft/meteor_m_n2_structure_2.pdf">официальную документацию</a>, где неплохо описана структура пакетов. Некоторые моменты там были опущены, поэтому я открыл еще <a href="http://meteor.robonuka.ru/wp-content/uploads/2014/08/pdf_spe_95413_eps_hrpt-lrpt.pdf">более официальную документацию</a>.</p>
<p>Декодирование состоит из следующих этапов:</p>
<ul>
<li>поиск в потоке бит синхромаркера. Каждый пакет начинается с него.</li>
<li>после того как синхромаркер был найден, декодировать следующие 16384 бита алгоритмом Витерби</li>
<li>результат подвергнуть скрэмблированию, после чего</li>
<li>применить коды Рида Соломона и извлечь данные транспортного кадра</li>
<li>из последовательности транспортных кадров извлечь последовательность парциальных пакетов. Для тех, кто изучал <a href="https://ru.wikipedia.org/wiki/%D0%A1%D0%B5%D1%82%D0%B5%D0%B2%D0%B0%D1%8F_%D0%BC%D0%BE%D0%B4%D0%B5%D0%BB%D1%8C_OSI">модель OSI</a> вопросов быть не должно.</li>
<li>из парциальных пакетов извлечь MCU формата JPEG</li>
<li>декодировать пикселы JPEG, используя коды Хаффмана и Run-length coding</li>
<li>правильно заполнить пикселами картинку с учётом пропущенных пакетов</li>
<li>наложить 3 канала друг на друга с учётом пропущенных пакетов</li>
</ul>
<p>Пожалуй я не буду здесь рассказывать про каждый из алгоритмов. Они сами по себе потянут на отдельную статью. Хочу лишь выложить результаты работы <a href="https://github.com/dernasherbrezon/jradio">моей программы</a>, <a href="http://meteor.robonuka.ru/for-experts/soft/">официальной</a> и <a href="https://github.com/artlav/meteor_decoder">на паскале</a>.</p>
<p><img src="/img/dsp-java/gjnitpweqxobjmifktc5mli_ehu.jpg" alt="compare"></p>
<p>К сожалению общая картина занимает 4500x2800px, поэтому я привожу сильно пожатую версию.</p>
<h1 id="оптимизации">Оптимизации</h1>
<p>А при чём тут Java? - скажут самые стойкие, кто смог дочитать до сюда.</p>
<p>Сейчас будет немного Java. Дело в том, что оптимизацию имеет смысл для корректно работающей программы. После каждого шага оптимизации можно запустить тесты и убедиться, что всё по-прежнему работает корректно.</p>
<p>Итак, я начну с декодирования. При запуске <a href="https://www.yourkit.com/java/profiler/features/">профайлера</a>, ничего странного не обнаружилось:</p>
<ul>
<li>одно ядро работает на полную мощность</li>
<li>самый горячий метод - это <a href="https://ru.wikipedia.org/wiki/%D0%90%D0%BB%D0%B3%D0%BE%D1%80%D0%B8%D1%82%D0%BC_%D0%92%D0%B8%D1%82%D0%B5%D1%80%D0%B1%D0%B8">декодирование Витерби</a>. Сложность этого алгоритма О(T*S), где T - это длина массива данных, S - пространство состояний. В нашем случае у нас 8 (бит) * 4 (00,01,10,11) = 32.</li>
</ul>
<p>Помимо CPU, я запустил еще анализ аллокаций объектов. Оказывается, этот метод создаёт миллионы короткоживущих объектов. Они создают лишнюю нагрузку на GC и процессор. Посмотрим, можно ли это оптимизировать. Наивная реализация создаёт связный список для хранения решений каждого входящего бита:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">	LinkedList<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">long</span><span style="color:#f92672">[]&gt;</span> decisions <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> LinkedList<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">long</span><span style="color:#f92672">[]&gt;();</span>
	<span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> 0<span style="color:#f92672">;</span> i <span style="color:#f92672">&lt;</span> data<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span><span style="color:#f92672">;</span> i <span style="color:#f92672">+=</span> 2<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
		<span style="color:#66d9ef">long</span><span style="color:#f92672">[]</span> d <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#66d9ef">long</span><span style="color:#f92672">[</span>2<span style="color:#f92672">];</span> <span style="color:#75715e">//decision
</span><span style="color:#75715e"></span>		<span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> b <span style="color:#f92672">=</span> 0<span style="color:#f92672">;</span> b <span style="color:#f92672">&lt;</span> 32<span style="color:#f92672">;</span> b<span style="color:#f92672">++)</span> <span style="color:#f92672">{</span>
			d<span style="color:#f92672">[</span>b <span style="color:#f92672">/</span> 16<span style="color:#f92672">]</span> <span style="color:#f92672">=</span> <span style="color:#f92672">...;</span>
		<span style="color:#f92672">}</span>
		<span style="color:#f92672">...</span>
		decisions<span style="color:#f92672">.</span><span style="color:#a6e22e">add</span><span style="color:#f92672">(</span>d<span style="color:#f92672">);</span>
	<span style="color:#f92672">}</span>
</code></pre></div><p>Это можно попробовать развернуть в одномерный массив и обращаться к результатам хитро вычисляя индекс. Например, так:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">	<span style="color:#66d9ef">long</span><span style="color:#f92672">[]</span> decisions <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#66d9ef">long</span><span style="color:#f92672">[</span>data<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span><span style="color:#f92672">];</span>
	<span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> 0<span style="color:#f92672">;</span> i <span style="color:#f92672">&lt;</span> data<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span><span style="color:#f92672">;</span> i <span style="color:#f92672">+=</span> 2<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
		decisions<span style="color:#f92672">[</span>i <span style="color:#f92672">+</span> b <span style="color:#f92672">/</span> 16<span style="color:#f92672">]</span> <span style="color:#f92672">=</span> <span style="color:#f92672">...;</span>
	<span style="color:#f92672">}</span>
</code></pre></div><p>В итоге на одно декодирование создаётся один объект - массив decisions. ViterbiSoft можно ещё дальше оптимизировать. Например, зная то, что размер массива всегда одинаковый, создать long[] decisions в конструкторе и переиспользовать.</p>
<p>Ещё одним проблемным местом оказался класс FixedLengthTagger. Этот класс содержит скользящее окно. Оно работает следующим образом:</p>
<ul>
<li>новый байт читается из источника</li>
<li>записывается в конец окна</li>
<li>если размер окна больше размера пакета, то удалить байт из начала окна</li>
</ul>
<p>Наивная реализация использовала LinkedList<Byte> и алгоритм движения окна был такой:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">	window<span style="color:#f92672">.</span><span style="color:#a6e22e">offerLast</span><span style="color:#f92672">(</span>curByte<span style="color:#f92672">);</span>
	<span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>window<span style="color:#f92672">.</span><span style="color:#a6e22e">size</span><span style="color:#f92672">()</span> <span style="color:#f92672">&gt;</span> packet_len<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
		window<span style="color:#f92672">.</span><span style="color:#a6e22e">removeFirst</span><span style="color:#f92672">();</span>
	<span style="color:#f92672">}</span>
</code></pre></div><p>На самом деле это очень накладная операция, так как на каждую операцию offerLast внутри LinkedList создаётся объект Node. Он будет содержать наш байт и иметь ссылки на следующий элемент списка и предыдущий. Однако, зная, что размер нашего окна фиксированный, его можно заменить на циклический массив:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">	window<span style="color:#f92672">[</span>windowIndex<span style="color:#f92672">]</span> <span style="color:#f92672">=</span> curByte<span style="color:#f92672">;</span>
	windowIndex<span style="color:#f92672">++;</span>
	<span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>windowIndex <span style="color:#f92672">&gt;=</span> window<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
		windowIndex <span style="color:#f92672">=</span> 0<span style="color:#f92672">;</span>
	<span style="color:#f92672">}</span>
</code></pre></div><p>Для того чтобы правильно взять его содержимое надо скопировать данные до текущего указателя первыми и после текущего указателя последними. Как то так:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">	<span style="color:#66d9ef">byte</span><span style="color:#f92672">[]</span> packet<span style="color:#f92672">;</span>
	System<span style="color:#f92672">.</span><span style="color:#a6e22e">arraycopy</span><span style="color:#f92672">(</span>window<span style="color:#f92672">,</span> windowIndex<span style="color:#f92672">,</span> packet<span style="color:#f92672">,</span> 0<span style="color:#f92672">,</span> window<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span> <span style="color:#f92672">-</span> windowIndex<span style="color:#f92672">);</span>
	System<span style="color:#f92672">.</span><span style="color:#a6e22e">arraycopy</span><span style="color:#f92672">(</span>window<span style="color:#f92672">,</span> 0<span style="color:#f92672">,</span> packet<span style="color:#f92672">,</span> window<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span> <span style="color:#f92672">-</span> windowIndex<span style="color:#f92672">,</span> windowIndex<span style="color:#f92672">);</span>
</code></pre></div><p>Эти две оптимизации позволили уменьшить время декодирования файла с 4 минут до 20 секунд. Для сравнения LRPToffLineDecoder делает это за 40 секунд.</p>
<p>Декодирование можно ещё немного оптимизировать, но в ущерб читаемости. Вместо этого можно попробовать ускорить демодуляцию.</p>
<p>Алгоритмы демодуляции на входе получают большой поток данных, а на выходе выдают сравнительно небольшой. Поэтому эти алгоритмы очень чувствительны к различным оптимизациям. При запуске профайлера, видно, что большая часть приходится именно на математические операции внутри блоков.</p>
<p><img src="/img/dsp-java/aeenpwb8z_nfkpg8w8pfl6iqsuo.png" alt="profiling demodulation"></p>
<p>Тут мало что можно сделать: память не выделяется, безумных циклов нет. Единственное, что интересно проверить это компилирует ли Java JIT код в <a href="https://ru.wikipedia.org/wiki/SIMD">SIMD</a> инструкции. Если вкратце, то это специальные инструкции процессора, которые работают с 128битными регистрами и обрабатывают их одной командой. Схематично это выглядит так:</p>
<p><img src="/img/dsp-java/l7ng0x8bwn8-z4fe1001iwsj9gq.png" alt="simd"></p>
<p>Как видно, такие инструкции идеально ложатся на КИХ-фильтры. GNURadio использует библиотеку VOLK, которая в зависимости от поддерживаемой архитектуры, может использовать SIMD инструкции. В Java скорей всего вызывать JNI обёртку будет значительно затратнее, чем выигрыш от использования таких инструкций. Одна надежда на JIT, который может оптимизировать перемножение одного массива на другой. Чтобы это проверить, необходимо запустить JVM с опцией &ldquo;-XX:CompileCommand=print,*FIRFilter.filterComplex&rdquo;. Она заставит JVM выводить ассемблерный код для метода filterComplex из класса FIRFilter.</p>
<p>Вот что у меня получилось при запуске с Oracle JDK 1.8.0_161 на MacBook Air:</p>
<blockquote>
<p>0x0000000115994750: vmovss 0x10(%r10,%r11,4),%xmm1
0x0000000115994757: vmulss 0x10(%rcx,%r11,4),%xmm1,%xmm4
0x000000011599475e: vmulss 0x10(%r8,%r11,4),%xmm1,%xmm1
0x0000000115994765: vaddss %xmm2,%xmm4,%xmm3
0x0000000115994769: vaddss %xmm0,%xmm1,%xmm0
0x000000011599476d: movslq %r11d,%r9
0x0000000115994770: vmovss 0x1c(%r10,%r9,4),%xmm2
0x0000000115994777: vmulss 0x1c(%rcx,%r9,4),%xmm2,%xmm8
0x000000011599477e: vmulss 0x1c(%r8,%r9,4),%xmm2,%xmm1
0x0000000115994785: vmovss 0x14(%r10,%r9,4),%xmm4
0x000000011599478c: vmulss 0x14(%rcx,%r9,4),%xmm4,%xmm2
0x0000000115994793: vmulss 0x14(%r8,%r9,4),%xmm4,%xmm5
0x000000011599479a: vmovss 0x18(%r10,%r9,4),%xmm4  ;*faload
; - ru.r2cloud.jradio.blocks.FIRFilter::filterComplex@24 (line 26)</p>
</blockquote>
<p>Судя по всему SIMD инструкции не используются.</p>
<p>Ещё одним интересным местом стало вычисление sincos. Блок Costasloop вычисляет значение синуса и косинуса для одного и того же угла (фазы) для каждого входящего значения. В CPU есть специальная команда - fsincos. Она вычисляет одновременно синус и косинус угла. Однако, в Java такой функции нет. Да и реализовывать её непонятно как: надо либо возвращать double[] (а это сильно ударит по GC), либо возвращать одно значение как результат работы функции, а другое через изменяемый параметр (double в функцию Java передаётся копированием, а Double опять же ударит по GC). Наивная же реализация выглядит так:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">	<span style="color:#66d9ef">float</span> sinImg <span style="color:#f92672">=</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">float</span><span style="color:#f92672">)</span> Math<span style="color:#f92672">.</span><span style="color:#a6e22e">sin</span><span style="color:#f92672">(-</span>d_phase<span style="color:#f92672">);</span>
	<span style="color:#66d9ef">float</span> cosReal <span style="color:#f92672">=</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">float</span><span style="color:#f92672">)</span> Math<span style="color:#f92672">.</span><span style="color:#a6e22e">cos</span><span style="color:#f92672">(-</span>d_phase<span style="color:#f92672">);</span>
</code></pre></div><p>Можно попробовать вспомнить тригонометрию и заменить на:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">	<span style="color:#66d9ef">float</span> sinImg <span style="color:#f92672">=</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">float</span><span style="color:#f92672">)</span> Math<span style="color:#f92672">.</span><span style="color:#a6e22e">sin</span><span style="color:#f92672">(-</span>d_phase<span style="color:#f92672">);</span>
	<span style="color:#66d9ef">float</span> cosReal <span style="color:#f92672">=</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">float</span><span style="color:#f92672">)</span> Math<span style="color:#f92672">.</span><span style="color:#a6e22e">sqrt</span><span style="color:#f92672">(</span>1 <span style="color:#f92672">-</span> sinImg <span style="color:#f92672">*</span> sinImg<span style="color:#f92672">)</span> <span style="color:#f92672">+</span> calculate sign<span style="color:#f92672">;</span>
</code></pre></div><p>Переход с Math.cos на Math.sqrt позволил сократить время демодуляции с 6 минут до 5 минут и 30 секунд. Тригонометрические операции можно ещё больше ускорить, если использовать <a href="https://ru.wikipedia.org/wiki/%D0%A2%D0%B0%D0%B1%D0%BB%D0%B8%D1%86%D0%B0_%D0%BF%D0%BE%D0%B8%D1%81%D0%BA%D0%B0">таблицы поиска</a>. Однако, я пока не готов исследовать зависимость результатов декодирования от точности таблиц. Может быть кто-нибудь поможет с этим?</p>
<h1 id="заключение">Заключение</h1>
<p>Поскольку я использовал одни и те же блоки для демодуляции сигнала, то можно сравнить время работы Java программы и GNURadio. Как и ожидалось, GNURadio быстрее: ~2 минуты против 5.5 минут. Да, Java почти в 2 раза медленнее. Но, если учесть, что файл записывался в течение 15 минут, то производительности Java вполне хватит, чтобы в реальном времени демодулировать сигнал.</p>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Тестирование debian пакетов в Travis-CI</title>
      <link>https://dernasherbrezon.com/posts/test-deb-travis/</link>
      <pubDate>Sat, 04 Nov 2017 13:51:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/test-deb-travis/</guid>
      <description>Возникла передо мной такая задача: тестирование debian пакета. И требования:
 пакет устанавливает и стартует systemd сервис. используются native armhf библиотеки  Тестирование должно включать в себя:
 установка пакета на чистую систему: проверка наличия зависимостей запуск: проверка зависимостей в рантайме тестирование запущенного приложения: проверка prod конфигурации  Введение Как обычно, первым делом необходимо оглядеться по сторонам и поискать уже существующие решения и подходы. Системе Debian уже 20+ лет и я не должен быть первым, кому пришло в голову тестирование пакетов.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Тестирование debian пакетов в Travis-CI</h1></header>
      		<div class='container entry-content'>
  <p>Возникла передо мной такая задача: тестирование debian пакета. И требования:</p>
<ul>
<li>пакет устанавливает и стартует systemd сервис.</li>
<li>используются native armhf библиотеки</li>
</ul>
<p>Тестирование должно включать в себя:</p>
<ul>
<li>установка пакета на чистую систему: проверка наличия зависимостей</li>
<li>запуск: проверка зависимостей в рантайме</li>
<li>тестирование запущенного приложения: проверка prod конфигурации</li>
</ul>
<p><img src="/img/test-deb-travis/1tonmhzpsbqtt5yqf6sxnpumnk8.png" alt=""></p>
<h2 id="введение">Введение</h2>
<p>Как обычно, первым делом необходимо оглядеться по сторонам и поискать уже существующие решения и подходы. Системе Debian уже 20+ лет и я не должен быть первым, кому пришло в голову тестирование пакетов. Поэтому я провел небольшое исследование экосистемы и получил следующее:</p>
<p><img src="/img/test-deb-travis/rw9hiwy9lgzw4oxcgijh85_qvnw.png" alt=""></p>
<h2 id="autopkgtest">autopkgtest</h2>
<p>Итак, в центре тестирования любого debian пакета находится autopkgtest. Это по сути набор правил для сборки и набор скриптов для запуска тестов. Более детально о том, как писать такие тесты и конфигурировать сборку пакетов можно почитать в <a href="http://packaging.ubuntu.com/ru/html/auto-pkg-test.html">официальной документации</a>.</p>
<h2 id="debci">debci</h2>
<p><img src="/img/test-deb-travis/soiwyhiobqzphzpiagvplg9ryfo.png" alt=""></p>
<p><a href="https://github.com/terceiro/debci">debci</a>  - это <a href="https://ci.debian.net">официальная</a> система для тестирования пакетов. Используется самим сообществом debian для continuous integration релизов. Представляет собой набор сервисов, которые общаются между собой через rabbitmq:</p>
<ul>
<li>debci-enqueue - добавление пакета в очередь на тестирование</li>
<li>debci-worker - запуск autopkgtest на конкретной машине</li>
<li>debci-collector - сбор результатов запуска и генерация статичного html</li>
</ul>
<p>Идеально подходит для моей задачи, поэтому я решил глубоко разобраться с системой и настроить. Наибольшую сложность доставила настройка debci-worker:</p>
<ul>
<li>по умолчанию он запускает autopkgtest-virt-lxc, который запускает lxc контейнер, которому нужен настроенный lvm.</li>
<li>логов работы нет</li>
<li>документации почти нет</li>
</ul>
<p>Методом проб и ошибок я поднял debci и понял следующее:</p>
<ol>
<li>никакой это не continuous integration. В моём понимании CI должен не только постоянно интегрировать пакет в систему, но и не пропускать ошибки интеграции в прод. В настоящий момент debci попросту показывает ошибку. Пакет как был в репозитории, так и останется там. Таким образом, если хочется большей автоматизации (а для проекта с одним разработчиком это важно), то необходимо настроить такую схему:
<ul>
<li>CI собирает пакет и кладёт его в dev/unstable apt репозиторий</li>
<li>CI дёргает debci, чтобы тот его протестировал</li>
<li>debci запускает тестирование</li>
<li>если тест прошел, то debci должен дёргать какой-то внешний скрипт, который</li>
<li>перекладывает успешно протестированный пакет из dev/unstable в stable apt репозиторий
Подобной интеграции сейчас просто нет, поэтому придется её писать.</li>
</ul>
</li>
<li>debci должен работать на отдельно выделенном сервере. Добавить собственный проект в уже работающий <a href="https://ci.debian.net">https://ci.debian.net</a> нельзя. Там тестируются только пакеты из официального репозитория. Сервер должен быть на armhf. Найти облачный хостинг с такими серверами непросто, но у меня <a href="https://www.scaleway.com">получилось</a>.</li>
<li>Зачем rabbitmq?</li>
<li>Баги в настройке LXC и LVM. К слову в <a href="https://github.com/terceiro/debci/tree/master/docs">официальной документации</a> ничего про LVM не сказано.</li>
</ol>
<h2 id="travisdebiannet">travis.debian.net</h2>
<p>Представляет собой скрипт для <a href="http://travis-ci.org/">travis-ci</a>, который создаёт docker образ, который внутри себя запускает сборку проекта и autopkgtest. Из положительных моментов:</p>
<ul>
<li>не нужен хостинг. travis-ci может абсолютно бесплатно собирать ваши приложения.</li>
<li>запускает autopkgtest</li>
</ul>
<p>Чего не хватает:</p>
<ul>
<li>пропуск стадии сборки пакета. Мой пакет собирается с помощью <a href="https://github.com/dernasherbrezon/deb-maven-plugin">maven</a> и структура никак не похожа на стандартную.</li>
<li>тестирование systemd сервиса.</li>
</ul>
<h2 id="своё">Своё</h2>
<p>Итак, всё-таки ничего не подошло. В принципе, после достаточно продолжительного исследования, уже становится понятно, что нужно:</p>
<ul>
<li>сборка на travis-ci</li>
<li>собственный docker образ, в котором</li>
<li>устанавливается пакет</li>
<li>запускается интеграционный тест, который</li>
<li>выполняет интеграционные тесты напротив работающего приложения</li>
</ul>
<p>Мне <a href="https://travis-ci.org/dernasherbrezon/r2cloud/builds/296993677">удалось</a> собрать такую конфигурацию. Но дьявол, как обычно, в деталях, поэтому я приведу здесь наиболее яркие wtf:</p>
<ol>
<li>Вы знали, что разработчики systemd и docker друг друга ненавидят? У них что-то вроде архитектурного коллапса. Одни хотят легковесности, а другие говорят, что <a href="https://blog.phusion.nl/2015/01/20/docker-and-the-pid-1-zombie-reaping-problem/">PID 1 проблему</a> таки надо решать. Страдают, конечно, при этом простые пользователи. &ldquo;Нельзя просто взять и запустить systemd в docker&rdquo; (c). Есть правда восхитительная компания <a href="https://resin.io">resin</a>, которая очень много сделала, чтобы <a href="https://docs.resin.io/runtime/resin-base-images/">помочь</a>.</li>
<li>Билд машины travis-ci работают на архитектуре intel. Нужно хитро подключить qemu и надеяться, что проблема решена.</li>
<li>При запуске resin-based контейнера, ваша команда запускается как ещё один systemd сервис (сам systemd запускается как pid 1). Команда может запустить systemd сервис, который будет тестировать, nginx, выполнить тесты, но не сможет убить systemd и завершить работу docker контейнера. Из-за этого необходимо сначала запускать контейнер в detached режиме, а выполнять тесты в работающем контейнере через docker exec. Как только последняя команда в travis.yaml выполнится, то travis сможет завершить билд с работающим контейнером.</li>
</ol>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Управление сертификатами с помощью протокола ACME</title>
      <link>https://dernasherbrezon.com/posts/java-acme/</link>
      <pubDate>Sun, 10 Sep 2017 16:45:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/java-acme/</guid>
      <description>Возникла передо мной такая задача: автоматический выпуск сертификатов для Web приложения. И требования:
 CA должны доверять все браузеры т.е. самоподписанные сертификаты не подходят; желательно бесплатно; Выпуск надо делать программно с помощью Java Embedded compact1 profile. Это всё по следам Java и без 16Gb памяти?.  Наверное многие уже слышали про бесплатные сертификаты от LetsEncrypt и certbot. А можно ли certbot заменить Java?
ACME Многие, конечно, любят LetsEncrypt за бесплатные сертификаты, которые, фактически, позволят перевести весь вэб на https.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Управление сертификатами с помощью протокола ACME</h1></header>
      		<div class='container entry-content'>
  <p>Возникла передо мной такая задача: автоматический выпуск сертификатов для Web приложения. И требования:</p>
<ul>
<li>CA должны доверять все браузеры т.е. самоподписанные сертификаты не подходят;</li>
<li>желательно бесплатно;</li>
<li>Выпуск надо делать программно с помощью Java Embedded compact1 profile. Это всё по следам <a href="https://dernasherbrezon.com/posts/java-small-heap/">Java и без 16Gb памяти?</a>.</li>
</ul>
<p>Наверное многие уже слышали про бесплатные сертификаты от <a href="https://letsencrypt.org">LetsEncrypt</a> и certbot. А можно ли certbot заменить Java?</p>
<p><img src="/img/java-acme/67f139f59aff4f0d82e4ae0b3c0d1e64.png" alt=""></p>
<h1 id="acme">ACME</h1>
<p>Многие, конечно, любят LetsEncrypt за бесплатные сертификаты, которые, фактически, позволят перевести весь вэб на https. Но не многие знают, что для этого они придумали специальный протокол - ACME. И для меня он по значимости чуть ли не выше самих бесплатных сертификатов.</p>
<p>Основные особенности протокола:</p>
<ul>
<li>Описывает взаимодействие клиента и REST сервера;</li>
<li>Есть поддержка как платных сертификатов, так и бесплатных;</li>
<li>Несколько способов авторизации владения доменом;</li>
<li>Внесен на принятие в IETF. Сейчас находится в состоянии <a href="https://tools.ietf.org/html/draft-ietf-acme-acme-06">draft</a>;</li>
<li>Все сообщения передаются в формате <a href="https://tools.ietf.org/html/rfc7519">JSON Web Token</a>.</li>
</ul>
<p>Для тех, кому интересны детали и все возможные варианты взаимодействия, можно почитать <a href="https://tools.ietf.org/html/draft-ietf-acme-acme-06">официальную документацию</a>. Она действительно простая и легко читается в отличие от наших гостов. Здесь же я приведу диаграмму последовательности при выдаче сертификата, которую нужно представлять, если Вы решили интегрироваться.</p>
<p><img src="/img/java-acme/f00f2eb1b57a414b8443304b7b01de3b.png" alt=""></p>
<h1 id="использование">Использование</h1>
<p>На официальном сайте LetsEncrypt есть <a href="https://letsencrypt.org/docs/client-options/">множество клиентов</a> работающих по протоколу ACME. Я взял <a href="https://github.com/shred/acme4j">acme4j</a>. Эта библиотека достаточно компактная и работает в compact1 profile!</p>
<p>У неё есть вполне рабочий <a href="https://github.com/shred/acme4j/blob/master/acme4j-example/src/main/java/org/shredzone/acme4j/ClientTest.java">пример использования</a>, с помощью которого я смог выпустить себе сертификат. Для того чтобы интегрировать библиотеку, достаточно с минимальными изменениями скопировать этот код.</p>
<p>Для продления сертификата необходимо авторизоваться, взять уже готовый CSR и <a href="https://shredzone.org/maven/acme4j/usage/certificate.html">отправить его в CA</a>. После чего скачать новый сертификат.</p>
<p>Единственная проблема, которая у меня возникла - это подкладывание сертификата в nginx. Поясню на примере:</p>
<ul>
<li>приложение стартует в первый раз;</li>
<li>nginx стартует. Поскольку приложение стартует в первый раз, то сертификата ещё нет, и nginx слушает на 80 порту;</li>
<li>пользователь заходит в приложение, соглашается с правилами использования сертификатов LetsEncrypt и нажимает кнопку &ldquo;выдать сертификат&rdquo;;</li>
<li>сертификат скачивается.</li>
</ul>
<p>И вот тут проблема: для того чтобы включить 443 порт с новым сертификатом, nginx должен перезачитать конфигурацию. Но чтобы это сделать нужен root. Запускать приложение из под root - плохая идея. Запускать nginx из-под пользователя тоже - нельзя будет слушать 80 и 443 порты.</p>
<p>Я добавил правило для пользователя в sudoers, чтобы можно было делать <code>sudo nginx -s reload</code>. Но это выглядит как костыль. Может кто-нибудь знает как это сделать красивее?</p>
<h1 id="итого">Итого</h1>
<p>Получение сертификата в автоматическом режиме оказалось достаточно простой процедурой. А если использовать ACME сервер <a href="https://github.com/letsencrypt/boulder">boulder</a>, то можно даже развернуть такую схему у себя в большой организации! Если у вас есть собственный CA для внутренних сервисов, то ACME должен сильно упростить работу с сертификатами.</p>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Мониторинг Raspberrypi</title>
      <link>https://dernasherbrezon.com/posts/raspberrypi-monitoring/</link>
      <pubDate>Mon, 31 Jul 2017 12:45:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/raspberrypi-monitoring/</guid>
      <description>Возникла передо мной такая задача: сделать мониторинг Raspberry PI. И требования:
 самодостаточность. Возможность показывать статус и исторические данные без доступа в интернет; работа в Java Embedded compact1 profile. Это всё по следам Java и без 16Gb памяти?.  Анализ требований Здесь и далее под мониторингом системы я буду понимать сбор time series данных. Например, JVM heap size или количество обработанных сообщений за интервал.
Самодостаточность автоматически означает, что данные надо хранить локально.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Мониторинг Raspberrypi</h1></header>
      		<div class='container entry-content'>
  <p>Возникла передо мной такая задача: сделать мониторинг Raspberry PI. И требования:</p>
<ul>
<li>самодостаточность. Возможность показывать статус и исторические данные без доступа в интернет;</li>
<li>работа в Java Embedded compact1 profile. Это всё по следам <a href="https://dernasherbrezon.com/posts/java-small-heap/">Java и без 16Gb памяти?</a>.</li>
</ul>
<p><img src="/img/raspberrypi-monitoring/3231b4f9f5a3453799d709d10c39c4a1.jpg" alt=""></p>
<h2 id="анализ-требований">Анализ требований</h2>
<p>Здесь и далее под мониторингом системы я буду понимать сбор time series данных. Например, JVM heap size или количество обработанных сообщений за интервал.</p>
<p>Самодостаточность автоматически означает, что данные надо хранить локально. Отображать их надо в браузере, потому что уже есть вэб-админка для этого. Итак, что мы имеем из современного:</p>
<ul>
<li>
<p><a href="https://www.influxdata.com">InfluxDB</a>. Специальная база для хранения time series данных. Умеет делать агрегации и data retention. Opensource версия не поддерживает кластеризацию, но для Raspberry PI и не нужно. Проблема с системными требованиями: <a href="https://docs.influxdata.com/influxdb/v1.3/guides/hardware_sizing/">CPU 2-4 ядра и RAM 2-4 Gb</a>. Не подходит.</p>
</li>
<li>
<p><a href="https://graphiteapp.org">Graphite</a>. Хранит данные в базе данных <a href="http://graphite.readthedocs.io/en/latest/whisper.html">whisper</a>, который, <a href="http://graphite.wikidot.com/whisper#toc1">как уверяется</a>, немного лучше RRD. В зависимостях Python 2.7 и Django. Имеет свой собственный интерфейс, который надо бы ещё интегрировать в существующую админку. Ну можно конечно же взять. Но когда на сервере сплошная Java, стоит ли тащить весь мир Python? Опять же запущенные WSGI процессы будут занимать дополнительную память.</p>
</li>
</ul>
<p>Все остальные варианты найденные на просторах, не подошли либо потому, что надо вручную делать data retention, либо требовательны к ресурсам, либо уж совсем наколеночные.</p>
<p>А что если продолжить мысль про RRD и Java? Получается <a href="https://github.com/rrd4j/rrd4j">RRD4J</a>. Эта библиотека на Java, которая полностью поддерживает все операции и возможности оригинального <a href="https://oss.oetiker.ch/rrdtool/index.en.html">rrdtool</a>. Единственное отличие - это несовместимость баз данных между rrdtool и RRD4J. Но с другой стороны это даже лучше. Базы, созданные оригинальным rrdtool, бинарно несовместимы между различными архитектурами.</p>
<p>Итак, RRD. Он идеально подходит для Raspberry PI:</p>
<ul>
<li>файлы баз данных фиксированного размера. Можно легко посчитать размер на диске. Очень удобно для embedded систем, которые надо один раз настроить и забыть;</li>
<li>один раз открытый файл обновляется через RandomAccessFile. Оригинальный rrdtool <a href="https://oss.oetiker.ch/rrdtool/doc/rrdupdate.en.html#___top">каждый раз</a> открывает файл, записывает данные и закрывает файл.</li>
</ul>
<p>Но и не без проблем.</p>
<ul>
<li>
<p>Не совместим с compact1 профайлом. RRD4J написан, похоже, в лихие 2000-е, когда шаблон <a href="https://ru.wikipedia.org/wiki/%D0%9F%D0%BE%D1%81%D0%B5%D1%82%D0%B8%D1%82%D0%B5%D0%BB%D1%8C_(%D1%88%D0%B0%D0%B1%D0%BB%D0%BE%D0%BD_%D0%BF%D1%80%D0%BE%D0%B5%D0%BA%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F)">visitor</a> был очень модным, поэтому базовые классы зависят от org.w3c.*. Оказывается одной из фич оригинального rrdtool была возможность писать в XML вместо бинарного файла. И эту фичу RRD4J гордо скопировал. Решается просто: делается <a href="https://github.com/dernasherbrezon/rrd4j-light">hard fork</a> и удаляется все ненужное. Грязно, но работает.</p>
</li>
<li>
<p>Создание графиков. С самой генерацией проблем нет. Графики действительно получаются красивые. Но вот шаблоны создания никуда не годятся. В те же лихие 2000-е, когда RRD был на пике популярности, вполне нормальным считалось добавление команды <a href="https://oss.oetiker.ch/rrdtool/doc/rrdgraph.en.html">rrdgraph</a> в crontab и выполнение с периодом в 5 минут. Заставлять генерировать .png графики на Raspberry PI - дело неблагородное. Слишком много ресурсов будет тратиться. А если учесть специфику проекта (вэб-админка, которая используется в лучшем случае раз в год), то видимо нужно придумать более хитрую схему.</p>
</li>
</ul>
<h2 id="rrd4j-js">RRD4J-js</h2>
<p>И тут мне в голову приходит осознание. Мы же в 2017 году! Время, когда у нас есть стандарты на передачу бинарных файлов в браузер и разные мощные javascript библиотеки для рисования графиков. Что если передавать скачивать RRD базу с сервера как есть, вытаскивать из неё данные и рисовать уже какой-нибудь готовой и проверенной временем Javascript библиотекой?</p>
<p>Посидев несколько ночей в попытке понять как писать на Javascript и создать плагин для Jquery (а на нём ещё модно писать?), я создал <a href="https://www.npmjs.com/package/rrd4j-js">rrd4j-js</a>.</p>
<p>Суть проекта достаточно проста: скачивать RRD, парсить и передавать данные для отрисовки во <a href="http://www.flotcharts.org">flot</a>. А уже плагинами flot добивать нужные стили и интерактив. В итоге решение оказалось даже лучше, чем стандартные графики rrdgraph:</p>
<ul>
<li>по наведению мышки в подсказке можно отображать значение точки в момент времени</li>
<li>растягивать, сжимать и изменять размер графика в зависимости от разрешения экрана</li>
<li>форматировать данные в зависимости от типа. Например, с помощью <a href="https://github.com/whatbox/jquery.flot.byte">jquery.flot.byte</a> можно форматировать данные в килобайты, мегабайты и гигабайты.</li>
</ul>
<p><img src="/img/raspberrypi-monitoring/b43bb4a25a8c451dbc599ce70708f435.png" alt=""></p>
<p>Библиотека получилась достаточно простая. Больше всего времени конечно заняло выяснение конвенций по оформлению кода, созданию классов (sic!) в javascript и попытке поделиться проектом с миром.</p>
<p>Я с самого начала решил сделать самодостаточную библиотеку, которую можно загрузить в npm. После нескольких попыток это сделать, у меня, конечно же, всё получилось. Но тут же выяснилось, что npm используется только для server-side разработки на nodejs. И нельзя <a href="https://stackoverflow.com/questions/35062852/npm-vs-bower-vs-browserify-vs-gulp-vs-grunt-vs-webpack">просто так</a> зарелизить библиотеку в правильный репозиторий. Да что тут стесняться: нельзя понять какой из репозиториев правильный. В итоге я остановился на npm. Может кто-нибудь сведущий подскажет как правильно?</p>
<h2 id="послесловие">Послесловие</h2>
<p>С получившимся инструментом, уже можно было начинать творить. А именно периодически сохранять метрики в RRD4J. Обвязка в виде достаточно распространённых <a href="https://github.com/dropwizard/metrics">metrics</a> работающая в compact1 - приятное дополнение. В итоге пришлось написать достаточно простой <a href="https://github.com/dernasherbrezon/r2cloud/blob/master/src/main/java/ru/r2cloud/metrics/RRD4JReporter.java">RRD4JReporter</a>, который расширяет com.codahale.metrics.ScheduledReporter и пользоваться в удовольствие.</p>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Java и без 16Gb памяти?</title>
      <link>https://dernasherbrezon.com/posts/java-small-heap/</link>
      <pubDate>Sun, 16 Jul 2017 15:11:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/java-small-heap/</guid>
      <description>Однажды меня посетила мысль о том, что надо закодить что-нибудь на Java для RaspberryPI. Предыстория того, как я дошёл до жизни такой, сама по себе потянет на отдельный пост. Но вот сочные технические подробности, трудности и счастливый конец ниже под катом.
Постановка задачи Немного разочаровавшись в движении проекта satnogs, я решил попробовать сам написать базовую станцию для приёма радио сигналов на raspberry pi. Проанализировав текущую функциональность satnogs и сложив с собственным заскорузлым enterprise пониманием того, что такое стабильная платформа, я придумал следующие требования:</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Java и без 16Gb памяти?</h1></header>
      		<div class='container entry-content'>
  <p>Однажды меня посетила мысль о том, что надо закодить что-нибудь на Java для RaspberryPI. Предыстория того, как я дошёл до жизни такой, сама по себе потянет на отдельный пост. Но вот сочные технические подробности, трудности и счастливый конец ниже под катом.</p>
<p><img src="/img/java-small-heap/0ebcb88f4c7d47cc96e872f9c182638c.jpg" alt=""></p>
<h2 id="постановка-задачи">Постановка задачи</h2>
<p>Немного разочаровавшись в движении проекта <a href="https://satnogs.org">satnogs</a>, я решил попробовать сам написать базовую станцию для приёма радио сигналов на <a href="https://www.raspberrypi.org">raspberry pi</a>. Проанализировав текущую функциональность satnogs и сложив с собственным заскорузлым enterprise пониманием того, что такое стабильная платформа, я придумал следующие требования:</p>
<ul>
	<li>java вместо python. Конечно же.</li>
<li>низкое потребление ресурсов. Embedded же.</li>
<li>переиспользование уже существующих библиотек. Цель проекта не научиться декодировать самому, а максимально интегрировать уже существующие библиотеки</li>
<li>стабильность. Коробочка должна работать сама по себе как можно дольше. В идеале её нужно настроить и забыть.</li>
</ul>
<p>В результате в противоречие вступают только два требования: Java и низкое потребление ресурсов.</p>
<p>В этот момент я почему-то вспомнил древний-древний слоган &ldquo;Java - write once, run everywhere&rdquo; и присказку, что Java может запускаться на кофеварке. С этого момента началось погружение в Java Embedded.</p>
<p>Если вкратце, то в Java существуют две платформы для написания под маленькие устройства: <a href="https://ru.wikipedia.org/wiki/Java_Platform,_Micro_Edition">Java ME</a> и Java Embedded. Первая платформа предназначена для совсем маленьких (кофеварки) устройств, а вторая для тех, что чуть-чуть покрупнее. Я выбрал Java Embedded.</p>
<p>Сама Java Embedded в Java 8 претерпела изменения. Теперь её можно собрать с различными профайлами: compact1, compact2, compact3. По сути, это depedency management для бедных. Каждый профайл содержит <a href="http://www.oracle.com/technetwork/java/embedded/resources/tech/compact-profiles-overview-2157132.html">какие-то части rt.jar</a>, тем самым уменьшая минимальное потребление памяти JVM при загрузке. На моих как-бы тестах (колонка %RES в выводе команды top), я получил следующее потребление:</p>
<ul>
	<li>compact1 - <b>10mb</b></li>
	<li>compact2 - <b>12mb</b></li>
</ul>
<p>Для начала я выбрал самый хардкорный вариант: compact1. Но если не получится найти под него библиотеки, то можно попробовать compact2.</p>
<p>После выбора версии Java нужно выбрать библиотеки. И вот тут дикий-дикий запад. Поскольку в Java мире всё течёт неспеша и с оглядкой на обратную совместимость, то никто из разработчиков библиотек не побежал оптимизировать свой код под новые профайлы. Тем более скоро выходит Java 9, где всё может ещё раз измениться.</p>
<p>Дальше я проанализировал, минимальный набор библиотек для создания не слишком нагруженного web приложения.</p>
<h3>IoC фреймворк</h3>
<ul>
<li><a href="https://github.com/google/dagger">Dagger</a>, <a href="https://github.com/zsoltherpai/feather">Feather</a> - нет @PreDestroy, @PostConstruct и принципиально не планируется. Про graceful shutdown разработчики видимо не слышали. Вручную контролировать последовательность вызова метода start, чтобы при остановке в обратном порядке вызвать stop, совсем не хочется делать. </li>
<li><a href="https://github.com/google/guice">Guice</a> - зависимость на <a href="https://github.com/google/guava">guava</a>, а значит ещё +2mb.</li>
<li><a href="http://picocontainer.com">picocontainer</a> - не compact1</li>
</ul>
<h3>База данных</h3>
<p>Какой же Java проект без базы данных. Но тут есть один подвох: в compact1 нет java.sql api. Поэтому я первым делом посмотрел на базы с native api без jdbc:</p>
<ul>
	<li><a href="http://www.oracle.com/technetwork/database/berkeleydb/overview/index-093405.html">berkleydb</a>. NoSQL, но почему-то зависит от javax.transactional. </li>
</ul>
<p>И с jdbc:</p>
<ul>
	<li> <a href="https://github.com/xerial/sqlite-jdbc">sqlite</a> - библиотека весит 5mb. Видимо содержит все нативные библиотеки для всех платформ.</li>
<li><a href="https://github.com/xerial/sqlite-jdbc">java db</a>. Весит конечно много и разные версии отличаются существенно: 10.8 - 2.5mb, 10.13 - 3.1mb. </li>
</ul>
<p>Есть ещё куча других мелких непонятных embedded баз данных, которые можно было бы попробовать. Но отлавливать их баги под raspberry pi у меня желания нет.</p>
<p>Зато есть пара других идей:</p>
<ul>
<li>
<p>А что, если обхитрить JVM: взять compact1 и вручную подложить <a href="https://mvnrepository.com/artifact/org.xerial.thirdparty/jdbc-api/1.4">java.sql api</a>? Ответ: не получится. В Classloader есть вот такой замечательный код:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">       <span style="color:#66d9ef">if</span> <span style="color:#f92672">((</span>name <span style="color:#f92672">!=</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">)</span> <span style="color:#f92672">&amp;&amp;</span> name<span style="color:#f92672">.</span><span style="color:#a6e22e">startsWith</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;java.&#34;</span><span style="color:#f92672">))</span> <span style="color:#f92672">{</span>
            <span style="color:#66d9ef">throw</span> <span style="color:#66d9ef">new</span> SecurityException
                <span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Prohibited package name: &#34;</span> <span style="color:#f92672">+</span>
                 name<span style="color:#f92672">.</span><span style="color:#a6e22e">substring</span><span style="color:#f92672">(</span>0<span style="color:#f92672">,</span> name<span style="color:#f92672">.</span><span style="color:#a6e22e">lastIndexOf</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#39;.&#39;</span><span style="color:#f92672">)));</span>
        <span style="color:#f92672">}</span>
</code></pre></div><pre><code>
 Вообще непонятно почему существует такой maven артефакт, если его даже теоретически нельзя загрузить.
</code></pre></li>
<li>
<p>А может без базы? Для моих целей вполне подходят обычные файлы. Sql join тоже вроде не имеет смысла делать.</p>
</li>
</ul>
<p>В общем отказался совсем от базы. Посмотрим надолго ли.</p>
<h3>Web container</h3>
<ul>
	<li><a href="https://github.com/apache/tomcat">tomcat</a> - Ха-ха-ха</li>
<li><a href="http://www.eclipse.org/jetty/">jetty</a> - не compact1  </li>
<li><a href="https://github.com/NanoHttpd/nanohttpd">nanohttpd</a> - не servlet, нет поддержки сессий. Но видимо такова судьба Embedded разработчика. </li>
</ul>
<h3>SSL temination</h3>
<ul>
	<li>nginx. 3mb master node + 3mb 1 client worker. = 6mb. Вроде неплохо. </li>
</ul>
<h3>Вэб клиент</h3>
<ul>
	<li>angular, reactjs - на ровном месте привносят десяток короткоживущих технологий. </li>
<li>good-o-templates - наш выбор же.</li>
</ul>
<h3>Шаблонизаторы</h3>
<ul>
	<li>JSP - слишком тяжело и нужно много библиотек. Даже не стал копать.</li>
<li>Freemarker - легко, но как оказалось не compact1.</li>
<li>Кто-нибудь слышал про <a href="http://jtwig.org">jtwig</a>? Я тоже нет, но они умеют работать в compact1 и поддерживают базовые фичи. </li>
</ul>
<h3>Логирование</h3>
<ul>
	<li>logback - <a href="https://jira.qos.ch/browse/LOGBACK-1071">только</a> compact3 </li>
<li>log4j - full JRE</li>
<li>java.util.logging? - Хуже уже не будет.</li>
</ul>
<h3>Json</h3>
<ul>
	<li><a href="https://github.com/google/gson">gson</a>. Зависимость на java.sql (!!!)</li>
<li><a href="https://github.com/FasterXML/jackson-databind">jacksonxml</a>. Зависимость на org.w3c.dom.Node</li>
<li>очередной "нагуглил-ночью" код <a href="https://github.com/ralfstx/minimal-json">https://github.com/ralfstx/minimal-json</a>. Посмотрел, вроде там нечему ломаться.</li>
</ul>
<p>После нескольких запусков и сборке всего вместе выплыло несколько косяков, но их можно поправить конфигурацией. Например:
<a href="https://stackoverflow.com/questions/13825403/java-how-to-get-logger-to-work-in-shutdown-hook"><a href="https://stackoverflow.com/questions/13825403/java-how-to-get-logger-to-work-in-shutdown-hook">https://stackoverflow.com/questions/13825403/java-how-to-get-logger-to-work-in-shutdown-hook</a></a></p>
<h2>Итого</h2>
<ul>
	<li>все библиотеки в сборе + прогретый кэш для шаблонизатора занимают в памяти ~<b>23mb</b></li>
<li>код открыт и доступен: <a href="https://github.com/dernasherbrezon/r2cloud">https://github.com/dernasherbrezon/r2cloud</a> (надеюсь пароли нигде там не закоммитил)</li>
</ul>
</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Enterprise Java на страже космоса</title>
      <link>https://dernasherbrezon.com/posts/enterprise-java-space/</link>
      <pubDate>Sat, 08 Apr 2017 12:48:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/enterprise-java-space/</guid>
      <description>Научно-технический прогресс постепенный по своей природе. Никто не берет горсть песка с пляжа и делает из нее компьютер. Мы берем грубые инструменты и создаем с помощью них более качественные. Затем с помощью последних еще более точные и так далее. Каждое малое усовершенствование - это ступенька прогресса и все они должны быть пройдены.
Председатель Шенчжи Ян.
 В сознании каждого человека есть одна простая мысль: космические технологии - это сложно. На самом деле это не так.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Enterprise Java на страже космоса</h1></header>
      		<div class='container entry-content'>
  <blockquote>
<p>Научно-технический прогресс постепенный по своей природе. Никто не берет горсть песка с пляжа и делает из нее компьютер. Мы берем грубые инструменты и создаем с помощью них более качественные. Затем с помощью последних еще более точные и так далее. Каждое малое усовершенствование - это ступенька прогресса и все они должны быть пройдены.</p>
<p>Председатель Шенчжи Ян.</p>
</blockquote>
<p><img src="/img/enterprise-java-space/24dbbef6d38b4de59fef6b67a0308e40.jpg" alt=""></p>
<p>В сознании каждого человека есть одна простая мысль: космические технологии - это сложно. На самом деле это не так. Не все технологии, применимые в космической отрасли - это Rocket science. И последние успехи в космонавтике, ренессанс космической тематики подвигли меня на поиск проблемных областей, которые простой Enterprise Java разработчик может улучшить.
<cut /></p>
<h2>Предисловие</h2>
Самый простой способ - это пойти на сайт любой компании, работающей в космической отрасли, и поискать вакансии. Несмотря на то, что <a href="http://www.spacex.com/careers">SpaceX</a> ищет программистов, мне было отказано на этапе резюме. Видимо, государственные контракты от NASA не позволяют им нанимать людей из других стран. Видимо, по этой же причине <a href="https://www.linkedin.com/jobs/search/?keywords=nasa&f_C=2003">NASA</a> даже не ответили на моё резюме. <a href="http://global.jaxa.jp/about/employ/index.html">JAXA</a> набирает не-программистов и тех, у кого японский не ниже уровня jlpt2.
<p>С небольшими частными компаниями должно было бы быть значительно лучше. Но <a href="http://www.planetaryresources.com/careers/#pri-workplace">Planetary Resources</a> отказали на этапе резюме. Видимо, слишком маленькие, чтобы держать под рукой Enterprise Java разработчика. <a href="https://www.planet.com/company/careers/?office=View%20All&department=Software%20Engineering">Planet</a> попросили написать программу на Си. Я конечно вспомнил синтаксис и смог, но после пары интервью они отказали. Видимо, слишком маленькая компания, у которой нет офиса в России, и переезд в другую страну они не потянут.</p>
<p>Ну и, наконец, дефолт сити. <a href="https://www.roscosmos.ru/23310/">Роскосмос</a> - ни списка вакансий, ни требований.</p>
<h2>Станции наблюдения за спутниками</h2>
Но мне повезло, и я случайно обнаружил проект <a href="https://geektimes.ru/post/241834/">Satnogs</a>. Это проект по созданию любительских станций наблюдения за спутниками по всему миру. Можно самому распечатать на 3д принтере части станции и по инструкции собрать. Также у них есть центральный сервер, который рассылает на станции запросы для наблюдения за пролетающими спутниками и собирает данные со всего мира: <a href="https://network.satnogs.org">https://network.satnogs.org</a>. 
<p>Для меня, как новичка в этой области, было не совсем понятно кому и зачем это нужно. Однако, повертевшись на <a href="https://community.satnogs.org">форумах</a> и в mailing листах <a href="http://www.cubesat.org/mailinglist">cubesat</a>, я стал немного представлять проблематику.</p>
<p>Обычно маленькие спутники и кубсаты запускают университеты для отработки той или иной <a href="http://sail.planetary.org">технологии</a>. Иногда их запускают даже солидные коммерческие компании для финальных тестов своих <a href="https://www.nasa.gov/centers/ames/engineering/projects/nodes">наработок</a>. Обычно эти компании и университеты достаточно небольшие и не могут себе позволить <a href="https://geektimes.ru/company/mailru/blog/280132/">флот</a> для наблюдения за спутниками. Однако, понимание того, как ведет себя технология, важно в <a href="https://geektimes.ru/post/251506/">течении всего времени</a> полета, а не только во время пятиминутного интервала связи. Именно поэтому университеты и компании <a href="http://www.space.aau.dk/aausat4/index.php?n=Main.ReportBeaconsAndPassInfo">заинтересованы</a> в постоянном слежении за своими спутниками.</p>
<p>И тут на помощь должны прийти интернет и <a href="https://en.wikipedia.org/wiki/Space_Communications_and_Navigation_Program">глобальная сеть наблюдения</a>.</p>
<h2>Телеметрия</h2>
По мере того, как спутник вращается на орбите, он периодически посылает телеметрию. <a href="https://ru.wikipedia.org/wiki/Телеметрия">Телеметрия</a> - это текущее состояние системы: напряжение батарей, момент вращения, температура и пр. Если постоянно получать эту информацию, то можно построить график изменения данных во времени и провести анализ.
<p>Поскольку я прежде всего программист, меня заинтересовала именно программная часть, а в особенности digital signal processing. Как из .wav файла можно получить данные. Но прежде чем расчехлять прибор и начать кодить необходимо проанализировать существующие решения. Если вкратце, то эта область застряла где-то в 60х. Энтузиасты пересылают данные в виде <a href="http://www.dk3wn.info/p/?cat=8">скриншотов</a> к windows программам.</p>
<p><img src="/img/enterprise-java-space/192591f0007246fc8cc434b47e76ef4f.jpg" alt=""></p>
<p>Хотелось бы что-то более современное. Например, облачный сервис, который на вход получает .wav файл, а на выходе возвращает json. Почему именно такая архитектура?</p>
<ol>
<li>для того, чтобы отправить данные и получить результат не нужно специального ПО. Достаточно лишь curl, который есть во всех linux дистрибутивах;</li>
<li>результат в текстовом формате упрощает разработку и интеграцию;</li>
<li>микросервисная архитектура. Такой сервис будет отлично встраивается в другие более сложные системы.</li>
</ol>
Следующим этапом был выбор технологий. Поскольку специализированные железки для декодирования радио сигналов ну совсем никак не поставить в обычные датацентры, то необходимо программное декодирование. Тут все просто: <a href="http://gnuradio.org">gnuradio</a>. Это стандарт де-факто для программного декодирования - достаточно мощный и бесплатный инструмент, который поддерживает множество режимов и способов работы. Как раз то, что нужно для того, чтобы работать с зоопарком различных способов кодирования сигнала. Daniel Estévez <a href="https://github.com/daniestevez/gr-satellites">написал</a> замечательные скрипты по декодированию сигналов различных спутников и приложил рабочие примеры.
<p><img src="/img/enterprise-java-space/e9ddc3c4bc8e448f8ca1d6f7e0b99e79.png" alt=""></p>
<p>Казалось бы вот оно, счастье. Однако, и тут есть несколько ложек дегтя:</p>
<ol>
<li><a href="https://www.gnu.org/licenses/old-licenses/gpl-2.0.ru.html">GPLv2</a>. Это не позволит вам писать коммерческий софт по декодированию сигналов. И уж точно не подходит для облачного сервиса - кто-то должен платить за хостинг.</li>
<li>Безумная связка C/C++/Python/Swig. Если вкратце, то в gnuradio есть понятие блока. Это такой атомарный преобразователь сигнала. Когда сигнал декодируется данные проходят через множества, связанных между собой, блоков, и на выходе из последнего блока получается результат. Так вот, блоки можно писать на С++ и python. А раз можно писать, значит кто-то обязательно напишет. В итоге часть блоков написана на Python 2, часть на <a href="https://github.com/gnuradio/gnuradio/issues/1153">Python 3</a>, часть на C++, который иногда <a href="http://stackoverflow.com/questions/24898791/gnu-radio-build-error-no-rule-to-make-target-filter-generated-includes-neede">не компилируется</a> и <a href="https://wiki.gnuradio.org/index.php/MacInstall">не всегда устанавливается</a>, и все это связано через <a href="http://www.swig.org">SWIG</a>.</li>
</ol>
Переписывать уже рабочий код, который используется уже много лет и знаком многим энтузиастам, задача неблагодарная. Но помучившись с виртуальными машинами и продравшись сквозь десяток ошибок компиляции, я решил пойти на невозможное: переписать ключевые блоки на <a href="https://github.com/dernasherbrezon/jradio">Java</a>. Разумеется бездумно переписывать все подряд блоки не имеет смысла, поэтому я решил проверить концепцию, переписав только блоки, нужные для декодирования <a href="https://github.com/daniestevez/gr-aausat">aausat-4</a>. В итоге у меня получилось сделать бинарно совместимые с gnuradio блоки и декодировать сигнал.
<p>Поскольку концепция оказалась успешной, я решил запустить <a href="https://r2cloud.ru">облачный сервис</a>, который по сути предоставляет REST интерфейс к библиотеке <a href="https://github.com/dernasherbrezon/jradio">jradio</a>. Следующим этапом я планирую подключить его к <a href="https://network.satnogs.org">satnogs</a> для декодирования данных.</p>
<h2>Выводы</h2>
Даже если вы Enterprise Java разработчик, вы можете помочь Элону. Возможно, по прошествии времени Вы сможете говорить внукам, что шаттл, который летает между Марсом и Землей, каждую секунду выполняет Ваш код. Дерзайте!
</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Дистрибьюция Java приложений</title>
      <link>https://dernasherbrezon.com/posts/java-dist/</link>
      <pubDate>Tue, 18 Aug 2015 13:55:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/java-dist/</guid>
      <description>Удивительно, но факт - дистрибьюция Java приложений в 21 веке по прежнему огромный костыль. Разработчики до сих пор придумывают способы вроде rsync/copy-paste/wget для установки java приложений на сервер. И только монструозные enterprise production ready платформы иногда позволяют сделать чуть больше - откатить приложение на предыдущую версию. В этой статье я хотел бы рассказать о доступном и простом способе организации дистрибьюции.
deb и apt В мире существует множество действительно гигантских репозиториев приложений и инструментов по их дистрибьюции.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Дистрибьюция Java приложений</h1></header>
      		<div class='container entry-content'>
  <p><img src="/img/java-dist/75bbd9f6074d4cb8a46ad705051aa8e0.png" alt=""></p>
<p>Удивительно, но факт - дистрибьюция Java приложений в 21 веке по прежнему огромный костыль. Разработчики до сих пор придумывают способы вроде rsync/copy-paste/wget для установки java приложений на сервер. И только монструозные enterprise production ready платформы иногда позволяют сделать чуть больше - откатить приложение на предыдущую версию. В этой статье я хотел бы рассказать о доступном и простом способе организации дистрибьюции.</p>
<h2 id="deb-и-apt">deb и apt</h2>
<p>В мире существует множество действительно гигантских репозиториев приложений и инструментов по их дистрибьюции. Самые большие, по ощущениям, - это AppStore, Google Play, Debian/Ubuntu репозитории и CentOS/Fedora YUM репозитории. Например, в Ubuntu репозитории для версии 15.04 содержится около 90000 приложений (без учета различных версий). Почему бы не воспользоваться провернной временем системой и для дистрибьюции Java приложений? Тем более, что:</p>
<ul>
<li><a href="http://w3techs.com/technologies/details/os-linux/all/all">большинство</a> серверов и так используют Debian/Ubuntu</li>
<li>проверенный временем инструмент: первый релиз был <a href="https://en.wikipedia.org/wiki/Advanced_Packaging_Tool">16 лет</a> назад</li>
<li>нативная поддержка в операционной системе</li>
</ul>
<p>Для начала немного о системе дистрибьюции приложений в Debian/Ubuntu. Она состоит из двух основных частей:</p>
<ul>
<li>deb пакеты</li>
<li>apt (Advanced Package Tool) инструменты</li>
</ul>
<h2 id="deb-пакеты">deb пакеты</h2>
<p>deb это бинарный дистрибутив приложения. Он состоит из 3 основных частей:</p>
<ul>
<li>метаинформация. Производитель, версия, зависимости на другие пакеты (очень похоже на maven), описание и пр.</li>
<li>непосредственно приложение. .tar.gz архив</li>
<li>(опционально) скрипты, которые будут выполняться во время установки</li>
</ul>
<p>Структура .tar.gz архива может быть абсолютно произвольной. Однако, чтобы Ваше приложение было похоже на все остальные приложения системы, оно должно следовать структуре каталогов Debian/Ubuntu:</p>
<ul>
<li>/etc - конфиги</li>
<li>/etc/init.d/ - скрипты запуска демонов</li>
<li>/usr/bin - исполняемые файлы</li>
<li>/usr/lib - библиотеки</li>
<li>/var/log - логи</li>
</ul>
<p>В зависимости от Вашего приложения каталоги могут немного отличаться, но общая структура надеюсь понятна.</p>
<p>Еще одной важной особенностью deb пакетов является возможность запускать скрипты во время установки. Эти скрипты тоже хранятся в deb пакете и имеют стандартное именование. Каждый скрипт может выполняться в определенную фазу установки. Установка пакета делится на несколько фаз:</p>
<ul>
<li>preinst</li>
<li>inst</li>
<li>postinst</li>
<li>prerm</li>
<li>rm</li>
<li>postrm</li>
</ul>
<p>Существует множество различных промежуточных фаз и различные комбинации состояния инсталляции. Нас они мало интересуют, но тем кто хочет разобраться можно почитать <a href="https://www.debian.org/doc/debian-policy/ch-maintainerscripts.html">официальную документацию</a>. Обычно эти скрипты настраивают ротацию и архивирование логов, задают начальные значения конфигураций (например, root-пароль для mysql). Если же у вас конечное бизнес-приложение, то лучше взять какое-нибудь нормальное средство автоматизации вроде <a href="http://www.ansible.com/home">Ansible</a>, <a href="https://www.chef.io/chef/">Chief</a>, <a href="https://puppetlabs.com">Puppet</a>.</p>
<h2 id="apt">apt</h2>
<p>apt - это набор инструментов для работы с deb пакетами. Он позволяет:</p>
<ul>
<li>конфигурировать репозитории и работать с ними: добавлять, удалять, менять, обновлять индекс</li>
<li>управлять пакетами: устанавливать, удалять, обновлять, искать</li>
</ul>
<p>apt репозиторий в упрощенном виде - это HTTP сервер, который раздает deb пакеты. У него есть индекс (файл), который доступен по стандартному пути и непосредственно бинарники, путь к которым находится в индексе.</p>
<h2 id="связывая-все-воедино">Связывая все воедино</h2>
<p>После того как стала понятна примерная схема работы связки deb + apt, можно попробовать их интегрировать. Примерная схема такая:</p>
<ul>
<li>создания deb пакета в фазе package</li>
<li>публикация получившегося пакета в фазе deploy</li>
</ul>
<p>Для этого есть несколько maven плагинов.</p>
<h2 id="a-hrefhttpsgithubcomtcurdtjdebjdeba"><a href="https://github.com/tcurdt/jdeb">jdeb</a></h2>
<p>Схема его работы достаточно <a href="https://github.com/tcurdt/jdeb/blob/master/src/examples/maven/pom.xml">проста</a>:</p>
<ul>
<li>перечислить файлы и директории, которые попадут в результирующий .tar.gz архив</li>
<li>указать пермиссии</li>
</ul>
<p>Более полная документация о возможностях плагина можно узнать на официальной <a href="https://github.com/tcurdt/jdeb/blob/master/docs/maven.md">странице</a>.</p>
<h2 id="a-hrefhttpsgithubcomdernasherbrezonapt-maven-pluginapt-maven-plugina"><a href="https://github.com/dernasherbrezon/apt-maven-plugin">apt-maven-plugin</a></h2>
<p>Работает с репозиторием заданным в distributionManagement как с apt репозиторием, а не maven репозиторием. Хотя ничего не мешает их использовать одновременно под одним url. Их layout&rsquo;ы совместимы между собой.</p>
<p>Пример конфигурации выглядит следующим образом:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-xml" data-lang="xml"><span style="color:#f92672">&lt;plugin&gt;</span>
	<span style="color:#f92672">&lt;groupId&gt;</span>com.aerse.maven<span style="color:#f92672">&lt;/groupId&gt;</span>
	<span style="color:#f92672">&lt;artifactId&gt;</span>apt-maven-plugin<span style="color:#f92672">&lt;/artifactId&gt;</span>
	<span style="color:#f92672">&lt;version&gt;</span>1.5<span style="color:#f92672">&lt;/version&gt;</span>
	<span style="color:#f92672">&lt;executions&gt;</span>
		<span style="color:#f92672">&lt;execution&gt;</span>
			<span style="color:#f92672">&lt;id&gt;</span>deploy<span style="color:#f92672">&lt;/id&gt;</span>
			<span style="color:#f92672">&lt;goals&gt;</span>
				<span style="color:#f92672">&lt;goal&gt;</span>deploy<span style="color:#f92672">&lt;/goal&gt;</span>
			<span style="color:#f92672">&lt;/goals&gt;</span>
		<span style="color:#f92672">&lt;/execution&gt;</span>
	<span style="color:#f92672">&lt;/executions&gt;</span>
	<span style="color:#f92672">&lt;configuration&gt;</span>
		<span style="color:#f92672">&lt;component&gt;</span>main<span style="color:#f92672">&lt;/component&gt;</span>
		<span style="color:#f92672">&lt;codename&gt;</span>strepo<span style="color:#f92672">&lt;/codename&gt;</span>
	<span style="color:#f92672">&lt;/configuration&gt;</span>
<span style="color:#f92672">&lt;/plugin&gt;</span>
</code></pre></div><p>И секция distributionManagement (ничего <a href="https://maven.apache.org/plugins/maven-deploy-plugin/usage.html">необычного</a>):</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-xml" data-lang="xml"><span style="color:#f92672">&lt;distributionManagement&gt;</span>
	<span style="color:#f92672">&lt;repository&gt;</span>
		<span style="color:#f92672">&lt;id&gt;</span>maven-release-repo<span style="color:#f92672">&lt;/id&gt;</span>
		<span style="color:#f92672">&lt;url&gt;</span>http://example.com/maven<span style="color:#f92672">&lt;/url&gt;</span>
	<span style="color:#f92672">&lt;/repository&gt;</span>
<span style="color:#f92672">&lt;/distributionManagement&gt;</span>
</code></pre></div><p>После выполнения фазы deploy, <a href="http://example.com/maven">http://example.com/maven</a> станет еще и apt репозиторием. И можно смело писать:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">sudo add-apt-repository <span style="color:#e6db74">&#34;deb http://example.com/maven strepo main&#34;</span>
sudo apt-get update
sudo apt-get install &lt;artifactId&gt;
</code></pre></div><h2 id="немного-любимого-enterprise">Немного любимого enterprise</h2>
<p>Манца любого java-enterprise разработчика звучит следующим образом:</p>
<ul>
<li>security</li>
<li>stability</li>
<li>high availability production ready platform</li>
</ul>
<p>Все это отлично решается, если устроить apt репозиторий из самого популярного хостинга для разработчиков: <a href="https://aws.amazon.com/s3/">s3</a>. Вкупе с cloudfront, он даёт гарантию <a href="https://aws.amazon.com/s3/sla/">99.9%</a> надёжности и географическую <a href="https://www.google.com/maps/d/viewer?mid=zq41xmfbtRfA.kUKJZcl-4O7k&hl=en">распределённость</a>.</p>
<p>Делается это опять же достаточно просто. Надо подключить плагин для работы с s3:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-xml" data-lang="xml"><span style="color:#f92672">&lt;build&gt;</span>
	<span style="color:#f92672">&lt;extensions&gt;</span>
		<span style="color:#f92672">&lt;extension&gt;</span>
			<span style="color:#f92672">&lt;groupId&gt;</span>org.springframework.build<span style="color:#f92672">&lt;/groupId&gt;</span>
			<span style="color:#f92672">&lt;artifactId&gt;</span>aws-maven<span style="color:#f92672">&lt;/artifactId&gt;</span>
			<span style="color:#f92672">&lt;version&gt;</span>5.0.0.RELEASE<span style="color:#f92672">&lt;/version&gt;</span>
		<span style="color:#f92672">&lt;/extension&gt;</span>
	<span style="color:#f92672">&lt;/extensions&gt;</span>
<span style="color:#f92672">&lt;/build&gt;</span>
</code></pre></div><p>Поменять url в секции distributionManagement на имя bucket&rsquo;a:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-xml" data-lang="xml"><span style="color:#f92672">&lt;distributionManagement&gt;</span>
	<span style="color:#f92672">&lt;repository&gt;</span>
		<span style="color:#f92672">&lt;id&gt;</span>maven-release-repo<span style="color:#f92672">&lt;/id&gt;</span>
		<span style="color:#f92672">&lt;url&gt;</span>s3://example.bucket<span style="color:#f92672">&lt;/url&gt;</span>
	<span style="color:#f92672">&lt;/repository&gt;</span>
<span style="color:#f92672">&lt;/distributionManagement&gt;</span>
</code></pre></div><p>И настроить доступ к вашему bucket&rsquo;у:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-xml" data-lang="xml"><span style="color:#f92672">&lt;servers&gt;</span>
	<span style="color:#f92672">&lt;server&gt;</span>  
		<span style="color:#f92672">&lt;id&gt;</span>maven-release-repo<span style="color:#f92672">&lt;/id&gt;</span>  
		<span style="color:#f92672">&lt;username&gt;</span>apikey<span style="color:#f92672">&lt;/username&gt;</span>  
		<span style="color:#f92672">&lt;password&gt;</span>apisecret<span style="color:#f92672">&lt;/password&gt;</span>  
	<span style="color:#f92672">&lt;/server&gt;</span>
<span style="color:#f92672">&lt;/servers&gt;</span>
</code></pre></div><p>На конечных серверах для доступа к такому репозиторию существует специальный плагин: <a href="https://launchpad.net/~leonard-ehrenfried/+archive/ubuntu/apt-transport-s3">apt-transport-s3</a>. К сожалению его еще нет в официальных репозиториях, поэтому необходимо добавить вручную один из репозиториев, где он содержится:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">sudo add-apt-repository ppa:leonard-ehrenfried/apt-transport-s3
sudo apt-get install apt-transport-s3
</code></pre></div><p>После чего можно уже указывать наш s3 репозиторий:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">sudo add-apt-repository <span style="color:#e6db74">&#34;deb s3://apikey:apisecret@s3.amazonaws.com/example.bucket strepo main&#34;</span>
</code></pre></div><h2 id="итого">Итого</h2>
<p>В результате всех манипуляций установка приложения:</p>
<ul>
<li>mvn clean deploy</li>
</ul>
<p>На любом Debian/Ubuntu сервере в любой точке мира:</p>
<ul>
<li>apt-get update</li>
<li>apt-get install artifactId</li>
</ul>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Спецификация конструкции CubeSat</title>
      <link>https://dernasherbrezon.com/posts/cubespec/</link>
      <pubDate>Tue, 24 Sep 2013 13:14:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/cubespec/</guid>
      <description>1. Введение. CubeSat (Cube Satellite - кубический спутник, КубСат) - это малые спутники (пикоспутники) модульной кубической формы. Самый маленький имеет длину ребра 10 см и массу до 1.33кг. Более крупные спутники имеют форму и массу, кратные 1.5x, 2x, 3x одиночных модулей, состыкованным друг с другом по одной линии.
1.1 История создания Проект CubeSat был начат в 1999 году совместными усилиями профессора Джорди Пьюг-Суари (Prof. Jordi Puig-Suari) из Калифорнийского Политехнического Университета (California Polytechnic State University), Сан Луис Обиспо (San Luis Obispo), профессором Бобом Твиггсом (Prof.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Спецификация конструкции CubeSat</h1></header>
      		<div class='container entry-content'>
  <h2 id="1-введение">1. Введение.</h2>
<p>CubeSat (Cube Satellite - кубический спутник, КубСат) - это малые спутники (пикоспутники) модульной кубической формы. Самый маленький имеет длину ребра 10 см и массу до 1.33кг. Более крупные спутники имеют форму и массу, кратные 1.5x, 2x, 3x одиночных модулей, состыкованным друг с другом по одной линии.</p>
<h3 id="11-история-создания">1.1 История создания</h3>
<p>Проект CubeSat был начат в 1999 году совместными усилиями профессора Джорди Пьюг-Суари (Prof. Jordi Puig-Suari) из Калифорнийского Политехнического Университета (California Polytechnic State University),  Сан Луис Обиспо (San Luis Obispo), профессором Бобом Твиггсом (Prof. Bob Twiggs) из Лаборатории Развития Космических Систем Стэнфордского университета (Stanford University&rsquo;s Space Systems Development Laboratory (SSDL)).
Целью проекта является создание стандартных требований к конструкции пикоспутников для уменьшение стоимости и сроков разработки, обеспечения доступности доступа в космос и осуществления частых запусков.
В настоящее время в работе над проектом CubeSat участвуют более 100 международных универсистетов,  школ и частных предприятий, разрабатывающих пикоспутники для научных, частных и государственных задач.</p>
<div class="row pagination-centered">
	<div class="span12">
		<img src="/img/cubespec/cubesat-figure1.jpg" width="500" height="333" alt="кубсаты и P-POD">
	</div>
</div>
<h3 id="12-назначение">1.2 Назначение</h3>
<p>Основное назначение проекта CubeSat - предоставить возможность запускать в космос небольшие полезные нагрузки. Основной зоной ответственности Калифорнийского Политехнического Университета, как разработчика P-POD (Poly Picosatellite Orbital Deployer - Носитель для вывода на орбиту набора пикоспутников), является обеспечение безопасности запускаемого CubeSat&rsquo;а, ракеты-носителя, основной полезной нагрузки и других CubeSat&rsquo;ов.
Разработчики CubeSat&rsquo;ов должны активно участвовать в обеспечении безопасности и успешности CubeSat миссий, применяя хорошие инженерные практики, тестирование и проверку систем. Аварии в работе CubeSat, P-POD или интерфейсных систем могут повредить ракету-носитель, основную полезную нагрузку и подвергнуть всю программу CubeSat большому риску. Все участники сообщества CubeSat обязаны обеспечить безопасную работу своих систем и соответствие требованиям к конструкции и испытаниям, описанным в данном документе. Требования, приведенные в данном документе, могут быть заменены требованиями поставщика запуска ракеты-носителя.</p>
<h3 id="13-процедура-согласования-отклонений-от-основных-требований">1.3 Процедура согласования отклонений от основных требований.</h3>
<p>Разработчики обязаны заполнить форму &ldquo;Запроса проверки отклонений от   требований&rdquo; DAR (Deviation Wavier Approval Request), если их CubeSat не удовлетворяет любому требованию из указанных в разделе 2 или 3 настоящего документа. Процесс согласования должен быть быстрым и простым. Его назначение - это облегчение взаимных согласований и обмена сложной документацией между CubeSat разработчиками, интеграторами P-POD, различным персоналом безопасности и поставщиком запуска ракеты-носителя. Это должно облегчить определение, а также нахождение путей решения любого вопроса, который может возникнуть до интеграции P-POD и запуска. Скачать DAR можно с сайта <a href="http://www.cubesat.org">http://www.cubesat.org</a>. Все запросы следует отправлять по адресу: <a href="mailto:standards@cubesat.org">standards@cubesat.org</a></p>
<p>При получении запроса согласования отклонений DAR интегратор P-POD рассматривает запрос, решает все возникшие вопросы, и определяет какие дополнительные действия (тесты, анализы или издержки) необходимы для выполнения процедуры согласования. При наличии дополнительных действий, разработчик на основе информации от интегратора P-POD составляет план испытаний и проводит испытания до того, как запрос будет одобрен P-POD интегратором. Запросы одобряются интегратором P-POD до того, как будет определен конкретный запуск CubeSat. Как только подробности конкретного запуска становятся известны, процедура согласования становится специфичной для запуска и отправляется на рассмотрение Менеджеру Миссии запуска ракеты-носителя (Launch Vehicle Mission Manager). Менеджер Миссии запуска имеет право утверждения запроса согласования, а также может потребовать дополнительные изменения и/или испытания перед одобрением запроса. Разработчики должны понимать, что каждое отклонение от требований уменьшает шансы найти возможность подходящего запуска.</p>
<div class="row pagination-centered">
	<div class="span12">
		<object width="369.004" height="567.429" data="/img/cubespec/cubesat-figure2.svg" type="image/svg+xml"></object>
	</div>
</div>
<h2 id="2-носитель-для-вывода-на-орбиту-набора-пикоспутников">2. Носитель для вывода на орбиту набора пикоспутников</h2>
<p>Poly Picosatellite Orbital Deployer (P-POD)</p>
<h3 id="21-интерфейс-p-pod">2.1 Интерфейс P-POD</h3>
<p>P-POD - это стандартизированная система для вывода на орбиту CubeSat. P-POD может нести 3 стандартных CubeSat&rsquo;а и служит промежутоным звеном между CubeSat&rsquo;ом и ракетой-носителем. P-POD - это прямоугольный контейнер с крышкой и пружинным механизмом. По сигналу с ракеты-носителя о начале вывода на орбиту включается освобождающий механизм P-POD&rsquo;а, несколько торсионных пружин в петле открывают крышку, и CubeSat&rsquo;ы выталкиваются пружиной по направляющим P-POD&rsquo;а (см. рис. 3а). P-POD изготовлен из анодированного алюминия. Выталкиваемые CubeSat&rsquo;ы скользят по нескольким направляющим при выводе на орбиту. CubeSat&rsquo;ы совместимы с P-POD при выполнении всех требований, приведенных в данном документе. P-POD имеет обратную совместимость, поэтому CubeSat&rsquo;ы, созданные в соответствии со Спецификацией конструкции CubeSat (CDS) версии 9 и выше, не будут иметь проблем с совместимостью. Разработчикам рекомендуется применять последнюю актуальную версию Спецификации конструкции CubeSat, чтобы использовать все возможности P-POD.</p>
<div class="row pagination-centered">
	<div class="span12">
		<img src="/img/cubespec/cubesat-figure3.png" width="1015" height="443" alt="P-POD">
	</div>
</div>
<h2 id="3-спецификация-cubesat">3. Спецификация CubeSat</h2>
<h3 id="31-общие-требования">3.1 Общие требования</h3>
<p>3.1.1 CubeSat&rsquo;ы с отклонениями от Спецификации конструкции CubeSat&rsquo;ов должны пройти процедуру согласования отклонений и отправить запрос на согласование отклонений DAR (см. раздел 1.3 и Дополнение А).</p>
<p>3.1.2 Все детали CubeSat&rsquo;а должны быть закреплены во время запуска, вывода на орбиту и функционирования, чтобы не создавать дополнительный космический мусор.</p>
<p>3.1.3 Использование пиротехники не допускается.</p>
<p>3.1.4 Любые двигательные системы должны быть спроектированы, установлены и протестированы в соответствии с AFSPCMAN 91-710 Volume 3.</p>
<p>3.1.5 Двигательные системы должны иметь как минимум 3 блокировки активации.</p>
<p>3.1.6 Общий запас химической энергии не должен превышать 100 Вт·Ч (360 кДж).</p>
<p>3.1.6.1 Примечание: допускаются большие значения, но это может ограничить возможность запуска.</p>
<p>3.1.7 Применяемые опасные материалы  должны соответствовать требованиям AFSPCMAN 91-710 Volume 3.</p>
<p>3.1.8 Применяемые материалы должны удовлетворять высокой устойчивости к дегазации для предотвращения загрязнения космического аппарата во время интеграции, тестирования и запуска. Список одобренных NASA подобных материалов можно найти на <a href="http://outgassing.nasa.gov">http://outgassing.nasa.gov</a>.</p>
<p>3.1.8.1 Применяемые материалы должны иметь общую убыль массы (Total Mass Loss) &lt;= 1.0%.</p>
<p>3.1.8.2 Применяемые Материалы кубсатов должны иметь содержание летучих конденсируемых материалов (Collected Volatile Condensable Material (CVCM)) &lt;= 0.1%.</p>
<p>3.1.9 Последняя версия Спецификации CubeSat является официальной версией, которой должны придерживаться разработчики. Последняя версия доступна по адресу: <a href="http://www.cubesat.org">http://www.cubesat.org</a>.</p>
<p>3.1.9.1 Калифорнийский Политехнический Университет рассылает обновления по списку подписчиков CubeSat при изменениях спецификации. Вы можете подписаться на обновления по адресу: <a href="http://www.cubesat.org/index.php/about-us/how-to-join">http://www.cubesat.org/index.php/about-us/how-to-join</a>.</p>
<p>3.1.10 Примечание: Некоторые ракеты-носители имеют дополнительные требования к величине магнитного поля. Кроме того сильные магниты могут помешать разделению CubeSat&rsquo;ов из одного P-POD. Рекомендуется ограничить магнитное поле за пределами внешнего габарита CubeSat&rsquo;а величиной не превышающей магнитное поле Земли более чем на 0.5 гс (Гаусс).</p>
<p>3.1.11  Конструкция CubeSat&rsquo;a должна обеспечивать при подъеме вентиляцию вентилируемого объема/пространства &lt; 2000 дюймов (50,8 метра).</p>
<h3 id="32-механические-требования-к-cubesat">3.2 Механические требования к CubeSat</h3>
<p>Кубсаты - это пикоспутники в форме куба. Основные изображения и размеры приведены на чертеже в приложении Б. Система координат P-POD представлена ниже на Рис. 4.</p>
<div class="row pagination-centered">
	<div class="span12">
		<img src="/img/cubespec/cubesat-figure4.png" width="577" height="437" alt="Координатная система PPOD">
	</div>
</div>
<p>Рис. 4: Координатная система P-POD</p>
<p>3.2.1 Система координат CubeSat должна соответствовать изображенной в приложении Б соответствующего размера. Система координат СubeSat должна совпадать с системой координат P-POD при интеграции.Точка начала системы координат CubeSat совпадает с геометрическим центром CubeSat.</p>
<p>3.2.1.1 Конфигурации CubeSat и физические размеры приведены в приложении Б.</p>
<p>3.2.1.2 Для CubeSat размера 3U+ доступен дополнительный объем, который представлен на рис 6.</p>
<p>3.2.2 CubeSat устанавливается в P-POD стороной -Z.</p>
<p>3.2.3 Никакие компоненты на сторонах, отмеченных зеленым и желтым, не должны выступать более чем на 6.5 мм по нормали к поверхности.</p>
<p>3.2.3.1 При проверке перечня приемки CubeSat&rsquo;а (CubeSat Acceptance Checklist (CAC)) выступающие элементы измеряются от плоскости направляющих.</p>
<p>3.2.4 Выводимые на орбиту компоненты должны быть соединены с CubeSat&rsquo;том, но не P-POD&rsquo;ом.</p>
<p>3.2.5 Ширина направляющих должна быть не менее 8.5 мм.</p>
<p>3.2.6 Направляющие должны иметь шероховатость поверхности менее 1.6 мкм.</p>
<p>3.2.7 Кромки направляющих должны быть скруглены радиусом не менее 1 мм.</p>
<p>3.2.8 Торцы направляющих на на сторонах +/- Z должны иметь минимальный размер зоны контакта с направляющими соседних CubeSat&rsquo;ов 6.5 мм х 6.5 мм (см. Рис 6).</p>
<p>3.2.9 Не менее 75% поверхности направляющих должны соприкасаться с направляющими P-POD&rsquo;а. Остальные 25% направляющих могут быть утоплены, но направляющие не должны выходить за границы, указанные в спецификации.</p>
<p>3.2.10 Максимальная масса 1U CubeSat&rsquo;а не более 1.33 кг.</p>
<p>3.2.10.1 Примечание: большая масса может быть рассмотрена в зависимости от конкретной миссии (запуска).</p>
<p>3.2.11 Максимальная масса 1.5U CubeSat&rsquo;а не более 2.00 кг.</p>
<p>3.2.11.1 Примечание: большая масса может быть рассмотрена в зависимости от конкретной миссии (запуска).</p>
<p>3.2.12 Максимальная масса 2U CubeSat&rsquo;а не более 2.66 кг.</p>
<p>3.2.12.1 Примечание: большая масса может быть рассмотрена в зависимости от конкретной миссии (запуска).</p>
<p>3.2.13 Максимальная масса 3U CubeSat&rsquo;а должна быть 4.00 кг.</p>
<p>3.2.13.1 Примечание: большая масса может быть рассмотрена в зависимости от конкретной миссии (запуска).</p>
<p>3.2.14 Центр масс CubeSat&rsquo;а должен быть расположен в пределах 2 см от его геометрического центра в направлении осей X и Y.</p>
<p>3.2.14.1 Центр масс 1U CubeSat&rsquo;а должен быть расположен в пределах 2 см от его геометрического центра в направлении оси Z.</p>
<p>3.2.14.2 Центр масс 1.5U CubeSat&rsquo;а должен быть расположен в пределах 3 см от его геометрического центра в направлении оси Z.</p>
<p>3.2.14.3 Центр масс 2U CubeSat&rsquo;а должен быть расположен в пределах 4.5 см от его геометрического центра в направлении оси Z.</p>
<p>3.2.14.4 Центр масс 3U и 3U+ CubeSat&rsquo;ов должен быть расположен в пределах 7 см от его геометрического центра в направлении оси Z.</p>
<p>3.2.15 Для каркаса CubeSat&rsquo;а и его направляющих должен применяться Алюминий 7075, 6061, 5005, и/или 5052.</p>
<p>3.2.15.1 Если применяются другие материалы, разработчик должен отправить запрос согласования отклонений DAR и пройти процедуру согласования отклонений от требований спецификации.</p>
<p>3.2.16 Боковые поверхности направляющих и торцевые поверхности выступающих концов направляющих CubeSat&rsquo;а, которые соприкасаются с P-POD и соседними CubeSat&rsquo;ами, должны иметь твердое анодирование для предотвращения холодной сварки внутри P-POD.</p>
<p>3.2.17 CubeSat&rsquo;ы 1U, 1.5U и 2U  должны использовать разделительные упругие элементы для обеспечения надежного разделения.</p>
<p>3.2.17.1 Примечание: Характеристики рекомендуемого разделительного упругого элемента приведены ниже в Таблице 1. Эти элементы изготавливаются на заказ и доступны в Калифорнийском Политехническом Университете. Для получения разделительных упругих элементов обратитесь по адресу <a href="mailto:cubesat@gmail.com">cubesat@gmail.com</a>.</p>
<p>3.2.17.2 Разделительные упругие элементы в сжатом виде не должны выступать за пределы торцевой поверхности выступающих концов направляющих и могут быть утоплены глубже этой поверхности.</p>
<p>3.2.17.3 Разделительные пружины для 1U, 1.5U и 2U CubeSat&rsquo;ов должны располагаться в центре торцевой части выступающего конца направляющей со стороны -Z CubeSat&rsquo;а, как показано на рис. 7.</p>
<p>3.2.17.4 Разделительные упругие элементы не требуются для 3U CubeSat&rsquo;ов.</p>
<table class="table table-striped table-condensed table-bordered">
	<tr>
		<th>Характеристика</th>
		<th>Значение</th>
	</tr>
	<tr>
		<td>Материал толкателя</td>
		<td>Нержавеющая сталь</td>
	</tr>
	<tr>
		<td>Усилие начальное/конечное</td>
		<td>0.14 lbs. / 0.9 lbs. (63 г / 408 г)</td>
	</tr>
	<tr>
		<td>Ход толкателя</td>
		<td>минимум 0.16 дюйма над поверхностью отступа</td>
	</tr>
	<tr>
		<td>Резьба</td>
		<td>8-36 UNF-2B</td>
	</tr>
</table>
<p>Таблица 1. Свойства разделительных упругих элементов CubeSat&rsquo;а.</p>
<div class="row pagination-centered">
	<div class="span12">
		<img src="/img/cubespec/cubesat-figure5.jpg" width="632" height="440" alt="Разделительная пружина">
	</div>
</div>
<p>Рис. 5: Разделительный упругий элемент (толкатель).</p>
<div class="row pagination-centered">
	<div class="span12">
		<img src="/img/cubespec/cubesat-figure6.jpg" width="976" height="368" alt="дополнительный объем для 3U+">
	</div>
</div>
<p>Рис. 6: 3U+ Дополнительный Объем (&ldquo;Tuna Can&rdquo;)</p>
<div class="row pagination-centered">
	<div class="span12">
		<img src="/img/cubespec/cubesat-figure7.jpg" width="1040" height="680" alt="Местоположение разделительных упругих элементов и выключателей развертывания">
	</div>
</div>
<p>Рис. 7: Выключатели развертывания и разделительные упругие элементы</p>
<h3 id="33-электрические-требования">3.3 Электрические требования</h3>
<p>Электронные системы должны разрабатываться с учетом следующих требований.</p>
<p>3.3.1 Система энергоснабжения CubeSat&rsquo;а должна находиться в выключенном состоянии для предотвращения запуска и выполнения любых функций при нахождении внутри P-POD&rsquo;а с момента монтажа на ракету-носитель до момента вывода на орбиту. Электрические системы CubeSat&rsquo;а могут включать в себя различные подсистемы, такие как: система обработки команд и данных (Command and Data Handling (C&amp;DH), радиосвязь (RF Communication), определение и управление положением (Attitude Determine and Control (ADC)), привод складного механизма. Системы энергоснабжения CubeSat&rsquo;а включают в себя любые батарейные сборки, солнечные панели и батарейки таблеточного типа.</p>
<p>3.3.2 CubeSat должен иметь как минимум один выключатель развертывания на выступе направляющих, как указано на рисунке 7.</p>
<p>3.3.3 В нажатом состоянии переключатель развертывания CubeSat&rsquo;а должен разъединять электрическую схему питания от электрических потребителей; Это относится и к часам реального времени RTC.</p>
<p>3.3.4 Выключатель развертывания должен находиться в нажатом состоянии в течении всего времени когда CubeSat находится внутри P-POD.</p>
<p>3.3.4.1 В нажатом состоянии выключатель развертывания CubeSat не должен выступать над торцевой поверхностью выступающей части направляющей CubeSat&rsquo;а.</p>
<p>3.3.5 Если выключатель развертывания CubSat&rsquo;а из нажатого состояния перейдет в отжатое и обратно, таймеры передачи и развертывания должны быть сброшены к значению t=0.</p>
<p>3.3.6 Стержень, вынимаемый перед полетом (Remove Before Flight pin - RBF), и все коннекторы отрывных кабелей CubeSat&rsquo;а должны находиться  в области окон доступа, выделенных темно-зеленым цветом  в приложении Б.</p>
<p>3.3.6.1 Примечание: Вся диагностика и зарядка батарей будет происходить внутри P-POD при не нажатом выключателе развертывания.</p>
<p>3.3.7 CubeSat должен содержать стержень, вынимаемый перед полётом (RBF pin).</p>
<p>3.3.7.1 RBF pin должен отключать все питание спутника с момента его установки в CubeSat.</p>
<p>3.3.7.2 По завершению интеграции CubeSat&rsquo;а в P-POD необходимо извлечь RBF pin.</p>
<p>3.3.7.3 Установленный в спутник RBF пин не должен выступать более чем на 6.5 мм за плоскость направляющих.</p>
<p>3.3.8 CubSat должен содержать цепь защиты батареи от заряда/разряда во избежание несбалансированных состояний ячеек батареи.</p>
<p>3.3.9 При проектировании CubeSat необходимо выполнить как минимум одно из следующих требований по предотвращению случайной передачи радиосигнала. Настоятельно рекомендуется наличие трех независимых блокировок, что может уменьшить количество необходимой документации и исследований. Блокировка - это физическое устройство между источником энергии и опасным компонентом. Таймер не считается  независимой блокировкой.</p>
<p>3.3.9.1 CubeSat должен иметь одну блокировку включения передачи радиосигнала, и выходная мощность радиосигнала не должна превышать 1.5 Вт на входе передающей антенны.</p>
<p>3.3.9.2 CubeSat  должен иметь две независимых блокировки передачи радиосигнала.</p>
<h3 id="34-требования-по-эксплуатации">3.4 Требования по эксплуатации</h3>
<p>CubeSat должен удовлетворять конкретным требованиям, зависящим от конкретного набора интегрированных CubeSat&rsquo;ов и выполняемых ими функций, чтобы соответствовать правовым обязательствам и обеспечивать безопасность других CubeSat&rsquo;ов.</p>
<p>3.4.1 Операторы должны получить и предоставить документы соответствующих лицензий на использование радиочастот.</p>
<p>3.4.1.1 Для использования любительских радиочастот, необходимо предоставить доказательство согласования использования частот с Международным Союзом Радиолюбителей  (International Amateur Radio Union (IARU)). Формы заявлений могут быть найдены на <a href="http://www.iaru.org">www.iaru.org</a>.</p>
<p>3.4.2 CubeSat&rsquo;ы должны соответствовать государственным лицензионным соглашениям и ограничениям по использованию радиочастот.</p>
<p>3.4.3 Конструкции и оборудование миссий CubeSat должны соответствовать NPR 8715.6 по ограничению космического мусора.</p>
<p>3.4.3.1 Любой компонент кубсата должен (?) возвращаться/повторно входить/входить в атмосферу (?) с энергией менее 15 Дж.</p>
<p>3.4.3.2 Разработчики должны получить и предоставить документацию одобрения плана по снижению космического мусора от FCC (Federal Communication Commission - Федеральная комиссия связи (США)) (или NOAA (National Oceanic and Atmospheric Administration - Национальное управление по исследованию океанов и атмосферы (США)) если существует ?? imager ??)</p>
<p>3.4.3.2.1 Примечание: Правила/Регламент любительского радио FCC можно найти по адресу <a href="http://www.arrl.org/part-97-amateur-radio">http://www.arrl.org/part-97-amateur-radio</a>.</p>
<p>3.4.3.3 Примечание: Анализ на соответствие вышеуказанным правилам может быть проведен с помощью Программы для оценки космического мусора NASA DAS (Debris Assessment Software), доступной по адресу <a href="http://orbitaldebris.jsc.nasa.gov/mitigate/das.html">http://orbitaldebris.jsc.nasa.gov/mitigate/das.html</a>.</p>
<p>3.4.4 Все развертываемые элементы спутника, такие как штанги (фермы), антенны и солнечные панели должны иметь задержку разворачивания как минимум 30 мин после срабатывания выключателей развертывания при выталкивании из P-POD.</p>
<p>3.4.5 CubeSat' не должны генерировать или передавать любые сигналы с момента интеграции в P-POD и в течении 45 минут после выхода на орбиту из P-POD&rsquo;а. Тем не менее CubeSat могут питаться (?) в последующем разворачивании от P-POD (?) (возможно опечатка FORM - FROM) (?) on following deployment form the P-POD (?).</p>
<p>3.4.6 Частным организациям (не относящимся к Правительству США), управляемым или подпадающим под юрисдикцию США, которые предполагают использование системы (спутника) дистанционных измерений (телеметрической системы), может потребоваться лицензия в по требованиям Закона США. Для получения дополнительной информации посетите <a href="http://www.nesdis.noaa.gov/CRSRA/licenseHome.html">http://www.nesdis.noaa.gov/CRSRA/licenseHome.html</a>. Нажмите на ссылку Application Process.</p>
<p>3.4.7 Калифорнийский Политехнический Университет произведет как минимум одну проверку соответствия, при которой оборудование разработчика будет исследовано и интегрировано в P-POD или TestPOD. Окончательная проверка соответствия будет произведена перед запуском. Для проверки соответствия спутника требованиям Спецификации используется Перечень Приемки CubeSat (CubeSat Acceptance Checklist (CAC)). Список приведен в  приложении к этому документу или доступен по адресу <a href="http://cubesat.org/index.php/documents/developers">http://cubesat.org/index.php/documents/developers</a>.</p>
<h2 id="4-требования-к-испытаниям">4. Требования к испытаниям</h2>
<p>Испытания проводятся с целью проверки соответствия всем требованиям поставщика запуска ракеты-носителя, а также любым дополнительным требованиям испытаний, необходимым для обеспечения безопасности CubeSat&rsquo;ов, P-POD&rsquo;а и основной миссии. Если условия работы (?) ракеты-носителя неизвестны, то для определения требований к испытаниям могут использоваться стандарты The General Environmental Verification Standard (GEVS, GSFC-STD-7000) и MIL-STD-1540. Стандарты GSFC-STD-7000 и MIL-STD-1540 являются полезной справочной информацией при определении условий испытаний и требований к испытаниям, но нет гарантий, что контрольные уровни в них полностью охватывают и удовлетворяют всем условиям испытаний ракеты-носителя. Официальными требованиями к испытаниям и контрольными уровнями считаются только предоставленные поставщиком запуска или интегратором P-POD. Требования к испытаниям от поставщика запуска имеют более высокий приоритет и заменяют собой требования из любого другого источника. P-POD испытывается подобным образом для обеспечения безопасности и качества изготовления перед интеграцией с CubeSat&rsquo;ами. Все CubeSat&rsquo;ы проходят как минимум все нижеприведенные испытания.</p>
<h3 id="41-случайные-колебания-random-vibration">4.1 Случайные колебания (Random Vibration)</h3>
<p>Испытание на случайные колебания проводятся в соответствии с требованиями поставщика запуска.</p>
<h3 id="42-термический-вакуумный-отжиг-thermal-vacuum-bakeout">4.2 Термический вакуумный отжиг (Thermal Vacuum Bakeout)</h3>
<p>Термический вакуумный отжиг проводится, чтобы убедиться в надлежащем газовыделении компонентов. Спецификацию испытаний предоставляет поставщик запуска.</p>
<h3 id="43-ударное-испытание-shock-testing">4.3 Ударное испытание (Shock Testing)</h3>
<p>Ударное испытание должно быть производится согласно требованиям поставщика запуска.</p>
<h3 id="44-визуальный-осмотр-visual-inspection">4.4 Визуальный осмотр (Visual Inspection)</h3>
<p>Визуальный осмотр CubeSat&rsquo;а и измерение критических областей производится согласно приемочному листу CubeSat&rsquo;а CAC (Приложение В)</p>
<h3 id="45-принципы-испытаний-cubesatов">4.5 Принципы испытаний CubeSat&rsquo;ов</h3>
<p>CubeSat подвергается либо квалификационным испытаниям (проверка соответствия техническим условиям), либо испытаниям по сокращенной программе (protoflight) согласно диаграмме процесса испытаний CubeSat&rsquo;ов (CubeSat Testing Flow Diagram), представленной на Рис. 8. Контрольные уровни и продолжительности определяются поставщиком запуска или  интегратором P-POD.</p>
<h4 id="451-квалификационные-испытания">4.5.1 Квалификационные испытания</h4>
<p>Квалификационные испытания производятся на инженерном образце, идентичному полетной модели CubeSat&rsquo;а. Квалификационные уровни определяются поставщиком запуска или интегратором P-POD. Оба стандарта MIL-STD-1540 и LSP-REQ-317.01 используются в качестве руководства при определении уровней испытаний. После этого полётная модель подвергается приемочным испытаниям в TestPOD, затем интегрируется в полетный P-POD для окончательного испытания на случайные колебания. Если конструкция CubeSat&rsquo;а подверглась изменению или модификации после квалификационных испытаний, то могут потребоваться дополнительные испытания.</p>
<h4 id="452-испытание-по-сокращенной-программе-protoflight">4.5.2 Испытание по сокращенной программе (Protoflight)</h4>
<p>Испытание по сокращенной программе производиться на полетной модели CubeSat&rsquo;а. Уровни испытаний определяются поставщиком запуска или интегратором P-POD. Оба стандарта MIL-STD-1540 и LSP-REQ-317.01 используются в качестве руководства при определении уровней испытаний. Полётная модель подвергается испытаниям по сокращенной программе в TestPOD, затем интегрируется в полетный P-POD для окончательных приёмочных испытаний, испытаний качества изготовления и испытаний на случайные колебания. После испытаний по сокращенной программе полетная модель CubeSat&rsquo;а не разбирается и не модифицируется. Разборка оборудования после испытаний по сокращенной программе потребует подачи разработчиком &ldquo;Запроса проверки отклонений от   требований&rdquo; DAR и пройти процедуру согласования отклонений перед разборкой. Если конструкция CubeSat&rsquo;а подверглась изменению или модификации после испытаний по ускоренной программе, то могут потребоваться дополнительные испытания.</p>
<h4 id="453-приёмка">4.5.3 Приёмка</h4>
<p>После доставки и интеграции CubeSat в P-POD, дополнительные испытания проводятся над всей системой P-POD с интегрированными CubeSat&rsquo;ами. Данные испытания проверяет надлежащую интеграцию CubeSat&rsquo;а и P-POD. Кроме того, любые неизвестные и опасные взаимодействия между CubeSat&rsquo;ами могут быть выявлены во время приемочного испытания. Интегратор P-POD координирует и проводит приемочные испытания. Оба стандарта MIL-STD-1540 и LSP-REQ-317.01 используются в качестве руководства при определении уровней испытаний. С этого момента P-POD и находящиеся внутри CubeSat&rsquo;ы не разделяются. При обнаружении неисправности CubeSat&rsquo;а, решение о разделении P-POD принимается разработчиками CubeSat&rsquo;ов в конкретном P-POD и интегратором P-POD исходя из соображений безопасности. Разработчик несет ответственность за любые дополнительные испытания, требующимися в связи с доводочными исправлениями, с разделенными P-POD и CubeSat&rsquo;ами.</p>
<div class="row pagination-centered">
	<div class="span12">
		<object width="611.389" height="410.502" data="/img/cubespec/cubesat-figure8.svg" type="image/svg+xml"></object>
	</div>
</div>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Оптимизация web приложения с помощью YourKit и JMeter</title>
      <link>https://dernasherbrezon.com/posts/webapp-perf/</link>
      <pubDate>Fri, 28 Dec 2012 14:58:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/webapp-perf/</guid>
      <description>Постановка задачи  web server - Jetty. Запускается в embedded режиме с помощью spring. Общая настройка очень похожа на http://wiki.eclipse.org/Jetty/Howto/Spring IoC - spring 3.0.5 Servlet - собственный сервлет для роутинга запросов к обработчикам. Mysql 5.5, jdbc driver 5.1.21 view - JSP + JSTL YourKit 11 JMeter 2.8  Приложение:
 две страницы требующие локализации. первая - статичная страница (главная). Собирается из разных кусочков jsp вторая - динамичная. Отображает некоторую сущность. Например, товар и его свойства.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Оптимизация web приложения с помощью YourKit и JMeter</h1></header>
      		<div class='container entry-content'>
  <h2 id="постановка-задачи">Постановка задачи</h2>
<ul>
<li>web server - Jetty. Запускается в embedded режиме с помощью spring. Общая настройка очень похожа на <a href="http://wiki.eclipse.org/Jetty/Howto/Spring">http://wiki.eclipse.org/Jetty/Howto/Spring</a></li>
<li>IoC - spring 3.0.5</li>
<li>Servlet - собственный сервлет для роутинга запросов к обработчикам.</li>
<li>Mysql 5.5, jdbc driver 5.1.21</li>
<li>view - JSP + JSTL</li>
<li>YourKit 11</li>
<li>JMeter 2.8</li>
</ul>
<p>Приложение:</p>
<ul>
<li>две страницы требующие локализации.</li>
<li>первая - статичная страница (главная). Собирается из разных кусочков jsp</li>
<li>вторая - динамичная. Отображает некоторую сущность. Например, товар и его свойства.</li>
</ul>
<p>Итак, для начала будем оптимизировать первую страницу. Перед тем, как начать что-то оптимизировать, необходимо померить текущее состояние, найти узкие места. Для этого необходимо сконфигурировать JMeter. Он будет симулировать пользователей, которые кликают ссылки.</p>
<ol>
<li>Скачать JMeter можно тут: <a href="http://jmeter.apache.org/">http://jmeter.apache.org/</a></li>
<li>Запустить jmeter.sh и настроить тест:</li>
<li>Количество пользователей: 500
<img src="/img/webapp-perf/1.png" alt=""></li>
<li>Настроить запрос: сервер находится по адресу localhost:8080 путь: / (главная). Так же нужно добавить http cache manager и http cookie manager, чтобы симулировать поведение реальных браузеров
<img src="/img/webapp-perf/2.png" alt=""></li>
</ol>
<p>После этого, необходимо запустить jetty из под YourKit. Это очень удобно можно сделать, если использовать интеграцию с IDE. Например, Eclipse: <a href="http://www.yourkit.com/docs/12/help/eclipse.jsp">http://www.yourkit.com/docs/12/help/eclipse.jsp</a>. После запуска приложения, необходимо запустить JMeter на выполнение.</p>
<h2 id="анализ-данных">Анализ данных</h2>
<p>Первые вещи, которые бросаются в глаза это:</p>
<ul>
<li>278 потоков приложения
<img src="/img/webapp-perf/3.png" alt=""></li>
<li>большой затуп всех этих ~200 потоков в самом начале
<img src="/img/webapp-perf/4.png" alt=""></li>
</ul>
<p>Что говорят эти графики:</p>
<ul>
<li>Jetty сконфигурирован с использованием NIO. На каждый входящий запрос, NIO коннектор получает запрос и адресует его внутреннему threadpool&rsquo;у, который и обрабатывает этот запрос (потоки с именем qtp******). Поскольку пользователей больше 200, то создаются все потоки из внутреннего пула и новые пользователи ждут пока отработает запрос предыдущих пользователей. Такая схема обработки запросов достаточно правильная, однако тут есть тонкость: не в каждой машине есть ~250 ядер. А следовательно операционная система будет тратить больше времени на переключение между этими потоками. Поэтому максимальный размер пула необходимо изменить. Хорошая формула размера пула приведена здесь: <a href="http://www.ibm.com/developerworks/library/j-jtp0730/index.html#heading6">http://www.ibm.com/developerworks/library/j-jtp0730/index.html#heading6</a>. Настроить пул можно передав в JettyServer новый <code>org.eclipse.jetty.util.thread.QueuedThreadPool</code> c указанным свойством maxThreads.</li>
<li>Затуп вначале связан с первичной компиляцией jsp страницы. В development среде это очень полезная вещь: можно менять jsp страницы и сервер будет автоматически показывать новую версию. В production среде, это необходимо отключить. Это можно сделать в файле webdefault.xml в Jetty. Или переопределить параметры org.apache.jasper.servlet.JspServlet в web.xml приложения. Необходимо настроить параметры: scratchdir - в эту директорию необходимо поместить скопилированные jsp и параметр development = false - jsp сервлет не будет проверять новую версию файла, из-за этого сильно увеличится быстродействие, так как не будут использоваться локи внутри сервлета.</li>
</ul>
<p>После произведённых начальных оптимизаций можно посмотреть на потребляемые ресурсы.</p>
<p>На рисунке ниже приведён stacktrace узкого места (performance snapshot, CPU profiling: sampling):
<img src="/img/webapp-perf/5.png" alt=""></p>
<p>В YourKit есть специальный инструмент, который называется &ldquo;Hot spots&rdquo;, но он выдаёт простым списком все узкие места и методы и не учитывает то, что одни узкие места вложены в другие (находятся в одном стеке вызовов). На картинке видно, что узкое место находится в index.jsp. Однако, на этой картинке не видно сколько раз вызывался этот метод и сколько времени (в среднем хотя бы) занимает обработка одного запроса. Для этого необходимо получить snapshot с использованием CPU profiling: Tracing:</p>
<p><img src="/img/webapp-perf/6.png" alt=""></p>
<p>После этого можно получить snapshot с абсолютными значениями</p>
<p><img src="/img/webapp-perf/7.png" alt=""></p>
<p>Как видно, обработка jsp страницы занимает <strong>34ms</strong>.</p>
<p>Зачем же нужны абсолютные значения? В режиме sampling YourKit выдаёт информацию об узких местах, это оптимальный способ узнать, где приложение работает медленно и при этом профайлер даёт низкий overhead. Однако для итерационной оптимизации, этот метод не очень подходит, так как необходимо понимать на сколько увеличилось или уменьшилось быстродействие после каждой оптимизации.</p>
<p>Как видно из картинки, всё время занимает отрисовка страницы. Как это можно оптимизировать?</p>
<ol>
<li>Если приглядеться к тому, что происходит при отрисовке, то видно, что очень много времени занимает выполнение <a href="http://www.tutorialspoint.com/jsp/jstl_format_message_tag.htm">fmt:message</a>. Этот тэг используется для локализации страницы. Если посмотреть код <code>org.apache.taglibs.standard.tag.common.fmt.MessageSupport.doEndTag()</code> то видно, что там происходит слишком много общей логики, от которой можно отказаться. Для этого необходимо сделать следующие допущения (ввести ограничения): локализация приложения не зависит от параметров запроса пользователя - это позволяет закэшировать ResourceBundle на старте приложения, используется один и тот же ResourceBundle для всех типов сообщений. После оптимизации время отрисовки страницы на сервере стало занимать: <strong>7ms</strong>. <strong>Оптимизация 80%</strong>!</li>
<li>Кэширование. Бывает на разных уровнях. Для данной статичной страницы, можно сделать два уровня кэширования: 1. На уровне сервера - при старте страница полностью отрисовывается и помещается в кэш. При обращении пользователей, она отдаётся из кэша. 2. На уровне клиента - если пользователь запросил страницу, то браузер кэширует её и при последующем обращении отображает страницу из кэша. Поскольку наша страница статична, то её можно попробовать закэшировать. В протоколе HTTP предусмотрено множество способов кэширования данных. Очень хорошая статья про типы кэширования: <a href="http://betterexplained.com/articles/how-to-optimize-your-site-with-http-caching/">http://betterexplained.com/articles/how-to-optimize-your-site-with-http-caching/</a>. Для кэширования страницы мы будем использовать lastModifiedTime. По умолчанию в <code>javax.servlet.http.HttpServlet.getLastModified()</code> возвращает -1 (не использует lastModified). Какое же время необходимо возвращать на нашей странице? Поскольку у нас выключена перекомпиляция jsp на production, то новые изменения могут появится не раньше рестарта сервера. А значит lastModifiedTime можно вычислить следующим способом: на старте обработчика (сервлета) запомнить время System.currentTimeMillis()/1000 * 1000 и возвращать всегда его. После оптимизации время ответа стало занимать: <strong>3ms</strong>. Т.е. для пользователя, который посещает страницу второй и более раз <strong>оптимизация 91%</strong>.</li>
</ol>
<p>Настало время посмотреть на вторую страницу, тут несколько сложнее, так как есть больше логики приложения.</p>
<p>Для этого необходимо указать другой путь сервлета/обработчика запроса в JMeter. Например path: &ldquo;/servlet&rdquo;</p>
<p>Изначально отрисовка страницы занимает <strong>7ms</strong>, так как же и для первой страницы, выполнение бизнес логики занимает <strong>21ms</strong>. Бизнес логика заключается в получении из базы сущности. Сущность - иерархическая, т.е. состоит из нескольких простых сущностей, каждая из которой хранится в отдельной таблице. После запуска JMeter:</p>
<p><img src="/img/webapp-perf/8.png" alt=""></p>
<p>Из этой картины видно, что потоки блокируются при получении <code>java.sql.Connection</code> из <code>org.apache.commons.dbcp.BasicDataSource</code>. Это происходит из-за того, что для обработки одного запроса несколько раз вызывается <code>datasource.getConnection</code> и <code>conn.close()</code> - т.е. соединение берётся и кладётся в пул. Это можно оптимизировать, если использовать ThreadBoundDatasource. Как он работает?</p>
<ol>
<li>Он реализует интерфейс <code>java.sql.Datasource</code> и работает поверх <code>org.apache.commons.dbcp.BasicDataSource</code></li>
<li>При получении запроса, в методе doGet он получает соединение и кэширует его для этого потока. Например, с помощью ThreadLocal.</li>
<li>При любом обращении datasource.getConnection() он возвращает это соединение.</li>
<li>Бизнес логика не закрывает соединение, оно закрывается на выходе из doGet.</li>
</ol>
<p>Алгоритм достаточно простой, но для большого приложения, где есть очень много сервлетов, контроллеров и простых потоков, реализовать и поддерживать его достаточно сложно: нужно не забывать получать и возвращать соединение в пул.</p>
<p>Реализовать этот алгоритм можно двумя способами:</p>
<ol>
<li>С использованием aop (aspect oriented programming) и aspectj. Для этого необходимо создать аннотацию, например, <code>@ThreadBoundDatasource(readOnly=false)</code> и пометить ею метод сервлета. Создать аспект, который будет создавайть соединение перед методом с этой аннотацией, а затем возвращать соединение после выполнения метода. У этого подхода есть недостатки: aspectj генерирует очень много мусора и как оказалось выигрыш в производительности не даёт (увеличивает время выполнения на ~1ms), создание Proxy объекта не позволяет посмотреть stacktrace в YourKit.</li>
<li>Ручное добавление логики к каждому из сервлетов. Из недостатков можно отметить рутинность операции и большую вероятность ошибок для большого проекта.</li>
</ol>
<p>После реализации алгоритма, график стал выглядеть следующим образом:</p>
<p><img src="/img/webapp-perf/9.png" alt=""></p>
<p>Время обработки запроса стало <strong>16ms. Оптимизация 20%</strong></p>
<p>Как видно потоки больше не ждут соединения, или ждут но очень мало времени, так что YourKit не успевает это отобразить. Из блокировок остались блокировки на пуле тэгов. Небольшое исследование показало, что есть пул PerThreadTagHandlerPool, но в нём есть утечки памяти и его использование не рекомендовано: <a href="https://issues.apache.org/bugzilla/show_bug.cgi?id=43790">https://issues.apache.org/bugzilla/show_bug.cgi?id=43790</a></p>
<p>На следующим этапе оптимизации встала задача внедрения кэширования результатов запросов к базе данных. Performance snapshot показал, что узкое место приложения - это запрос к базе данных. Так же исходя из графика потребления памяти видно, что генерируется очень много мусора (~600Mb), который можно сократить если переиспользовать объекты:</p>
<p><img src="/img/webapp-perf/10.png" alt=""></p>
<p>YourKit имеет замечательный UI на котором можно посмотреть сколько времени потрачено на сборку мусора и как при этом работали потоки:</p>
<p><img src="/img/webapp-perf/11.png" alt=""></p>
<p>Белая область в работе потоков означает stop-the-world, когда останавливаются все потоки приложения и выполняется сборка мусора. Как видно, со временем сборка мусора начинает занимать больше времени.</p>
<p>Для кэширования использовалась библиотека <a href="http://ehcache.org/">Ehcache</a>.</p>
<p>После введения кэширования для некоторых объектов, время обработки бизнес логики стало составлять <strong>9ms</strong>. Что в сумме даёт <strong>оптимизацию 57%</strong>.</p>
<p>В YourKit есть замечательная метрика: количество и типы Exception&rsquo;ов и stacktrace мест, где они были вызваны. Генерация Exception - это очень ресурсоёмкая операция. Поэтому генерацию обычно стараются избегать в высоконагруженных приложениях. При запуске performance теста, данная метрика выдала следующую картину:</p>
<p><img src="/img/webapp-perf/12.png" alt=""></p>
<p>Оказывается драйвер кидает SQLException при закрытии курсора, и проглатывает (не обрабатывает) его. На каждый запрос к базе кидается несколько SQLException. Это баг самого драйвера: <a href="http://bugs.mysql.com/bug.php?id=67318">http://bugs.mysql.com/bug.php?id=67318</a>. После того, как этот баг пофиксят, ожидается серьёзный прирост в производительности.</p>
<h2 id="выводы">Выводы</h2>
<ol>
<li>Современные фреймворки позволяют быстро разрабатывать приложения, но есть место для их оптимизации.</li>
<li>Настройки по умолчанию не всегда оптимальны для нагруженных проектов.</li>
<li>Даже проекты проверенные временем, не всегда оптимизированы под быстродействие.</li>
<li>Многоуровневое кэширование очень сильно разгружает сервер и увеличивает быстродействие.</li>
<li>Кэширование сократило объём генерируемого мусора, но серьёзных изменений не произошло, кривая роста мусора в памяти лишь немного стала пологой. Видимо есть ещё места, в которых генерируется мусор.</li>
</ol>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Log4j DOMConfigurator</title>
      <link>https://dernasherbrezon.com/posts/dom4jconfigurator/</link>
      <pubDate>Thu, 11 Oct 2012 15:14:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/dom4jconfigurator/</guid>
      <description>DOMConfigurator не поддерживает подстановку свойств при реконфигурации. Будьте бдительны!
Use case:
 Конфигурация по умолчанию с использованием log4j.configuration параметра Получение свойств и проставление через System.setProperty() DOMConfigurator.configure(System.getProperty(&amp;quot;log4j.configuration&amp;quot;))  </description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Log4j DOMConfigurator</h1></header>
      		<div class='container entry-content'>
  <p>DOMConfigurator не поддерживает подстановку свойств при реконфигурации. Будьте бдительны!</p>
<p>Use case:</p>
<ol>
<li>Конфигурация по умолчанию с использованием <code>log4j.configuration</code> параметра</li>
<li>Получение свойств и проставление через <code>System.setProperty()</code></li>
<li><code>DOMConfigurator.configure(System.getProperty(&quot;log4j.configuration&quot;))</code></li>
</ol>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Производительность функции split</title>
      <link>https://dernasherbrezon.com/posts/splitperf/</link>
      <pubDate>Sat, 11 Aug 2012 15:14:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/splitperf/</guid>
      <description>В одном из проектов в очередной раз пришлось писать собственную реализацию split строки, в связи с этим заинтересовался о производительности различных решений.
Для тестирования выбраны следующие кандидаты:
 JDK Guava Apache commons-lang Custom  Проводилось тестирование следующих параметров в различных комбинациях: короткая строка большое количество итераций, длинная строка малое количество итераций.
Поскольку Guava поддерживает lazy вычисление, то была добавлена ещё одна комбинация: отложенная итерация по результатам и непосредственная итерация.
В результате получились следующие значения:</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Производительность функции split</h1></header>
      		<div class='container entry-content'>
  <p>В одном из проектов в очередной раз пришлось писать собственную реализацию split строки, в связи с этим заинтересовался о производительности различных решений.</p>
<p>Для тестирования выбраны следующие кандидаты:</p>
<ul>
<li>JDK</li>
<li>Guava</li>
<li>Apache commons-lang</li>
<li>Custom</li>
</ul>
<p>Проводилось тестирование следующих параметров в различных комбинациях: короткая строка большое количество итераций, длинная строка малое количество итераций.</p>
<p>Поскольку Guava поддерживает lazy вычисление, то была добавлена ещё одна комбинация: отложенная итерация по результатам и непосредственная итерация.</p>
<p>В результате получились следующие значения:</p>
<p><img src="/img/splitperf/1.png" alt="">
<img src="/img/splitperf/2.png" alt="">
<img src="/img/splitperf/3.png" alt="">
<img src="/img/splitperf/4.png" alt=""></p>
<p>Выводы:</p>
<ul>
<li>Стабильно плохой результат показывает Pattern.split. Он генерирует множество объектов, да и слишком общий для решения такой частной задачи. Использования паттерна это достаточно большой overhead.</li>
<li>для не lazy тестов google guava показывает достаточно плохой результат. Видимо это связано с количеством мусора который генерирует библиотека. В исходных кодах можно найти следующие конструкции:</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">String description <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> StringBuilder<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;CharMatcher.is(&#34;</span><span style="color:#f92672">)</span>  
    <span style="color:#f92672">.</span><span style="color:#a6e22e">append</span><span style="color:#f92672">(</span>Integer<span style="color:#f92672">.</span><span style="color:#a6e22e">toHexString</span><span style="color:#f92672">(</span>match<span style="color:#f92672">))</span>  
    <span style="color:#f92672">.</span><span style="color:#a6e22e">append</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;)&#34;</span><span style="color:#f92672">)</span>  
    <span style="color:#f92672">.</span><span style="color:#a6e22e">toString</span><span style="color:#f92672">();</span>  
<span style="color:#66d9ef">return</span> <span style="color:#66d9ef">new</span> CharMatcher<span style="color:#f92672">(</span>description<span style="color:#f92672">)</span> <span style="color:#f92672">{...};</span> 
</code></pre></div><ul>
<li>Заметное отставание даёт commons-lang на lazy итерациях. Наверное потому, что они не поддерживаются.</li>
<li>Как всегда, победителем становится собственная реализация.</li>
</ul>
<p>Выводы 2:</p>
<p>Как говорят в google guava: &ldquo;Знайте свои библиотеки&rdquo;. Даже знаменитые библиотеки иногда могут быть написаны очень коряво. В частности в guava лежат очень много здравых идей, например, &ldquo;везде возвращать Iterable&rdquo; для lazy обхода. Это очень мощная идея, о которой я раньше не догадывался. Однако реализация очень сильно страдает от большого количество &ldquo;как-бы&rdquo; функционального кода, который в java сильно ударяет по производительности.</p>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Сборка пакета с помощью debconf</title>
      <link>https://dernasherbrezon.com/posts/debconf/</link>
      <pubDate>Sat, 11 Aug 2012 13:14:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/debconf/</guid>
      <description>Недавно столкнулся с задачей создания .deb пакета. Поскольку информация в сети разбросана и само описание команд debhelper несколько сумбурно, ниже привожу список действий помогающих собрать архив с нуля:
Создание исходников.
#: mkdir package-1.0 #: echo &amp;quot;Sample file in package&amp;quot; &amp;gt; package-1.0/file  Создание специального архива с исходниками
#: tar czf package-1.0.tar.gz package-1.0/ #: dh_make -c apache -f ../package-1.0.tar.gz  Редактирование параметров пакета.
#: nano debian/control  Создание конфигураций:
#: nano debain/package.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Сборка пакета с помощью debconf</h1></header>
      		<div class='container entry-content'>
  <p>Недавно столкнулся с задачей создания .deb пакета. Поскольку информация в сети разбросана и само описание команд debhelper несколько сумбурно, ниже привожу список действий помогающих собрать архив с нуля:</p>
<p>Создание исходников.</p>
<pre><code>#: mkdir package-1.0
#: echo &quot;Sample file in package&quot; &gt; package-1.0/file
</code></pre>
<p>Создание специального архива с исходниками</p>
<pre><code>#: tar czf package-1.0.tar.gz package-1.0/
#: dh_make -c apache -f ../package-1.0.tar.gz
</code></pre>
<p>Редактирование параметров пакета.</p>
<pre><code>#: nano debian/control
</code></pre>
<p>Создание конфигураций:</p>
<pre><code>#: nano debain/package.templates

Template: package/test
Type: boolean
Default: true
Description: Test boolean property
  Test boolean property long description
</code></pre>
<p>Создание конфига</p>
<pre><code>#: nano debian/package.config

#!/bin/bash -e

. /usr/share/debconf/confmodule

db_input medium package/test || true
db_go || true
</code></pre>
<p>Вызов конфига из postinst скрипта. debhelper не может сгенерировать такой postinst так как &ldquo;слишком сложно&rdquo;.</p>
<pre><code>#: mv debian/postinst.ex debian/postinst
#: nano debian/postinst

...
configure)
. /usr/share/debconf/confmodule
db_get package/test
echo &quot;$RET;
;;
...
</code></pre>
<p>Копирование скриптов в некую временную директорию</p>
<pre><code>#: sudo dh_installdebconf
#: sudo dh_installdeb
</code></pre>
<p>Создание пакета</p>
<pre><code>#: sudo dh_builddeb

#: cd ../
</code></pre>
<p>Пакет package_1.0-1_any.deb готов.
Имя пакета package изменить везде выше на необходимое. Например: mycoollapp.</p>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Выбор быстрого алгоритма поиска подстроки</title>
      <link>https://dernasherbrezon.com/posts/substring/</link>
      <pubDate>Mon, 11 Jun 2012 13:14:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/substring/</guid>
      <description>Есть такая задача: отфильтровать строки в множестве файлов. Вариантов решения я вижу несколько:
 ReplaceAll. String.replaceAll(&amp;ldquo;pattern&amp;rdquo;,&amp;quot;$1&amp;quot; + 1); Pattern. Pattern p = Pattern.compile(&amp;ldquo;pattern&amp;rdquo;); and etc. Ручной способ через indexOf и substring  Первый способ можно сразу отбросить так как он медленный: на каждый файл будет компилироваться pattern. На следующих двух можно остановиться поподробнее.
У меня было чувство, что ручной способ всегда быстрее, хоть и немного дольше в реализации. Я написал небольшой тест, чтобы проверить насколько быстрее.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Выбор быстрого алгоритма поиска подстроки</h1></header>
      		<div class='container entry-content'>
  <p>Есть такая задача: отфильтровать строки в множестве файлов. Вариантов решения я вижу несколько:</p>
<ul>
<li>ReplaceAll. String.replaceAll(&ldquo;pattern&rdquo;,&quot;$1&quot; + 1);</li>
<li>Pattern. Pattern p = Pattern.compile(&ldquo;pattern&rdquo;); and etc.</li>
<li>Ручной способ через indexOf и substring</li>
</ul>
<p>Первый способ можно сразу отбросить так как он медленный: на каждый файл будет компилироваться pattern. На следующих двух можно остановиться поподробнее.</p>
<p>У меня было чувство, что ручной способ всегда быстрее, хоть и немного дольше в реализации. Я написал небольшой тест, чтобы проверить насколько быстрее. Результат графически изображён ниже:</p>
<p><img src="/img/substring/1.png" alt=""></p>
<p>Тест запускал фильтрацию одного и того же файла 10к раз. Размер файла - 4286 символов. Время выполнения абсолютное и указано в миллисекундах.</p>
<p>Столбец А: время выполнения фильтрации с помощью ручного способа</p>
<p>Столбец В: время выполнения фильтрации с помощью pattern&rsquo;а</p>
<p><strong>Вывод 1</strong>: ручная фильтрация на порядок быстрее фильтрации с помощью pattern. Если не нужно производить более сложных подстановок, то ручной способ значительно лучше.</p>
<p><strong>Вывод 2</strong>: при линейном увеличении размера файла, время фильтрации возрастает линейно для обоих способов.</p>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Производительность Hibernate Validator</title>
      <link>https://dernasherbrezon.com/posts/hibernate-perf/</link>
      <pubDate>Wed, 11 Apr 2012 13:14:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/hibernate-perf/</guid>
      <description>Недавно столкнулся с библиотекой Hibernate Validator и jsr 303 в частности. Ниже привожу небольшой микро-бенчмарк тестирования производительности. Тестовый POJO:
public class BusinessObject { @NotBlank private String name; @CustomNotNull(groups = { APIValidationGroup.class }) private String uuid; public String getName() { return name; } public void setName(String name) { this.name = name; } public String getUuid() { return uuid; } public void setUuid(String uuid) { this.uuid = uuid; } }  Для чистоты эксперимента и приближения к реальному сценарию я сделал кастомную валидацию, которая просто проверяет на null:</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Производительность Hibernate Validator</h1></header>
      		<div class='container entry-content'>
  <p>Недавно столкнулся с библиотекой Hibernate Validator и jsr 303 в частности. Ниже привожу небольшой микро-бенчмарк тестирования производительности.
Тестовый POJO:</p>
<pre><code>public class BusinessObject {  

    @NotBlank  
    private String name;  
    @CustomNotNull(groups = { APIValidationGroup.class })  
    private String uuid;  
  
    public String getName() {  
        return name;  
    }  
  
    public void setName(String name) {  
        this.name = name;  
    }  
  
    public String getUuid() {  
        return uuid;  
    }  
  
    public void setUuid(String uuid) {  
        this.uuid = uuid;  
    }  

}  
</code></pre>
<p>Для чистоты эксперимента и приближения к реальному сценарию я сделал кастомную валидацию, которая просто проверяет на null:</p>
<pre><code>public class CustomNotNullValidator implements ConstraintValidator&lt;CustomNotNull, String&gt; {  

    public void initialize(CustomNotNull constraintAnnotation) {  
    }  
   
    public boolean isValid(String value, ConstraintValidatorContext context) {  
        if( value == null ) {  
            return false;  
        }  
        return true;  
    }  
}
</code></pre>
<p>Собственно сам тест:</p>
<pre><code>public static void main(String[] args) {  

    int heatCount = 10000;  
	int count = 1000000;  

	Validator validator = Validation.buildDefaultValidatorFactory().getValidator();  

	BusinessObject validObject = new BusinessObject();  
     validObject.setName(&quot;123&quot;);  
     validObject.setUuid(&quot;123&quot;);  
	  
     for (int i = 0; i &lt; heatCount; i++) {  
      validator.validate(validObject, Default.class);  
     }  
	  
     long start = System.currentTimeMillis();  
     for (int i = 0; i &lt; count; i++) {  
      validator.validate(validObject, Default.class);  
     }  
     long diff = (System.currentTimeMillis() - start);  
     System.out.println(&quot;hibernate validation absolute: &quot; + diff + &quot; avg: &quot; + ((double)diff / count));  
	  
     for (int i = 0; i &lt; heatCount; i++) {  
      validate(validObject);  
     }  
	  
     start = System.currentTimeMillis();  
     for (int i = 0; i &lt; count; i++) {  
      validate(validObject);  
     }  
     diff = (System.currentTimeMillis() - start);  
     System.out.println(&quot;static validation absolute: &quot; + diff + &quot; avg: &quot; + ((double)diff / count));  
	  
     start = System.currentTimeMillis();  
     for (int i = 0; i &lt; count; i++) {  
      validator.validate(validObject, APIValidationGroup.class);  
     }  
     diff = (System.currentTimeMillis() - start);  
     System.out.println(&quot;hibernate custom validation absolute: &quot; + diff + &quot; avg: &quot; + ((double)diff / count));  
	  
     start = System.currentTimeMillis();  
     for (int i = 0; i &lt; count; i++) {  
      validateCustom(validObject);  
     }  
     diff = (System.currentTimeMillis() - start);  
     System.out.println(&quot;static custom validation absolute: &quot; + diff + &quot; avg: &quot; + ((double)diff / count));  
	}  
	  
	private static boolean validate(BusinessObject obj) {  
     if (StringUtils.isBlank(obj.getName())) {  
      return false;  
     }  
     return true;  
	}  
	  
	private static boolean validateCustom(BusinessObject obj) {  
     if (!validate(obj)) {  
      return false;  
     }  
     if (obj.getUuid() == null) {  
      return false;  
     }  
     return true;  
}
</code></pre>
<p>Результаты выполнения следующие (hibernate validator 4.2.0.Final):</p>
<ul>
<li>hibernate validation absolute: 2410 avg: 0.00241</li>
<li>static validation absolute: 17 avg: 1.7E-5</li>
<li>hibernate custom validation absolute: 3407 avg: 0.003407</li>
<li>static custom validation absolute: 16 avg: 1.6E-5</li>
</ul>
<p>Выводы:</p>
<ol>
<li>Hibernate валидация на ровном месте даёт падение производительности в ~150 раз. Поэтому если Ваше приложение это low-latency система, то, возможно, стоит подумать сколько объектов нужно проверять и как много полей. Возможно (но не гарантированно) стоит делать проверки через static методы.</li>
<li>Однако если посмотреть абсолютные величины, то заметно, что удобство и гибкость в настройки валидации стоит всего 0.002 миллисекунды. Если у Вас CRUD интернет приложение, то Hibernate validator будет гораздо лучшим выбором.</li>
</ol>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Оптимизация spring jmx</title>
      <link>https://dernasherbrezon.com/posts/spring-jmx-tuning/</link>
      <pubDate>Sun, 11 Dec 2011 13:14:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/spring-jmx-tuning/</guid>
      <description>Spring по умолчанию позволяет настроить экспорт бинов в jmx. Сделано это через удобные аннотации @ManagedResource. Однако существует сценарий при котором поведение по умолчанию не совсем подходит. Рассмотрим этот случай:
 spring context лениво инициализируется. Очень удобно если есть некоторый db-context.xml в котором описаны все Datasource. Соответственно инициализируются только те которые используются. Также очень удобно при ограниченных ресурсах. fail-fast + старт только необходимого. org.springframework.jmx.export.MBeanExporter умеет инициализировать JMX бины для ленивых spring бинов.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Оптимизация spring jmx</h1></header>
      		<div class='container entry-content'>
  <p>Spring по умолчанию позволяет настроить экспорт бинов в jmx. Сделано это через удобные аннотации @ManagedResource. Однако существует сценарий при котором поведение по умолчанию не совсем подходит. Рассмотрим этот случай:</p>
<ul>
<li>spring context лениво инициализируется. Очень удобно если есть некоторый db-context.xml в котором описаны все Datasource. Соответственно инициализируются только те которые используются. Также очень удобно при ограниченных ресурсах. fail-fast + старт только необходимого.</li>
<li>org.springframework.jmx.export.MBeanExporter умеет инициализировать JMX бины для ленивых spring бинов. Как это происходит: если spring бин - лениво инициализируется, то создаётся proxy через cglib который и будет jmx бином. При первом обращении к его методам/аттрибутам происходит инициализация spring бина.</li>
</ul>
<p>Проблема:</p>
<ul>
<li>возможна инициализация ненужных соединений. Список бинов содержит все возможные jmx бины.</li>
</ul>
<p>Решение:</p>
<ul>
<li>Необходимо создать BeanPostProcessor для контроля уже проинициализированных бинов.</li>
</ul>
<p>Например:</p>
<pre><code>import java.util.ArrayList;  
import java.util.List;  
  
import org.springframework.beans.BeansException;  
import org.springframework.beans.factory.config.BeanPostProcessor;  
  
public class StartedBeansAwarePostProcessor implements BeanPostProcessor {  
  
 private final List&lt;String&gt; beanNames = new ArrayList&lt;String&gt;();  
  
 @Override  
 public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {  
  return bean;  
 }  
  
 @Override  
 public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {  
  beanNames.add(beanName);  
  return bean;  
 }  
   
 public boolean isStarted(String beanName) {  
  return beanNames.contains(beanName);  
 }  
  
} 
</code></pre>
<p>После этого необходимо создать свой Assembler. Например:</p>
<pre><code>import org.springframework.beans.factory.annotation.Required;  
import org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler;  
import org.springframework.jmx.support.JmxUtils;  
  
public class LazyAssembler extends MetadataMBeanInfoAssembler {  
  
 private StartedBeansAwarePostProcessor startedBeans;  
  
 @Override  
 public boolean includeBean(Class beanClass, String beanName) {  
  if (startedBeans.isStarted(beanName)) {  
   if (isMBean(beanClass)) {  
    return true;  
   }  
   return super.includeBean(beanClass, beanName);  
  }  
  return false;  
 }  
  
 @Required  
 public void setStartedBeans(StartedBeansAwarePostProcessor startedBeans) {  
  this.startedBeans = startedBeans;  
 }  
  
 private boolean isMBean(Class beanClass) {  
  return JmxUtils.isMBean(beanClass);  
 }  
  
} 
</code></pre>
<p>И сконфигурировать spring контекст:</p>
<pre><code>&lt;bean id=&quot;lazyAssembler&quot; class=&quot;LazyAssembler&quot; p:attributeSource-ref=&quot;jmxAttributeSource&quot;&gt;  
 &lt;property name=&quot;startedBeans&quot; ref=&quot;startedBeanAwarePostProcessor&quot; /&gt;  
&lt;/bean&gt;  
&lt;bean id=&quot;startedBeanAwarePostProcessor&quot; class=&quot;StartedBeansAwarePostProcessor&quot; /&gt;  
&lt;bean name=&quot;mbeanServer&quot; class=&quot;org.springframework.jmx.support.MBeanServerFactoryBean&quot; p:locateExistingServerIfPossible=&quot;true&quot; /&gt;  
&lt;bean id=&quot;jmxAttributeSource&quot; class=&quot;org.springframework.jmx.export.annotation.AnnotationJmxAttributeSource&quot; /&gt;  
&lt;bean id=&quot;mbeanExporter&quot; class=&quot;org.springframework.jmx.export.MBeanExporter&quot;  
 p:server-ref=&quot;mbeanServer&quot;&gt;  
 &lt;property name=&quot;assembler&quot; ref=&quot;lazyAssembler&quot; /&gt;  
 &lt;property name=&quot;autodetectMode&quot; value=&quot;2&quot; /&gt;  
 &lt;property name=&quot;namingStrategy&quot;&gt;  
  &lt;bean class=&quot;org.springframework.jmx.export.naming.MetadataNamingStrategy&quot;&gt;  
   &lt;property name=&quot;attributeSource&quot; ref=&quot;jmxAttributeSource&quot; /&gt;  
   &lt;property name=&quot;defaultDomain&quot; value=&quot;domain&quot; /&gt;  
  &lt;/bean&gt;  
 &lt;/property&gt;  
&lt;/bean&gt; 
</code></pre>
<p>Особое внимание на параметр: autodetectMode. Он должен обязательно быть равен 2, иначе MBeanExporter будет игнорировать Assembler при принятии решении о том включать бин или нет. Теперь можно инициализировать контекст. Например:</p>
<pre><code>ctx.getBean(SomeBean.class); //инициализация корневого бина. По зависимостям должна инициализировать все бины необходимые для работы приложения. StartedBeansAwarePostProcessor запоминает все проинициализированные бины.  
ctx.getBean(&quot;mbeanExporter&quot;); //инициализация jmx бинов. Выполнять строго после инициализации всех бинов приложения.
</code></pre>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Оптимизация spring-mvc</title>
      <link>https://dernasherbrezon.com/posts/spring-mvc-tuning/</link>
      <pubDate>Fri, 11 Nov 2011 13:14:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/spring-mvc-tuning/</guid>
      <description>Общие решения всегда медленнее частных. Ниже я собираюсь немного оптимизировать spring-mvc. Оптимизация прежде всего рассчитана на уменьшение генерируемого мусора. Прежде чем начать оптимизировать надо определиться какие функции фреймворка можно выкинуть и какими фичами пренебречь:
 ISO-8859-1-encoded URLs. Человеко-понятные-урл (ЧПУ) используются SEO продвижения в поисковых движках. Но что если это не нужно? Зачем на каждый запрос тратить процессорное время и память? Всегда абсолютные пути для сервлетов-контроллёров. По умолчанию spring-mvc позволяет использовать относительные пути для include запросов.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Оптимизация spring-mvc</h1></header>
      		<div class='container entry-content'>
  <p>Общие решения всегда медленнее частных. Ниже я собираюсь немного оптимизировать spring-mvc. Оптимизация прежде всего рассчитана на уменьшение генерируемого мусора. Прежде чем начать оптимизировать надо определиться какие функции фреймворка можно выкинуть и какими фичами пренебречь:</p>
<ul>
<li>ISO-8859-1-encoded URLs. Человеко-понятные-урл (ЧПУ) используются SEO продвижения в поисковых движках. Но что если это не нужно? Зачем на каждый запрос тратить процессорное время и память?</li>
<li>Всегда абсолютные пути для сервлетов-контроллёров. По умолчанию spring-mvc позволяет использовать относительные пути для include запросов. При оптимизации выполненной ниже и использовании Jetty результат такой же. Возможно это актуально для других контейнеров.</li>
<li>Не использовать jstl. Достаточно спорное предположение, однако кто-то может не использовать jstl и писать на обычных JSP. Я не знаю jstl. И пишу &lt;% %&gt;.</li>
</ul>
<p>Итак, первая достаточно безболезненная оптимизация не требующая никаких жертв: выключить publishEvent в DispatcherServlet. По умолчанию он отправляет в ApplicationContext сообщение о времени обработки запроса. В production зачастую уже поздно что-то мерить. Делается это в web.xml:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-xml" data-lang="xml"><span style="color:#f92672">&lt;init-param&gt;</span>  
	<span style="color:#f92672">&lt;param-name&gt;</span>publishEvents<span style="color:#f92672">&lt;/param-name&gt;</span>  
	<span style="color:#f92672">&lt;param-value&gt;</span>false<span style="color:#f92672">&lt;/param-value&gt;</span>  
<span style="color:#f92672">&lt;/init-param&gt;</span>
</code></pre></div><p>Избавиться от @RequestMapping. Это очень удобно передавать @Param напрямую в метод. Однако реализация AnnotationMethodHandlerAdapter в spring-mvc достаточно требовательна к ресурсам и генерирует кучу мусора на каждый запрос. Логичнее было бы сделать найденные методы кешируемыми, но согласно <a href="https://jira.springsource.org/browse/SPR-6151">https://jira.springsource.org/browse/SPR-6151</a> разработчики считают сложным исправить. Поэтому для простоты и небольшого увеличения скорости сделаем новый контроллёр:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">interface</span> <span style="color:#a6e22e">FastController</span> <span style="color:#f92672">{</span>  
  
    String <span style="color:#a6e22e">handleRequest</span><span style="color:#f92672">(</span>HttpServletRequest request<span style="color:#f92672">,</span> HttpServletResponse response<span style="color:#f92672">)</span> <span style="color:#66d9ef">throws</span> Exception<span style="color:#f92672">;</span>  
      
    String <span style="color:#a6e22e">getRequestMappingURL</span><span style="color:#f92672">();</span>  

<span style="color:#f92672">}</span>
</code></pre></div><p>Чем он лучше, чем org.springframework.web.servlet.mvc.Controller? Он позволяет задавать url в том же месте где и содержится его реализация. Не нужно делать лишних движений, чтобы добавить его в spring.xml. Соответственно необходимо определить классы, которые будут его использовать:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">FastUrlDetector</span> <span style="color:#66d9ef">extends</span> AbstractDetectingUrlHandlerMapping <span style="color:#f92672">{</span>  
  
      
    <span style="color:#66d9ef">public</span> <span style="color:#a6e22e">FastUrlDetector</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>  
        setAlwaysUseFullPath<span style="color:#f92672">(</span><span style="color:#66d9ef">true</span><span style="color:#f92672">);</span>  
        setUrlDecode<span style="color:#f92672">(</span><span style="color:#66d9ef">false</span><span style="color:#f92672">);</span>  
    <span style="color:#f92672">}</span>  
      
    <span style="color:#a6e22e">@Override</span>  
    <span style="color:#66d9ef">protected</span> String<span style="color:#f92672">[]</span> <span style="color:#a6e22e">determineUrlsForHandler</span><span style="color:#f92672">(</span>String beanName<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>  
        ApplicationContext context <span style="color:#f92672">=</span> getApplicationContext<span style="color:#f92672">();</span>  
        Class<span style="color:#f92672">&lt;?&gt;</span> handlerType <span style="color:#f92672">=</span> context<span style="color:#f92672">.</span><span style="color:#a6e22e">getType</span><span style="color:#f92672">(</span>beanName<span style="color:#f92672">);</span>  
        <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>FastController<span style="color:#f92672">.</span><span style="color:#a6e22e">class</span><span style="color:#f92672">.</span><span style="color:#a6e22e">isAssignableFrom</span><span style="color:#f92672">(</span>handlerType<span style="color:#f92672">))</span> <span style="color:#f92672">{</span>  
            FastController controller <span style="color:#f92672">=</span> <span style="color:#f92672">(</span>FastController<span style="color:#f92672">)</span> context<span style="color:#f92672">.</span><span style="color:#a6e22e">getBean</span><span style="color:#f92672">(</span>beanName<span style="color:#f92672">);</span>  
            String result <span style="color:#f92672">=</span> controller<span style="color:#f92672">.</span><span style="color:#a6e22e">getRequestMappingURL</span><span style="color:#f92672">();</span>  
            <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>result <span style="color:#f92672">==</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>  
                <span style="color:#66d9ef">throw</span> <span style="color:#66d9ef">new</span> IllegalArgumentException<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;controller doesnt have url mapping: &#34;</span> <span style="color:#f92672">+</span> beanName<span style="color:#f92672">);</span>  
            <span style="color:#f92672">}</span>  
            <span style="color:#66d9ef">if</span><span style="color:#f92672">(</span> result<span style="color:#f92672">.</span><span style="color:#a6e22e">isEmpty</span><span style="color:#f92672">()</span> <span style="color:#f92672">)</span> <span style="color:#f92672">{</span>  
                <span style="color:#66d9ef">throw</span> <span style="color:#66d9ef">new</span> IllegalArgumentException<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;controller doesnt have url mapping: &#34;</span> <span style="color:#f92672">+</span> beanName<span style="color:#f92672">);</span>  
            <span style="color:#f92672">}</span>  
            <span style="color:#66d9ef">if</span><span style="color:#f92672">(</span> <span style="color:#f92672">!</span>result<span style="color:#f92672">.</span><span style="color:#a6e22e">startsWith</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;/&#34;</span><span style="color:#f92672">)</span> <span style="color:#f92672">)</span> <span style="color:#f92672">{</span>  
                <span style="color:#66d9ef">throw</span> <span style="color:#66d9ef">new</span> IllegalArgumentException<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;only absolute urls are required. Beanname: &#34;</span> <span style="color:#f92672">+</span> beanName <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34; Url: &#34;</span> <span style="color:#f92672">+</span> result<span style="color:#f92672">);</span>  
            <span style="color:#f92672">}</span>  
            <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">new</span> String<span style="color:#f92672">[]{</span>result<span style="color:#f92672">};</span>  
        <span style="color:#f92672">}</span>  
        <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">;</span>  
    <span style="color:#f92672">}</span>  
  
<span style="color:#f92672">}</span>  
  
<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">FastMethodHandlerAdapter</span> <span style="color:#66d9ef">implements</span> HandlerAdapter <span style="color:#f92672">{</span>  
  
    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">boolean</span> <span style="color:#a6e22e">supports</span><span style="color:#f92672">(</span>Object handler<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>  
        <span style="color:#66d9ef">return</span> <span style="color:#f92672">(</span>handler <span style="color:#66d9ef">instanceof</span> FastController<span style="color:#f92672">);</span>  
    <span style="color:#f92672">}</span>  
  
    <span style="color:#66d9ef">public</span> ModelAndView <span style="color:#a6e22e">handle</span><span style="color:#f92672">(</span>HttpServletRequest request<span style="color:#f92672">,</span> HttpServletResponse response<span style="color:#f92672">,</span> Object handler<span style="color:#f92672">)</span> <span style="color:#66d9ef">throws</span> Exception <span style="color:#f92672">{</span>  
        <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">new</span> ModelAndView<span style="color:#f92672">(((</span>FastController<span style="color:#f92672">)</span> handler<span style="color:#f92672">).</span><span style="color:#a6e22e">handleRequest</span><span style="color:#f92672">(</span>request<span style="color:#f92672">,</span> response<span style="color:#f92672">));</span>  
    <span style="color:#f92672">}</span>  
  
    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">long</span> <span style="color:#a6e22e">getLastModified</span><span style="color:#f92672">(</span>HttpServletRequest request<span style="color:#f92672">,</span> Object handler<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>  
 <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>handler <span style="color:#66d9ef">instanceof</span> LastModified<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>  
  <span style="color:#66d9ef">return</span> <span style="color:#f92672">((</span>LastModified<span style="color:#f92672">)</span> handler<span style="color:#f92672">).</span><span style="color:#a6e22e">getLastModified</span><span style="color:#f92672">(</span>request<span style="color:#f92672">);</span>  
 <span style="color:#f92672">}</span>  
        <span style="color:#66d9ef">return</span> <span style="color:#f92672">-</span>1<span style="color:#f92672">;</span>  
    <span style="color:#f92672">}</span>  
  
<span style="color:#f92672">}</span>
</code></pre></div><p>Они практически не генерируют мусора. Убрать new ModelAndView не получится не переписав DispatcherServlet. Тем более генерация ModelAndView занимает небольшой процент мусора генерируемого при каждом запросе. После этого необходимо добавить Adapter и Decoder в spring.xml чтобы они автоматически подцеплялись DispatcherServlet при поиске контроллёров.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-xml" data-lang="xml"><span style="color:#f92672">&lt;bean</span> <span style="color:#a6e22e">class=</span><span style="color:#e6db74">&#34;FastMethodHandlerAdapter&#34;</span><span style="color:#f92672">/&gt;</span>  
<span style="color:#f92672">&lt;bean</span> <span style="color:#a6e22e">class=</span><span style="color:#e6db74">&#34;FastUrlDetector&#34;</span> <span style="color:#f92672">/&gt;</span>  
</code></pre></div><p>Далее. Следующим большим местом которое генерирует много мусора является Renderer. Я не знаю как работает jstl и почему spring-mvc делает множество приседаний для его работы. Поэтому я просто выкинул JstlView (которое используется по умолчанию для .jsp) и заменил его на:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">FastJSPView</span> <span style="color:#66d9ef">extends</span> AbstractUrlBasedView <span style="color:#f92672">{</span>  
  
    <span style="color:#a6e22e">@Override</span>  
    <span style="color:#66d9ef">protected</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">renderMergedOutputModel</span><span style="color:#f92672">(</span>Map<span style="color:#f92672">&lt;</span>String<span style="color:#f92672">,</span> Object<span style="color:#f92672">&gt;</span> model<span style="color:#f92672">,</span> HttpServletRequest request<span style="color:#f92672">,</span> HttpServletResponse response<span style="color:#f92672">)</span> <span style="color:#66d9ef">throws</span> Exception <span style="color:#f92672">{</span>  
        RequestDispatcher rd <span style="color:#f92672">=</span> request<span style="color:#f92672">.</span><span style="color:#a6e22e">getRequestDispatcher</span><span style="color:#f92672">(</span>getUrl<span style="color:#f92672">());</span>  
        <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>useInclude<span style="color:#f92672">(</span>request<span style="color:#f92672">,</span> response<span style="color:#f92672">))</span> <span style="color:#f92672">{</span>  
            response<span style="color:#f92672">.</span><span style="color:#a6e22e">setContentType</span><span style="color:#f92672">(</span>getContentType<span style="color:#f92672">());</span>  
            <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>logger<span style="color:#f92672">.</span><span style="color:#a6e22e">isDebugEnabled</span><span style="color:#f92672">())</span> <span style="color:#f92672">{</span>  
                logger<span style="color:#f92672">.</span><span style="color:#a6e22e">debug</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Including resource [&#34;</span> <span style="color:#f92672">+</span> getUrl<span style="color:#f92672">()</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;] in InternalResourceView &#39;&#34;</span> <span style="color:#f92672">+</span> getBeanName<span style="color:#f92672">()</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;&#39;&#34;</span><span style="color:#f92672">);</span>  
            <span style="color:#f92672">}</span>  
            rd<span style="color:#f92672">.</span><span style="color:#a6e22e">include</span><span style="color:#f92672">(</span>request<span style="color:#f92672">,</span> response<span style="color:#f92672">);</span>  
        <span style="color:#f92672">}</span>  
  
        <span style="color:#66d9ef">else</span> <span style="color:#f92672">{</span>  
            <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>logger<span style="color:#f92672">.</span><span style="color:#a6e22e">isDebugEnabled</span><span style="color:#f92672">())</span> <span style="color:#f92672">{</span>  
                logger<span style="color:#f92672">.</span><span style="color:#a6e22e">debug</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Forwarding to resource [&#34;</span> <span style="color:#f92672">+</span> getUrl<span style="color:#f92672">()</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;] in InternalResourceView &#39;&#34;</span> <span style="color:#f92672">+</span> getBeanName<span style="color:#f92672">()</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;&#39;&#34;</span><span style="color:#f92672">);</span>  
            <span style="color:#f92672">}</span>  
            rd<span style="color:#f92672">.</span><span style="color:#a6e22e">forward</span><span style="color:#f92672">(</span>request<span style="color:#f92672">,</span> response<span style="color:#f92672">);</span>  
        <span style="color:#f92672">}</span>          
    <span style="color:#f92672">}</span>  
      
    <span style="color:#66d9ef">protected</span> <span style="color:#66d9ef">boolean</span> <span style="color:#a6e22e">useInclude</span><span style="color:#f92672">(</span>HttpServletRequest request<span style="color:#f92672">,</span> HttpServletResponse response<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>  
        <span style="color:#66d9ef">return</span> <span style="color:#f92672">(</span>WebUtils<span style="color:#f92672">.</span><span style="color:#a6e22e">isIncludeRequest</span><span style="color:#f92672">(</span>request<span style="color:#f92672">)</span> <span style="color:#f92672">||</span> response<span style="color:#f92672">.</span><span style="color:#a6e22e">isCommitted</span><span style="color:#f92672">());</span>  
    <span style="color:#f92672">}</span>  
  
<span style="color:#f92672">}</span>  
  
<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">FastJSPViewResolver</span> <span style="color:#66d9ef">extends</span> UrlBasedViewResolver <span style="color:#f92672">{</span>  
  
    <span style="color:#66d9ef">public</span> <span style="color:#a6e22e">FastJSPViewResolver</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>  
        setViewClass<span style="color:#f92672">(</span>FastJSPView<span style="color:#f92672">.</span><span style="color:#a6e22e">class</span><span style="color:#f92672">);</span>  
    <span style="color:#f92672">}</span>  
      
<span style="color:#f92672">}</span>  
</code></pre></div><p>Часть кода в FastJSPView скопирована с JstlView. И соответственно необходимо добавить в spring.xml:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-xml" data-lang="xml"><span style="color:#f92672">&lt;bean</span> <span style="color:#a6e22e">id=</span><span style="color:#e6db74">&#34;viewResolver&#34;</span>  
 <span style="color:#a6e22e">class=</span><span style="color:#e6db74">&#34;com.st.FastJSPViewResolver&#34;</span><span style="color:#f92672">&gt;</span>  
 <span style="color:#f92672">&lt;property</span> <span style="color:#a6e22e">name=</span><span style="color:#e6db74">&#34;prefix&#34;</span><span style="color:#f92672">&gt;</span>  
  <span style="color:#f92672">&lt;value&gt;</span>/WEB-INF/pages/<span style="color:#f92672">&lt;/value&gt;</span>  
 <span style="color:#f92672">&lt;/property&gt;</span>  
 <span style="color:#f92672">&lt;property</span> <span style="color:#a6e22e">name=</span><span style="color:#e6db74">&#34;suffix&#34;</span><span style="color:#f92672">&gt;</span>  
  <span style="color:#f92672">&lt;value&gt;</span>.jsp<span style="color:#f92672">&lt;/value&gt;</span>  
 <span style="color:#f92672">&lt;/property&gt;</span>  
<span style="color:#f92672">&lt;/bean&gt;</span> 
</code></pre></div><p>Чтобы проверить что есть некоторые улучшения ниже приведён тестовый контроллер который перенаправляет запрос в jsp:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#a6e22e">@Controller</span>  
<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">FastServlet</span> <span style="color:#66d9ef">implements</span> FastController <span style="color:#f92672">{</span>  
  
    <span style="color:#66d9ef">public</span> String <span style="color:#a6e22e">handleRequest</span><span style="color:#f92672">(</span>HttpServletRequest request<span style="color:#f92672">,</span> HttpServletResponse response<span style="color:#f92672">)</span> <span style="color:#66d9ef">throws</span> Exception <span style="color:#f92672">{</span>  
        <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;index2&#34;</span><span style="color:#f92672">;</span>  
    <span style="color:#f92672">}</span>  
      
    <span style="color:#66d9ef">public</span> String <span style="color:#a6e22e">getRequestMappingURL</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>  
        <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;/test2&#34;</span><span style="color:#f92672">;</span>  
    <span style="color:#f92672">}</span>  
      
<span style="color:#f92672">}</span> 
</code></pre></div><p>Аннотация @Controller используется для автоматического поиска контроллёра в classpath при старте приложения. В результате под нагрузкой jmeter (50 пользователей) получаются следующие показатели:</p>
<ul>
<li>Настройки GC по умолчанию. Оптимизированная версия ~3 коллекции в секунду, неоптимизированная ~6 коллекций</li>
<li>Latency &amp; throughput одинаковые для обоих версий.</li>
<li>Время работы HandlerAdapter.handle (от общего времени обработки запроса): для оптимизированной версии 0%, не оптимизированной 31%. Результат впечатляющий. Очевидно это связано с тем что вызов метода напрямую быстрее поиска метода по аннотации и вызова через Reflection</li>
<li>Время работы для DispatcherServlet.getLastModified: для оптимизированной версии 0%, неоптимизированной 11%. Связано с тем что AbstractHandlerMapping.getHandler использует абсолютные пути и не использует DefaultAnnotationHandlerMapping.</li>
<li>Среднее количество генерируемых объектов в минуту: для оптимизированной версии 4к-5к, неоптимизированной 9к-14к. Уменьшение в 2 раза!</li>
</ul>
<p>Дополнительные находки:</p>
<ul>
<li>ServletRequestAttributes. Не очень удачная абстракция. На каждый запрос создаётся этот объект. Не совсем понятно зачем он нужен когда обычный HTTPServletRequest предоставляет методы setAttribute и getAttribute и пр.</li>
<li>Не очень удачная реализация некоторых объектов в Jetty: Response.setLocale, Request.getRequestDispatcher, Dispatcher.forward. После оптимизации они стали теми местами которые генерируют наибольшее количество мусора. Не совсем понятно зачем им генерировать много объектов, также непонятно почему они не кешируют результаты вычислений.</li>
<li>при использовании for each генерируется итератор, который превращается в мусор. Настольные microbenchmark&rsquo;и показали что итерация по ArrayList при использовании простых индексов быстрее в два раза.</li>
</ul>
<p>Выводы:</p>
<ul>
<li>чем больше слоёв абстракции и &ldquo;упрощений&rdquo;, тем медленнее обработка.</li>
<li>текущие технологии есть куда оптимизировать.</li>
<li>нужно хорошо понимать что можно оптимизировать а что нет</li>
</ul>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Запуск Jetty Embedded через spring</title>
      <link>https://dernasherbrezon.com/posts/jetty-embedded-maven/</link>
      <pubDate>Thu, 11 Nov 2010 13:14:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/jetty-embedded-maven/</guid>
      <description>Для начала необходимо добавить зависимости в pom.xml:
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.eclipse.jetty&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;jetty-server&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;7.2.0.RC0&amp;lt;/version&amp;gt; &amp;lt;exclusions&amp;gt; &amp;lt;exclusion&amp;gt; &amp;lt;groupId&amp;gt;org.mortbay.jetty&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;test-jndi-webapp&amp;lt;/artifactId&amp;gt; &amp;lt;/exclusion&amp;gt; &amp;lt;exclusion&amp;gt; &amp;lt;groupId&amp;gt;org.mortbay.jetty&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;test-annotation-webapp&amp;lt;/artifactId&amp;gt; &amp;lt;/exclusion&amp;gt; &amp;lt;exclusion&amp;gt; &amp;lt;groupId&amp;gt;org.mortbay.jetty&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;test-jaas-webapp&amp;lt;/artifactId&amp;gt; &amp;lt;/exclusion&amp;gt; &amp;lt;exclusion&amp;gt; &amp;lt;groupId&amp;gt;org.mortbay.jetty&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;example-async-rest-webapp&amp;lt;/artifactId&amp;gt; &amp;lt;/exclusion&amp;gt; &amp;lt;/exclusions&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.eclipse.jetty&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;jetty-servlet&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;7.2.0.RC0&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.eclipse.jetty&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;jetty-jsp-2.1&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;7.2.0.RC0&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.eclipse.jetty&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;jetty-webapp&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;7.2.0.RC0&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-core&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;3.0.1.RELEASE&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-context&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;3.0.1.RELEASE&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-web&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;3.0.1.RELEASE&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-webmvc&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;3.0.1.RELEASE&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; Затем в main-class указать:
Server server = new Server(9090); ServletHolder holder = new ServletHolder(new DispatcherServlet()); holder.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Запуск Jetty Embedded через spring</h1></header>
      		<div class='container entry-content'>
  <p>Для начала необходимо добавить зависимости в pom.xml:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-xml" data-lang="xml"><span style="color:#f92672">&lt;dependency&gt;</span>  
 <span style="color:#f92672">&lt;groupId&gt;</span>org.eclipse.jetty<span style="color:#f92672">&lt;/groupId&gt;</span>  
 <span style="color:#f92672">&lt;artifactId&gt;</span>jetty-server<span style="color:#f92672">&lt;/artifactId&gt;</span>  
 <span style="color:#f92672">&lt;version&gt;</span>7.2.0.RC0<span style="color:#f92672">&lt;/version&gt;</span>  
 <span style="color:#f92672">&lt;exclusions&gt;</span>  
  <span style="color:#f92672">&lt;exclusion&gt;</span>  
   <span style="color:#f92672">&lt;groupId&gt;</span>org.mortbay.jetty<span style="color:#f92672">&lt;/groupId&gt;</span>  
   <span style="color:#f92672">&lt;artifactId&gt;</span>test-jndi-webapp<span style="color:#f92672">&lt;/artifactId&gt;</span>  
  <span style="color:#f92672">&lt;/exclusion&gt;</span>  
  <span style="color:#f92672">&lt;exclusion&gt;</span>  
   <span style="color:#f92672">&lt;groupId&gt;</span>org.mortbay.jetty<span style="color:#f92672">&lt;/groupId&gt;</span>  
   <span style="color:#f92672">&lt;artifactId&gt;</span>test-annotation-webapp<span style="color:#f92672">&lt;/artifactId&gt;</span>  
  <span style="color:#f92672">&lt;/exclusion&gt;</span>  
  <span style="color:#f92672">&lt;exclusion&gt;</span>  
   <span style="color:#f92672">&lt;groupId&gt;</span>org.mortbay.jetty<span style="color:#f92672">&lt;/groupId&gt;</span>  
   <span style="color:#f92672">&lt;artifactId&gt;</span>test-jaas-webapp<span style="color:#f92672">&lt;/artifactId&gt;</span>  
  <span style="color:#f92672">&lt;/exclusion&gt;</span>  
  <span style="color:#f92672">&lt;exclusion&gt;</span>  
   <span style="color:#f92672">&lt;groupId&gt;</span>org.mortbay.jetty<span style="color:#f92672">&lt;/groupId&gt;</span>  
   <span style="color:#f92672">&lt;artifactId&gt;</span>example-async-rest-webapp<span style="color:#f92672">&lt;/artifactId&gt;</span>  
  <span style="color:#f92672">&lt;/exclusion&gt;</span>  
 <span style="color:#f92672">&lt;/exclusions&gt;</span>  
<span style="color:#f92672">&lt;/dependency&gt;</span>  
<span style="color:#f92672">&lt;dependency&gt;</span>  
 <span style="color:#f92672">&lt;groupId&gt;</span>org.eclipse.jetty<span style="color:#f92672">&lt;/groupId&gt;</span>  
 <span style="color:#f92672">&lt;artifactId&gt;</span>jetty-servlet<span style="color:#f92672">&lt;/artifactId&gt;</span>  
 <span style="color:#f92672">&lt;version&gt;</span>7.2.0.RC0<span style="color:#f92672">&lt;/version&gt;</span>  
<span style="color:#f92672">&lt;/dependency&gt;</span>  
      <span style="color:#f92672">&lt;dependency&gt;</span>  
          <span style="color:#f92672">&lt;groupId&gt;</span>org.eclipse.jetty<span style="color:#f92672">&lt;/groupId&gt;</span>  
          <span style="color:#f92672">&lt;artifactId&gt;</span>jetty-jsp-2.1<span style="color:#f92672">&lt;/artifactId&gt;</span>  
          <span style="color:#f92672">&lt;version&gt;</span>7.2.0.RC0<span style="color:#f92672">&lt;/version&gt;</span>  
      <span style="color:#f92672">&lt;/dependency&gt;</span>    
      <span style="color:#f92672">&lt;dependency&gt;</span>  
          <span style="color:#f92672">&lt;groupId&gt;</span>org.eclipse.jetty<span style="color:#f92672">&lt;/groupId&gt;</span>  
          <span style="color:#f92672">&lt;artifactId&gt;</span>jetty-webapp<span style="color:#f92672">&lt;/artifactId&gt;</span>  
          <span style="color:#f92672">&lt;version&gt;</span>7.2.0.RC0<span style="color:#f92672">&lt;/version&gt;</span>  
      <span style="color:#f92672">&lt;/dependency&gt;</span>    
<span style="color:#f92672">&lt;dependency&gt;</span>  
 <span style="color:#f92672">&lt;groupId&gt;</span>org.springframework<span style="color:#f92672">&lt;/groupId&gt;</span>  
 <span style="color:#f92672">&lt;artifactId&gt;</span>spring-core<span style="color:#f92672">&lt;/artifactId&gt;</span>  
 <span style="color:#f92672">&lt;version&gt;</span>3.0.1.RELEASE<span style="color:#f92672">&lt;/version&gt;</span>  
<span style="color:#f92672">&lt;/dependency&gt;</span>  
<span style="color:#f92672">&lt;dependency&gt;</span>  
 <span style="color:#f92672">&lt;groupId&gt;</span>org.springframework<span style="color:#f92672">&lt;/groupId&gt;</span>  
 <span style="color:#f92672">&lt;artifactId&gt;</span>spring-context<span style="color:#f92672">&lt;/artifactId&gt;</span>  
 <span style="color:#f92672">&lt;version&gt;</span>3.0.1.RELEASE<span style="color:#f92672">&lt;/version&gt;</span>  
<span style="color:#f92672">&lt;/dependency&gt;</span>  
<span style="color:#f92672">&lt;dependency&gt;</span>  
 <span style="color:#f92672">&lt;groupId&gt;</span>org.springframework<span style="color:#f92672">&lt;/groupId&gt;</span>  
 <span style="color:#f92672">&lt;artifactId&gt;</span>spring-web<span style="color:#f92672">&lt;/artifactId&gt;</span>  
 <span style="color:#f92672">&lt;version&gt;</span>3.0.1.RELEASE<span style="color:#f92672">&lt;/version&gt;</span>  
<span style="color:#f92672">&lt;/dependency&gt;</span>  
<span style="color:#f92672">&lt;dependency&gt;</span>  
 <span style="color:#f92672">&lt;groupId&gt;</span>org.springframework<span style="color:#f92672">&lt;/groupId&gt;</span>  
 <span style="color:#f92672">&lt;artifactId&gt;</span>spring-webmvc<span style="color:#f92672">&lt;/artifactId&gt;</span>  
 <span style="color:#f92672">&lt;version&gt;</span>3.0.1.RELEASE<span style="color:#f92672">&lt;/version&gt;</span>  
<span style="color:#f92672">&lt;/dependency&gt;</span>
</code></pre></div><p>Затем в <code>main-class</code> указать:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">Server server <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> Server<span style="color:#f92672">(</span>9090<span style="color:#f92672">);</span>  
ServletHolder holder <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> ServletHolder<span style="color:#f92672">(</span><span style="color:#66d9ef">new</span> DispatcherServlet<span style="color:#f92672">());</span>  
holder<span style="color:#f92672">.</span><span style="color:#a6e22e">setName</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;root&#34;</span><span style="color:#f92672">);</span>  
WebAppContext webappContext <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> WebAppContext<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;src/main/webapp/&#34;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;/&#34;</span><span style="color:#f92672">);</span>  
webappContext<span style="color:#f92672">.</span><span style="color:#a6e22e">addServlet</span><span style="color:#f92672">(</span>holder<span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;*.do&#34;</span><span style="color:#f92672">);</span>  
server<span style="color:#f92672">.</span><span style="color:#a6e22e">setHandler</span><span style="color:#f92672">(</span>webappContext<span style="color:#f92672">);</span>  
server<span style="color:#f92672">.</span><span style="color:#a6e22e">start</span><span style="color:#f92672">();</span>  
server<span style="color:#f92672">.</span><span style="color:#a6e22e">join</span><span style="color:#f92672">();</span>
</code></pre></div><p>После этого создать WEB-INF/root-servlet.xml:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-xml" data-lang="xml"><span style="color:#75715e">&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt;</span>  
<span style="color:#f92672">&lt;beans</span>  <span style="color:#a6e22e">xmlns=</span><span style="color:#e6db74">&#34;http://www.springframework.org/schema/beans&#34;</span>   
        <span style="color:#a6e22e">xmlns:xsi=</span><span style="color:#e6db74">&#34;http://www.w3.org/2001/XMLSchema-instance&#34;</span>   
        <span style="color:#a6e22e">xmlns:mvc=</span><span style="color:#e6db74">&#34;http://www.springframework.org/schema/mvc&#34;</span>  
        <span style="color:#a6e22e">xmlns:context=</span><span style="color:#e6db74">&#34;http://www.springframework.org/schema/context&#34;</span>  
       <span style="color:#a6e22e">xsi:schemaLocation=</span><span style="color:#e6db74">&#34;http://www.springframework.org/schema/beans   
</span><span style="color:#e6db74">                           http://www.springframework.org/schema/beans/spring-beans.xsd  
</span><span style="color:#e6db74">                           http://www.springframework.org/schema/context   
</span><span style="color:#e6db74">                           http://www.springframework.org/schema/context/spring-context.xsd  
</span><span style="color:#e6db74">                           http://www.springframework.org/schema/mvc  
</span><span style="color:#e6db74">                           http://www.springframework.org/schema/mvc/spring-mvc.xsd&#34;</span><span style="color:#f92672">&gt;</span>  
  
  
    <span style="color:#f92672">&lt;context:component-scan</span> <span style="color:#a6e22e">base-package=</span><span style="color:#e6db74">&#34;com.my.package&#34;</span> <span style="color:#f92672">/&gt;</span>  
    <span style="color:#f92672">&lt;mvc:annotation-driven</span> <span style="color:#f92672">/&gt;</span>  
  
<span style="color:#f92672">&lt;/beans&gt;</span> 
</code></pre></div>
</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Рефакторинг старых систем</title>
      <link>https://dernasherbrezon.com/posts/refactoring-legacy/</link>
      <pubDate>Mon, 11 May 2009 13:14:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/refactoring-legacy/</guid>
      <description>Навеяно http://www.amazon.com/Working-Effectively-Legacy-Robert-Martin/dp/0131177052
Мне достаточно часто приходилось работать с наследными системами. Поэтому выработал некоторые свои собственные интересные практики при работе с такими системами.
 Зачастую имена классов, методов и переменных не отражают сути. В таких случаях обычно переименовывают их. Однако в наследных системах такого делать не рекомендуется. Даже при использовании мощных инструментов в современных IDE. Это связано с тем что в конечном итоге подобные системы собираются своими скриптами сборки, зачастую такими же запутанными и очень confuse&amp;rsquo;ными, как и сам код.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Рефакторинг старых систем</h1></header>
      		<div class='container entry-content'>
  <p>Навеяно <a href="http://www.amazon.com/Working-Effectively-Legacy-Robert-Martin/dp/0131177052">http://www.amazon.com/Working-Effectively-Legacy-Robert-Martin/dp/0131177052</a></p>
<p>Мне достаточно часто приходилось работать с наследными системами. Поэтому выработал некоторые свои собственные интересные практики при работе с такими системами.</p>
<ol>
<li>Зачастую имена классов, методов и переменных не отражают сути. В таких случаях обычно переименовывают их. Однако в наследных системах такого делать не рекомендуется. Даже при использовании мощных инструментов в современных IDE. Это связано с тем что в конечном итоге подобные системы собираются своими скриптами сборки, зачастую такими же запутанными и очень confuse&rsquo;ными, как и сам код. Если используется maven, то задача сильно упрощается. По крайней мере можно посмотреть на зависимости и проанализировать зависимости между артефактами. Если же используется ant&hellip; Сочувствую. В одной из систем с которыми я работал, различные конечные артефакты собирались фильтрованием уже скомпилированных классов. Определить в какие артефакты попадёт ваш класс просто так не получится. Поэтому есть два варианта:
* Добавить комментарий.
* Более предпочтительный. Использовать @deprecated. Например смысл переменной price изменился. По всей системе она используется как amount. Как будет выглядеть рефакторинг:</li>
</ol>
<p>До</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Pojo</span> <span style="color:#f92672">{</span>  
    <span style="color:#66d9ef">private</span> Integer price<span style="color:#f92672">;</span>  
    <span style="color:#66d9ef">public</span> Integer <span style="color:#a6e22e">getPrice</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>  
         <span style="color:#66d9ef">return</span> price<span style="color:#f92672">;</span>  
    <span style="color:#f92672">}</span>  
    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">setPrice</span><span style="color:#f92672">(</span>Integer price<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>  
         <span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">price</span> <span style="color:#f92672">=</span> price<span style="color:#f92672">;</span>  
    <span style="color:#f92672">}</span>  
<span style="color:#f92672">}</span>
</code></pre></div><p>После:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Pojo</span> <span style="color:#f92672">{</span>  
    <span style="color:#66d9ef">private</span> Integer amount<span style="color:#f92672">;</span>  
    <span style="color:#75715e">/** 
</span><span style="color:#75715e">    * @deprecated use getAmount() 
</span><span style="color:#75715e">    **/</span>  
    <span style="color:#a6e22e">@deprecated</span>  
    <span style="color:#66d9ef">public</span> Integer <span style="color:#a6e22e">getPrice</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>  
         <span style="color:#66d9ef">return</span> amount<span style="color:#f92672">;</span>  
    <span style="color:#f92672">}</span>  
    <span style="color:#75715e">/** 
</span><span style="color:#75715e">    * @deprecated use setAmount(amount) 
</span><span style="color:#75715e">    **/</span>  
    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">setPrice</span><span style="color:#f92672">(</span>Integer amount<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>  
         <span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">amount</span> <span style="color:#f92672">=</span> amount<span style="color:#f92672">;</span>  
    <span style="color:#f92672">}</span>  
    <span style="color:#66d9ef">public</span> Integer <span style="color:#a6e22e">getAmount</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>  
         <span style="color:#66d9ef">return</span> amount<span style="color:#f92672">;</span>  
    <span style="color:#f92672">}</span>  
    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">setAmount</span><span style="color:#f92672">(</span>Integer amount<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>  
         <span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">amount</span> <span style="color:#f92672">=</span> amount<span style="color:#f92672">;</span>  
    <span style="color:#f92672">}</span>  
<span style="color:#f92672">}</span> 
</code></pre></div><ol start="2">
<li>Использование синглетона вида: Application.getInstance(). В общем случае использование синглетонов ведёт к спагетти коду. Например, в двух совершенно разных системах я обнаружил не только наличие подобных синглетонов, но их использование вида.</li>
</ol>
<p>Использование:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Pojo</span> <span style="color:#f92672">{</span>  
	<span style="color:#66d9ef">private</span> Integer amount<span style="color:#f92672">;</span>  
	<span style="color:#66d9ef">public</span> Integer <span style="color:#a6e22e">getCalculatedAmount</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>  
         Integer someDiff <span style="color:#f92672">=</span> Application<span style="color:#f92672">.</span><span style="color:#a6e22e">getInstance</span><span style="color:#f92672">().</span><span style="color:#a6e22e">getDAO</span><span style="color:#f92672">().</span><span style="color:#a6e22e">queryDBByKey</span><span style="color:#f92672">(</span>amount<span style="color:#f92672">);</span>  
         <span style="color:#66d9ef">return</span> amount <span style="color:#f92672">-</span> someDiff<span style="color:#f92672">;</span>  
    <span style="color:#f92672">}</span>  
<span style="color:#f92672">}</span>
</code></pre></div><p>Разумеется поддерживать подобные вещи достаточно сложно. Зачастую эти синглетоны содержат соединения с базами данных, читают из файлов какую то информацию и делают прочие вещи. Единственным возможным эффективным образом работать с наследными системами - написание тестов перед внесением новой функциональности, для того чтобы проверить работоспособность системы после внесения изменений. С подобным использованием синглетонов модульные тесты практически невозможно написать. Однако опять же существует два способа:</p>
<ul>
<li>Писать интеграционные тесты с базами данных другими сервисами и пр. Но это неудобно если нужно протестировать небольшую часть системы.</li>
<li>Немного отрефакторить синглетон</li>
</ul>
<p>До</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Aplication</span> <span style="color:#f92672">{</span>  
     <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">static</span> Application instance<span style="color:#f92672">;</span>  
  
     <span style="color:#66d9ef">private</span> <span style="color:#a6e22e">Application</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>  
     <span style="color:#f92672">}</span>  
  
     <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">synchronized</span> Application <span style="color:#a6e22e">getInstace</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>  
           <span style="color:#66d9ef">if</span><span style="color:#f92672">(</span>instance <span style="color:#f92672">==</span> <span style="color:#66d9ef">null</span> <span style="color:#f92672">)</span> <span style="color:#f92672">{</span>  
                  instance <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> Application<span style="color:#f92672">();</span>  
           <span style="color:#f92672">}</span>  
           <span style="color:#66d9ef">return</span> instance<span style="color:#f92672">;</span>  
     <span style="color:#f92672">}</span>  
<span style="color:#f92672">}</span> 
</code></pre></div><p>После</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Aplication</span> <span style="color:#f92672">{</span>  
     <span style="color:#66d9ef">protected</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">final</span> String APPLICATION_CLASS_NAME <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;application&#34;</span><span style="color:#f92672">;</span>  
     <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">static</span> Application instance<span style="color:#f92672">;</span>  
  
     <span style="color:#66d9ef">private</span> <span style="color:#a6e22e">Application</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>  
     <span style="color:#f92672">}</span>  
  
     <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">synchronized</span> Application <span style="color:#a6e22e">getInstace</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>  
           <span style="color:#66d9ef">if</span><span style="color:#f92672">(</span>instance <span style="color:#f92672">==</span> <span style="color:#66d9ef">null</span> <span style="color:#f92672">)</span> <span style="color:#f92672">{</span>  
                  Class clazz <span style="color:#f92672">=</span> Class<span style="color:#f92672">.</span><span style="color:#a6e22e">forName</span><span style="color:#f92672">(</span>System<span style="color:#f92672">.</span><span style="color:#a6e22e">getProperty</span><span style="color:#f92672">(</span>APPLICATION_CLASS_NAME<span style="color:#f92672">));</span>  
                  instance <span style="color:#f92672">=</span> <span style="color:#f92672">(</span>Application<span style="color:#f92672">)</span>clazz<span style="color:#f92672">.</span><span style="color:#a6e22e">newInstance</span><span style="color:#f92672">();</span>  
           <span style="color:#f92672">}</span>  
           <span style="color:#66d9ef">return</span> instance<span style="color:#f92672">;</span>  
     <span style="color:#f92672">}</span>  
<span style="color:#f92672">}</span>  
<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">ApplicationMock</span> <span style="color:#66d9ef">extends</span> Application <span style="color:#f92672">{</span>  
  
     <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">configure</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>  
          System<span style="color:#f92672">.</span><span style="color:#a6e22e">setProperty</span><span style="color:#f92672">(</span>APPLICATION_CLASS_NAME<span style="color:#f92672">,</span>ApplicationMock<span style="color:#f92672">.</span><span style="color:#a6e22e">class</span><span style="color:#f92672">.</span><span style="color:#a6e22e">getName</span><span style="color:#f92672">());</span>  
     <span style="color:#f92672">}</span>  
  
<span style="color:#f92672">}</span>
</code></pre></div>
</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Glassfish Async JMS JCA</title>
      <link>https://dernasherbrezon.com/posts/glassfish-async-jms-jca/</link>
      <pubDate>Sat, 11 Apr 2009 13:14:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/glassfish-async-jms-jca/</guid>
      <description>Достаточно интересное и недокументированное поведение Glassfish v.2.0.
Если в потоке вызова endpointActivation(...) в реализации Resource Adapter&amp;rsquo;a вызвать метод consumer.setMessageListener(...) то потоки асинхронного получения сообщения не создадутся. С чем это связано - неизвестно. Исходные коды не смотрел. Возможно с требованиями спецификации о создании потоков через WorkManager. Но разработчик не контролирует создания потоков в JMS клиенте!
Решение:
 Создать инициализацию message listener&amp;rsquo;a в отдельном потоке через WorkManager.  </description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Glassfish Async JMS JCA</h1></header>
      		<div class='container entry-content'>
  <p>Достаточно интересное и недокументированное поведение Glassfish v.2.0.</p>
<p>Если в потоке вызова <code>endpointActivation(...)</code> в реализации Resource Adapter&rsquo;a вызвать метод <code>consumer.setMessageListener(...)</code> то потоки асинхронного получения сообщения не создадутся. С чем это связано - неизвестно. Исходные коды не смотрел. Возможно с требованиями спецификации о создании потоков через WorkManager. Но разработчик не контролирует создания потоков в JMS клиенте!</p>
<p>Решение:</p>
<ul>
<li>Создать инициализацию message listener&rsquo;a в отдельном потоке через WorkManager.</li>
</ul>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>IMQ Connection Concurrent Glassfish</title>
      <link>https://dernasherbrezon.com/posts/imq-connection-glassfish/</link>
      <pubDate>Sun, 11 Jan 2009 13:14:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/imq-connection-glassfish/</guid>
      <description>Наблюдается следующая проблема:
thread1:
javax.jms.Connection conn = connFactory.createConnection(); Work connectionHandler = new MyWorker(conn); WorkManager.scheduleWork(connectionHandler);  thread2 (MyWorker):
Session s = conn.createSession(...); Consumer c = s.createConsumer(someDestination); Message m = c.receive();  При receive JMSException и пишет что consumer closed. Однако если:
thread1:
Work connectionHandler = new MyWorker(connFactory); WorkManager.scheduleWork(connectionHandler);  thread2 (MyWorker):
javax.jms.Connection conn = connFactory.createConnection(); Session s = conn.createSession(...); Consumer c = s.createConsumer(someDestination); Message m = c.receive();  То всё работает. Happy holidays</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>IMQ Connection Concurrent Glassfish</h1></header>
      		<div class='container entry-content'>
  <p>Наблюдается следующая проблема:</p>
<p>thread1:</p>
<pre><code>javax.jms.Connection conn = connFactory.createConnection();  
Work connectionHandler = new MyWorker(conn);  
WorkManager.scheduleWork(connectionHandler); 
</code></pre>
<p>thread2 (MyWorker):</p>
<pre><code>Session s = conn.createSession(...);  
Consumer c = s.createConsumer(someDestination);  
Message m = c.receive(); 
</code></pre>
<p>При receive JMSException и пишет что consumer closed. Однако если:</p>
<p>thread1:</p>
<pre><code>Work connectionHandler = new MyWorker(connFactory);  
WorkManager.scheduleWork(connectionHandler);
</code></pre>
<p>thread2 (MyWorker):</p>
<pre><code>javax.jms.Connection conn = connFactory.createConnection();  
Session s = conn.createSession(...);  
Consumer c = s.createConsumer(someDestination);  
Message m = c.receive(); 
</code></pre>
<p>То всё работает. Happy holidays</p>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Интеграция Eclipse и Maven</title>
      <link>https://dernasherbrezon.com/posts/eclipse-maven/</link>
      <pubDate>Sat, 10 Jan 2009 13:14:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/eclipse-maven/</guid>
      <description>Maven в Eclipse - это очень удобно.
Однако при всех достоинствах каждого есть некоторые неудобства интеграции. Например, следующий вариант: Есть проект. В нём есть основные исходные коды и для тестов. Соответственно они находятся в разных папках. Есть два builder&amp;rsquo;а. Стандартный JDT и Maven Builder. Я не сильно вдавался в детали их работы, но в первом приближении они компилируют. JDT&amp;rsquo;шный стандартно в output folder для Eclipse&amp;rsquo;a, а maven&amp;rsquo;овский я так понимаю выполняет target compile и помещает скомпилированные классы в target/classes &amp;amp; target/test-classes (по дефолту).</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Интеграция Eclipse и Maven</h1></header>
      		<div class='container entry-content'>
  <p>Maven в Eclipse - это очень удобно.</p>
<p>Однако при всех достоинствах каждого есть некоторые неудобства интеграции. Например, следующий вариант:
Есть проект. В нём есть основные исходные коды и для тестов. Соответственно они находятся в разных папках. Есть два builder&rsquo;а. Стандартный JDT и Maven Builder. Я не сильно вдавался в детали их работы, но в первом приближении они компилируют. JDT&rsquo;шный стандартно в output folder для Eclipse&rsquo;a, а maven&rsquo;овский я так понимаю выполняет target compile и помещает скомпилированные классы в target/classes &amp; target/test-classes (по дефолту).</p>
<p>Вот тут то и возникает проблема. Вернее маленькое неудобство. Хочется выполнять тесты с помощью JUnit&rsquo;a встроенного в Eclipse. Потому что удобно. Однако он как то странно интегрирован с maven&rsquo;ом и похоже видит только классы скомпилированные JDT. Поэтому если нажать Run -&gt; JUnit Test то можно увидеть сообщение: NoClassDefFoundError: /my/test/Class</p>
<p>Решение проблемы два:</p>
<ol>
<li>Выполнять компиляцию тестов с помощью maven&rsquo;а, а затем выполнять запуск junit тестов. Но это же слишком неудобно? Каждый раз при изменении класса запускать компиляцию maven&rsquo;ом, поэтому есть ещё один путь.</li>
<li>Написать нехитрые настройки.</li>
</ol>
<p>У каждого maven-проекта есть родительским pom. Поэтому в родительском pom&rsquo;е нужно:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-xml" data-lang="xml"><span style="color:#f92672">&lt;build&gt;</span>  
    <span style="color:#f92672">&lt;outputdirectory&gt;</span>${output.dir}<span style="color:#f92672">&lt;/outputdirectory&gt;</span>  
    <span style="color:#f92672">&lt;testoutputdirectory&gt;</span>${testoutput.dir}<span style="color:#f92672">&lt;/testoutputdirectory&gt;</span>  
    ...  
<span style="color:#f92672">&lt;/build&gt;</span>  
  
<span style="color:#f92672">&lt;properties&gt;</span>  
    <span style="color:#f92672">&lt;output.dir&gt;</span>${basedir}/target/classes<span style="color:#f92672">&lt;/output.dir&gt;</span>  
    <span style="color:#f92672">&lt;testoutput.dir&gt;</span>${basedir}/target/test-classes<span style="color:#f92672">&lt;/testoutput.dir&gt;</span>  
<span style="color:#f92672">&lt;/properties&gt;</span>  
   
<span style="color:#f92672">&lt;profiles&gt;</span>  
    <span style="color:#f92672">&lt;profile&gt;</span>  
        <span style="color:#f92672">&lt;id&gt;</span>eclipse-folders<span style="color:#f92672">&lt;/id&gt;</span>  
        <span style="color:#f92672">&lt;properties&gt;</span>  
            <span style="color:#f92672">&lt;output.dir&gt;</span>${basedir}/target/eclipse<span style="color:#f92672">&lt;/output.dir&gt;</span>  
            <span style="color:#f92672">&lt;testoutput.dir&gt;</span>${basedir}/target/eclipse<span style="color:#f92672">&lt;/testoutput.dir&gt;</span>  
        <span style="color:#f92672">&lt;/properties&gt;</span>  
    <span style="color:#f92672">&lt;/profile&gt;</span>  
<span style="color:#f92672">&lt;/profiles&gt;</span>
</code></pre></div><p>В настройках проекта:</p>
<ul>
<li>Maven -&gt; Active Maven Profiles написать &ldquo;eclipse-folders&rdquo;</li>
<li>Java build Path -&gt; Default Output Folder написать &ldquo;target/eclipse&rdquo; и в настройках папок ресурсов (типа &ldquo;/src/test/resources&rdquo;) удалить Excluded чтобы ресурсы подцеплялись при запуске тестов (например log4j.properties)</li>
</ul>
<p>Я ещё отключил Maven Builder. Но думаю это необязательно.</p>

</div>

      	]]>
      </turbo:content>
    </item>
    
  </channel>
</rss>