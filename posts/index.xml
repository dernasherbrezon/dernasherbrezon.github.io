<rss version="2.0" xmlns:yandex="http://news.yandex.ru"
  xmlns:media="http://search.yahoo.com/mrss/"
  xmlns:turbo="http://turbo.yandex.ru" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>dernasherbrezon</title>
    <link>https://dernasherbrezon.com/posts/</link>
    <description>Блог о программировании на Java</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ru</language>
    <lastBuildDate>Thu, 09 Jan 2020 21:11:18 +0100</lastBuildDate>
    
        <atom:link href="https://dernasherbrezon.com/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item turbo="true">
      <title>Abbreviated jpeg в Java</title>
      <link>https://dernasherbrezon.com/posts/abbreviated-jpeg-java/</link>
      <pubDate>Thu, 09 Jan 2020 21:11:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/abbreviated-jpeg-java/</guid>
      <description>Я думаю все, кто хоть раз запускал компьютер, знают, что такое jpeg. Этот стандарт появился в далёком 1991 году и с тех пор оброс различными расширениями и дополнительными возможностями. Для обычных пользователей все эти изменения не видны. Вы просто кликаете по файлу и видите красивую картинку. Для 99% разработчиков jpeg также представляет собой чёрный ящик. Максимум, с чем может столкнуться среднестатистический разработчик - это оптимизировать размер картинок с помощью jpegtran или сконвертировать один формат в другой с помощью ImageIO.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Abbreviated jpeg в Java</h1></header>
      		<div class='container entry-content'>
  <p>Я думаю все, кто хоть раз запускал компьютер, знают, что такое jpeg. Этот стандарт появился в далёком 1991 году и с тех пор оброс различными расширениями и дополнительными возможностями. Для обычных пользователей все эти изменения не видны. Вы просто кликаете по файлу и видите красивую картинку. Для 99% разработчиков jpeg также представляет собой чёрный ящик. Максимум, с чем может столкнуться среднестатистический разработчик - это оптимизировать размер картинок с помощью <a href="https://linux.die.net/man/1/jpegtran">jpegtran</a> или сконвертировать один формат в другой с помощью <a href="https://docs.oracle.com/javase/tutorial/2d/images/loadimage.html">ImageIO</a>.</p>
<p>Всё становится значительно сложнее, когда нужно получить картинку со спутника. Понятное дело, никто не будет придумывать совершенно новый способ кодирования картинок, только для того, чтобы передать фотографию. Но и обычные файлы для этого не подходят. Это, прежде всего, связно с шириной канала и возможными потерями сигнала.</p>
<p>Одним из способов передачи/хранения картинки является &ldquo;Abbreviated image&rdquo;. Однако, прежде, чем пытаться понять, что это такое, необходимо вспомнить формат хранения jpeg в обычном файле.</p>
<h2 id="-">Обычный файл</h2>
<p>Если вкратце, то данные в jpeg файле хранятся с использованием маркеров. Маркер - это специальные 2 байта, которые идентифицируют тип блока и данные в нём. Например, структура обычного jpeg файла может быть следующая:</p>
<p><img src="/img/abbreviated-jpeg-java/sampleJpegStructure.jpg" alt=""></p>
<p>В данном примере, SOI - это маркер начала изображения, DQT - это маркер начала таблицы квантования, SOS - это маркер начала сканирования. Он содержит небольшую метаинформацию и непосредственно данные изображения. EOI - это маркер конца изображения.</p>
<p>В стандарте описано большое количество различных маркеров и их данных. Здесь наиболее интересные блоки - это таблицы квантования и таблицы кодирования хаффмана. В спецификации jpeg описаны рекомендованные значения для этих таблиц. Однако, ничто не мешает в каждом файле иметь свои собственные таблицы. Например, можно подобрать более оптимальные таблицы в зависимости от количества цветов в данном изображении.</p>
<h2 id="abbreviated-jpeg">Abbreviated jpeg</h2>
<p>Идея Abbreviated jpeg достаточно простая: выкинуть все таблицы из файла и хранить только данные изображения.</p>
<p><img src="/img/abbreviated-jpeg-java/abbreviatedJpeg.jpeg" alt=""></p>
<p>При этом, чтобы декодировать и показать изображение из этих файлов, необходимо заранее договориться о значениях в таблицах и других заголовках.</p>
<p>У такого способа хранения есть как свои достоинства, так и недостатки.</p>
<p>К достоинствам прежде всего следует отнести то, что размер файла чуть меньше. Также такие файлы устойчивы к повреждениям. Если отсутствует кусок файла или он повреждён, то достаточно найти следующий маркер RST и продолжить декодирование.</p>
<p>Недостатков также несколько. Во-первых, необходимо заранее договориться о параметрах файла. Это значит, что такой способ не подходит для web. Производители web браузеров совершенно точно не будут кодировать всевозможные таблицы для всех возможных комбинаций файлов. Во-вторых, современные каналы связи и диски достаточно большие, чтобы экономить на размере таблиц.</p>
<p>Несмотря на это, такой способ хранения и передачи изображений jpeg используется в узкоспециализированных системах. Например, формат <a href="https://ukhas.org.uk/guides:ssdv#packet_format">ssdv</a> использует Abbreviated image.</p>
<h3 id="--java">Поддержка в Java</h3>
<p>Я был сильно удивлён, когда узнал что поддержка такого экзотичного типа хранения jpeg файла поддерживается в java. В <a href="https://docs.oracle.com/en/java/javase/13/docs/api/java.desktop/javax/imageio/metadata/doc-files/jpeg_metadata.html">официальной документации</a> очень детально описано, что происходит при вызове различных методов API. К сожалению, за целый день пристального вглядывания в документацию, я так и не понял как же работать с таким форматом. Лишь на следующий день я решил бросить это дело и просто почитать исходники. Их оказалось, на удивление, не так много, и дело сдвинулось с мёртвой точки.</p>
<p>Итак, для того, чтобы прочитать такой файл нужно сделать 2 вещи. Во-первых, необходимо задать таблицы, о которых заранее договорились поставщик и получатель.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">JPEGImageReadParam param <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> JPEGImageReadParam<span style="color:#f92672">(</span><span style="color:#f92672">)</span><span style="color:#f92672">;</span>
param<span style="color:#f92672">.</span><span style="color:#a6e22e">setDecodeTables</span><span style="color:#f92672">(</span>qTables<span style="color:#f92672">,</span> DCHuffmanTables<span style="color:#f92672">,</span> ACHuffmanTables<span style="color:#f92672">)</span><span style="color:#f92672">;</span>
</code></pre></div><p>Во-вторых, необходимо передать эти параметры при чтении из файла:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">ImageReader jpgReader <span style="color:#f92672">=</span> ImageIO<span style="color:#f92672">.</span><span style="color:#a6e22e">getImageReadersByFormatName</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;jpg&#34;</span><span style="color:#f92672">)</span><span style="color:#f92672">.</span><span style="color:#a6e22e">next</span><span style="color:#f92672">(</span><span style="color:#f92672">)</span><span style="color:#f92672">;</span>
jpgReader<span style="color:#f92672">.</span><span style="color:#a6e22e">setInput</span><span style="color:#f92672">(</span><span style="color:#66d9ef">new</span> FileImageInputStream<span style="color:#f92672">(</span><span style="color:#66d9ef">new</span> File<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;test.jpeg&#34;</span><span style="color:#f92672">)</span><span style="color:#f92672">)</span><span style="color:#f92672">)</span><span style="color:#f92672">;</span>
BufferedImage image  <span style="color:#f92672">=</span> jpgReader<span style="color:#f92672">.</span><span style="color:#a6e22e">read</span><span style="color:#f92672">(</span>0<span style="color:#f92672">,</span> param<span style="color:#f92672">)</span><span style="color:#f92672">;</span>
</code></pre></div><p>В результате <code>BufferedImage</code> будет содержать вполне обычное изображение, которое можно сохранить или преобразовать далее.</p>
<p>Несмотря на всё это, API есть куда расти. Например, в <code>JPEGImageReadParam</code> нельзя задать subsampling mode и <code>ColorSpace</code>. А это значит, что они должны быть в самом Abbreviated image. Это в свою очередь сводит на нет, устойчивость к повреждениям файла.</p>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Настройка проекта на Си</title>
      <link>https://dernasherbrezon.com/posts/setting-up-c/</link>
      <pubDate>Tue, 24 Dec 2019 18:29:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/setting-up-c/</guid>
      <description>У меня есть небольшой проект на Си, который позволяет сделать приватный apt репозиторий в облачном хранилище Selectel - apt-transport-swift. Почему именно на Си? Во-первых, я думал, что знаю Си. Во-вторых, в моём представлении все системные утилиты для массового пользования должны быть написаны на низкоуровневом языке. Это значит, что для запуска приложения у меня должны быть минимальное количество зависимостей и минимальное потребление памяти. Ведь я не знаю на каком железе будет запущена моя программа.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Настройка проекта на Си</h1></header>
      		<div class='container entry-content'>
  <p>У меня есть небольшой проект на Си, который позволяет сделать приватный apt репозиторий в облачном хранилище Selectel - <a href="https://github.com/dernasherbrezon/apt-transport-swift">apt-transport-swift</a>. Почему именно на Си? Во-первых, я думал, что знаю Си. Во-вторых, в моём представлении все системные утилиты для массового пользования должны быть написаны на низкоуровневом языке. Это значит, что для запуска приложения у меня должны быть минимальное количество зависимостей и минимальное потребление памяти. Ведь я не знаю на каком железе будет запущена моя программа. Однако, с Си есть некоторые проблемы - это очень старый язык, в котором есть много устаревших конструкций и подходов. Я потратил почти неделю на то, чтобы настроить всевозможные утилиты для улучшения качества проекта. Ниже, я хочу поделиться своими результатами.</p>
<h2 id="--">Система контроля версий</h2>
<p>Git. Использовать какую-либо другую систему контроля версий в 2019 году было бы крайне эксцентрично. Я выбрал <a href="https://github.com/dernasherbrezon/apt-transport-swift">github</a>, так как там хранятся все мои проекты.</p>
<h2 id="heading">Сборка</h2>
<p><a href="https://cmake.org">cmake</a>. Мне необходимо будет собирать тесты, считать code coverage и пр. Обычный make был бы слишком простым. Какие-то специальные сборочные системы, например Eclipse CDT, слишком привязаны к IDE и запускать их, например в launchpad, невозможно. С помощью cmake я мог бы собирать проект в Ubuntu и в MacOS.</p>
<h2 id="continous-integration">Continous integration</h2>
<p><a href="https://travis-ci.org/dernasherbrezon/apt-transport-swift">travis-ci</a>. Прежде всего, он бесплатный и хорошо интегрирован с github. Я его использую в нескольких проектах, и он вполне подходит для моих нужд.</p>
<p><img src="/img/setting-up-c/1.png" alt=""></p>
<h2 id="continuous-deployment">Continuous deployment</h2>
<p><a href="https://launchpad.net/~rodionovamp/+archive/ubuntu/apt-transport-swift">Launchpad</a>. Не является классическим сервисом/приложением для continuous deployment. Но тем не менее, предоставляет в какой-то мере deployment. Например, он может автоматически собрать исходники под разные версии Ubuntu, под разные архитектуры и задеплоить в <a href="https://help.ubuntu.ru/wiki/ppa">PPA</a>. Сам по себе, Launchpad - это мир в себе. Я постараюсь написать отдельную статью, как собрать проект под него и какие особенности при этом могут возникнуть.</p>
<p><img src="/img/setting-up-c/2.png" alt=""></p>
<h2 id="heading-1">Тесты</h2>
<p><a href="https://github.com/libcheck/check">libcheck</a>. Для начала нужно отметить, что тесты для программы на Си существенно отличаются от тестов для таких языков как Java, Python, Ruby. Дело в том, что каждый тест нужно оборачивать в отдельную программму. Это нужно прежде всего, чтобы отловить memory access violation - наиболее частый тип ошибок. При таких ошибках программа обычно падает в coredump. Если тесты будут запускаться в рамках одного приложения, то ошибка в одном тесте будет валить все оставшиеся тесты. Это не очень хорошо, поэтому разработчики придумали делать fork тестов. Вообще с библиотеками для тестирования в мире Си всё достаточно сложно. Например, многие пытаются тестировать код embedded приложений, в которых очень важен размер программы и скорость, поэтому для каждого случая люди придумывают свою библиотеку тестирования. Иногда доходит <a href="http://www.jera.com/techinfo/jtns/jtn002.html">до абсурда</a>.</p>
<p>Отдельной головной болью является подключение этих библиотек. Дело в том, что в cmake модули и пакеты появились сравнительно недавно. И, видимо, чтобы не нарушить обратную совместимость, их поддержка выглядит очень специфической. Например, рекомендуемое подключение libcheck:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-cmake" data-lang="cmake">find_package(<span style="color:#e6db74">check</span> <span style="color:#e6db74">&lt;check_version</span> <span style="color:#e6db74">if</span> <span style="color:#e6db74">wanted&gt;</span> <span style="color:#e6db74">REQUIRED</span> <span style="color:#e6db74">CONFIG</span>)<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>target_link_libraries(<span style="color:#e6db74">myproj.test</span> <span style="color:#e6db74">Check::check</span>)<span style="color:#960050;background-color:#1e0010">
</span></code></pre></div><p>Со стороны выглядит компактно и просто. Однако, на практике тут прям совсем много проблем. Самая основная - эта конструкция работает только в <code>libcheck &gt;= 0.13.x</code>. При этом в последней LTS Ubuntu libcheck версии 0.10.x. А это значит:</p>
<ul>
<li>нужно писать простыню <a href="https://github.com/dernasherbrezon/apt-transport-swift/blob/master/cmake/FindCheck.cmake">FindCheck.cmake</a>, в которой <a href="https://github.com/libcheck/check/issues/236">есть ошибка</a>.</li>
<li>не забыть обновить на более правильный способ подключения в следующей версии Ubuntu.</li>
</ul>
<h2 id="-">Тесты памяти</h2>
<p><a href="https://valgrind.org">valgrind</a>. Не секрет, что написать абсолютно корректную программу на Си или C++ практически нереально. Это прежде всего связано с моделью управления памяти. Очень просто выделить объект и забыть его удалить в нужный момент. В современных языках программирования обычно вводят garbage collector, который следит за выделением памяти и удаляет неиспользуемые объекты. Однако, в Си это необходимо делать самому и на помощь приходит вполне стандартный инструмент - valgrind. Единственное, над чем мне пришлось попотеть - это добавить его в continuous integration и сделать так, чтобы всё падало, если есть утечка памяти. Я запускаю его следующим образом:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">set +e 

EXIT_CODE<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>
<span style="color:#66d9ef">for</span> file in test_*; <span style="color:#66d9ef">do</span>
	<span style="color:#f92672">[</span><span style="color:#f92672">[</span> <span style="color:#e6db74">${</span>file<span style="color:#e6db74">}</span> <span style="color:#f92672">=</span><span style="color:#f92672">=</span> *.dSYM <span style="color:#f92672">]</span><span style="color:#f92672">]</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#66d9ef">continue</span>
	valgrind -v --error-exitcode<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span> -q --tool<span style="color:#f92672">=</span>memcheck --leak-check<span style="color:#f92672">=</span>yes --show-reachable<span style="color:#f92672">=</span>yes ./<span style="color:#e6db74">${</span>file<span style="color:#e6db74">}</span>
	CURRENT_EXIT_CODE<span style="color:#f92672">=</span>$?
	<span style="color:#66d9ef">if</span> <span style="color:#f92672">[</span> <span style="color:#e6db74">${</span>CURRENT_EXIT_CODE<span style="color:#e6db74">}</span> !<span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">]</span>; <span style="color:#66d9ef">then</span>
		EXIT_CODE<span style="color:#f92672">=</span><span style="color:#e6db74">${</span>CURRENT_EXIT_CODE<span style="color:#e6db74">}</span> 
	<span style="color:#66d9ef">fi</span>  
<span style="color:#66d9ef">done</span>

exit <span style="color:#e6db74">${</span>EXIT_CODE<span style="color:#e6db74">}</span>
</code></pre></div><p>В этом скрипте, для каждого теста выполняется анализ памяти, и, если статус не равен 0, скрипт возвращает ненулевой результат. Если travis получает ненулевой результат, то он завершает <a href="https://github.com/dernasherbrezon/apt-transport-swift/blob/master/build_debug.sh">билд с ошибкой</a>. Псевдокод выглядит как-то так:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml">script:
  - set -e
  - ./run_tests.sh
</code></pre></div><h2 id="code-coverage">Code coverage</h2>
<p><a href="https://ru.wikipedia.org/wiki/Gcov">gcov</a>. Многие думают, что считать покрытие тестами кода - это какой-то фетишизм педантов-максималистов. На самом деле, он прежде всего помогает найти неиспользуемый код, который можно удалить. И только во-вторую очередь позволяет понять насколько хорошо тесты написаны. Достигнуть 100% покрытия почти нереально, да и это зачастую не нужно. Многие сервисы, например sonarcloud, вполне это понимают и устанавливают границу в 80%. Судя по моему опыту, эта граница примерно соответствует тестам, которые проверяют успешное выполнение логики программы. Остальные 20% - это всевозможная обработка сложных граничных и многопоточных случаев.</p>
<p><img src="/img/setting-up-c/3.png" alt=""></p>
<p>Настройка gcov для связки travis и cmake выглядит нетривиально и многие в интернетах советуют переусложнённые конфигурации. Мне же удалось сделать это проще.</p>
<p>Подключение debug информации:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-cmake" data-lang="cmake">if(<span style="color:#e6db74">CMAKE_BUILD_TYPE</span> <span style="color:#e6db74">MATCHES</span> <span style="color:#e6db74">Debug</span>)<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>	set(<span style="color:#e6db74">CMAKE_C_FLAGS</span> <span style="color:#e6db74">&#34;${CMAKE_C_FLAGS} -fprofile-arcs -ftest-coverage&#34;</span>)<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>endif()<span style="color:#960050;background-color:#1e0010">
</span></code></pre></div><p>Вызов gcov для каждого объекта:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-cmake" data-lang="cmake">if(<span style="color:#e6db74">CMAKE_BUILD_TYPE</span> <span style="color:#e6db74">MATCHES</span> <span style="color:#e6db74">Debug</span>)<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>	add_custom_target(<span style="color:#e6db74">&#34;coverage&#34;</span>)<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>	add_custom_command(<span style="color:#e6db74">TARGET</span> <span style="color:#e6db74">&#34;coverage&#34;</span> <span style="color:#e6db74">COMMAND</span> <span style="color:#e6db74">gcov</span> <span style="color:#f92672">${</span>CMAKE_BINARY_DIR<span style="color:#f92672">}</span><span style="color:#e6db74">/CMakeFiles/swiftlib.dir/src/*.c.o</span>)<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>endif()<span style="color:#960050;background-color:#1e0010">
</span></code></pre></div><p>При этом swiftlib содержит все объекты проекта за исключением main.c. Этот файл, в идеале, должен лишь содержать главный цикл или минимальный метод main:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">void</span>) {
    swift_start_main_loop();
}
</code></pre></div><h2 id="--1">Анализ кода</h2>
<p><a href="https://sonarcloud.io/organizations/dernasherbrezon-github/projects">sonarcloud</a>. Он поддерживает множество языков в том числе Си, Java, Javascript, и я использую его во всех своих проектах. Удобно и бесплатно.</p>
<p><img src="/img/setting-up-c/4.png" alt=""></p>
<h2 id="heading-2">Выводы.</h2>
<p>Мир Си страннен и многообразен. Почти все инструменты, которые просто и быстро подключаются в современных языках программирования, здесь требуют доработки напильником. Однако, если есть желание разобраться с экосистемой, то всё возможно. После того, как я всё настроил, стало хорошо видно, где стоит поработать. Например, я думал, что покрытие тестами в моём проекте примерно 60%. Однако, в реальности оно оказалось где-то 40%. Статический анализатор sonarcloud нашёл много серьёзных багов, связанных с памятью. Уже сейчас можно сказать, что время, потраченное на настройку, окупилось и принесло пользу.</p>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Сравнение JSP и VueJS</title>
      <link>https://dernasherbrezon.com/posts/compare-jsp-vuejs/</link>
      <pubDate>Sun, 15 Dec 2019 07:14:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/compare-jsp-vuejs/</guid>
      <description>Споры о том, насколько SPA лучше или хуже проверенных серверных технологий, не утихают до сих пор. Сторонники SPA (React, Angular, VueJS) в один голос говорят насколько это просто и удобно. Сторонники серверных технологий (PHP, JSP, ASP) ничего не говорят, потому что их мало и они заняты разработкой. Из-за того, что оба подхода достаточно разные, то и сравнивать их очень сложно. Зачастую сравнение сваливается во вкусовщину, так как нет людей, которые бы разрабатывали как с помощью одних, так и с помощью других.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Сравнение JSP и VueJS</h1></header>
      		<div class='container entry-content'>
  <p>Споры о том, насколько SPA лучше или хуже проверенных серверных технологий, не утихают до сих пор. Сторонники SPA (React, Angular, VueJS) в один голос говорят насколько это просто и удобно. Сторонники серверных технологий (PHP, JSP, ASP) ничего не говорят, потому что их мало и они заняты разработкой. Из-за того, что оба подхода достаточно разные, то и сравнивать их очень сложно. Зачастую сравнение сваливается во вкусовщину, так как нет людей, которые бы разрабатывали как с помощью одних, так и с помощью других. И даже, если такие уникумы находятся, никто в здравом уме не будет реализоваывать сложную функциональность одновременно и на той, и на другой технологии. Кроме меня.</p>
<blockquote>
<p>TL;TR Я смог разработать такой компонент без каких-либо сложностей.</p>
</blockquote>
<p><img src="/img/compare-jsp-vuejs/2.png" alt=""></p>
<h2 id="heading">Начало</h2>
<p>Так получилось, что <a href="https://r2server.ru">r2server</a> написан с помощью <a href="https://ru.wikipedia.org/wiki/JavaServer_Pages">JSP</a>, а <a href="https://github.com/dernasherbrezon/r2cloud-ui">r2cloud-ui</a> с помощью <a href="https://vuejs.org">VueJS</a>. И вот мне понадобилось реализовать компонент по отображению <a href="https://swagger.io/docs/specification/about/">OpenAPI</a> в обоих проектах. В этот момент возникла уникальная ситуация:</p>
<ul>
<li>Нужно реализовать абсолютно одинаковый компонент как в r2cloud-ui, так и в r2server.</li>
<li>У него должен быть один и тот же дизайн - <a href="https://getbootstrap.com">bootstrap4</a>. Несмотря на то, что приложения разные, я решил сделать максимально похожий user experience. Это удобно по нескольким причинам: во-первых, достаточно знать один набор компонент, во-вторых, пользователи, вполне очевидно, будут использовать и то, и другое приложение.</li>
</ul>
<h2 id="heading-1">Требования</h2>
<p><img src="/img/compare-jsp-vuejs/3.png" alt=""></p>
<p>Прежде, чем начать сравнивать фреймворки, я хотел бы описать требования:</p>
<ul>
<li>компонент должен быть не зависимым от приложения. Это прежде всего значит, что его можно встраивать не только в моё приложение, но и в любое другое.</li>
<li>он должен отображать описание OpenAPI с помощью bootstrap4. Это описание должно быть максимально похожим на стандартный <a href="https://petstore.swagger.io">swagger-ui</a>.</li>
<li>(опционально) 80% покрытия тестами.</li>
</ul>
<p>После того, как были определены требования, я без проблем написал необходимый код. Результаты моих ощущений ниже.</p>
<h2 id="-">Простота старта</h2>
<p><span style="color: green;">JSP</span> vs <span style="color: red;">VueJS</span></p>
<p>Для JSP начало работы достаточно простое:</p>
<ul>
<li>создать стандартный maven проект</li>
<li>положить описание в <code>/META-INF/tags</code></li>
</ul>
<p>Однако, для VueJS старт очень запутанный. Я открыл <a href="https://ru.vuejs.org/v2/cookbook/packaging-sfc-for-npm.html">официальный гид</a> по созданию компонентов и увидел, что там рекомендуется начать с конфигурации <a href="https://rollupjs.org/guide/en/">rollup</a>. Несмотря на то, что стандартом индустрии является <a href="https://webpack.js.org">webpack</a>, я не нашёл упоминания о нём в документации. rollup действительно позволяет быстро начать разрабатывать компонент, но как только захочется посмотреть промежуточный результат, то тут ожидается облом. rollup просто компилирует файлы в разные форматы и ни о каком dev сервере речи нет.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json"><span style="color:#e6db74">&#34;scripts&#34;</span><span style="color:#960050;background-color:#1e0010">:</span> {
  <span style="color:#f92672">&#34;build&#34;</span>: <span style="color:#e6db74">&#34;npm run build:umd &amp; npm run build:es &amp; npm run build:unpkg&#34;</span>,
  <span style="color:#f92672">&#34;build:umd&#34;</span>: <span style="color:#e6db74">&#34;rollup --config build/rollup.config.js --format umd --file dist/vue-openapi-bootstrap.umd.js&#34;</span>,
  <span style="color:#f92672">&#34;build:es&#34;</span>: <span style="color:#e6db74">&#34;rollup --config build/rollup.config.js --format es --file dist/vue-openapi-bootstrap.esm.js&#34;</span>,
  <span style="color:#f92672">&#34;build:unpkg&#34;</span>: <span style="color:#e6db74">&#34;rollup --config build/rollup.config.js --format iife --file dist/vue-openapi-bootstrap.min.js&#34;</span>
}
</code></pre></div><h2 id="--1">Простота упаковки</h2>
<p><span style="color: green;">JSP</span> vs <span style="color: green;">VueJS</span></p>
<p>Тут о обоих фреймворков нет проблем. Для JSP упаковка - это стандартная команда maven:</p>
<pre><code>mvn package
</code></pre><p>В VueJS соответственно:</p>
<pre><code>npm build
</code></pre><h2 id="heading-2">Тестирование</h2>
<p><span style="color: green;">JSP</span> vs <span style="color: red;">VueJS</span></p>
<p>Опять же, из-за rollup и общей путаницы с технологиями, начать тестировать компонент на VueJS нетривиально. Если честно, я так и не осилил переход на webpack с полноценными тестами и покрытием кода.</p>
<p>В JSP же всё относительно просто: я просто скопировал подход для тестирования тэгов, который <a href="https://dernasherbrezon.com/posts/jsp-tag-testing/">использовал ранее</a> и сразу получил страницу index.html, которая загружается в браузер простым кликом.</p>
<p><img src="/img/compare-jsp-vuejs/1.png" alt=""></p>
<h2 id="--2">Скорость разработки</h2>
<p><span style="color: red;">JSP</span> vs <span style="color: green;">VueJS</span></p>
<p>Да, инженерная мысль шагнула далеко вперед за последние 20 лет и разрабатывать на VuejS получается значительно быстрее. Например, синтаксис чуть более компактный. Сравните вывод одного и того же блока на VueJS:</p>
<pre><code>&lt;p&gt;Available values:
{{ param.schema.items.enum.join(', ') }}
&lt;/p&gt;
</code></pre><p>И на JSP:</p>
<pre><code>&lt;p&gt;Available values:
&lt;c:forEach items=&quot;${curParam.schema.items.getEnum()}&quot; var=&quot;curEnum&quot; varStatus=&quot;enumStatus&quot;&gt;&lt;c:if test=&quot;${!enumStatus.first}&quot;&gt;, &lt;/c:if&gt;${curEnum}&lt;/c:forEach&gt;
&lt;/p&gt;
</code></pre><p>Ещё одной вещью, значительно ускоряющей разработку (не путать со стабильностью кода!), является отсутствие строгой типизации. Сама по себе доменная модель OpenAPI нетривиальная, поэтому в JSP мне приходилось загружать её из JSON с помощью специальной библиотеки <code>swagger-parser-v3</code>. И даже после того, как я её загрузил, мне приходилось делать различные приседания, чтобы сгруппировать объекты в удобной виде:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">private</span> <span style="color:#66d9ef">static</span> Map<span style="color:#f92672">&lt;</span>String<span style="color:#f92672">,</span> Operation<span style="color:#f92672">&gt;</span> <span style="color:#a6e22e">getOperationsByType</span><span style="color:#f92672">(</span>PathItem item<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
	Map<span style="color:#f92672">&lt;</span>String<span style="color:#f92672">,</span> Operation<span style="color:#f92672">&gt;</span> result <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> HashMap<span style="color:#f92672">&lt;</span><span style="color:#f92672">&gt;</span><span style="color:#f92672">(</span><span style="color:#f92672">)</span><span style="color:#f92672">;</span>
	<span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>item<span style="color:#f92672">.</span><span style="color:#a6e22e">getGet</span><span style="color:#f92672">(</span><span style="color:#f92672">)</span> <span style="color:#f92672">!</span><span style="color:#f92672">=</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
		result<span style="color:#f92672">.</span><span style="color:#a6e22e">put</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;get&#34;</span><span style="color:#f92672">,</span> item<span style="color:#f92672">.</span><span style="color:#a6e22e">getGet</span><span style="color:#f92672">(</span><span style="color:#f92672">)</span><span style="color:#f92672">)</span><span style="color:#f92672">;</span>
	<span style="color:#f92672">}</span>
	<span style="color:#f92672">.</span><span style="color:#f92672">.</span><span style="color:#f92672">.</span>
	<span style="color:#66d9ef">return</span> result<span style="color:#f92672">;</span>
<span style="color:#f92672">}</span>
</code></pre></div><p>В javascript же такой проблемы не было, так как json - это JavaScript Object Notation. Что как бы намекает на глубокую поддержку внутри самого языка. Из-за этого загрузка выглядела достаточно просто:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript"><span style="color:#a6e22e">openapi</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">response</span>.<span style="color:#a6e22e">data</span>
</code></pre></div><p>Следующей неудобной штукой при разработке были вспомогательные методы. Например, необходимо было в зависимости от http метода отобразить цвет. В VueJS - это делается с помощью объявления метода прямо в файле:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript"><span style="color:#a6e22e">methods</span><span style="color:#f92672">:</span> { 
  <span style="color:#a6e22e">getColorByMethod</span> (<span style="color:#a6e22e">method</span>) {
    ...
  }
}
</code></pre></div><p>И использование (всё в том же файле):</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">&lt;<span style="color:#f92672">span</span> <span style="color:#a6e22e">:class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;`badge ${getColorByMethod(method)}`&#34;</span>&gt;
</code></pre></div><p>В JSP же пришлось объявлять специальные функциональные методы в <code>jsp-openapi.tld</code>:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-xml" data-lang="xml"><span style="color:#f92672">&lt;function</span><span style="color:#f92672">&gt;</span>
	<span style="color:#f92672">&lt;name</span><span style="color:#f92672">&gt;</span>getColorByMethod<span style="color:#f92672">&lt;/name&gt;</span>
	<span style="color:#f92672">&lt;function-class</span><span style="color:#f92672">&gt;</span>ru.r2cloud.openapi.OpenAPIHelper<span style="color:#f92672">&lt;/function-class&gt;</span>
	<span style="color:#f92672">&lt;function-signature</span><span style="color:#f92672">&gt;</span>java.lang.String getColorByMethod(ru.r2cloud.openapi.OperationDetails)<span style="color:#f92672">&lt;/function-signature&gt;</span>
<span style="color:#f92672">&lt;/function&gt;</span>
</code></pre></div><p>Описывать их в java коде:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">OpenAPIHelper</span> <span style="color:#f92672">{</span>
	<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> String <span style="color:#a6e22e">getColorByMethod</span><span style="color:#f92672">(</span>OperationDetails method<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
		<span style="color:#f92672">.</span><span style="color:#f92672">.</span><span style="color:#f92672">.</span>
	<span style="color:#f92672">}</span>
<span style="color:#f92672">}</span>
</code></pre></div><p>И использовать внутри JSP:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">&lt;<span style="color:#f92672">span</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;badge ${openapiHelper:getColorByMethod(method)}&#34;</span>&gt;
</code></pre></div><h2 id="--3">Простота переиспользования</h2>
<p><span style="color: green;">JSP</span> vs <span style="color: green;">VueJS</span></p>
<p>Тут оба фреймворка постарались и сделали вполне неплохое переиспользование своих компонент. Подключить jsp tag в проект можно описав зависимость:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-xml" data-lang="xml"><span style="color:#f92672">&lt;dependency</span><span style="color:#f92672">&gt;</span>
	<span style="color:#f92672">&lt;groupId</span><span style="color:#f92672">&gt;</span>ru.r2cloud.openapi<span style="color:#f92672">&lt;/groupId&gt;</span>
	<span style="color:#f92672">&lt;artifactId</span><span style="color:#f92672">&gt;</span>jsp-openapi<span style="color:#f92672">&lt;/artifactId&gt;</span>
	<span style="color:#f92672">&lt;version</span><span style="color:#f92672">&gt;</span>1.0<span style="color:#f92672">&lt;/version&gt;</span>
<span style="color:#f92672">&lt;/dependency&gt;</span>
</code></pre></div><p>И добавив на страницу:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html"><span style="color:#960050;background-color:#1e0010">&lt;</span>%@ taglib prefix=&#34;openapi&#34; uri=&#34;https://github.com/dernasherbrezon/jsp-openapi&#34; %&gt;
&lt;<span style="color:#f92672">openapi:bootstrap4-openapi</span> <span style="color:#a6e22e">openapi</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;${entity}&#34;</span>/&gt;
</code></pre></div><p>Во VueJS примерно так же просто:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json"><span style="color:#e6db74">&#34;dependencies&#34;</span><span style="color:#960050;background-color:#1e0010">:</span> {
  <span style="color:#f92672">&#34;vue-openapi-bootstrap&#34;</span>: <span style="color:#e6db74">&#34;1.0.1&#34;</span>
}
</code></pre></div><p>Использование на странице:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">&lt;<span style="color:#f92672">template</span>&gt;
	&lt;<span style="color:#f92672">vue-openapi-bootstrap</span> <span style="color:#a6e22e">:openapi</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;openapi&#34;</span>/&gt;
&lt;/<span style="color:#f92672">template</span>&gt;

&lt;<span style="color:#f92672">script</span>&gt;
<span style="color:#66d9ef">import</span> <span style="color:#a6e22e">vueOpenapiBootstrap</span> <span style="color:#a6e22e">from</span> <span style="color:#e6db74">&#39;vue-openapi-bootstrap/src/vue-openapi-bootstrap&#39;</span>
<span style="color:#66d9ef">export</span> <span style="color:#66d9ef">default</span> {
  <span style="color:#a6e22e">components</span><span style="color:#f92672">:</span> {<span style="color:#a6e22e">vueOpenapiBootstrap</span>}
}
&lt;/<span style="color:#f92672">script</span>&gt;
</code></pre></div><h2 id="heading-3">Выводы</h2>
<p>Несмотря на то, что JSP уже почти 20 лет, разрабатывать переиспользуемые компоненты на нём достаточно просто. Конечно, чувствуется возраст технологии и некоторые вещи можно было бы сделать проще. Но тем не менее, ужасов, которые рисуют поклонники javascript и SPA, нет. При правильном дизайне и тот, и другой фреймворк предоставляют достаточно мощные инструменты для написания и переиспользования компонентов.</p>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Регистрация пользователей: 5 обязательных вещей</title>
      <link>https://dernasherbrezon.com/posts/design-registration/</link>
      <pubDate>Thu, 12 Dec 2019 14:40:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/design-registration/</guid>
      <description>Есть множество причин по которым может потребоваться собственная регистрация в своём сервисе. Это может быть как скорость разработки (нет необходимости изучать многочисленные API для интеграции), так и дополнительные требования к приватности данных. В регистрации пользователя нет ничего сложного: достаточно спросить его имя и пароль, добавить соль к паролю и сохранить это в базу. Однако, по мере эксплуатации, возникают различные ситуации, которые были не предусмотрены при дизайне системы. Ниже я собрал 5 вещей, полученные кровью и пОтом, багами в проде и мучительными часами ожиданий обычных пользователей.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Регистрация пользователей: 5 обязательных вещей</h1></header>
      		<div class='container entry-content'>
  <p>Есть множество причин по которым может потребоваться собственная регистрация в своём сервисе. Это может быть как скорость разработки (нет необходимости изучать многочисленные API для интеграции), так и дополнительные требования к приватности данных. В регистрации пользователя нет ничего сложного: достаточно спросить его имя и пароль, добавить соль к паролю и сохранить это в базу. Однако, по мере эксплуатации, возникают различные ситуации, которые были не предусмотрены при дизайне системы. Ниже я собрал 5 вещей, полученные кровью и пОтом, багами в проде и мучительными часами ожиданий обычных пользователей.</p>
<h2 id="1-----email">1. Логин - это email</h2>
<p>В 2019 уже достаточно сложно встретить сервисы, которые регистрируют пользователя по никнейму. Но совсем недавно, лет 15 назад, большинство сервисов регистрировали пользователей по имени пользователя или никнейму. С тех пор многие компании переосмыслили регистрацию и требуют только email. Ведь для того, чтобы, например, восстанавить пароль, никнейма недостаточно. А что произойдёт, если пользователь зарегистрировался на сайте по никнейму, добавил множество данных или оплатил доступ, а через несколько месяц забыл пароль и попытался восстановить аккаунт? Правильно, ничего не получится, так как он забыл добавить email к своему профилю. И такие ситуации случались постоянно.</p>
<p><img src="/img/design-registration/1.png" alt=""></p>
<p>К счастью, тёмные времена уже позади и можно смело сказать, что регистрация по емейлу или телефону - это стандарт де-факто.</p>
<h2 id="2-captcha-">2. Captcha (Капча)</h2>
<p>Captcha - Ваш друг и помощник в защите от спамеров. Стопроцентная защита от негодяев, пытающихся перебрать email адреса всех Ваших пользователей. Сейчас есть множество <a href="https://www.google.com/recaptcha/intro/v3.html">бесплатных сервисов</a>, которые позволяют добавить капчу быстро и просто.</p>
<p><img src="/img/design-registration/2.png" alt=""></p>
<h2 id="3----------">3. Первый логин только после перехода по ссылке активации в письме</h2>
<p>За достаточно длинным названием правила стоит достаточно простой алгоритм:</p>
<ul>
<li>пользователь заходит на страницу регистрации</li>
<li>вводит свой email (см правило 1)</li>
<li>сервис регистрирует аккаунт и отправляет письмо с подтверждением</li>
<li>пользователь открывает письмо и переходит по сссылке активации</li>
<li>вводит новый пароль, его подтверждение и сразу же логинится</li>
</ul>
<p>Зачем такая достаточно сложная процедура? Во-первых, происходит проверка того, что пользователь дейтвительно ввёл свой емейл и не опечатался. А во-вторых, проверка того, что почтовый ящик действительно существует. Сколько часов своей жизни я потратил, пытаясь вместе с пользователем восстановить доступ к его аккаунту. Дело в том, что служба поддержки никогда не сможет отличить опечатку в емейле от мошенника, пытающегося завладеть чужими данными. Здесь злую шутку сыграли браузеры, которые предлагают хранить пароли к сайтам и автоматически подставляют их при входе. Пользователь месяцами может не догадываться, что емейл, который он ввёл при регистрации не совпадает с его настоящим. И это будет продолжаться до тех пор, пока он не попытается восстановить пароль.</p>
<p><img src="/img/design-registration/3.png" alt=""></p>
<h2 id="4-----">4. Убирайте лишние пробелы в логине</h2>
<p>Самые экзотические личности вводят свой логин при регистрации с пробелом. Возможно, Вы сможете отправить на него email с активацией, но никогда не сможете залогинить.</p>
<blockquote>
<p>&ldquo;<a href="mailto:info@example.com">info@example.com</a> &quot; != &ldquo;<a href="mailto:info@example.com">info@example.com</a>&rdquo;</p>
</blockquote>
<p>С точки зрения логина, пробелы в начале и конце не несут никакой информации и не являются частью емейл адреса. Но Ваша система аутентификации не знает этого. Ещё одной хорошей идеей будет приведение адреса в нижний регистр. Несмотря на то, что название ящика <a href="https://stackoverflow.com/questions/9807909/are-email-addresses-case-sensitive">чувствительно к регистру</a>, на практике почтовые сервера не позволяют регистрировать адреса в разном регистре. Седые волосы и <a href="https://github.com/dernasherbrezon/r2cloud/issues/72">дни на саппорте</a> никому не нужны. Простая операция съэкономит много нервов:</p>
<p><img src="/img/design-registration/4.png" alt=""></p>
<h2 id="5---email--">5. Проверьте отправку email в проде</h2>
<p>Казалось бы, столько времени потрачено на реализацию, траффик начали лить и пользователи ровными рядами идут смотреть Ваш сервис. Но, несмотря на это, регистраций всё нет. Проверьте настройки почты на проде и убедитесь, что письма не попадают в папку &ldquo;спам&rdquo;. Будет крайне обидно, если из-за такой мелочи сорвётся грандиозный запуск и деньги на привлечение клиентов пропадут зря.</p>
<h2 id="heading">Успехов</h2>
<p>Надеюсь эти 5 простых правил помогут Вам сделать простую и удобную регистрацию, а клиентов полюбить Ваш сервис.</p>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Переиспользование компонентов в JSP</title>
      <link>https://dernasherbrezon.com/posts/jsp-tagfile/</link>
      <pubDate>Sun, 08 Dec 2019 19:18:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/jsp-tagfile/</guid>
      <description>Несмотря на то, что технологии JSP уже почти 20 лет, она по-прежнему не перестаёт удивлять своей продуманностью. В частности, мне очень нравится как реализовано переиспользование компонентов. Если вкратце, то в JSP есть несколько способов.
include Позволяет вставлять в страницу кусок другой страницы. Обычно используется, если нужно переиспользовать блоки без параметров. Например:
&amp;lt;%@ include file=&amp;#34;/WEB-INF/jsp/header.jsp&amp;#34;%&amp;gt; &amp;lt;div class=&amp;#34;container&amp;#34;&amp;gt; &amp;lt;h1&amp;gt;Hello world!&amp;lt;/h1&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;%@ include file=&amp;#34;/WEB-INF/jsp/footer.jsp&amp;#34;%&amp;gt; Тэги Позволяют создавать блоки с параметрами. Сами тэги описываются в java коде.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Переиспользование компонентов в JSP</h1></header>
      		<div class='container entry-content'>
  <p>Несмотря на то, что технологии <a href="https://en.wikipedia.org/wiki/JavaServer_Pages">JSP</a> уже почти 20 лет, она по-прежнему не перестаёт удивлять своей продуманностью. В частности, мне очень нравится как реализовано переиспользование компонентов. Если вкратце, то в JSP есть несколько способов.</p>
<h3 id="include">include</h3>
<p>Позволяет вставлять в страницу кусок другой страницы. Обычно используется, если нужно переиспользовать блоки без параметров. Например:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html"><span style="color:#960050;background-color:#1e0010">&lt;</span>%@ include file=&#34;/WEB-INF/jsp/header.jsp&#34;%&gt;
&lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;container&#34;</span>&gt;
	&lt;<span style="color:#f92672">h1</span>&gt;Hello world!&lt;/<span style="color:#f92672">h1</span>&gt;
&lt;/<span style="color:#f92672">div</span>&gt;
<span style="color:#960050;background-color:#1e0010">&lt;</span>%@ include file=&#34;/WEB-INF/jsp/footer.jsp&#34;%&gt;
</code></pre></div><h3 id="heading">Тэги</h3>
<p>Позволяют создавать блоки с параметрами. Сами тэги описываются в java коде. Например:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html"><span style="color:#960050;background-color:#1e0010">&lt;</span>%@ taglib prefix=&#34;c&#34; uri=&#34;http://java.sun.com/jsp/jstl/core&#34;%&gt;
&lt;<span style="color:#f92672">c:if</span> <span style="color:#a6e22e">test</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;${not empty header }&#34;</span>&gt;
	&lt;<span style="color:#f92672">h1</span>&gt;&lt;<span style="color:#f92672">c:out</span> <span style="color:#a6e22e">value</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;${header}&#34;</span>&gt;&lt;/<span style="color:#f92672">h1</span>&gt;
&lt;/<span style="color:#f92672">c:if</span>&gt;
</code></pre></div><p>При этом тэг объявлен в специальном .tld файле:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-xml" data-lang="xml"><span style="color:#f92672">&lt;tag</span><span style="color:#f92672">&gt;</span>
    <span style="color:#f92672">&lt;description</span><span style="color:#f92672">&gt;</span>
        Simple conditional tag, which evalutes its body if the
        supplied condition is true and optionally exposes a Boolean
        scripting variable representing the evaluation of this condition
    <span style="color:#f92672">&lt;/description&gt;</span>
    <span style="color:#f92672">&lt;name</span><span style="color:#f92672">&gt;</span>if<span style="color:#f92672">&lt;/name&gt;</span>
    <span style="color:#f92672">&lt;tag-class</span><span style="color:#f92672">&gt;</span>org.apache.taglibs.standard.tag.rt.core.IfTag<span style="color:#f92672">&lt;/tag-class&gt;</span>
    ...
 <span style="color:#f92672">&lt;/tag&gt;</span>
</code></pre></div><p>И реализация в Java классе:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">IfTag</span> <span style="color:#66d9ef">extends</span> ConditionalTagSupport <span style="color:#f92672">{</span>
    <span style="color:#a6e22e">@Override</span>
    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">int</span> <span style="color:#a6e22e">doStartTag</span><span style="color:#f92672">(</span><span style="color:#f92672">)</span> <span style="color:#66d9ef">throws</span> JspException <span style="color:#f92672">{</span>

        <span style="color:#75715e">// execute our condition() method once per invocation
</span><span style="color:#75715e"></span>        result <span style="color:#f92672">=</span> condition<span style="color:#f92672">(</span><span style="color:#f92672">)</span><span style="color:#f92672">;</span>

        <span style="color:#75715e">// expose variables if appropriate
</span><span style="color:#75715e"></span>        exposeVariables<span style="color:#f92672">(</span><span style="color:#f92672">)</span><span style="color:#f92672">;</span>

        <span style="color:#75715e">// handle conditional behavior
</span><span style="color:#75715e"></span>        <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>result<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
            <span style="color:#66d9ef">return</span> EVAL_BODY_INCLUDE<span style="color:#f92672">;</span>
        <span style="color:#f92672">}</span> <span style="color:#66d9ef">else</span> <span style="color:#f92672">{</span>
            <span style="color:#66d9ef">return</span> SKIP_BODY<span style="color:#f92672">;</span>
        <span style="color:#f92672">}</span>
    <span style="color:#f92672">}</span>
    <span style="color:#f92672">.</span><span style="color:#f92672">.</span><span style="color:#f92672">.</span>
<span style="color:#f92672">}</span>
</code></pre></div><p>Тэги можно кэшировать и сбрасывать на диск при горячей миграции servlet-контейнера.</p>
<h3 id="-">Тэг-файлы</h3>
<p>То же самое, что и обычные тэги, только описываются в .tag файле, который можно напрямую подключить в JSP страницу. Очень удобно, так как не надо создавать промежуточный .tld файл. Например:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html"><span style="color:#960050;background-color:#1e0010">&lt;</span>%@ tag pageEncoding=&#34;UTF-8&#34; %&gt;
<span style="color:#960050;background-color:#1e0010">&lt;</span>%@ attribute name=&#34;name&#34; required=&#34;true&#34; rtexprvalue=&#34;false&#34; %&gt;
&lt;<span style="color:#f92672">h1</span>&gt;${name}&lt;/<span style="color:#f92672">h1</span>&gt;
</code></pre></div><p>И использование:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html"><span style="color:#960050;background-color:#1e0010">&lt;</span>%@ taglib prefix=&#34;er&#34; tagdir=&#34;/WEB-INF/tags&#34; %&gt;
&lt;<span style="color:#f92672">er:title</span> <span style="color:#a6e22e">name</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Hello world&#34;</span>/&gt;
</code></pre></div><h2 id="heading-1">Переиспользование</h2>
<p>Но это ещё не всё. Самое интересное - это возможность переиспользовать компоненты между разными проектами. Для этого достаточно собрать .jar файл с описанием тэгов. После этого его можно подключать и использовать в разных проектах.</p>
<p>До недавнего времени я успешно собирал различные библиотеки с обычными тэгами. Например, <a href="https://dernasherbrezon.com/posts/jsp-tag-testing/">jtimeago</a> - библиотека для отображения прошедшего времени в человеко-читабельном виде или <a href="https://github.com/dernasherbrezon/spring-security-taglib">spring-security-taglib</a> - библиотека для простой проверки ролей spring-security.</p>
<p>Однако, когда мне понадобилось отобразить спецификацию OpenAPI, обычные тэги уже не подошли. Их не так удобно использовать для отрисовки большого количества html-кода. Я не знал, можно ли переиспользовать продвинутые тэг-файлы, и сделал небольшое исследование. Каково было моё удивление, когда я узнал что это возможно!</p>
<h3 id="--">Переиспользование тэг-файлов</h3>
<p>По сравнению с обычными тэгами, библиотеку необходимо собрать особым образом:</p>
<p><img src="/img/jsp-tagfile/1.png" alt=""></p>
<p>Тэг-файл должен находится в подпапке <code>/META-INF/tag</code> и должен быть описан в .tld файле следующим образом:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-xml" data-lang="xml"><span style="color:#f92672">&lt;tag-file</span><span style="color:#f92672">&gt;</span>
	<span style="color:#f92672">&lt;description</span><span style="color:#f92672">&gt;</span>Tag for rendering OpenAPI specification using bootstrap4<span style="color:#f92672">&lt;/description&gt;</span>
	<span style="color:#f92672">&lt;display-name</span><span style="color:#f92672">&gt;</span>jsp-openapi<span style="color:#f92672">&lt;/display-name&gt;</span>
	<span style="color:#f92672">&lt;name</span><span style="color:#f92672">&gt;</span>bootstrap4-openapi<span style="color:#f92672">&lt;/name&gt;</span>
	<span style="color:#f92672">&lt;path</span><span style="color:#f92672">&gt;</span>/META-INF/tags/bootstrap4-openapi.tag<span style="color:#f92672">&lt;/path&gt;</span>
<span style="color:#f92672">&lt;/tag-file&gt;</span>
</code></pre></div><p>После того, как библиотека собрана, она подключается стандартным способом:</p>
<pre><code>&lt;%@ taglib prefix=&quot;openapi&quot; uri=&quot;https://github.com/dernasherbrezon/jsp-openapi&quot; %&gt;
</code></pre><p>И используется как обычно:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">&lt;<span style="color:#f92672">body</span>&gt;
	&lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;container&#34;</span>&gt;
		&lt;<span style="color:#f92672">openapi:bootstrap4-openapi</span> <span style="color:#a6e22e">openapi</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;${entity}&#34;</span>/&gt;
	&lt;/<span style="color:#f92672">div</span>&gt;
&lt;/<span style="color:#f92672">body</span>&gt;
</code></pre></div><p>Из плюсов стоит отметить, что встроенный редактор .jsp в Eclipse отлично подхватывает такие библиотеки и позволяет делать auto-complete.</p>
<p><img src="/img/jsp-tagfile/2.png" alt=""></p>
<p>Ну и куда-ж без ложки дёгтя:</p>
<ol>
<li>Контейнеры, в частности jetty, до сих пор не могут загружать тэги из файлов в classpath. Можно забыть про <code>Workspace Resolution</code> maven артефактов при разработке.</li>
<li>Встроенный в Eclipse JSP Editor не может найти тэг внутри тэг-файла внутри библиотеки тэгов (тройное комбо!!):</li>
</ol>
<p><img src="/img/jsp-tagfile/3.png" alt=""></p>
<h2 id="heading-2">Послесловие</h2>
<p>Несмотря на своё 20-летие, технология JSP до сих пор позволяет делать 100% необходимых вещей. В ближайшее будущее я планирую написать о том, как я разрабатывал один и тот же компонент на JSP и модном VueJS. Будет интересно.</p>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Разговоры о приёме сигналов со спутников</title>
      <link>https://dernasherbrezon.com/posts/big-beard-theory/</link>
      <pubDate>Thu, 05 Dec 2019 22:31:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/big-beard-theory/</guid>
      <description>Зашёл в гости к подкасту Big Beard Theory поговорить о спутниках и приёме сигналов с них. Огромное спасибо Антону за приглашение и помощь в организации выпуска.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Разговоры о приёме сигналов со спутников</h1></header>
      		<div class='container entry-content'>
  <p>Зашёл в гости к подкасту Big Beard Theory поговорить о спутниках и приёме сигналов с них. Огромное спасибо Антону за приглашение и помощь в организации выпуска.</p>
<iframe src="https://castbox.fm/app/castbox/player/id2408958/id207875336?v=8.13.0&autoplay=0&hide_list=1" frameborder="0" width="100%" height="250"></iframe>
</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Работа с Json в 2019 году</title>
      <link>https://dernasherbrezon.com/posts/json-in-2019/</link>
      <pubDate>Wed, 04 Dec 2019 22:29:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/json-in-2019/</guid>
      <description>Введение В работе над своей небольшой библиотечкой jsp-openapi мне понадобилось сериализировать Java объекты в JSON. Я, не долго думая, подключил свою любимую библиотеку gson и пошёл дальше. Проект успешно проходил тест и собирался локально. Следующим моим шагом, как обычно, должна была стать сборка в travis-ci и подключение в sonarcloud.
Но что-то пошло не так&amp;hellip;
Вот ключевое место лога:
Caused by: java.lang.NoClassDefFoundError: java/sql/Time at com.google.gson.Gson.&amp;amp;lt;init&amp;amp;gt;(Gson.java:265) at com.google.gson.GsonBuilder.create(GsonBuilder.java:597) Оказывается, gson зависит от пакета java.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Работа с Json в 2019 году</h1></header>
      		<div class='container entry-content'>
  <h2 id="heading">Введение</h2>
<p>В работе над своей небольшой библиотечкой <a href="https://github.com/dernasherbrezon/jsp-openapi">jsp-openapi</a> мне понадобилось сериализировать Java объекты в JSON. Я, не долго думая, подключил свою любимую библиотеку gson и пошёл дальше. Проект успешно проходил тест и собирался локально. Следующим моим шагом, как обычно, должна была стать сборка в travis-ci и подключение в sonarcloud.</p>
<p>Но что-то <a href="https://travis-ci.org/dernasherbrezon/jsp-openapi/builds/620333411">пошло не так</a>&hellip;</p>
<p>Вот ключевое место лога:</p>
<pre><code>Caused by: java.lang.NoClassDefFoundError: java/sql/Time
	at com.google.gson.Gson.&amp;lt;init&amp;gt;(Gson.java:265)
	at com.google.gson.GsonBuilder.create(GsonBuilder.java:597)
</code></pre><p>Оказывается, gson <a href="https://github.com/google/gson/blob/22877d67ba44299e8d77eb841ab20c2087d46752/gson/src/main/java/module-info.java">зависит от пакета java.sql</a>. При сборке jdk9+, библиотека должна создавать файл module-info.java, в котором необходимо описывать эту зависимость.</p>
<p>В принципе, это не страшно. Я даже уже начал идти этим путем: создал module-info.java, начал разбираться как собирать проект на openjdk11 и oraclejdk8. Но тут меня осенило. Я же разрабатываю библиотеку тэгов. Для JSP. В 2019 году. Какая вообще Java 11? В лучшем случае её будут использовать в Java 8. И ещё. Библиотека рендеринга html ну совсем не может зависеть от java.sql. Тем более, что я нигде не использую эту зависимость.</p>
<p>Немного взгрустнув, я вздохнул и пошёл сложной дорогой: выбор другой JSON библиотеки.</p>
<h2 id="-">Выбор альтернатив</h2>
<p>Самое быстрое гугление выдает 3 альтернативы:</p>
<ul>
<li>Reference implementation <a href="https://github.com/stleary/JSON-java">json-java</a>.</li>
<li><a href="https://github.com/FasterXML/jackson">Jackson</a></li>
<li><a href="https://javaee.github.io/jsonp/">json-p</a></li>
</ul>
<p>Но прежде, чем выбирать какую-то одну, необходимо определиться с требованиями:</p>
<ul>
<li>минимальное количество зависимостей, но без фанатизма. Код всё равно будет выполняться на сервере</li>
<li>возможность сериализировать POJO.</li>
<li>возможность отбрасывать null поля. Из-за того, что я не контролирую <code>io.swagger.v3.oas.models.OpenAPI</code>, то я не могу вставить в него аннотации и прочие служебные конструкции. Сериализация null полей должна быть сконфигурирована извне</li>
<li>возможность pretty print. Получившийся json будет рендериться с помощью тэгов &lt;pre&gt;, поэтому он должен выглядеть хорошо</li>
</ul>
<h3 id="json-java">json-java</h3>
<p>Достаточно простой проект, мало кода, а значит быстро и ничего лишнего. Однако, сериализацию объектов через reflection не поддерживает и её придётся писать самому каждый раз. Не подходит.</p>
<h3 id="jackson">Jackson</h3>
<p>Нет, Вы только посмотрите на их readme. Если, с помощью Jackson нельзя собрать космический корабль, то я буду крайне удивлён.</p>
<p><img src="/img/json-in-2019/1.png" alt=""></p>
<p>После 15 минут вдумчивого анализа оказалось, что для минимальной работы требуется 3 библиотеки:</p>
<ul>
<li>jackson-core</li>
<li>jackson-annotations</li>
<li>jackson-databind</li>
</ul>
<p>Скрипя сердцем, отложил, как формально подходящую под требования.</p>
<h3 id="jsonp">jsonp</h3>
<p>Чтобы начать работать с этой библиотекой, нужно добавить следующие зависимости:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-xml" data-lang="xml"><span style="color:#f92672">&lt;dependency</span><span style="color:#f92672">&gt;</span>
    <span style="color:#f92672">&lt;groupId</span><span style="color:#f92672">&gt;</span>javax.json<span style="color:#f92672">&lt;/groupId&gt;</span>
    <span style="color:#f92672">&lt;artifactId</span><span style="color:#f92672">&gt;</span>javax.json-api<span style="color:#f92672">&lt;/artifactId&gt;</span>
    <span style="color:#f92672">&lt;version</span><span style="color:#f92672">&gt;</span>1.1<span style="color:#f92672">&lt;/version&gt;</span>
<span style="color:#f92672">&lt;/dependency&gt;</span>

<span style="color:#f92672">&lt;dependency</span><span style="color:#f92672">&gt;</span>
    <span style="color:#f92672">&lt;groupId</span><span style="color:#f92672">&gt;</span>org.glassfish<span style="color:#f92672">&lt;/groupId&gt;</span>
    <span style="color:#f92672">&lt;artifactId</span><span style="color:#f92672">&gt;</span>javax.json<span style="color:#f92672">&lt;/artifactId&gt;</span>
    <span style="color:#f92672">&lt;version</span><span style="color:#f92672">&gt;</span>1.1<span style="color:#f92672">&lt;/version&gt;</span>
<span style="color:#f92672">&lt;/dependency&gt;</span>
</code></pre></div><p>Ох, только не glassfish. Почему выбор библиотеки может зависить от личных предпочтений? Тем не менее, прочитав случайную <a href="https://blog.overops.com/the-ultimate-json-library-json-simple-vs-gson-vs-jackson-vs-json/">статью</a> о сравнении сферических коней, решил не брать jsonp по более объективным причинам: низкая производительность.</p>
<h2 id="heading-1">Вывод</h2>
<p>Jackson, конечно, уступает в удобстве работы gson. Но за неимением лучшего пришлось выбрать его:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">JsonFactory jsonFactory <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> JsonFactory<span style="color:#f92672">(</span><span style="color:#f92672">)</span><span style="color:#f92672">;</span>
jsonFactory<span style="color:#f92672">.</span><span style="color:#a6e22e">configure</span><span style="color:#f92672">(</span>JsonGenerator<span style="color:#f92672">.</span><span style="color:#a6e22e">Feature</span><span style="color:#f92672">.</span><span style="color:#a6e22e">AUTO_CLOSE_TARGET</span><span style="color:#f92672">,</span> <span style="color:#66d9ef">false</span><span style="color:#f92672">)</span><span style="color:#f92672">;</span>
ObjectMapper mapper <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> ObjectMapper<span style="color:#f92672">(</span>jsonFactory<span style="color:#f92672">)</span><span style="color:#f92672">;</span>
mapper<span style="color:#f92672">.</span><span style="color:#a6e22e">enable</span><span style="color:#f92672">(</span>SerializationFeature<span style="color:#f92672">.</span><span style="color:#a6e22e">INDENT_OUTPUT</span><span style="color:#f92672">)</span><span style="color:#f92672">;</span>
mapper<span style="color:#f92672">.</span><span style="color:#a6e22e">setSerializationInclusion</span><span style="color:#f92672">(</span>Include<span style="color:#f92672">.</span><span style="color:#a6e22e">NON_NULL</span><span style="color:#f92672">)</span><span style="color:#f92672">;</span>
mapper<span style="color:#f92672">.</span><span style="color:#a6e22e">writeValue</span><span style="color:#f92672">(</span>w<span style="color:#f92672">,</span> value<span style="color:#f92672">.</span><span style="color:#a6e22e">getProperties</span><span style="color:#f92672">(</span><span style="color:#f92672">)</span><span style="color:#f92672">)</span><span style="color:#f92672">;</span>
</code></pre></div><p>На этом я не остановился и <a href="https://github.com/google/gson/issues/1629">выразил свою позицию</a> разработчикам gson. Шансы, что эту задачу реализуют, крайне малы, так как это значит отказываться от обратной совместимости с предыдущими версиями. И на такое разработчики вряд ли пойдут.</p>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Сигналы со спутников</title>
      <link>https://dernasherbrezon.com/posts/satellite-signal/</link>
      <pubDate>Thu, 28 Nov 2019 15:51:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/satellite-signal/</guid>
      <description>До того, как заняться приёмом сигналов со спутников, я ничего не знал о радио сигналах. Тем более о радио сигналах со спутников. В моём представлении это было: навести антенну на спутник и выставить частоту приёма.
На самом деле частота сигнала меняется и на спектограмме выглядит как-то вот так:
Если схематично представить, то принимаемый сигнал будет выглядеть вот так:
С этим сигналом есть 2 проблемы (на самом деле больше):
 Эффект Доплера.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Сигналы со спутников</h1></header>
      		<div class='container entry-content'>
  <p>До того, как заняться приёмом сигналов со спутников, я ничего не знал о радио сигналах. Тем более о радио сигналах со спутников. В моём представлении это было: навести антенну на спутник и выставить частоту приёма.</p>
<p>На самом деле частота сигнала меняется и на спектограмме выглядит как-то вот так:</p>
<p><img src="/img/satellite-signal/1.png" alt=""></p>
<p>Если схематично представить, то принимаемый сигнал будет выглядеть вот так:</p>
<p><img src="/img/satellite-signal/2.jpg" alt=""></p>
<p>С этим сигналом есть 2 проблемы (на самом деле больше):</p>
<ol>
<li><a href="https://ru.wikipedia.org/wiki/%D0%AD%D1%84%D1%84%D0%B5%D0%BA%D1%82_%D0%94%D0%BE%D0%BF%D0%BB%D0%B5%D1%80%D0%B0">Эффект Доплера</a>. Спутник движется очень быстро, поэтому частота будет смещаться. При этом смещение зависит от расстояния до спутника.</li>
<li>Постоянная составляющая сигнала (DC spike). Появляется при конвертации входящей частоты в рабочую. Обычно присутствует в супергетеродинной архитектуре радиоприёмника.</li>
</ol>
<p>Каждый из этих эффектов можно компенсировать:</p>
<ol>
<li>Зная положение спутника и станции приёма сигнала, можно очень точно рассчитать расстояние до спутника и смещение частоты в момент пролёта. Если сдвигать принимаемую частоту на это смещение, то можно выровнять сигнал и компенсировать эффект Доплера.</li>
<li>С DC spike можно бороться двумя способами: добавить фильтр, который будет сдвигать сигнал так, чтобы средняя мощность была равна 0, либо принимать на другой частоте, а сигнал смещать и отфильтровывать от DC spike.</li>
</ol>
<p>Я выбрал второй способ фильтрации постоянной составляющей, поэтому формула вычисления смещения для сигнала следующая:</p>
<pre><code>long startFrequency = частота сигнала в начале приёма
long endFrequency = частота сигнала по окончанию приёма
long satelliteFrequency = настоящая частота передачи сигнала спутником
long maxOffset = Math.max(Math.abs(satelliteFrequency - startFrequency), Math.abs(satelliteFrequency - endFrequency));
long bandwidth = ширина сигнала спутника // обычно задаётся производителем

long offset = maxOffset + bandwidth / 2;
</code></pre><p>После того, как смещение посчитано, нужно настроить приёмник на эту частоту + смещение. А при обработке сигнала, необходимо сместить сигнал назад на это же смещение. Это можно сделать, например, с помощью <a href="http://blog.sdr.hu/grblocks/xlating-fir.html">Frequency Xlating FIR Filter</a>.</p>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Создание VueJS компонента</title>
      <link>https://dernasherbrezon.com/posts/creating-vuejs-component/</link>
      <pubDate>Sat, 23 Nov 2019 17:33:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/creating-vuejs-component/</guid>
      <description>Введение Мне очень нравится идея маленьких переиспользуемых компонент. Если передо мной встаёт задача добавить какой-нибудь функционал, я прежде всего трачу некоторое время на поиск уже существующего решения. Так и в этот раз. Немногие знают, что r2cloud - это полноценный REST сервер. А значит им можно управлять программно. Сейчас существует только один клиент для него - r2cloud-ui. Это приложение VueJS, которое предоставляет UI для управления. Однако, вся мощь REST сервисов заключается в том, что с ними можно взаимодействовать программно с помощью различных языков программирования.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Создание VueJS компонента</h1></header>
      		<div class='container entry-content'>
  <h2 id="heading">Введение</h2>
<p>Мне очень нравится идея маленьких переиспользуемых компонент. Если передо мной встаёт задача добавить какой-нибудь функционал, я прежде всего трачу некоторое время на поиск уже существующего решения. Так и в этот раз. Немногие знают, что <a href="http://github.com/dernasherbrezon/r2cloud">r2cloud</a> - это полноценный REST сервер. А значит им можно управлять программно. Сейчас существует только один клиент для него - <a href="https://github.com/dernasherbrezon/r2cloud-ui">r2cloud-ui</a>. Это приложение VueJS, которое предоставляет UI для управления. Однако, вся мощь REST сервисов заключается в том, что с ними можно взаимодействовать программно с помощью различных языков программирования. Это позволяет построить достаточно интересные интеграции и более сложные системы. Чтобы рассказать всему миру о том, как можно управлять r2cloud, я решил создать API документацию.</p>
<p>Самый простой создания документации - это записать все REST методы в html файл и добавить на сайт. Однако, за последние десятки лет, инженерная мысль шагнула дальше. Если описать REST API с помощью специальной схемы <a href="https://swagger.io/docs/specification/about">OpenAPI</a>, то на её основе можно:</p>
<ol>
<li>Сгенерировать документацию</li>
<li>Сгенерировать клиентскую библиотеку под различные языки программирования</li>
<li>Сгенерировать заглушку для серверного кода</li>
</ol>
<p>Второй и третий пункт у меня уже есть, а вот первый пункт мне как раз и нужен. Таким образом передо мной встала задача отрисовать спецификацию OpenAPI в VueJS.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">{
	<span style="color:#f92672">&#34;/health&#34;</span>: {
		<span style="color:#f92672">&#34;get&#34;</span>: {
			<span style="color:#f92672">&#34;tags&#34;</span>: [
				<span style="color:#e6db74">&#34;System&#34;</span>
			],
			<span style="color:#f92672">&#34;summary&#34;</span>: <span style="color:#e6db74">&#34;Check if r2cloud is up&#34;</span>,
			<span style="color:#f92672">&#34;responses&#34;</span>: {
				<span style="color:#f92672">&#34;200&#34;</span>: {
					<span style="color:#f92672">&#34;description&#34;</span>: <span style="color:#e6db74">&#34;If r2cloud is up&#34;</span>
				}
			}
		}
	}
}
</code></pre></div><p>Покопавшись немного в интернете я нашёл следующие наиболее близкие решения:</p>
<ul>
<li><strong><a href="https://www.npmjs.com/package/swagger-ui">swagger-ui</a></strong>. Стандартная библиотека, позволяющая отрисовать спецификацию OpenAPI с помощью собственных стилей и Javascript.</li>
<li><strong><a href="https://www.npmjs.com/package/@koumoul/vue-openapi">vue-openapi</a></strong>. Позволяет отрисовать спецификацию OpenAPI с помощью библиотеки стилей <a href="https://vuematerial.io">vue-material</a>.</li>
</ul>
<p>В обоих случаях используются собственные стили компонентов. Эти стили не сочетаются с <a href="https://getbootstrap.com">bootstrap</a>, поэтому я решил написать небольшой компонент - <strong><a href="https://www.npmjs.com/package/vue-openapi-bootstrap">vue-openapi-bootstrap</a></strong>. Он позволяет:</p>
<ul>
<li>отрисовывать спецификацию OpenAPI 3.x</li>
<li>UI максимально близко повторяет стандартный <a href="https://petstore.swagger.io/#/">swagger-ui</a></li>
<li>использует нативные компоненты из bootstrap 4.x и динамические компоненты из bootstrap-vue</li>
<li>отображает запросы и ответы API в формате json</li>
<li>улучшенное отображение доменных моделей</li>
</ul>
<h2 id="-">Создание компонента</h2>
<p>Создание однофайлового компонента очень хорошо описано в <a href="https://ru.vuejs.org/v2/cookbook/packaging-sfc-for-npm.html">официальной документации</a>. В этой статье предлагается делать сборку компонента с помощью rollup. Насколько я понял, это ещё один способ сборки javascript кода, более легковесный, чем webpack. Из недостатков следует отметить отсутствие dev сервера и горячей перезагрузки модулей.</p>
<p>После того, как написан весь boilerplate код и конфигурация сборки, написание компонента не представляет сложности. В случае моего компонента, мне удалось найти практически все стандартные компоненты bootstrap, которые позволили отобразить UI, похожий на swagger-ui.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">&lt;<span style="color:#f92672">b-card-body</span>&gt;
  &lt;<span style="color:#f92672">p</span> <span style="color:#a6e22e">v-if</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;method.deprecated&#34;</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;text-muted&#34;</span>&gt;Warning: Deprecated&lt;/<span style="color:#f92672">p</span>&gt;
  &lt;<span style="color:#f92672">p</span> <span style="color:#a6e22e">v-if</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;method.description&#34;</span>&gt;{{ method.description }}&lt;/<span style="color:#f92672">p</span>&gt;
  &lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">v-if</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;method.parameters &amp;&amp; method.parameters.length &gt; 0&#34;</span>&gt;
    &lt;<span style="color:#f92672">h4</span>&gt;Parameters&lt;/<span style="color:#f92672">h4</span>&gt;
</code></pre></div><p>Почему я выбрал UI совместимый со swagger-ui? Во-первых, у меня нет мнения о том, как должен выглядить правильный UX для описания документации к API. А во-вторых, swagger-ui - это наиболее распространённый компонент для отображения OpenAPI документации.</p>
<p><img src="/img/creating-vuejs-component/1.png" alt=""></p>
<p>Наибольшая сложность была с описанием того, что есть в стандарте OpenAPI 3.x. Дело в том, что стандарт позволяет достаточно гибко описывать различные REST API. А это значит, что он достаточно обширен и многословен. Чтобы всё это описать, я взял стандартный openapi.json из <a href="https://petstore.swagger.io/#/">petstore</a> и отрисовал всевозможные варианты конфигурации.</p>
<h2 id="--1">Финальный результат</h2>
<p>Готовый компонент можно подключить следующим образом:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">npm install vue-openapi-bootstrap
</code></pre></div><p>Использовать на странице:</p>
<pre><code>&lt;template&gt;
  &lt;vue-openapi-bootstrap :openapi=&quot;openapi&quot;&gt;&lt;/vue-openapi-bootstrap&gt;
&lt;/template&gt;

&lt;script&gt;
import vueOpenapiBootstrap from 'vue-openapi-bootstrap/src/vue-openapi-bootstrap'
export default {
  components: {vueOpenapiBootstrap},
  data () {
    return {
      openapi: {}
    }
  }
}
&lt;/script&gt;
</code></pre><p>В результате получаются такие страницы:</p>
<p><img src="/img/creating-vuejs-component/2.png" alt=""></p>
<p>А вот так выглядит отображение документации в r2cloud-ui:</p>
<p><img src="/img/creating-vuejs-component/3.png" alt=""></p>
<p>Сразу после публикации в <a href="https://www.npmjs.com/package/vue-openapi-bootstrap">npmjs.com</a> в первые несколько дней, мой компонент был скачан 66 раз. Это лишний раз подтвердило мою мысль о том, что я на правильном пути и небольшой компонент востребован сообществом.</p>
<p><img src="/img/creating-vuejs-component/4.png" alt=""></p>
<h2 id="heading-1">Выводы</h2>
<ul>
<li>VueJS продвигает создание небольших переиспользуемых компонент. Это очень мощная и правильная идея, которая позволяет собирать достаточно большие проекты из маленьких кусочков. Правильная реализация этой идеи делает создание компонентов действительно простым делом.</li>
<li>npmjs продвигает переиспользование кода. Как ещё объяснить те 66 скачиваний моего компонента, если я не давал рекламы и никому о нём не рассказывал?</li>
<li>Компонент есть куда улучшать: можно добавить поддержку отрисовки описаний с помощью markdown, задание доменной модели с помощью xml.</li>
</ul>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Тестирование maven плагинов</title>
      <link>https://dernasherbrezon.com/posts/testing-maven-plugins/</link>
      <pubDate>Fri, 15 Nov 2019 19:49:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/testing-maven-plugins/</guid>
      <description>Часть моей хобби инфраструктуры завязана на .deb пакеты и apt репозитории. Чтобы со всем этим работать из java, я написал несколько maven плагинов и выложил в открытый доступ. Один из этих плагинов - deb-maven-plugin. Он позволяет собирать из java проекта .deb пакет. Этот формат пакетов имеет достаточно сложную структуру и большое историческое наследие. Я очень тщательно разобрался с тем, как собирать такой пакет для java проектов и создал плагин, который сильно облегчает сборку.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Тестирование maven плагинов</h1></header>
      		<div class='container entry-content'>
  <p>Часть моей хобби инфраструктуры завязана на .deb пакеты и apt репозитории. Чтобы со всем этим работать из java, я написал несколько maven плагинов и выложил в открытый доступ. Один из этих плагинов - <a href="https://github.com/dernasherbrezon/deb-maven-plugin">deb-maven-plugin</a>. Он позволяет собирать из java проекта .deb пакет. <a href="https://ru.wikipedia.org/wiki/Deb_(%D1%84%D0%BE%D1%80%D0%BC%D0%B0%D1%82_%D1%84%D0%B0%D0%B9%D0%BB%D0%BE%D0%B2)">Этот формат пакетов</a> имеет достаточно сложную структуру и большое историческое наследие. Я очень тщательно разобрался с тем, как собирать такой пакет для java проектов и создал плагин, который сильно облегчает сборку. Со временем ко мне приходили различные разработчики и добавляли в этот плагин нужную им функциональность. Мы вместе исправляли ошибки. Всю идиллию портило только одно - полное отсутствие тестов. Каждое изменение, которое мы добавляли могло потенциально сломать уже существующие проекты.</p>
<p>Однажды я решил проверить собранный пакет с помощью утилиты <a href="https://lintian.debian.org">lintian</a> и обнаружил множество критичных ошибок. Это сподвигло меня собраться с мыслями и всё-таки разобраться, как тестируются maven плагины. И поправить ошибки, о которых предупреждал lintian.</p>
<h2 id="heading">Требования</h2>
<p>Прежде чем начать писать тесты, необходимо определиться какие: интеграционные или юнит. Юнит-тесты для maven плагинов достаточно бесполезны. Дело в том, что maven плагин - это один большой класс, реализующий AbstractMojo. Иногда полезно иметь несколько вспомогательных классов, чтобы декомпозиторовать задачу. Но в большинстве случаев - это один большой класс, который нужно тестировать интеграционно.</p>
<p>Ещё одну вещь, которую юнит тесты не смогут проверить - то, как конфигурация пробрасывается внутрь плагина. До версии 3.0 каноничным способом указания конфигурации был javadoc определённого формата. Это крайне плохой и неудобный способ задания внешних параметров.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#75715e">/**
</span><span style="color:#75715e"> * @parameter default-value=&#34;${project.basedir}/src/main/deb&#34;;
</span><span style="color:#75715e"> */</span>
<span style="color:#66d9ef">private</span> String debBaseDir<span style="color:#f92672">;</span>
</code></pre></div><p>Соответственно необходимо протестировать правильность написания этого javadoc. Без полноценного запуска PlexusContainer это достаточно сложно. PlexusContainer - это DI контейнер, который чем-то похож на <a href="https://spring.io">Spring</a> и <a href="https://dagger.dev">Dagger</a>. Однако, из-за своей малой распространённости он имеет крайне скудную документацию. Определить какие компоненты доступны в контейнере можно только методом проб и ошибок. Основные настройки плагина можно получать из MavenProject:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#75715e">/**
</span><span style="color:#75715e"> * The maven project.
</span><span style="color:#75715e"> * 
</span><span style="color:#75715e"> * @parameter property=&#34;project&#34;
</span><span style="color:#75715e"> * @readonly
</span><span style="color:#75715e"> */</span>
<span style="color:#66d9ef">private</span> MavenProject project<span style="color:#f92672">;</span>
</code></pre></div><p>Такую конфигурацию можно проверить только интеграционными тестами. Нужно честно запустить PlexusContainer и загрузить тестовый pom.xml.</p>
<p>Если начать искать в сети &ldquo;тестирование maven плагинов&rdquo;, то можно найти <a href="https://maven.apache.org/plugin-developers/plugin-testing.html">официальную документацию</a>. В ней как раз описаны два способа:</p>
<ol>
<li>Интеграционные тесты с помощью плагина maven-plugin-testing-harness</li>
<li>Функциональные тесты с помощью maven-verifier</li>
</ol>
<p>Мне идеально подходил первый способ. Но для полноты картины я решил разобраться в чём же заключается второй способ. По своей сути maven-verifier ищет инсталляцию maven в системном свойстве MVN_HOME и запускает в отдельном процессе <code>mvn &lt;some plugin&gt;</code>. После этого проверяется, что процесс завершился без ошибки, что нет логов с ошибками и тому подобное. Этот способ идеально подходит для тестирования плагинов с разными версиями maven. В моём же случае хотелось бы запускать maven в одной и той же JVM, что и юнит тесты. Это быстро и позволяет оценить покрытие кода тестами.</p>
<h2 id="-">Интеграционные тесты</h2>
<p>Свои тесты я предполагал сделать следующим образом:</p>
<ul>
<li>создать конфигурацию проекта success, в которой использованы всевозможные настройки плагина</li>
<li>написать тест для конфигурации success</li>
<li>для того, чтобы протестировать опции по-умолчанию или граничные значения, необходимо взять конфигурацию success и изменить (перезаписать) параметры</li>
</ul>
<p>В результате у меня получился следующий тест:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">
<span style="color:#a6e22e">@Rule</span>
<span style="color:#66d9ef">public</span> MojoRule mrule <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> MojoRule<span style="color:#f92672">(</span><span style="color:#f92672">)</span><span style="color:#f92672">;</span>

<span style="color:#a6e22e">@Rule</span>
<span style="color:#66d9ef">public</span> TemporaryFolder folder <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> TemporaryFolder<span style="color:#f92672">(</span><span style="color:#f92672">)</span><span style="color:#f92672">;</span>

<span style="color:#a6e22e">@Test</span>
<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">testSuccess</span><span style="color:#f92672">(</span><span style="color:#f92672">)</span> <span style="color:#66d9ef">throws</span> Exception <span style="color:#f92672">{</span>
	File basedir <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> File<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;src/test/resources/success&#34;</span><span style="color:#f92672">)</span><span style="color:#f92672">;</span>
	MavenProject mavenProject <span style="color:#f92672">=</span> mrule<span style="color:#f92672">.</span><span style="color:#a6e22e">readMavenProject</span><span style="color:#f92672">(</span>basedir<span style="color:#f92672">)</span><span style="color:#f92672">;</span> <span style="color:#75715e">// загрузка конфигурации проекта из pom.xml
</span><span style="color:#75715e"></span>	mavenProject<span style="color:#f92672">.</span><span style="color:#a6e22e">getBuild</span><span style="color:#f92672">(</span><span style="color:#f92672">)</span><span style="color:#f92672">.</span><span style="color:#a6e22e">setDirectory</span><span style="color:#f92672">(</span>folder<span style="color:#f92672">.</span><span style="color:#a6e22e">getRoot</span><span style="color:#f92672">(</span><span style="color:#f92672">)</span><span style="color:#f92672">.</span><span style="color:#a6e22e">getAbsolutePath</span><span style="color:#f92672">(</span><span style="color:#f92672">)</span><span style="color:#f92672">)</span><span style="color:#f92672">;</span>
	Mojo mm <span style="color:#f92672">=</span> mrule<span style="color:#f92672">.</span><span style="color:#a6e22e">lookupConfiguredMojo</span><span style="color:#f92672">(</span>mavenProject<span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;package&#34;</span><span style="color:#f92672">)</span><span style="color:#f92672">;</span> <span style="color:#75715e">// загрузка и конфигурирования Mojo для тестирования
</span><span style="color:#75715e"></span>	mm<span style="color:#f92672">.</span><span style="color:#a6e22e">execute</span><span style="color:#f92672">(</span><span style="color:#f92672">)</span><span style="color:#f92672">;</span>
	assertEquals<span style="color:#f92672">(</span>1<span style="color:#f92672">,</span> mavenProject<span style="color:#f92672">.</span><span style="color:#a6e22e">getAttachedArtifacts</span><span style="color:#f92672">(</span><span style="color:#f92672">)</span><span style="color:#f92672">.</span><span style="color:#a6e22e">size</span><span style="color:#f92672">(</span><span style="color:#f92672">)</span><span style="color:#f92672">)</span><span style="color:#f92672">;</span> <span style="color:#75715e">// получение .deb пакета
</span><span style="color:#75715e"></span>	Artifact artifact <span style="color:#f92672">=</span> mavenProject<span style="color:#f92672">.</span><span style="color:#a6e22e">getAttachedArtifacts</span><span style="color:#f92672">(</span><span style="color:#f92672">)</span><span style="color:#f92672">.</span><span style="color:#a6e22e">get</span><span style="color:#f92672">(</span>0<span style="color:#f92672">)</span><span style="color:#f92672">;</span> 
	assertDeb<span style="color:#f92672">(</span><span style="color:#66d9ef">new</span> File<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;src/test/resources/expected/success&#34;</span><span style="color:#f92672">)</span><span style="color:#f92672">,</span> artifact<span style="color:#f92672">.</span><span style="color:#a6e22e">getFile</span><span style="color:#f92672">(</span><span style="color:#f92672">)</span><span style="color:#f92672">,</span> artifact<span style="color:#f92672">.</span><span style="color:#a6e22e">getClassifier</span><span style="color:#f92672">(</span><span style="color:#f92672">)</span><span style="color:#f92672">)</span><span style="color:#f92672">;</span> <span style="color:#75715e">// сравнение директории с ожидаемыми файлами и содержимого .deb пакета
</span><span style="color:#75715e"></span><span style="color:#f92672">}</span>
</code></pre></div><ul>
<li>MojoRule - это вспомогательный класс для удобной работы с PlexusContainer. В нём есть множество удобных методов для загрузки плагина из pom.xml и инициализации вспомогательных классов.</li>
<li>TemporaryFolder - это правило для junit, которое создаёт временную папку вначале теста и удаляет её в конце.</li>
</ul>
<p>В таком тесте можно загружать гарантированно правильную конфигурацию проекта, менять настройки MavenProject и проверять всевозможные граничные значения.</p>
<p>Самым сложным и одновременно долгим и неприятным оказалась реализация метода <code>assertDeb</code>. По сути этот метод должен рекурсивно сравнивать директории в ожидаемой папке и внутренности .deb пакета.</p>
<p>После того, как я написал этот тест, обнаружилось множество ошибок в тестируемом коде. В частности структура .tar архива, который входит в .deb пакет, создавалась неправильно. По стандарту все вложенные директории должны присутствовать в .tar файле. Например, для файла usr/share/doc/copyright должны быть следующие записи в .tar:</p>
<pre><code>usr/
usr/share/
usr/share/doc/
usr/share/doc/copyright
</code></pre><p>Я же ошибочно создавал только:</p>
<pre><code>usr/share/doc/copyright
</code></pre><h2 id="heading-1">Выводы</h2>
<p>Писать тесты для maven плагинов можно. Однако, это требует достаточно высокий порог вхождения и глубокого понимания того, как работает maven. Нужно быть как минимум готовым к тому, что придётся заглянуть в исходники. Результат же стоит того. Автоматические тесты позволяют спокойно редактировать код плагина без опаски сломать обратную совместимость с сотнями других проектов, которые его используют. Причём редактирование включает в себя улучшение производительности. А представьте, что 15% улучшение сможет улучшить тысячи сборок сотен проектов на 15%!</p>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>В поисках хорошего кода</title>
      <link>https://dernasherbrezon.com/posts/code-smells/</link>
      <pubDate>Thu, 14 Nov 2019 18:22:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/code-smells/</guid>
      <description>В январе 2019 года я поставил себе задачу добавить поддержку спутников из gr-satellites в свой проект r2cloud. На тот момент их было около 70. Это достаточно большое количество, добавление которых, по моим оценкам, может занять до конца года. Однако, как показал опыт, я справился где-то за месяц. Некоторые спутники уже сгорели в атмосфере, поэтому их нет смысла добавлять. Некоторые спутники не предоставляют формат своей телеметрии, поэтому полученные биты данных, так и остаются битами данных.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>В поисках хорошего кода</h1></header>
      		<div class='container entry-content'>
  <p>В январе 2019 года я поставил себе задачу добавить поддержку спутников из <a href="https://github.com/daniestevez/gr-satellites">gr-satellites</a> в свой проект <a href="https://github.com/dernasherbrezon/r2cloud">r2cloud</a>. На тот момент их было около 70. Это достаточно большое количество, добавление которых, по моим оценкам, может занять до конца года. Однако, как показал опыт, я справился где-то за месяц. Некоторые спутники уже сгорели в атмосфере, поэтому их нет смысла добавлять. Некоторые спутники не предоставляют формат своей телеметрии, поэтому полученные биты данных, так и остаются битами данных. Их я тоже не стал добавлять, так как лучше уж сделать поддержку спутников с открытым форматом данных. В итоге я добавил поддержку 23 спутников.</p>
<p>Здесь важно отметить, что разные спутники передают разную информацию. Некоторые передают <a href="https://github.com/dernasherbrezon/jradio/blob/master/src/main/java/ru/r2cloud/jradio/astrocast/NMEA0183.java">небольшое количество данных</a>, некоторые десятки и <a href="https://github.com/dernasherbrezon/jradio/blob/master/src/main/java/ru/r2cloud/jradio/eseo/Type1.java">сотни полей</a>.</p>
<p>Сделав задачу, я обнаружил, что названия полей зачастую не согласуются с правилами java. Большинство полей я просто взял из оригинальных спецификаций, которые ничего не знают про Java. Из-за этого <a href="https://sonarcloud.io/project/activity?custom_metrics=code_smells&amp;graph=custom&amp;id=ru.r2cloud%3Ajradio">sonarcloud</a> начал показывать более 6000 code smells (sic!).</p>
<p>Я никогда не встречал проекты с таким большим количеством плохо пахнущего кода. По оценкам sonarcloud, на исправление этого мне бы потребовалось около 40 дней. Сам по себе такой код не является ошибочным. Просто его неудобно читать, поддерживать и он плохо согласуется с остальным кодом на Java. С другой стороны, 40 дней подряд сидеть и делать код ещё чуть-чуть более лучшим, мне тоже не хотелось. Всё-таки это хобби-проект, а не каторга. Поэтому, чтобы хоть как-то исправить ситуацию, я решил каждый день делать золотой commit. Золотой commit - это исправление плохо пахнущего кода в отдельно взятом файле.</p>
<p><img src="/img/code-smells/sonarcloud.png" alt=""></p>
<p>С февраля по ноябрь я исправил почти все 6000. При этом моя гит история стала выглядеть следующим образом:</p>
<p><img src="/img/code-smells/github.png" alt=""></p>
<p>В итоге, сейчас в проекте около 150 случаев дурно пахнущего кода. Большинство из них - это дубликация кода. В настройках по умолчанию sonarcloud создаёт новую проблему, если есть дублирующий код. Я не большой сторонник полностью переиспользуемого кода. В каких то случаях - это хорошо. Например, при описании бизнес-логики. В других случаях - это может сильно мешать читаемости и делает код сильно связанным. Например, при описании структур данных.</p>
<p>Ещё одна достаточно частая проблема, на которую sonarcloud ругается - это <a href="https://sonarcloud.io/organizations/dernasherbrezon-github/rules?open=squid%3AS3776&amp;rule_key=squid%3AS3776">сложность кода</a>. К сожалению, да. Мой проект действительно сложный, тут сложно что-либо поделать.</p>
<p><img src="/img/code-smells/complex.png" alt=""></p>
<h2 id="heading">Выводы</h2>
<p>Какие можно сделать выводы из всего этого? Терпенье и труд всё перетрут.</p>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Я слежу за спутниками</title>
      <link>https://dernasherbrezon.com/posts/satellite-telemetry/</link>
      <pubDate>Thu, 24 Oct 2019 21:40:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/satellite-telemetry/</guid>
      <description>Вступление Иногда в разговоре с разными людьми речь заходит о моём хобби. В таком случае я говорю, что слежу за спутниками. Для большинства это объяснение не слишком-то информативно, поэтому оно идеально подходит для того, чтобы продолжить разговор и одновременно возбудить любопытство. Однако, не все могут лично со мной пообщаться, поэтому в этом посте я хотел бы рассказать о том, что такое - следить за спутниками.
Телеметрия Первое, что приходит людям на ум, когда говоришь &amp;ldquo;следить за спутниками&amp;rdquo; - это шпионские страсти.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Я слежу за спутниками</h1></header>
      		<div class='container entry-content'>
  <h2 id="heading">Вступление</h2>
<p>Иногда в разговоре с разными людьми речь заходит о моём хобби. В таком случае я говорю, что слежу за спутниками. Для большинства это объяснение не слишком-то информативно, поэтому оно идеально подходит для того, чтобы продолжить разговор и одновременно возбудить любопытство. Однако, не все могут лично со мной пообщаться, поэтому в этом посте я хотел бы рассказать о том, что такое - следить за спутниками.</p>
<h2 id="heading-1">Телеметрия</h2>
<p>Первое, что приходит людям на ум, когда говоришь &ldquo;следить за спутниками&rdquo; - это шпионские страсти. Наверное, потому что спутники, благодаря кино, неразрывно связаны со слежением, суперсекретными технологиями и пр. Однако, в реальности это совсем не так. Вернее, не совсем так. Конечно, существуют и военные спутники, и спутники-шпионы, но подавляющее количество спутников совсем обычные. Они бывают как коммерческие, за доступ к которым необходимо заплатить, так и научные, доступ к которым сложно получить из-за сложной наземной аппаратуры. Бывают также студенческие - простые с открытым протоколом, доступные для всех.</p>
<p><img src="/img/satellite-telemetry/telemetry.png" alt=""></p>
<p>Когда речь заходит о слежении за спутниками, я прежде всего имею ввиду простые спутники с открытым доступом и протоколом. Зачастую авторы этих спутников заинтересованы в том, чтобы как можно больше людей получили доступ. Прежде всего это связано с тем, что спутник пролетает над университетом достаточно быстро - в среднем 10 минут. За это время университетская станция приёма сигнала может получить только небольшое количество информации о спутнике. Но что происходило со спутником в других точках земли? На обратной стороне земли? У полюса? Именно поэтому владельцы небольших спутников поощряют огромную сеть радиолюбителей по всему миру собирать данные и отправлять им по электронной почте (sic!) или через API. Для этих целей радиолюбители устанавливают у себя дома, на крыше, в саду станции приёма сигнала и по интернету передают его назад владельцам спутника.</p>
<p>Какие же данные передаёт спутник? Большинство спутников передают телеметрию. Это сильно-упакованная бинарная структура с информацией о всех (или почти всех) узлах спутника. Она может включать в себя:</p>
<ul>
<li>напряжение и ток солнечных панелей</li>
<li>температура процессора, контроллеров, панелей, <a href="https://github.com/dernasherbrezon/jradio/blob/master/src/main/java/ru/r2cloud/jradio/eseo/Type1.java#L124">статус записи в память</a></li>
<li>показания гироскопов и статус раскрытия солнечного паруса</li>
</ul>
<p>Телеметрия транслируется со спутника на землю постоянно с небольшим интервалом.</p>
<p>Во многих спутниках установлены экспериментальные компоненты, за которыми необходимо наблюдать. Телеметрия как раз и предоставляет информацию о том, как ведет себя в космосе тот или иной компонент. И чем больше телеметрии собирается, тем более точная информация попадает к производителям. По результатам полученных данных можно делать улучшения и пробовать различные подходы.</p>
<h2 id="heading-2">Сложности</h2>
<p>В теории любой желающий может направить антенну на спутник и получить данные. На практике же, получение данных со спутника - это достаточно нетривиальный процесс. Во-первых, каждый спутник передаёт сигнал немного по-разному. Это прежде всего связано с самой конструкцией спутника и его антенны. А поскольку конструкции спутников отличаются, то и способы передачи сигнала разные. Во-вторых, владельцы спутника должны раскрыть формат телеметрии. В противном случае, полученные биты так и останутся битами данных, из которых нельзя понять, что они значат.</p>
<p>К счастью, производители всё больше и больше понимают полезность географически распределённой сети приёма сигналов. Это в свою очередь позволяет проектам вроде <a href="https://github.com/daniestevez/gr-satellites">gr-satellites</a> добавлять поддержку новых спутников и <a href="https://satnogs.org">станциям по всему миру</a> принимать сигналы.</p>
<h2 id="----">Что же делать с телеметрией?</h2>
<p>Как я уже говорил выше, телеметрия нужна прежде всего владельцам спутников. Моей проект <a href="https://github.com/dernasherbrezon/r2cloud">r2cloud</a> как раз позволяет получать информацию со спутников и делать ее доступной для всех. Для этого я интегрировался с проектами <a href="https://satnogs.org">SatNOGS</a> и <a href="http://data.amsat-uk.org/missions">Amsat-UK Data warehouse</a>. Схема работы выглядит следующим образом:</p>
<p><img src="/img/satellite-telemetry/diagram.png" alt=""></p>
<ol>
<li>Базовая станция получает сигнал со спутника, демодулирует и декодирует его</li>
<li>Если настроена интеграция с <a href="https://r2server.ru">r2server.ru</a>, то данные отсылаются на центральный сервер</li>
<li>Далее, с центрального сервера информация может быть отправлена в другие сервисы.</li>
</ol>
<h3 id="satnogs">Satnogs</h3>
<p>Проект Satnogs - это глобальная сеть приёма сигналов со спутников. Она позволяет централизованно хранить информацию о наблюдениях, а так же предоставляет API для загрузки данных извне. Этот API позволяет загружать принятую телеметрию по протоколу <a href="http://www.pe0sat.vgnet.nl/decoding/tlm-decoding-software/sids/">SiDS</a>. Я написал <a href="https://github.com/dernasherbrezon/sids">небольшую библиотеку</a>, которая реализует данный протокол и позволяет загружать телеметрию из r2cloud в satnogs.</p>
<p><img src="/img/satellite-telemetry/satnogsTelemetryAPI.png" alt=""></p>
<p>Satnogs также предоставляет сервис <a href="https://dashboard.satnogs.org">https://dashboard.satnogs.org</a>. В этом сервисе можно создать дашборд на котором можно выводить различные показатели спутника и анализировать данные.</p>
<p><img src="/img/satellite-telemetry/satnogsDashboard.png" alt=""></p>
<h3 id="amsat-uk-data-warehouse">Amsat-UK Data warehouse</h3>
<p>Этот сервис аггрегирует информацию со спутников Funcube-1, Nayif-1, Jy1sat, Eseo. Для этого сервиса я также написал <a href="https://github.com/dernasherbrezon/fcdwClient">небольшую библиотеку</a>.</p>
<p><img src="/img/satellite-telemetry/fcdw.png" alt=""></p>
<p>Графики в этом сервисе чуть попроще, но тем не менее позволяют делать некоторые выводы о том, как работает спутник.</p>
<p><img src="/img/satellite-telemetry/fcdwGraphs.png" alt=""></p>
<p>При желании можно выгрузить все данные и проанализировать локально.</p>
<h2 id="-">Нужна помощь</h2>
<p>Сообществу крайне необходимо как можно больше станций приема сигнала. И каждый может помочь в этом. Достаточно лишь установить антенну и настроить станцию приёма. Вся станция стоит <a href="https://github.com/dernasherbrezon/r2cloud/wiki/Bill-of-materials">не больше 100$</a> и состоит из простых и заменяемых компонент. Чем больше станций расположено по всему миру, тем больше информации мы можем узнать о космосе.</p>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Синхронизация кадров в Метеор-М №2</title>
      <link>https://dernasherbrezon.com/posts/meteor-mn2-frame-synchronization/</link>
      <pubDate>Fri, 13 Sep 2019 22:30:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/meteor-mn2-frame-synchronization/</guid>
      <description>Введение Спутник Метеор-М №2 передаёт информацию согласно протоколу LRPT. Этот протокол определяет физический, канальный и сетевой уровни модели OSI. На физическом уровне используется QPSK модуляция. На канальном уровне LRPT подразумевает использование кадров фиксированного размера с интерливингом и несколькими методами коррекции ошибок. Однако, на практике Метеор-М №2 не использует часть алгоритмов из стандарта. В этой статье я хотел бы описать как необходимо синхронизировать и получать кадры Метеор-М №2.
Генерация кадров Прежде, чем делать получение кадров, необходимо понять как они создаются на спутнике.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Синхронизация кадров в Метеор-М №2</h1></header>
      		<div class='container entry-content'>
  <h2 id="heading">Введение</h2>
<p>Спутник Метеор-М №2 передаёт информацию согласно протоколу <a href="https://en.wikipedia.org/wiki/Low-rate_picture_transmission">LRPT</a>. Этот протокол определяет физический, канальный и сетевой уровни модели <a href="https://ru.wikipedia.org/wiki/%D0%A1%D0%B5%D1%82%D0%B5%D0%B2%D0%B0%D1%8F_%D0%BC%D0%BE%D0%B4%D0%B5%D0%BB%D1%8C_OSI">OSI</a>. На физическом уровне используется QPSK модуляция. На канальном уровне LRPT подразумевает использование кадров фиксированного размера с интерливингом и несколькими методами коррекции ошибок. Однако, на практике Метеор-М №2 не использует часть алгоритмов из стандарта. В этой статье я хотел бы описать как необходимо синхронизировать и получать кадры Метеор-М №2.</p>
<h2 id="-">Генерация кадров</h2>
<p>Прежде, чем делать получение кадров, необходимо понять как они создаются на спутнике. Алгоритм частично описан в стандарте LRPT и частично в интернете. Итак, первым шагом данные, которые необходимо отправить, разбиваются на кадры фиксированной длины. После этого, к каждому кадру добавляется синхро-маркер <code>1ACFFC1D</code></p>
<p><img src="/img/meteor-mn2-frame-synchronization/framing.png" alt=""></p>
<p>После этого данные кодируются свёрточным алгоритмом со скоростью 1/2. Из этого следуют две важные вещи:</p>
<ul>
<li>количество выходных данных увеличивается вдвое</li>
<li>синхро-маркер становится другим. Это очень важно понимать для правильной синхронизации кадров, о которой я напишу чуть позже</li>
</ul>
<p><img src="/img/meteor-mn2-frame-synchronization/convolutional.png" alt=""></p>
<p>И&hellip; На этом всё. Несмотря на то, что стандарт предписывает ещё дополнительные преобразования данных (спойлер: Метеор-М №2-2 их всё-таки реализует), Метеор-М №2 получившийся поток данных сразу отправляет QPSK модулятору.</p>
<p><img src="/img/meteor-mn2-frame-synchronization/qpskmod.png" alt=""></p>
<h2 id="--1">Синхронизация кадров</h2>
<p>В общем виде, для того, чтобы синхронизировать кадры, необходимо найти синхро-маркер и прочитать фиксированное количество байт кадра. На практике же, такой подход будет находить крайне малое количество кадров. Прежде всего из-за помех в принимаемом сигнале. Поэтому все алгоритмы по синхронизации кадров сильно отличаются от алгоритмов генерации кадров.</p>
<p>Забегая вперёд скажу, что для декодирования свёрточного кода применяется <a href="https://ru.wikipedia.org/wiki/%D0%90%D0%BB%D0%B3%D0%BE%D1%80%D0%B8%D1%82%D0%BC_%D0%92%D0%B8%D1%82%D0%B5%D1%80%D0%B1%D0%B8">алгоритм Витерби</a>. При этом алгоритм работающий с мягкими решениями демодулятора в среднем на 2дб эффективнее, чем с жёсткими решениями. Это значит, что каждый входящий бит будет передаваться в виде байта.</p>
<p><img src="/img/meteor-mn2-frame-synchronization/softdecisions.png" alt=""></p>
<p>В самом простом виде, алгоритм синхронизации имеет некий регистр жёстких решений демодулятора, который он постоянно сравнивает с искомым синхро-маркером <code>035D49C24FF2686B</code>. Каждый последующий байт конвертируется в бит и добавляется в регистр.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">byte</span> bitToCheck<span style="color:#f92672">;</span>
<span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>inputByte <span style="color:#f92672">&gt;</span> 0<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
	bitToCheck <span style="color:#f92672">=</span> 1<span style="color:#f92672">;</span>
<span style="color:#f92672">}</span> <span style="color:#66d9ef">else</span> <span style="color:#f92672">{</span>
	bitToCheck <span style="color:#f92672">=</span> 0<span style="color:#f92672">;</span>
<span style="color:#f92672">}</span>
dataRegister <span style="color:#f92672">=</span> <span style="color:#f92672">(</span>dataRegister <span style="color:#f92672">&lt;</span><span style="color:#f92672">&lt;</span> 1<span style="color:#f92672">)</span> <span style="color:#f92672">|</span> <span style="color:#f92672">(</span>bitToCheck <span style="color:#f92672">&amp;</span> 0x1<span style="color:#f92672">)</span><span style="color:#f92672">;</span>
</code></pre></div><p>Если регистр совпал с необходимым синхро-маркером, то из потока читается кадр фиксированного размера и декодируется с помощью алгоритма Витерби.</p>
<p>Этот алгоритм можно улучшить. Дело в том, что в синхро-маркере <code>035D49C24FF2686B</code> могут быть ошибочные биты. Алгоритм Витерби может скорректировать ошибочные биты как в самом синхро-маркере, так и в данных, идущих за ним. Зная это, можно искать синхромаркер с некоторой точностью. Например, для Метеор-М №2 на основе экспериментов я допускаю до 17 ошибочных бит в регистре или 26%. Тут важно понимать, что небольшой порог не позволит находить пакеты в шумном сигнале, а слишком большой порог даст много ложно-положительных срабатываний.</p>
<p>Чтобы сделать ещё одно улучшение, надо понимать устройство QPSK демодулятора. Любой некогерентный PSK демодулятор подвержден так называемой ошибке неоднозначности фазы.</p>
<p><img src="/img/meteor-mn2-frame-synchronization/phase_ambiguity.png" alt=""></p>
<p>Для алгоритма это значит, что нужно искать не <code>035D49C24FF2686B</code>, а 8 различных вариантов синхро-маркера. Для этого я создал класс <a href="https://github.com/dernasherbrezon/jradio/blob/314552e7f90e800e201b0af2fca43ebbb82fc8b5/src/main/java/ru/r2cloud/jradio/PhaseAmbiguityResolver.java">PhaseAmbiguityResolver</a>, который на вход принимает значение синхро-маркера, а на выходе выдаёт все возможные синхро-маркеры в зависимости от ошибки фазы.</p>
<p>Далее алгоритм меняется следующим образом. В потоке бит ищется 8 различных вариантов синхро-маркера. Как только синхро-маркер найден, читается кадр фиксированного размера. Далее, в зависимости от найденного синхро-маркера, каждые 2 бита данных вращаются по часовой стрелке или против. Это необходимо для того, чтобы устранить ошибку неоднозначности фазы в самом кадре.</p>
<h2 id="heading-1">Выводы</h2>
<p>Несмотря на то, что алгоритмы формирования кадров достаточно простые, алгоритмы поиска уже значительно сложнее. Зачастую они ставят перед выбором: количество успешно найденных кадров или увеличенное время (CPU/память) на поиск. Текущий алгоритм синхронизации кадров даёт <a href="https://dernasherbrezon.com/posts/dsp-java/">вполне неплохие результаты</a>.</p>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Логирование из Java в Journald</title>
      <link>https://dernasherbrezon.com/posts/journald-java/</link>
      <pubDate>Tue, 03 Sep 2019 21:22:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/journald-java/</guid>
      <description>Недавно обнаружил одну интересную особенность journald, которую сразу же решил использовать в r2cloud.
Для начала немного о том, как вообще работает логирование. Большинство Linux дистрибутивов перешли на systemd. Эта система имеет множество различных фич, в том числе поддержку логирования - journald. Чем же это логирование лучше syslog:
 Структурированные логи. Каждая запись в логе имеет некоторую мета информацию. Например, уровень (INFO, DEBUG, ERROR), дату, сообщение и пр. В syslog же, запись в логе это строка текста, которую нужно правильно парсить.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Логирование из Java в Journald</h1></header>
      		<div class='container entry-content'>
  <p>Недавно обнаружил одну интересную особенность journald, которую сразу же решил использовать в <a href="https://github.com/dernasherbrezon/r2cloud">r2cloud</a>.</p>
<p>Для начала немного о том, как вообще работает логирование. Большинство Linux дистрибутивов перешли на <a href="https://ru.wikipedia.org/wiki/Systemd">systemd</a>. Эта система имеет множество различных фич, в том числе поддержку логирования - journald. Чем же это логирование лучше syslog:</p>
<ol>
<li>Структурированные логи. Каждая запись в логе имеет некоторую мета информацию. Например, уровень (INFO, DEBUG, ERROR), дату, сообщение и пр. В syslog же, запись в логе это строка текста, которую нужно правильно парсить.</li>
<li>Бинарные файлы логов. С помощью специальной команды journalctl можно фильтровать логи по разным полям из мета информации. Например, можно посмотреть все ошибки за последний день, показать ошибки авторизации в sshd и пр.</li>
<li>Интеграция с systemd. stderr и stdout каждого юнита по-умолчанию парсится и отправляется в journald.</li>
</ol>
<p>Изначально я писал логи в отдельный файл, как принято в старом добром enterprise. Однако, со временем понял, что лучше писать в stdout/stderr, где эти логи попадут в journald. Это хорошо по нескольким причинам:</p>
<ol>
<li>Все логи в одном месте. Можно посмотреть что происходило в системе в момент, когда приложение упало или потеряло сеть.</li>
<li>Ротация и централизованное хранение логов. Если приложение сойдёт с ума и начнёт слать безумное количество логов, то существует единая настройка в системе, которая контролирует сколько места будет отведено под логи.</li>
<li>Удобный поиск по логам с помощью journalctl.</li>
</ol>
<p>Я написал простейший конфиг для java.util.logging:</p>
<pre><code>handlers=java.util.logging.ConsoleHandler
.level=INFO
java.util.logging.ConsoleHandler.formatter=java.util.logging.SimpleFormatter
java.util.logging.SimpleFormatter.format=[%4$s] %5$s%6$s [%2$s]%n
</code></pre><p>Тут самое важное - это конфигурация formatter. Я оставил только минимальное количество информации: уровень лога, сообщение, stacktrace, название класса и метод. Дату я убрал, так как она уже будет выводиться в journalctl. Результат получился следующий:</p>
<pre><code>Aug 15 17:40:09 raspberrypi java[481]: [INFO] ================================= [ru.r2cloud.R2Cloud start]
Aug 15 17:40:09 raspberrypi java[481]: [INFO] =========== started ============= [ru.r2cloud.R2Cloud start]
Aug 15 17:40:09 raspberrypi java[481]: [INFO] ================================= [ru.r2cloud.R2Cloud start]
</code></pre><p>Какое-то время меня устраивало как выглядят логи. Однако, со временем у меня скопилось достаточно большое количество серверов и захотелось отправлять нотификации в телеграм, как только случиться ошибка. Но прежде, чем делать централизованное логирование, необходимо сделать так, чтобы приложение правильно проставляло уровень логирования.</p>
<p>К сожалению, все логи из stdout и stderr попадают с PRIORITY=6, что значит INFO. Нужно как-то из самой библиотеки логирования указать journald какой уровень у каждого сообщения.</p>
<p>И вот тут-то я и нашёл одну интересную особенность journald. Оказывается, если сообщение начинается на <code>&lt;номер&gt;</code>, то journald попытается его распарсить согласно <a href="https://tools.ietf.org/html/rfc5424#section-6.2">RFC-5424</a>. Согласно этому RFC, этот номер будет указывать на уровнь логирования.</p>
<p>Я написал небольшую библиотечку <a href="https://github.com/dernasherbrezon/journald-formatter">journald-formatter</a>, которая форматирует <code>java.util.logging.Level</code> в соответствующий номер из RFC. Если указать следующую конфигурацию:</p>
<pre><code>handlers=java.util.logging.ConsoleHandler
.level=INFO
java.util.logging.ConsoleHandler.formatter=ru.r2cloud.logging.JournaldFormatter
java.util.logging.JournaldFormatter.format=&lt;%4$s&gt;%5$s%6$s [%2$s]%n
</code></pre><p>То она позволит journald правильно распарсить уровень логирования:</p>
<pre><code>Sep 03 21:00:51 raspberrypi java[1352]: ================================= [ru.r2cloud.R2Cloud start]
Sep 03 21:00:51 raspberrypi java[1352]: =========== started ============= [ru.r2cloud.R2Cloud start]
Sep 03 21:00:51 raspberrypi java[1352]: ================================= [ru.r2cloud.R2Cloud start]
</code></pre><p>И ошибки теперь легко искать в логах:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">journalctl -u r2cloud -p err -n <span style="color:#ae81ff">10</span>
</code></pre></div><pre><code>-- Logs begin at Thu 2016-11-03 17:16:42 GMT, end at Tue 2019-09-03 22:09:24 BST. --
Sep 03 22:09:24 raspberrypi java[1869]: unable to get weather tle
</code></pre><h3 id="-">Что дальше?</h3>
<ol>
<li>Неплохо было бы передавать время из JUL напрямую в journald. Сейчас journald проставляет время получения события, а не время, когда оно произошло внутри JVM.</li>
<li>Настроить централизированное логирование с нотификациями через телеграм. Кто знает как, пишите в комментариях.</li>
</ol>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>История одной картинки</title>
      <link>https://dernasherbrezon.com/posts/decoding-meteor-m/</link>
      <pubDate>Mon, 26 Aug 2019 08:31:17 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/decoding-meteor-m/</guid>
      <description>Введение В ноябре 2018 года команда конференции JPoint объявила о конкурсе докладов для будущей конференции. Я очень воодушевился и решил подать свою заявку. В своём докладе я хотел рассказать о том, как я декодировал сигнал со спутника Meteor-M 2. В декабре мне позвонили организаторы и мы немножко поговорили про меня и мой доклад. Он им показался интересным и они попросили меня набросать презентацию и текст.
На январских праздниках я засел за презентацию и сделал, как мне кажется, неплохой доклад.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>История одной картинки</h1></header>
      		<div class='container entry-content'>
  <h2 id="heading">Введение</h2>
<p>В ноябре 2018 года команда конференции JPoint <a href="https://habr.com/ru/company/jugru/blog/429814/">объявила</a> о конкурсе докладов для будущей конференции. Я очень воодушевился и решил подать свою заявку. В своём докладе я хотел рассказать о том, как я декодировал сигнал со спутника Meteor-M 2. В декабре мне позвонили организаторы и мы немножко поговорили про меня и мой доклад. Он им показался интересным и они попросили меня набросать презентацию и текст.</p>
<p>На январских праздниках я засел за презентацию и сделал, как мне кажется, неплохой доклад. Парням из организации конференции он очень понравился. К сожалению, дальше меня отсеяли и я не попал на конференцию. Они пососетовали мне попробовать попасть на Joker 2019, и вот недавно мой доклад опять не приняли.</p>
<p>Я потратил очень много усилий, чтобы его сделать, поэтому выложу его сюда, в мой блог.</p>
<iframe src="//www.slideshare.net/slideshow/embed_code/key/bqzbCKESwasbty" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>
<h2 id="-">Описание слайдов</h2>
<p><img src="/img/decoding-meteor-m/slides1.jpg" alt=""></p>
<p>Итак, история началась несколько лет назад, когда я вдохновленный успехами частной космонавтики и г-на Маска решил сам прикоснуться к космосу. На глаза мне попалась статья об rtl-sdr о приёме сигналов со спутников. В тот момент я понял. Это оно.</p>
<p>Конечно, спутников много и непонятно с чего начать, какая антенна нужна, какой софт. Поэтому я решил начать с чего-то, что можно потрогать и увидеть. С метео-снимков. На орбите сейчас летает множество метео-спутников, но самые доступные - это NOAA и наш Meteor. Я посмотрел на картинки в интернете и мне понравились снимки Meteor. Они большего разрешения, цифровые и выглядят лучше.</p>
<p><img src="/img/decoding-meteor-m/slides2.jpg" alt=""></p>
<p>Метеор-М снимает землю 24 на 7 c 2014 года.</p>
<p><img src="/img/decoding-meteor-m/slides3.jpg" alt=""></p>
<p>Он движется по солнечно-синхронной орбите. Что значит солнечно-синхронная? Это значит спутник пролетает над каждом участком земли в одно и то же локальное время. Прямо над нами он пролетал с утра и будет пролетать еще раз вечером через Х часов. Как же он снимает землю?</p>
<p><img src="/img/decoding-meteor-m/slides4.jpg" alt=""></p>
<p>По сути метео-спутник - это такой большой сканер. Те кто видели зеленую полоску сканера, теперь чуть лучше представляют работу спутника.</p>
<p>Спутник сканирует одну полосу картинки и сразу же передает её на землю. Никакого FTP. Все, кто смогли принять сигнал, принимают одну и ту же полосу.</p>
<p><img src="/img/decoding-meteor-m/slides5.jpg" alt=""></p>
<p>Что же нужно, чтобы получить этот сигнал? Нужен спутник, антенна, rtl-sdr, компьютер (raspberrypi вполне хватит) и java. Тут нужно немного рассказать, что каждый компонент делает. Итак:</p>
<ol>
<li>Спутник шлёт нам отсканированную полосу</li>
<li>По радио</li>
<li>На нашу антенну. Антенна - это очень важно. На простой кусок проволки вы вряд ли сможете принять сигнал со спутника. Я использую discone антенну. Это не самая эффективная антенна, зато всенаправленная и позволяет получать сигналы со множества спутников на разных частотах. Вообще для меня выбор антенны был самым сложным. Их великое множество, но какую выбрать? Для того, кто не разбирается в теории электромагнитных волн, задача непростая. Кто-то пишет на форуме, что у него отлично ловится на эту антенну, кто-то пишет что наоборот худшая антенна. Мне пришлось вслепую выбрать её и попробовать.</li>
<li>rtl-sdr. Этот usb-стик преобразует аналоговый сигнал в цифровой и усиливает. На выходе получается поток байт. Плохую антенну я решил компенсировать хорошей электроникой. Я использую более продвинутый rtl-sdr v3 с экранированием и помехоустойчивостью.</li>
<li>raspberrypi. Кто нибудь слышал про него? Я думаю большинство если не попробовало, то хотя бы слышало. Как показывает практика, мощности этого компьютера вполне хватит, чтобы получать картинку со спутника.</li>
<li>Чтобы получить доступ к этому потоку байт в user space необходимо воспользоваться libusb + librtlsdr. Эта связка правильно инициализирует usb соединение, выставляет нужные регистры на usb-стике и шлёт поток байт пользователю. Звучит просто? Вроде бы. Но есть сложность: у usb стика нет внутренней памяти. Если приложение немножко подтормозило, то данные просто потеряются. Этот участок наиболее критичный к задержкам и скорости. Подтормаживать может как и наш любимый GC, так и сама операционная система. Поэтому имеет смысл записать данные во время пролета спутника в файл и потом уже спокойно обработать в оффлайн. Именно поэтому Java отлично подходит. Это не задача реального времени.</li>
<li>Демодуляция/Декодирование/Создание картинки.</li>
<li>Вэб сервер, который будет раздавать картинки.</li>
</ol>
<p><img src="/img/decoding-meteor-m/slides6.jpg" alt=""></p>
<p><img src="/img/decoding-meteor-m/slides7.jpg" alt=""></p>
<p>Сохранение raw сигнала в файл можно сделать одной командой в баше</p>
<p>Читать данные из USB не имеет смысла на Java. Их нужно быстро писать в файл без задержек. Если учесть, что сам raspberrypi работает не быстро, то лучше старого доброго С сложно придумать.</p>
<p><img src="/img/decoding-meteor-m/slides8.jpg" alt=""></p>
<p>Итак, спутник пролетел, я записал файл. Можно смело выдохнуть и начать экспериментировать. В документации на Метеор-М написано, что сигнал фазово-модулированный.</p>
<p><img src="/img/decoding-meteor-m/slides9.jpg" alt=""></p>
<p>На самом деле нет. Вот так выглядит реальный сигнал. Кто нибудь видит здесь реки и моря? Или хотя бы какую то структуру? Что это вообще такое? Моему разочарованию не было предела. Мало того, что я не понимал записан ли сигнал, так ещё непонятно что делать дальше.</p>
<p><img src="/img/decoding-meteor-m/slides10.jpg" alt=""></p>
<p>Я засел за теорию. Записался на курс обработки сигналов на курсере, забросил его, начал читать новую книжку, нашел старую pdf-ку от Nasa, вдохновился Вояджерами и продолжил.</p>
<p>Это были помехи и мой первый урок вне enterprise. Физический мир не такой, как нам рисуют на картинках в интернете. Помехи бывают очень разнообразные: соседская антенна, шумящие комплектующие самого raspberrypi, которые по USB передают высокочастотный электромагнитный сигнал прямо в rtl-sdr, холм вдалеке, пролетающий самолет и тд. Я просто принял это к сведению и начал двигаться дальше к цели. Очевидно помехи будут сильнее, когда спутник будет показываться над горизонтом. Однако, я рассчитывал получить хороший сигнал, когда спутник будет точно над головой. Я нашел хорошее описание QPSK демодулятора в GNURadio и решил двигаться дальше.</p>
<p><img src="/img/decoding-meteor-m/slides11.jpg" alt=""></p>
<p>Итак, что же такое QPSK? Это вид модуляции, при которой меняется фаза. Вот видите этот кончик в центре? В этот момент фаза поменялась.</p>
<p><img src="/img/decoding-meteor-m/slides12.jpg" alt=""></p>
<p>При QPSK модуляции есть 4 позиции, где может меняться фаза. Положение фазы определяет биты.</p>
<p><img src="/img/decoding-meteor-m/slides13.jpg" alt=""></p>
<p>После демодуляции у меня получился поток бит. Вот оно, подумал я и расчехлил спецификацию на формат данных Метеора. Рано. Это ещё не данные. Для надёжной передачи данных используются алгоритмы коррекции ошибок и в протоколе их целых 3. Первый алгоритм - алгоритм декодирования Витерби.</p>
<p><img src="/img/decoding-meteor-m/slides14.jpg" alt=""></p>
<p>Он позволяет декодировать свёрточное кодирование и исправлять некоторое количество ошибок. Для начала наверное нужно рассказать, что такое свёрточное кодирование.</p>
<p><img src="/img/decoding-meteor-m/slides15.jpg" alt=""></p>
<p>Свёрточное кодирование берёт на вход поток бит и для каждого входного бита выдает 2 бита. Причём формула генерации этих бит может зависеть от предыдущих бит. Я написал пару тестов для кодирования и декодирования. Знаете, их писать просто прелестно. Чистая математика, понятные результаты. Не то, что тестирование покупок в интернет-магазине с помощью Селениума.</p>
<p><img src="/img/decoding-meteor-m/slides16.jpg" alt=""></p>
<p>Следующим этапом коррекции биты необходимо пропустить через де-скремблер. Вообще скремблирование - это процесс преобразования одних битов в другие. Это прежде всего нужно для того, чтобы получить последовательность бит близкую к нормальному распределению. Чем более случайное распределение 0 и 1 в последовательности, тем легче распознать 0 от 1 при демодуляции. Знаете, задаешь себе вопрос &ldquo;А почему хорошо нормальное распределение?&rdquo; и уже через пару часов обнаруживаешь себя читающим pdf от Nasa 70-х годов, где они обосновывают достаточно формальной математикой выбор полинома для скремблирования. Но меня прежде всего интересовал результат. Поэтому я просто принял к сведению и начал реализовывать.</p>
<p><img src="/img/decoding-meteor-m/slides17.jpg" alt=""></p>
<p>Последним шагом коррекции ошибок, необходимо вычислить коды рида-соломона и попробовать исправить потенциальные ошибки передачи данных. Сейчас я постараюсь в общих словах описать алгоритм. Он основан на теории полей. Поля - это определенная группа чисел обладающих определенными свойствами. Перемножая определенную матрицу с данными, мы получаем те же самые данные и биты чётности. Эти биты вместе с данными позволяют определить в каком бите ошибка и, что не мало важно, какое же значение бита должно быть. Тут я хочу сделать небольшое признание. Я не понял, как работает алгоритм. Вот совсем. 2 недели были потрачены почти впустую. Поэтому я просто взял имплементацию на С от Phil Karn и переписал на Java. Видимо, сказывалось отсутствие серьёзного математического образования. Я применил своё хорошее инженерное образование и просто выделил алгоритм в отдельный модуль с понятным интерфейсом.</p>
<p><img src="/img/decoding-meteor-m/slides18.jpg" alt=""></p>
<p>Настоящие биты. Смотрите, вот они. Ну не восхитительно ли? Между прочим эти 3 алгоритма так же используются для связи с Вояджерами. Так что, если у вас на даче есть 70-ти метровая тарелка, то Вы сможете попросить Вояджер помигать лампочкой.</p>
<p><img src="/img/decoding-meteor-m/slides19.jpg" alt=""></p>
<p>Итак, у нас есть набор бит, теперь можно из них собрать кадры канального уровня. Для тех, кто помнит модель OSI сюрпризов быть не дожно. В универе мне нравился предмет сетевые технологии. Мы разбирали протокол HDLC. Прямо с тех лекций я помню что кадр - это структура фиксированной длины. У него есть заголовок и пользовательские данные. Пользовательские данные в данном случае - это пакеты сетевого уровня. Первое практическое применение знаний за последние 10 лет.</p>
<p><img src="/img/decoding-meteor-m/slides20.jpg" alt=""></p>
<p>Пакеты сетевого уровня уже могут быть произвольной длины и частично не попадать в один кадр.</p>
<p><img src="/img/decoding-meteor-m/slides21.jpg" alt=""></p>
<p>После склейки пакетов, можно начать переходить на прикладной уровень. Вот он. Вот где происходит формирование картинки. Уже близко. Итак, пакеты бывают 4х типов. R,G,B и административный. Они содержат в себе закодированные с помощью jpeg кусочки полосы сканирования R,G,B каналов. Но тут Засада. Нельзя просто так взять и сохранить байты в файл, назвать его картинка_из_космоса.jpg и хвастаться друзьям. Это же полоса сканирования. А значит у неё нет шапки, нет описания таблиц jpeg. Это одна бесконечная jpeg картинка.</p>
<p><img src="/img/decoding-meteor-m/slides22.jpg" alt=""></p>
<p>Дело было значит весной. Спрашиваю я своего друга:</p>
<ul>
<li>А ты знаешь как декодировать jpeg?</li>
<li>Ну там просто. По алгоритму Хаффмана применить обратное преобразование фурье и получится матрица 8*8 значений пикселов. Ну а дальше их надо склеить подряд и получится картинка.</li>
</ul>
<p>А потом я прочитал несколько статей о декодировании&hellip; В общем я хочу рассказать лишь о структурах данных, которые приходят со спутника. Преобразование битов в матрицу 8*8 я, пожалуй, оставлю для любознательных.</p>
<p><img src="/img/decoding-meteor-m/slides23.jpg" alt=""></p>
<p>Итак, каждый пакет содержит 14 MCU. В терминологии jpeg - это Minimum Coding Unit. Матрица пикселей 8*8.</p>
<p><img src="/img/decoding-meteor-m/slides24.jpg" alt=""></p>
<p>Метеор-М передает 14 пакетов одного цвета, потом 14 пакетов другого цвета, потом 14 пакетов третьего цвета и в конце 1 административный пакет. Всё вместе это даёт одну полосу сканирования. 14 пакетов на 14 MCU на 8 пикселей дают картинку шириной 1568 пикселей. Неплохо.</p>
<p><img src="/img/decoding-meteor-m/slides25.jpg" alt=""></p>
<p>После того, как получены непосредственные пикселы, остаётся дело техники и ImageIO. Вот оно. Бессонные ночи анализа QPSK сигнала, тщетные поиски таблицы AC для декодирования jpeg и наконец первый результат. И ценность этой картинки не в том, что я теперь умею видеть погоду на небе. Ценность в том, что вся эта связка из железа, Java, кучи алгоритмов - работает. Что за 100 долларов можно собрать станцию, которая действительно работает. Спустя несколько месяцев работы и бессонных ночей я увидел что-то не похожее на бесконечные биты и потоки. Настоящие реки и моря.</p>
<p><img src="/img/decoding-meteor-m/slides26.jpg" alt=""></p>
<p><img src="/img/decoding-meteor-m/slides27.jpg" alt=""></p>
<p>Внутренний enterprise-перфекционист начинает бухтеть. Хочется большего. Хочется убедиться, что результат действительно финальный.</p>
<p><img src="/img/decoding-meteor-m/slides28.jpg" alt=""></p>
<p>Так и знал. Баг. Важный урок. Даже если алгоритмы отработали верно, никогда не знаешь наверняка, где бага. Когда есть картинка, где можно увидеть багу - это хорошо. В данном случае понятно, что неправильно наложены каналы. Видимо, красный канал смещён на одну строчку выше. Как такое могло произойти? Всё очень просто. Помните я говорил, что полоса сканирования - это идущие друг за другом пакеты одного канала? А что будет, если один кадр пропущен? Например, из-за помех. Нужно правильно высчитать индекс следующего пакета из следующего кадра и пропустить нужно количество пикселей в картинке.</p>
<p><img src="/img/decoding-meteor-m/slides29.jpg" alt=""></p>
<p>Так то лучше. Что ещё можно сделать? Меня смущает эта одинокая полоса. Видимо был пропущен один пакет. Опять же, непонятно из-за помех или из-за баги в коде. Скорее всего из-за кода. Если бы были помехи, то и другие пакеты были бы пропущены.</p>
<p>Баг склейки пакетов в разных фреймах. Проявлялся только тогда, когда пакет не влазил в один фрейм и нужно было перенести в следующий.</p>
<p><img src="/img/decoding-meteor-m/slides30.jpg" alt=""></p>
<p>Результат достаточно приличный.</p>
<p><img src="/img/decoding-meteor-m/slides31.jpg" alt=""></p>
<p>Меня только бесит эта черная полоса в середине картинки. Края у нее резкие, фон черный. Может быть действительно помехи? Например, когда спутник пролетает точно над антенной, свет с венеры отразился от верхних слоёв атмосферы и вызвал помеху?</p>
<p>Нет, похоже бага в самом спутнике.</p>
<pre>
Уважаемые форумчане! Отвечу на часть вопросов по приёму с Метеора №2 в метрах. 
ИК каналы сегодня начали работу: по запросу разработчика включали очистку радиационного холодильника. 
Дыра при приёме в метровом диапазоне обусловлена переполнением буфера БИС-МВ и никуда не денется, только если уменьшим поток. 
Т.е. будут работать не три камеры в видимом диапазоне, а только две. 
Это косяк разработчика. Хотели повысить качество сжатия картинки. 
Поэтому при нормальном освещении каждые 6 мин 23 сек идет белая полоса. 
Сегодня зависал формирователь цифровых потоков. При приеме в метрах шла "джинса". 
Перезапустили в районе 11-ти часов.
</pre>
<p>А что если ещё немножко подкрутить ручки демодулятора?</p>
<p><img src="/img/decoding-meteor-m/slides32.jpg" alt=""></p>
<p>Теперь я районе Каспия появились дополнительные кусочки снимка. Теперь наверное уже всё.</p>
<p><img src="/img/decoding-meteor-m/slides33.jpg" alt=""></p>
<p>Вот она эта картинка. И это была её история.</p>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Декодирование телеметрии Aistechsat-3</title>
      <link>https://dernasherbrezon.com/posts/aistechsat-3/</link>
      <pubDate>Wed, 21 Aug 2019 14:40:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/aistechsat-3/</guid>
      <description>Вступление Наступило лето, а это значит начался отпускной сезон. Самое время немного расслабиться и добавить декодирование телеметрии для новых спутников. С января Daniel добавил десяток новых спутников. Я начал с Aistechsat-3.
Декодирование Как и в других случаях я взял готовый демодулятор и реализовал его на Java. Daniel написал, что формат телеметрии задокументирован, но он не успел задекодировать телеметрию.
Казалось бы, что может пойти не так? Документация есть, данные есть. Надо просто написать код.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Декодирование телеметрии Aistechsat-3</h1></header>
      		<div class='container entry-content'>
  <h2 id="heading">Вступление</h2>
<p>Наступило лето, а это значит начался отпускной сезон. Самое время немного расслабиться и добавить декодирование телеметрии для новых спутников. С января <a href="https://github.com/daniestevez/gr-satellites">Daniel</a> добавил десяток новых спутников. Я начал с Aistechsat-3.</p>
<h2 id="heading-1">Декодирование</h2>
<p>Как и в <a href="https://github.com/dernasherbrezon/jradio">других случаях</a> я взял готовый демодулятор и <a href="https://github.com/dernasherbrezon/jradio/blob/master/src/test/java/ru/r2cloud/jradio/aistechsat3/Aistechsat3Test.java">реализовал</a> его на Java. Daniel написал, что формат телеметрии <a href="https://www.amsat-ea.org/app/download/11302778/Aistechsat-3+TLM+codes%2C+modulation+and+format+v1.0_AMSAT_EA.pdf">задокументирован</a>, но он не успел задекодировать телеметрию.</p>
<p>Казалось бы, что может пойти не так? Документация есть, данные есть. Надо просто написать код.</p>
<p>На практике оказалось всё не так просто.</p>
<p>Каждый пакет начинается с <a href="https://github.com/libcsp/libcsp">CSP</a> заголовка. Тут всё понятно. Это не первый спутник, который использует этот протокол. Даже в таком урезанном виде как здесь.</p>
<p>Далее идёт небольшой заголовок и данные.</p>
<p><img src="/img/aistechsat-3/1.png" alt=""></p>
<p>Вот тут прекрасно всё. Во-первых, A3200 manual - это платная документация. Та ссылка, которая есть в спецификации ведёт на описание A3200 в интернет магазине. Во-вторых, непонятно сколько всего дата элементов может быть. Вот пример описания одного из типов радиомаяка:</p>
<p><img src="/img/aistechsat-3/2.png" alt=""></p>
<p>Как видно, никакого разделения на дата элементы тут нет. Изначально я сделал чтение дата элемента после каждой строчки. Это логично, так как каждая строчка имеет номер &ldquo;Elements&rdquo;, который хоть как то похож на &ldquo;Data element&rdquo;. Получилось что-то вроде следующего:</p>
<pre><code>DataFieldMeta
extmag
DataFieldMeta
gyro
DataFieldMeta
torquer_duty
...
</code></pre><p>Не сработало. Количество байт в сообщении значительно меньше.</p>
<p>Тогда я начал смотреть непосредственно в байты. Каждый радиомаяк всегда начинается на метадата. Например, после отбрасывания всех заголовков:</p>
<pre><code>2E1E5CA265820004C1150000432DB7B0C28CD4DE43CEEF8642F8DACDC281BDAA43B15FB900000000433600000000000043A8000000000000000000000706070600000706070607063F54A3DBDC3F094D823D9929D0BA8347B838A85029B9C6108FDBDC08CF360000000000000000000000000000000000800000008000000080000000AA925CA265820004000000000002003A003A3D8DFC993D956E1DBCA30789BC5E8BBB3C9D734B01020201010000B40851B8C0
</code></pre><p>Метадата занимает 8 байт. Последний из них - это некий Source. Если предположить, что он всегда одинаковый в рамках одного маяка, то можно попытаться найти его и таким образом найти все места, где должна быть метадата.</p>
<p>В данном примере можно поискать <code>20004</code>. Эти байты включают в себя секунды из временной метки. Получается ещё одно место, где записана метадата: <code>AA925CA265820004</code>. Осталось отсчитать количество байт от первой метки и вставить чтение метадаты. И как раз для типа 20 у меня не получился этот трюк. Если отсчитать с конца количество байт и вставить чтение метадаты, то она будет неправильной.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">{
	<span style="color:#f92672">&#34;checksum&#34;</span>:		<span style="color:#ae81ff">0</span>,	
	<span style="color:#f92672">&#34;source&#34;</span>:		<span style="color:#ae81ff">25986</span>,	
	<span style="color:#f92672">&#34;timestamp&#34;</span>:	<span style="color:#ae81ff">2861718690</span>	
}
</code></pre></div><p>Это значит только одно: количество байт между первой метадатой и второй неправильное. Я остановился в дебаге посмотреть, что же получается. suns_temp хоть и выглядит странно, но вполне логично: <code>[1798, 1798, 0, 1798, 1798, 1798]</code>. А вот уже следующее поле gyro выглядит неправильно: <code>[0.83062524, -2.15087787E17, -1.3929482E-37]</code>. Как правило, данные со спутника вряд ли могут содержать E17 и E-37. Я ещё раз проверил спецификацию, но не нашёл расхождения. Видимо в спецификации есть ошибки. А пересчитав количество байт между первой и второй метадатой я нашёл расхождение в 2 байта с тем, что указано в спецификации. Если добавить <code>dis.skip(2);</code>, то метадата отлично считывается и дальнейшие данные выглядят логично.</p>
<p>К счастью, это был единственный тип радиомаяка с ошибками в документации. Остальные мне удалось достаточно быстро декодировать.</p>
<p>Я использовал <a href="https://db.satnogs.org/api/telemetry/?page=38&amp;satellite=44103">открытые данные</a> Satnogs, чтобы найти всевозможные типы маяков. И не нашёл. Например, в спецификации сказано, что тип 30 будет отправляться каждые 60 секунд. По факту же, я ни разу его не встретил.</p>
<p>Зато я встретил множество недокументированных типов сообщений. 0x40:</p>
<pre><code>0180D78301400100012E1E5D1057690004000000000000000000000000000000000000000000000000000000000000412A6717
</code></pre><p>Или 0x3f:</p>
<pre><code>0180D783013F0100013B1A5D10576900044142C2115A2205B0CA63E6B5CA8989494A5B046B44CC6065456BB17045C8C1370000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000CFBA95A751FB7C4A515A09C946C9497046C99111439D28A59B855D10576900043F42686A3EDC03153EE9BC70BE32157BBF202419BF286A303EA4DAEE3E8997F4BD4F205B3B4880E83AB47643C26D172442C80000B8F27416D7BBC179
</code></pre><p>Получается, спецификация не содержит все типы сообщений.</p>
<p>Ещё одна интересная вещь, которая меня заинтересовала - размер сообщения. После того, как я полностью прочитываю из <code>DataInputStream</code> данные, там всё ещё остаётся 4 байта. Это очень похоже на CRC32. Обычно контрольная сумма берётся от всех данных, поэтому я написал следующий код:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">long</span> expectedCrc32 <span style="color:#f92672">=</span> Crc32c<span style="color:#f92672">.</span><span style="color:#a6e22e">calculate</span><span style="color:#f92672">(</span>data<span style="color:#f92672">,</span> 0<span style="color:#f92672">,</span> data<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span> <span style="color:#f92672">-</span> 4<span style="color:#f92672">)</span><span style="color:#f92672">;</span>
<span style="color:#66d9ef">long</span> actualCrc32 <span style="color:#f92672">=</span> <span style="color:#f92672">(</span><span style="color:#f92672">(</span>data<span style="color:#f92672">[</span>data<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span> <span style="color:#f92672">-</span> 4<span style="color:#f92672">]</span> <span style="color:#f92672">&amp;</span> 0xFFL<span style="color:#f92672">)</span> <span style="color:#f92672">&lt;</span><span style="color:#f92672">&lt;</span> 24<span style="color:#f92672">)</span> <span style="color:#f92672">|</span> <span style="color:#f92672">(</span><span style="color:#f92672">(</span>data<span style="color:#f92672">[</span>data<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span> <span style="color:#f92672">-</span> 3<span style="color:#f92672">]</span> <span style="color:#f92672">&amp;</span> 0xFFL<span style="color:#f92672">)</span> <span style="color:#f92672">&lt;</span><span style="color:#f92672">&lt;</span> 16<span style="color:#f92672">)</span> <span style="color:#f92672">|</span> <span style="color:#f92672">(</span><span style="color:#f92672">(</span>data<span style="color:#f92672">[</span>data<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span> <span style="color:#f92672">-</span> 2<span style="color:#f92672">]</span> <span style="color:#f92672">&amp;</span> 0xFFL<span style="color:#f92672">)</span> <span style="color:#f92672">&lt;</span><span style="color:#f92672">&lt;</span> 8<span style="color:#f92672">)</span> <span style="color:#f92672">|</span> <span style="color:#f92672">(</span>data<span style="color:#f92672">[</span>data<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span> <span style="color:#f92672">-</span> 1<span style="color:#f92672">]</span> <span style="color:#f92672">&amp;</span> 0xFFL<span style="color:#f92672">)</span><span style="color:#f92672">;</span>

</code></pre></div><p>Контрольная сумма при этом не совпадала. Я решил попробовать взять контрольную сумму от данных без учёта CSP заголовка:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">long</span> expectedCrc32 <span style="color:#f92672">=</span> Crc32c<span style="color:#f92672">.</span><span style="color:#a6e22e">calculate</span><span style="color:#f92672">(</span>data<span style="color:#f92672">,</span> Header<span style="color:#f92672">.</span><span style="color:#a6e22e">LENGTH</span><span style="color:#f92672">,</span> data<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span> <span style="color:#f92672">-</span> 4 <span style="color:#f92672">-</span> Header<span style="color:#f92672">.</span><span style="color:#a6e22e">LENGTH</span><span style="color:#f92672">)</span><span style="color:#f92672">;</span>
<span style="color:#66d9ef">long</span> actualCrc32 <span style="color:#f92672">=</span> <span style="color:#f92672">(</span><span style="color:#f92672">(</span>data<span style="color:#f92672">[</span>data<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span> <span style="color:#f92672">-</span> 4<span style="color:#f92672">]</span> <span style="color:#f92672">&amp;</span> 0xFFL<span style="color:#f92672">)</span> <span style="color:#f92672">&lt;</span><span style="color:#f92672">&lt;</span> 24<span style="color:#f92672">)</span> <span style="color:#f92672">|</span> <span style="color:#f92672">(</span><span style="color:#f92672">(</span>data<span style="color:#f92672">[</span>data<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span> <span style="color:#f92672">-</span> 3<span style="color:#f92672">]</span> <span style="color:#f92672">&amp;</span> 0xFFL<span style="color:#f92672">)</span> <span style="color:#f92672">&lt;</span><span style="color:#f92672">&lt;</span> 16<span style="color:#f92672">)</span> <span style="color:#f92672">|</span> <span style="color:#f92672">(</span><span style="color:#f92672">(</span>data<span style="color:#f92672">[</span>data<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span> <span style="color:#f92672">-</span> 2<span style="color:#f92672">]</span> <span style="color:#f92672">&amp;</span> 0xFFL<span style="color:#f92672">)</span> <span style="color:#f92672">&lt;</span><span style="color:#f92672">&lt;</span> 8<span style="color:#f92672">)</span> <span style="color:#f92672">|</span> <span style="color:#f92672">(</span>data<span style="color:#f92672">[</span>data<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span> <span style="color:#f92672">-</span> 1<span style="color:#f92672">]</span> <span style="color:#f92672">&amp;</span> 0xFFL<span style="color:#f92672">)</span><span style="color:#f92672">;</span>
</code></pre></div><p>И это на удивление сработало. Опять же, в документации ни слова про контрольную сумму. А ведь это очень мощный инструмент определения корректности данных.</p>
<h2 id="heading-2">Выводы</h2>
<p>Мне удалось декодировать большинство радиомаяков, хотя и с некоторыми трудностями. В целом это было очень увлекательно и чем-то похоже на детективную историю с поиском улик.</p>
<p>С другой стороны, документация от <a href="http://www.aistechspace.com">Aistech</a> вызывает больше вопросов, чем ответов. Из-за того, что они используют радиолюбительский диапазон, им необходимо раскрыть протоколы. Однако, из-за того, что это коммерческая компания, им необходимо скрыть свои эксперименты на орбите и технологию работы спутников. Получается такая двоякая непростая ситуация для компании. Мне же кажется, что доступ к нелицензируемым радиочастотам сильно ускорит разработку коммерческих спутников и в целом положительно скажется на освоении космоса. Главное, чтобы этим не злоупотребляли. А вот тут сложно.</p>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Расчёт вероятности ошибки для BPSK демодулятора</title>
      <link>https://dernasherbrezon.com/posts/jradio-ber-bpsk/</link>
      <pubDate>Fri, 16 Aug 2019 10:22:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/jradio-ber-bpsk/</guid>
      <description>Введение Спустя несколько недель я наконец-то закончил одну очень важную задачу - расчёт вероятности ошибки в BSPK демодуляторе. Почему это важно? Демодулятор работает с сигналом, который проходит через физическую среду. В этой среде возможны сильные или слабые возмущения, которые непосредственно влияют на сигнал. И принимаемый сигнал может меняться со временем от хорошего до плохого и обратно. Из-за этого нельзя однозначно сказать демодулятор &amp;ldquo;работает&amp;rdquo; или &amp;ldquo;не работает&amp;rdquo;. Чтобы оценить его эффективность, необходимо симулировать среду передачи данных и сказать сколько ошибок он выдаёт при разных возмущениях среды.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Расчёт вероятности ошибки для BPSK демодулятора</h1></header>
      		<div class='container entry-content'>
  <h2 id="heading">Введение</h2>
<p>Спустя несколько недель я наконец-то закончил одну очень важную задачу - расчёт вероятности ошибки в BSPK демодуляторе. Почему это важно? Демодулятор работает с сигналом, который проходит через физическую среду. В этой среде возможны сильные или слабые возмущения, которые непосредственно влияют на сигнал. И принимаемый сигнал может меняться со временем от хорошего до плохого и обратно. Из-за этого нельзя однозначно сказать демодулятор &ldquo;работает&rdquo; или &ldquo;не работает&rdquo;. Чтобы оценить его эффективность, необходимо симулировать среду передачи данных и сказать сколько ошибок он выдаёт при разных возмущениях среды. После этого уже можно сравнивать с теоретическими значениями и делать выводы.</p>
<h2 id="-">Описание теста</h2>
<p>Для того, чтобы симулировать поведение демодулятора, я написал специальный тест. За основу я взял идею <a href="https://destevez.net/2017/07/ber-simulation-in-gnu-radio/">Daniel Estevez</a> и <a href="https://github.com/dernasherbrezon/jradio/blob/master/src/test/java/ru/r2cloud/jradio/demod/BpskDemodulatorBer.java">реализовал её</a> на java.</p>
<p>Идея заключается в том, что подавая на вход BSPK модулятора множество &ldquo;1&rdquo;, необходимо получить множество &ldquo;1&rdquo; на выходе демодулятора. Если в результате получается &ldquo;0&rdquo;, то это значит ошибка. Если подсчитать количество &ldquo;0&rdquo; на выходе и поделить на общее количество полученных битов, то получится вероятность ошибки (BER).</p>
<p>К сожалению, просто передавать &ldquo;1&rdquo; и получать &ldquo;1&rdquo; не получится. Необходимо сделать несколько шагов:</p>
<ul>
<li>сначала все генерируемые биты необходимо скрэмблировать. Это делается для того, чтобы в передаваемом сигнале было примерно одинаковое количество &ldquo;0&rdquo; и &ldquo;1&rdquo;. Почему это важно? Дело в том, что демодулятор должен выполнить синхронизацию символов. Если в передаваемом сигнале будут только &ldquo;1&rdquo;, то ему будет сложно принять решение сколько символов пришло &ldquo;1111&rdquo; или &ldquo;11111&rdquo;. Если же в принимаемом сигнале будет вперемешку &ldquo;0&rdquo; и &ldquo;1&rdquo;, то сигнал будет достаточно сильно меняться по фазе. И это сильно поможет при синхронизации символов.</li>
<li>далее биты необходимо дифференциально закодировать. Это значит, что необходимо передавать &ldquo;1&rdquo;, только если сигнал сменился с &ldquo;0&rdquo; на &ldquo;1&rdquo; или с &ldquo;1&rdquo; на &ldquo;0&rdquo;. Для чего? Приёмник может начать принимать сигнал в противофазе. В итоге все полученные биты будут инвертированы относительно оригинального сигнала. Однако, если передавать информацию через изменение битов, то после дифференциального декодирования информация восстановится без ошибок.</li>
<li>генерация BPSK сигнала. Для генерации сигнала и приёма используется согласующий Root Raised Cosine фильтр.</li>
<li>симуляция физического канала передачи данных. Здесь происходит самое интересное. По сути, эта симуляция - математическая модель, описывающая возмущения физической среды. С помощью неё можно симулировать фазовые, частотные и амлитудные колебания, добавить белый гауссовский шум, добавить различные начальные смещения. В моей симуляции я использовал только белый гауссовский шум, чтобы можно было сравнить с <a href="https://dernasherbrezon.com/posts/ber-bpsk/">теоретическим рассчётом</a>.</li>
<li>демодуляция BPSK сигнала. Собственно, блок, который я собираюсь тестировать.</li>
<li>дифференциальное декодирование и дескрэмблирование.</li>
</ul>
<p>На выходе я должен получить поток битов, на основе которых можно посчитать вероятность ошибки. Тут, правда, есть ещё несколько интересных моментов, которые стоит упомянуть. Во-первых, необходимо отбросить какое-то количество бит в самом начале. Они могут быть заведомо ошибочными, из-за начальной синхронизации демодулятора и дескремблера. Во-вторых, количество действительно неправильных бит должно быть поделено на 6. Это прежде всего связано с дифференциальным кодированием и скрэмблированием.</p>
<p>Если была принята ошибка, то дифференциальное декодирование добавит ещё одну. Это значит необходимо поделить на 2. Для скремблирования я использую полином <code>0b00000000000100001</code>. А это значит, что на любую ошибку на входе, будет сгенерировано 3 ошибки на выходе. Итого получается 2*3=6.</p>
<h2 id="heading-1">Результаты</h2>
<p>Прежде чем получить финальный результат, я провёл несколько измерений для различных конфигураций демодулятора. Изначально демодулятор содержал блок эквалайзера. Он был нужен прежде всего для того, чтобы бороться с <a href="https://ru.wikipedia.org/wiki/%D0%9C%D0%BD%D0%BE%D0%B3%D0%BE%D0%BB%D1%83%D1%87%D0%B5%D0%B2%D0%BE%D0%B5_%D1%80%D0%B0%D1%81%D0%BF%D1%80%D0%BE%D1%81%D1%82%D1%80%D0%B0%D0%BD%D0%B5%D0%BD%D0%B8%D0%B5">многолучевым распространением</a>. Однако, на практике характеристики демодулятора сильно хуже теоретических:</p>
<p><a href="/img/jradio-ber-bpsk/lmsdd.m"><img src="/img/jradio-ber-bpsk/lmsdd.png" alt=""></a></p>
<p>Синей линией обозначается теоретическое значение, красной - практическое измерение.</p>
<p>Ещё одним фактором влияющим на результат является количество данных. Вот пример расчёта для 100000 переданных битов:</p>
<p><a href="/img/jradio-ber-bpsk/100000bit.m"><img src="/img/jradio-ber-bpsk/100000bit.png" alt=""></a></p>
<p>А вот тот же расчёт, но для 1000000 бит:</p>
<p><a href="/img/jradio-ber-bpsk/ber-bpsk-demodulator.m"><img src="/img/jradio-ber-bpsk/ber-bpsk-demodulator.png" alt="bpsk demodulator"></a></p>
<p>Как видно на картинке, практическая реализация BPSK демодулятора почти совпадает с <a href="https://dernasherbrezon.com/posts/ber-bpsk/">теоретическими рассчётами</a>. Это даёт уверенности в текущей реализации и позволяет начать оптимизировать другие показатели демодулятора. Также я могу в любой момент запустить тест и проверить изменились ли характеристики. Это очень мощный инструмент отладки.</p>
<h2 id="--1">Что дальше?</h2>
<p>Можно добавить различные искажения среды и измерить реакцию демодулятора на них. Из того, что доступно:</p>
<ol>
<li>Симуляция многолучевого распространения.</li>
<li>Симуляция частотных и фазовых колебаний.</li>
</ol>
<p>Ещё одной важной характеристикой является скорость захвата несущей. Допустим изначально сигнал смещён на некоторую частоту. Это может возникнуть из-за неточного генератора сигнала в rtl-sdr или генератора сигнала самого спутника. В таком случае демодулятор должен уметь подстраиваться и компенсировать разницу частот. На эту подстройку должно уходить время. Было бы неплохо измерить его, и, возможно, улучшить.</p>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Тестирование SDR Filter v1.1</title>
      <link>https://dernasherbrezon.com/posts/test-sdr-filter/</link>
      <pubDate>Thu, 08 Aug 2019 19:20:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/test-sdr-filter/</guid>
      <description>Одна из моих базовых станций принимает очень много помех. Из-за низкой чувствительности rtl-sdr, полезный сигнал почти нельзя получить. У меня возникла идея о том, что часть помех может приходить от USB разъёма RPi. Чтобы проверить эту идею, я недавно приобрёл SDR Filter v1.1 от компании ExpElectroLab и решил сделать на него небольшое видео ревью.
  Процесс тестирования Самое интересное началось сразу же после распаковки устройства. Дело в том, что входящий USB порт формата Type B.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Тестирование SDR Filter v1.1</h1></header>
      		<div class='container entry-content'>
  <p>Одна из моих базовых станций принимает очень много помех. Из-за <a href="https://dernasherbrezon.com/posts/dynamic-range/">низкой чувствительности</a> rtl-sdr, полезный сигнал почти нельзя получить. У меня возникла идея о том, что часть помех может приходить от USB разъёма RPi. Чтобы проверить эту идею, я недавно приобрёл SDR Filter v1.1 от компании ExpElectroLab и решил сделать на него небольшое видео ревью.</p>

<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube.com/embed/7n8nLey6yYo" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>

<h2 id="-">Процесс тестирования</h2>
<p>Самое интересное началось сразу же после распаковки устройства. Дело в том, что входящий USB порт формата Type B. Поэтому просто подключить последовательно фильтр и rtl-sdr к компьютеру не получится. В комплекте устройства USB переходника нет, поэтому пришлось идти в ближайший магазин и покупать дополнительный кабель.</p>
<p>После подключения выясняется, что устройство не работает.</p>
<p>Я измерил напряжение на входящем и исходящем USB портах. На входе 4.7В, а на выходе 3.2В. Видимо стандартного напряжения компьютера недостаточно. Но на всякий случай я спросил у авторов, в чём же может быть проблема. Оказывается, надо покупать более короткий шнур. Это первое USB устройство на моей памяти, которое работает в зависимости от длины шнура. На сайте производителя об этом не сказано.</p>
<p><img src="/img/test-sdr-filter/description.png" alt=""></p>
<p>Мне пришлось заказать ещё один шнур, на этот раз покороче. После подключения, загорелась лампочка, но rtl-sdr по-прежнему не определялся. На этот раз напряжение на выходном USB порту было 3.5В. По-прежнему недостаточно. Я связался с автором ещё раз и попросил помощи. Автор посоветовал закоротить диод D1. У меня дома нет паяльника, поэтому я не могу проверить это решение.</p>
<h2 id="heading">Выводы</h2>
<ol>
<li>SDR Filter явно имеет проблемы с питанием. Непонятно как авторы тестировали его.</li>
<li>Мне не удалось заставить его работать, поэтому он теперь просто валяется в коробке.</li>
</ol>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Тестирование FM фильтров с помощью RTL-SDR</title>
      <link>https://dernasherbrezon.com/posts/test-fm-filter/</link>
      <pubDate>Sun, 14 Jul 2019 14:20:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/test-fm-filter/</guid>
      <description>TL;TR; Фильтры тестировать можно, но выводы нужно делать аккуратно.
Постановка задачи Архитектура rtl sdr требует специального фильтра на входе. Поскольку сильнешими источниками сигнала являются фм станции, то я решил поставить фм фильтры на входе приёмника. Но прежде, чем устанавливать их, мне хотелось измерить частотные характеристики фильтров и пощупать их в деле. Для этого я купил несколько фм фильтров и собрал стэнд для их тестирования.
Описание стэнда Тестирование заключается в том, что генератор сигнала создаёт широкополосный шум по всей ширине спектра.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Тестирование FM фильтров с помощью RTL-SDR</h1></header>
      		<div class='container entry-content'>
  <p>TL;TR; Фильтры тестировать можно, но выводы нужно делать аккуратно.</p>
<h2 id="-">Постановка задачи</h2>
<p>Архитектура rtl sdr требует специального фильтра на входе. Поскольку сильнешими источниками сигнала являются фм станции, то я решил поставить фм фильтры на входе приёмника. Но прежде, чем устанавливать их, мне хотелось измерить частотные характеристики фильтров и пощупать их в деле. Для этого я купил несколько фм фильтров и собрал стэнд для их тестирования.</p>
<h2 id="--1">Описание стэнда</h2>
<p>Тестирование заключается в том, что генератор сигнала создаёт широкополосный шум по всей ширине спектра. Фильтр отфильтровывает только часть. Разница между сигналом с фильтром и без, и есть характеристика фильтра. Вот как выглядит мой стэнд:</p>
<p><img src="/img/test-fm-filter/1.jpg" alt=""></p>
<h3 id="heading">Софт</h3>
<p>rtl_power - программа из стандартной поставки <a href="https://github.com/osmocom/rtl-sdr">rtl-sdr</a>. Она позволяет сканировать большой диапазон частот, разбивая его участки примерно 2Mhz и выполняя быстрое преобразование фурье. После этого, результаты преобразуются в dbm. Все измерения производились с помощью одних и тех же настроек:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">rtl_power -f 50M:150M:100k -g <span style="color:#ae81ff">0</span> -c 20% -i 2m -1
</code></pre></div><p><a href="http://github.com/dernasherbrezon/rtlSpectrum">rtlSpectrum</a> - небольшая программа для удобного отображения результатов и сравнения нескольких графиков.</p>
<h3 id="--2">Генератор сигнала</h3>
<p><img src="/img/test-fm-filter/noise-source.jpg" alt=""></p>
<p>Достаточно дешёвый и хороший генератор широкополосного сигнала. В описании сказано, что он должен работать от напряжения 12В. На практике же, это слишком большое напряжение для rtl-sdr, поэтому <a href="http://blog.radiospy.ru/testy/achx-metr-iz-svistka.html#more-1452">согласно рекомендациям</a> я подлючил его к источнику питания 5В. Для сравнения я измерил его частотную характеристику на 5В и 12В:</p>
<p><img src="/img/test-fm-filter/5v-12v.png" alt=""></p>
<p>На картинке зелёный график - это 12В, жёлтый - 5В, оранжевый - без генератора. Как видно, разница между 5В и 12В составляет примерно 5дб.</p>
<h3 id="heading-1">Аттенюатор</h3>
<p><img src="/img/test-fm-filter/attenuator.jpg" alt=""></p>
<p><a href="https://ru.wikipedia.org/wiki/%D0%90%D1%82%D1%82%D0%B5%D0%BD%D1%8E%D0%B0%D1%82%D0%BE%D1%80">Аттенюатор</a> - это устройство для плавного понижения электромагнитных колебаний. Как в дальнейшем показали опыты, он крайне необходим, чтобы получить более или менее хорошие результаты. Я использовал аттенюатор -10db. Вот пример понижения частот в ФМ диапазоне:</p>
<p><img src="/img/test-fm-filter/compare-attenuator-5v.png" alt=""></p>
<p>Видно, что снижение мощности происходит на 9дб, что почти является заявленными 10дб.</p>
<p>Когда я начал тестировать фильтры, выяснилось, что снижение напряжения на генераторе до 5В недостаточно. Вот небольшое сравнение характеристики фильтра с аттенюатором и без:</p>
<p><img src="/img/test-fm-filter/rtl-sdr-attenuator-effect.png" alt=""></p>
<p>По своим характеристикам фильтр должен давать уменьшение мощности на -60дб. Однако, судя по графику, он даёт только -30дб. При работе аттенюатора появляется более явный результат фильтрации. Однако, минимальное значение по-прежнему -35дб. Этот эффект называется &ldquo;перегрузка&rdquo;. Мощность входного сигнала слишком большая, поэтому <a href="https://dernasherbrezon.com/posts/dynamic-range/">динамического диапазона</a> rtl-sdr не хватает и нижняя часть графика обрезается. Вот пример измерения того же фильтра на профессиональном оборудовании:</p>
<p><img src="/img/test-fm-filter/rtl-sdr-fm-filter-real.jpg" alt=""></p>
<h3 id="--3">ФМ фильтры</h3>
<p>В тесте участвовали следующие фильтры:</p>
<ul>
<li><a href="https://www.rtl-sdr.com/rtl-sdr-com-broadcast-fm-band-stop-filter-88-108-mhz-reject-now-for-sale/">rtl-sdr.com FM reject filter</a></li>
<li><a href="https://www.ebay.com/itm/FM-Notch-Filter-88-108MHz-Excellent-Rejection-85dB-Bandstop-9th-order-FM-Trap/282342066492?hash=item41bce6093c:g:O2MAAOSw-0xYTW3W">gpio labs</a></li>
<li><a href="https://www.amazon.co.uk/NooElec-Distill-Barebones-Broadcast-Applications/dp/B076D354LW">Distill FM</a> от NooElec</li>
</ul>
<h3 id="rtl-sdr-">rtl-sdr примник</h3>
<p><img src="/img/test-fm-filter/rtl-sdr.jpg" alt=""></p>
<p>В качестве rtl-sdr приемника я использовал <a href="https://www.amazon.com/dp/B0129EBDS2/ref=as_li_ss_tl?ie=UTF8&amp;linkCode=sl1&amp;tag=rsv0f-20&amp;linkId=9806dfa291f74f7cdb49e2cfbe3d34eb">rtl-sdr.com</a>. У него хорошие характеристики и удобный SMA коннектор.</p>
<h2 id="--4">Результаты теста</h2>
<p><img src="/img/test-fm-filter/result.png" alt=""></p>
<p>Где:</p>
<ul>
<li>жёлтый - Distill FM. <a href="/img/test-fm-filter/nooelec_diff.csv">Данные</a></li>
<li>зелёный - gpio labs. <a href="/img/test-fm-filter/gpio_diff.csv">Данные</a></li>
<li>оранжевый - rtl-sdr.com FM reject filter. <a href="/img/test-fm-filter/rtlsdrcom_diff.csv">Данные</a></li>
</ul>
<p>По ссылкам можно скачать результат для каждого фильтра, загрузить в <a href="http://github.com/dernasherbrezon/rtlSpectrum">rtlSpectrum</a> и посравнивать их на разных частотах.</p>
<p>Выводы:</p>
<ul>
<li>фильтры соответствуют заявленным характеристикам. По крайней мере на столько, на сколько позволяет судить стэнд.</li>
<li>с помощью rtl-sdr и rtl_power можно измерять характеристики фильтров, но делать это нужно очень аккуратно.</li>
</ul>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Работа с bash pipe из java</title>
      <link>https://dernasherbrezon.com/posts/bash-pipe-in-java/</link>
      <pubDate>Tue, 09 Jul 2019 20:50:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/bash-pipe-in-java/</guid>
      <description>Постановка задачи Не так давно передо мной встала задача работать с нативным приложением из java. Это приложение - rtl_sdr. Суть его работы достаточно простая: оно подключается к USB, читает данные и пишет их в файл или в stdout.
А дальше Обычно нативные приложения не рекомендуется запускать из JVM. Дело в том, что как только управление передаётся из JVM вовне, то все предоставленные гарантии JVM теряются. Но если хочется, то вызвать приложение можно так:</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Работа с bash pipe из java</h1></header>
      		<div class='container entry-content'>
  <h2 id="-">Постановка задачи</h2>
<p>Не так давно передо мной встала задача работать с нативным приложением из java. Это приложение - rtl_sdr. Суть его работы достаточно простая: оно подключается к USB, читает данные и пишет их в файл или в stdout.</p>
<h2 id="--1">А дальше</h2>
<p>Обычно нативные приложения не рекомендуется запускать из JVM. Дело в том, что как только управление передаётся из JVM вовне, то все предоставленные гарантии JVM теряются. Но если хочется, то вызвать приложение можно так:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">Process process <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> ProcessBuilder<span style="color:#f92672">(</span><span style="color:#f92672">)</span><span style="color:#f92672">.</span><span style="color:#a6e22e">command</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;rtl_sdr&#34;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;-arg1&#34;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;value1&#34;</span><span style="color:#f92672">,</span> <span style="color:#f92672">.</span><span style="color:#f92672">.</span><span style="color:#f92672">.</span><span style="color:#f92672">)</span><span style="color:#f92672">.</span><span style="color:#a6e22e">start</span><span style="color:#f92672">(</span><span style="color:#f92672">)</span><span style="color:#f92672">;</span>
<span style="color:#66d9ef">int</span> exitCode <span style="color:#f92672">=</span> process<span style="color:#f92672">.</span><span style="color:#a6e22e">waitFor</span><span style="color:#f92672">(</span><span style="color:#f92672">)</span><span style="color:#f92672">;</span>
</code></pre></div><p>Здесь все достаточно просто:</p>
<ul>
<li>запускается процесс</li>
<li>Java поток ожидает пока приложение завершится</li>
</ul>
<p>Однако, тут сразу же возникает проблема: rtl_sdr будет работать пока не получит команду от пользователя остановиться. Поэтому этот метод никогда не завершится. Значит для этого необходимо сделать отдельный метод, который бы вызывался с другого потока:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">complete</span><span style="color:#f92672">(</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
	process<span style="color:#f92672">.</span><span style="color:#a6e22e">destroy</span><span style="color:#f92672">(</span><span style="color:#f92672">)</span><span style="color:#f92672">;</span>
<span style="color:#f92672">}</span>
</code></pre></div><h2 id="--2">Новые требования</h2>
<p>Итак код работает в проде уже несколько месяцев. Но тут выясняется, что raspberry pi не успевает записывать на флэшку. Я <a href="https://dernasherbrezon.com/posts/rtlsdr-gzip/">провел тесты</a> и убедился, что сжатие входящих данных сильно ускоряет систему и делает её более стабильной.</p>
<p>Самый простой способ сделать сжатие можно следующим способом:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">byte</span><span style="color:#f92672">[</span><span style="color:#f92672">]</span> buf <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#66d9ef">byte</span><span style="color:#f92672">[</span>BUF_SIZE<span style="color:#f92672">]</span><span style="color:#f92672">;</span>
<span style="color:#66d9ef">while</span> <span style="color:#f92672">(</span><span style="color:#f92672">!</span>Thread<span style="color:#f92672">.</span><span style="color:#a6e22e">currentThread</span><span style="color:#f92672">(</span><span style="color:#f92672">)</span><span style="color:#f92672">.</span><span style="color:#a6e22e">isInterrupted</span><span style="color:#f92672">(</span><span style="color:#f92672">)</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
	<span style="color:#66d9ef">int</span> r <span style="color:#f92672">=</span> process<span style="color:#f92672">.</span><span style="color:#a6e22e">getInputStream</span><span style="color:#f92672">(</span><span style="color:#f92672">)</span><span style="color:#f92672">.</span><span style="color:#a6e22e">read</span><span style="color:#f92672">(</span>buf<span style="color:#f92672">)</span><span style="color:#f92672">;</span>
	<span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>r <span style="color:#f92672">=</span><span style="color:#f92672">=</span> <span style="color:#f92672">-</span>1<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
		<span style="color:#66d9ef">break</span><span style="color:#f92672">;</span>
	<span style="color:#f92672">}</span>
	gzipOutputStream<span style="color:#f92672">.</span><span style="color:#a6e22e">write</span><span style="color:#f92672">(</span>buf<span style="color:#f92672">,</span> 0<span style="color:#f92672">,</span> r<span style="color:#f92672">)</span><span style="color:#f92672">;</span>
<span style="color:#f92672">}</span>
gzipOutputStream<span style="color:#f92672">.</span><span style="color:#a6e22e">flush</span><span style="color:#f92672">(</span><span style="color:#f92672">)</span><span style="color:#f92672">;</span>
</code></pre></div><p>Но такой способ оказался достаточно медленным. Дело в том, что данные копировались в память JVM, а потом уже в gzip. Но если не писать через JVM, то остаётся только способ каким-нибудь образом использовать bash pipe. Немного повозившись с реализацией, у меня получилось следующее:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">Process process <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> ProcessBuilder<span style="color:#f92672">(</span><span style="color:#f92672">)</span><span style="color:#f92672">.</span><span style="color:#a6e22e">command</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;rtl_sdr_wrapper.sh&#34;</span><span style="color:#f92672">)</span><span style="color:#f92672">.</span><span style="color:#a6e22e">start</span><span style="color:#f92672">(</span><span style="color:#f92672">)</span><span style="color:#f92672">;</span>
<span style="color:#66d9ef">int</span> exitCode <span style="color:#f92672">=</span> process<span style="color:#f92672">.</span><span style="color:#a6e22e">waitFor</span><span style="color:#f92672">(</span><span style="color:#f92672">)</span><span style="color:#f92672">;</span>
</code></pre></div><p>И код враппера:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">rtl_sdr -arg1 value1 ... | gzip &gt; output.gz
</code></pre></div><p>Почти сразу после релиза стало понятно, что сломалась остановка процесса. Дело в том, что этот bash скрипт создаёт 2 подпроцесса. При вызове <code>process.destroy();</code> завершается сам скрипт и gzip. rtl_sdr при этом остаётся работать. Пришлось повозится с bash-магией и получилось следующее:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">_term<span style="color:#f92672">(</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span> 
  kill -TERM <span style="color:#e6db74">&#34;</span>$rtl<span style="color:#e6db74">&#34;</span> 2&gt;/dev/null
<span style="color:#f92672">}</span>

rtl_sdr -arg1 value1 ... | gzip &gt; output.gz &amp;

rtl<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>jobs -p<span style="color:#66d9ef">)</span>
child<span style="color:#f92672">=</span>$! 
wait <span style="color:#e6db74">&#34;</span>$child<span style="color:#e6db74">&#34;</span>
</code></pre></div><p>Что же здесь происходит?</p>
<ul>
<li>устанавливается обработчик сигнала TERM. Этот сигнал посылает JVM при вызове метода destroy</li>
<li>запускается pipe и переходит в фоновый режим</li>
<li>получается pid первого процесса - rtl_sdr</li>
<li>скрипт начинает ожидать, когда завершиться процесс rtl_sdr</li>
</ul>
<p>Последним штрихом необходимо правильно передать код возврата. Есть две ситуации завершения работы:</p>
<ul>
<li>Нормальная работа. При нормальной работе rtl_sdr всегда должна завершаться через kill. И тогда статус должен быть 143. Однако, если завершать pipe с помощью <code>kill -TERM</code>, то pipe вернёт код возврата последней команды - gzip. И тогда этот код передастся команде wait и она пробросит его выше. Этот код будет 0.</li>
<li>Завершение с ошибкой. Код возврата в таком случае 0. Он должен опять же проброситься в команду wait и дальше в Java.</li>
</ul>
<p>Решается эта проблема следующей командой:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">set -o pipefail
</code></pre></div><p>Она заставляет pipe вернуть код первой команды, которая завершилась не статусом 0.</p>
<h2 id="heading">Выводы</h2>
<p>Если необходимо оптимизировать обработку данных на уровне операционной системы, то можно использовать bash pipe. И да, его можно вызывать из Java. Надо только делать это очень осторожно.</p>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Динамический диапазон rtl-sdr</title>
      <link>https://dernasherbrezon.com/posts/dynamic-range/</link>
      <pubDate>Sun, 30 Jun 2019 22:22:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/dynamic-range/</guid>
      <description>Ниже я сделал перевод одной замечательной заметки Mile Kokotov о динамическом диапазоне rtl-sdr. Это очень важный показатель, которым я заинтересовался и решил разобраться. Возможно кому-нибудь это тоже будет полезно.
 Большинство людей думает, что наиболее важной характеристикой радиоприёмника является чувствительность, но это не совсем так. Вообще, спроектировать и произвести приёмник с высокой чувствительностью не проблема. Гораздо сложнее для инженеров спроектировать приёмник с большим динамическим диапазоном, который смог бы принимать как очень слабые сигналы, так и очень сильные одновременно.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Динамический диапазон rtl-sdr</h1></header>
      		<div class='container entry-content'>
  <blockquote>
<p>Ниже я сделал перевод одной замечательной <a href="https://www.qsl.net/z33t/dynamic_range_eng.html">заметки Mile Kokotov</a> о динамическом диапазоне rtl-sdr. Это очень важный показатель, которым я заинтересовался и решил разобраться. Возможно кому-нибудь это тоже будет полезно.</p>
</blockquote>
<p>Большинство людей думает, что наиболее важной характеристикой радиоприёмника является чувствительность, но это не совсем так. Вообще, спроектировать и произвести приёмник с высокой чувствительностью не проблема. Гораздо сложнее для инженеров спроектировать приёмник с большим динамическим диапазоном, который смог бы принимать как очень слабые сигналы, так и очень сильные одновременно.</p>
<p>Перегрузка приёмника означает то, что он больше не является линейным и сам по себе начинает генерировать сигналы, добавляя шум. Очень сильные сигналы на входе приёмника делают его менее чувствительным, таким образом он больше не может принимать слабые сигналы до тех пор, пока существует сильный сигнал рядом. Не стоит забывать, что на вход приёмнику приходят все сигналы, несмотря на то, что нам нужен только один конкретный. Соответственно, чем шире полоса приёма, тем больше нужен динамический диапазон для того, чтобы избержать перегрузки.</p>
<p>Качество sdr приёмника зависит от множества факторов. И одним из наиболее важных параметров, которые напрямую влияют на качество sdr приёмника, является его динамический диапозон.</p>
<h1 id="----">Что же такое &ldquo;динамический диапазон&rdquo;?</h1>
<p>В общем случае, динамический диапазон - это отношение самого сильного сигнала, который можно принять, к самому слабому.</p>
<p>Для цифровых сигналов динамический диапазон определяется количеством битов в сэмпле: самый сильный сигнал использует все возможные биты, самый слабый - только один бит.</p>
<p>В sdr уровень аналогового сигнала, поступающего в АЦП, может быть отрегулирован (вручную или с помощью АРУ) для того, чтобы максимально эффективно использовать доступный динамический диапазон.</p>
<p>Если аналоговый сигнал слишком сильный, то его нельзя представить соответствующими значениями битов. В таком случае АЦП подставляет максимальное или минимальное значение. Это называется отсечение и с точки зрения обработки сигналов представляет собой форму нелинейного сигнала. При этом появляются фантомные сигналы, которые копируют оригинальный на различных частотах.</p>
<p>Если аналоговый сигнал слишком слабый, то его присутствие не сможет дать даже одного бита выходного цифрового сигнала. На практике же, более грубое представление цифрового сигнала приводит к потере информации. Эту ситуацию называют шумом квантования.</p>
<p>Динамический диапазон АЦП - это отношение между самым сильным и самым слабым сигналом, которое может быть переведено в цифровой вид без искажений.</p>
<p>Самый сильный сигнал представляет собой максимальный входящий сигнал. Обычно 0dBFS (dBFS означает децибел по отношению к максимальному уровню) - это максимально возможный цифровой сигнал. При этом более слабые сигналы становятся отрицательными. Например, минимальный уровень шума может быть -60dBFS, -80dBFS, -100 dBFS в зависимости от качества sdr приёмника и соотношения сигнал/шум.</p>
<p><img src="/img/dynamic-range/1.jpg" alt=""></p>
<p>Динамический диапазон SDR зависит от количества бит <a href="https://dernasherbrezon.com/posts/sqnr/">согласно формуле</a>:</p>
<p>$$
SQNR = 20\log_{10}(2^n\sqrt{\dfrac{3}{2}})
$$</p>
<p>Где n - количество бит, SQNR - динамический диапазон.</p>
<p>Согласно формуле динамический диапазон АЦП 8 бит равен ~50dB, 12 бит 74dB и 16 бит 98dB.</p>
<p>Почему же динамический диапазон важен для SDR?</p>
<p>Кто-то может подумать, что достаточно иметь АРУ (автоматическая регулировка усиления), которая поддерживает входной сигнал на необоходимом уровне и, поэтому не нужен большой динамический диапазон. Это может сработать, но не стоит забывать что sdr приёмник получает сигнал на АЦП гораздо большей ширины, нежели необходимо. Дополнительная ширина сигнала позволяет получить спектограмму всей доступной полосы частот, но это так же значит, что на АЦП попадает множество энергии в том числе и от нежелательных частот. Эти частоты могут быть достаточно сильными по сравнению с сигналом, который необходимо получить.</p>
<p>В таком случае, уровень усиления должен быть равен суммарной мощности всего радио сигнала поступающего на АЦП. Это решит проблему &ldquo;слишком сильного&rdquo; сигнала, при этом самый слабый сигнал будет определяться динамическим диапазоном. Тем не менее, при большом динамическом диапазоне шум квантирования уменьшается, позволяя принимать слабые узкополосные сигналы.</p>
<p>Улучшить качество сигнала можно еще одним способом - используя более узкий аналоговый фильтр. Это позволит сократить входную мощность и позволит усилить сигнал без отсечения. Однако, это работает если sdr имеет встроенный настраевыемый фильтр.</p>
<p>В крайнем случае можно использовать фильтр, равный полосе принимаемого сигнала. Недостатком этого метода является то, что нельзя будет увидеть полный спектр.</p>
<h1 id="--">Ограничения динамического диапазона</h1>
<p>Помимо количества бит АЦП, динамический диапазон может зависеть от шума и фантомных сигналов.</p>
<p>Если в приёмнике нет предусилителя, то его динамический диапазон ограничен динамическим диапазоном АЦП. Но если он есть, то динамический диапазон ограничен либо АЦП, либо предусилителем. При этом шум усилителя задаёт минимальный сигнал, который может быть оцифрован.</p>
<p>Динамический диапазон системы должен быть больше соотношения сигнал/шум. Если же он меньше, то входящий сигнал будет искажён приёмником и узким местом такой системы будет мощность усилителя.</p>
<p>Фантомные сигналы намного более опасны, чем шум. Они имеют гораздо большую амплитуду нежели шум и она не зависит от выбранной полосы пропускания. Эти сигналы появляются в результате нелинейности АЦП. SFDR для АЦП определяется как отношение RMS амлитуды сигнала к RMS амлитуды самого большего фантомного сигнала. SFDR представлен на картинке ниже:</p>
<p><img src="/img/dynamic-range/sfdr.jpg" alt="SFDR"></p>
<h1 id="-">Использование децимации</h1>
<p>Есть некоторое заблуждение связанное с динамическим диапазоном широкополосных АЦП. Оно заключается в том, что АЦП работающее на 20МГц с динамическим диапазоном 74dB не может быть лучше радиоприёмника с динамическим диапазоном 85dB. Проблема в том, что сравнивается белое с пушистым. Нельзя говорить о динамическом диапазоне не упоминая ширину канала. Для радиолюбительского радио - это ширина приёмника. Она может быть 2400Гц для SSB или 500Гц для морзе.</p>
<p>На самом деле в некоторых sdr приёмниках используется децимация. Процесс децимации заключается в том, что цифровой сигнал, полученный с гораздо большей частотой дискретизации, уменьшается до интересующей частоты дискретизации. В результате динамический диапазон увеличивается за счёт &ldquo;усиления обработки&rdquo;. Усиление достигается за счёт того, что удаляется шум вне интересующей полосы частот, тем самым увеличивая соотношение сигнал/шум.</p>
<p>Например, Если взять 12-битный АЦП, работающий с частотой дискретизации 10МГц, то с помощью децимации можно увеличивать динамический диапазон на 3dB при каждом увеличении децимации в 2 раза:</p>
<table>
<thead>
	<tr>
		<th>Децимация</th>
		<th>alias-free bandwidth (Mhz)</th>
		<th>Увеличение (dB)</th>
		<th>Динамический диапазон (dB)</th>
	</tr>
</thead>
<tbody>
	<tr>
		<td>0</td>
		<td>8</td>
		<td>0</td>
		<td>74</td>
	</tr>
	<tr>
		<td>2</td>
		<td>4</td>
		<td>3</td>
		<td>77</td>
	</tr>
	<tr>
		<td>4</td>
		<td>2</td>
		<td>6</td>
		<td>80</td>
	</tr>
	<tr>
		<td>8</td>
		<td>1</td>
		<td>9</td>
		<td>83</td>
	</tr>
	<tr>
		<td>16</td>
		<td>0.5</td>
		<td>12</td>
		<td>86</td>
	</tr>
	<tr>
		<td>32</td>
		<td>0.25</td>
		<td>15</td>
		<td>89</td>
	</tr>
	<tr>
		<td>64</td>
		<td>0.125</td>
		<td>18</td>
		<td>92</td>
	</tr>
</tbody>
</table>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Расчёт SQNR</title>
      <link>https://dernasherbrezon.com/posts/sqnr/</link>
      <pubDate>Thu, 27 Jun 2019 21:22:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/sqnr/</guid>
      <description>Введение Если открыть спецификацию на любой rtl-sdr приемник, то можно увидеть следующую характеристику: АЦП - 8 бит. Почему эта характеристика важна? Почему о ней пишут и что она значит? Я решил разобраться и провёл небольшое расследование.
SQNR АЦП преоразует сигнал из аналогового вида в цифровой. Это преобразование по своей сути всегда неточное. Дело в том, что аналоговый сигнал непрерывный, а цифровой - набор отсчетов. Процесс преобразования сигнала называется квантированием. При этом часть информации теряется, а значит, в терминах обработки сигнала появляется шум.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Расчёт SQNR</h1></header>
      		<div class='container entry-content'>
  <h1 id="heading">Введение</h1>
<p>Если открыть спецификацию на любой rtl-sdr приемник, то можно увидеть следующую характеристику: АЦП - 8 бит. Почему эта характеристика важна? Почему о ней пишут и что она значит? Я решил разобраться и провёл небольшое расследование.</p>
<h1 id="sqnr">SQNR</h1>
<p>АЦП преоразует сигнал из аналогового вида в цифровой. Это преобразование по своей сути всегда неточное. Дело в том, что аналоговый сигнал непрерывный, а цифровой - набор отсчетов. Процесс преобразования сигнала называется квантированием. При этом часть информации теряется, а значит, в терминах обработки сигнала появляется шум. Этот шум называется шумом квантования. Обычно правда используют другой параметр - отношение сигнала к шуму квантирования (SQNR).</p>
<p>$$
SQNR = 20\log_{10}(\dfrac{V_{rms}}{V_{e}})
$$</p>
<p>где \(V_{rms}\) - это средне квадратичное сигнала (синусоиды),
\(V_{e}\) - это средне квадратичное ошибки квантирования.</p>
<p>В общем случае среднее квадратичное (RMS) это:</p>
<p>$$
V_{rms} = {\sqrt{{\dfrac{V_1^2 + V_2^2 &hellip; V_N^2 }{N}}}}
$$</p>
<p>Средне квадратичное синусоиды лучше представить графически:</p>
<p><a href="/img/sqnr/rms_sinusoid.m"><img src="/img/sqnr/rms_sinusoid.png" alt=""></a></p>
<p>Поскольку верхняя часть равна нижней, то значение RMS не зависит от того, как много половинок проинтегрировано. Поэтому достаточно проинтегрировать только зеленую часть. RMS синусоиды вычисляется следущим образом:</p>
<p>$$
V_{rms} = {\sqrt{\dfrac{1}{T}\int_{0}^{T}x^2(t)dt}}
$$</p>
<p>Где \(x^2(t)\) - это уравнение синусоиды.</p>
<p>Уравнение в данном случае лучше записать в следующем виде:</p>
<p>$$
\begin{align}
x(t) = x_{peak}sin(t\dfrac{2\pi}{T}), \newline
V_{rms} = {\sqrt{\dfrac{x_{peak}^2}{T}\int_{0}^{T}\dfrac{1}{2}(1-cos(2\dfrac{2\pi}{T}t)dt}} \newline
= {\sqrt{\dfrac{x_{peak}^2}{2T}(T - sin(\dfrac{4\pi}{T}t)\dfrac{T}{4\pi}\Big|_0^T)}} \newline
= {\sqrt{\dfrac{x_{peak}^2}{2T}(T - \dfrac{T}{4\pi}(sin(4\pi) - sin(0))}} \newline
= \dfrac{x_{peak}}{\sqrt{2}}
\end{align}
$$</p>
<p>Теперь нужно найти \(x_{peak}\). Его можно выразить следующим образом:</p>
<p>$$
x_{peak} = \dfrac{q2^n}{2}
$$</p>
<p>Где n - это количество битов АЦП, q - разница уровеня между двумя соседними битами. Если подставить в формулу, то получится следующее:</p>
<p>$$
V_{rms} = \dfrac{q2^n}{2\sqrt{2}}
$$</p>
<p>Теперь необходимо найти \(V_{e}\). Как доказал <a href="http://oldweb.mit.bme.hu/books/quantization/papers/Bennett.pdf">Bennett</a>, ошибка описывается пилообразной волной. Она получается из следующего графика:</p>
<p><a href="/img/sqnr/rms_error.m"><img src="/img/sqnr/rms_error.png" alt=""></a></p>
<p>Где синий график - это аналоговый сигнал, а красный - это цифровой.</p>
<p>Если вычесть один из другого, то как раз получится пилообразная волна:</p>
<p><a href="/img/sqnr/rms_sawtooth.m"><img src="/img/sqnr/rms_sawtooth.png" alt=""></a></p>
<p>Этот график описывается формулой:</p>
<p>$$
e(t) = st, \dfrac{-q}{2s} &lt; t &lt; \dfrac{q}{2s}
$$</p>
<p>Для линейного графика RMS будет выглядеть следующим образом:</p>
<p>$$
\begin{align}
V_{e} = \sqrt{\dfrac{s}{q}\int_{-q/2s}^{q/2s}(st)^2dt} \newline
= \dfrac{q}{\sqrt{12}}
\end{align}
$$</p>
<p>Теперь если подставить все значения в формулу:</p>
<p>$$
\begin{align}
SQNR = 20\log_{10}(\dfrac{V_{rms}}{V_{e}}) \newline
= 20\log_{10}(\dfrac{q2^n / 2\sqrt{2}}{q / \sqrt{12}}) \newline
= 20\log_{10}(2^n\sqrt{\dfrac{3}{2}})
\end{align}
$$</p>
<p>После этого можно построить график зависимости SQNR от числа битов:</p>
<p><a href="/img/sqnr/sqnr.m"><img src="/img/sqnr/sqnr.png" alt=""></a></p>
<h1 id="heading-1">Выводы</h1>
<p>Из этого графика можно сделать интересные выводы. Например, динамический диапазон rtl-sdr не может быть больше 50db. Это очень важно применительно к измерению качества фильтров. Например, большинство FM фильтров имеют коэффициент ослабления около 60db. А это значит что с помощью rtl-sdr нельзя будет измерить такие фильтры.</p>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>JavaFX в 2019</title>
      <link>https://dernasherbrezon.com/posts/javafx-in-2019/</link>
      <pubDate>Sun, 16 Jun 2019 10:20:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/javafx-in-2019/</guid>
      <description>Зачем? Зачем вообще кому-то писать толстый клиент в 2019 году? Web и atom уже победили. Можно поставить браузер или еще 8Гб оперативной памяти и получить переливающееся приложение. К сожалению, не все задачи можно решать через web. Для измерения АЧХ фильтров, мне необходимо было достаточно простое приложение:
 запуск rtl_power и вывод результатов в виде графика чтение .csv файла и вывод в виде графика график должен реагировать на мышь и показывать текущее значение по X и Y  Понятно, что для такого простого приложения использовать web + web server или atom - это слишком.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>JavaFX в 2019</h1></header>
      		<div class='container entry-content'>
  <h2 id="heading">Зачем?</h2>
<p>Зачем вообще кому-то писать толстый клиент в 2019 году? Web и <a href="https://atom.io">atom</a> уже победили. Можно поставить браузер или еще 8Гб оперативной памяти и получить переливающееся приложение. К сожалению, не все задачи можно решать через web. Для измерения АЧХ фильтров, мне необходимо было достаточно простое приложение:</p>
<ul>
<li>запуск <a href="http://kmkeen.com/rtl-power/">rtl_power</a> и вывод результатов в виде графика</li>
<li>чтение .csv файла и вывод в виде графика</li>
<li>график должен реагировать на мышь и показывать текущее значение по X и Y</li>
</ul>
<p>Понятно, что для такого простого приложения использовать web + web server или atom - это слишком. Другими альтернативами были <a href="https://developer.apple.com/swift/">swift</a>, <a href="https://www.qt.io">QT</a> или какой-нибудь <a href="https://dotnet.microsoft.com">.NET</a>. Но у всех у них есть один фатальный недостаток - они не на Java. Вообще, это не первое приложение, которое я писал на Java для десктопа. В далёком 2006 году у меня был небольшой компонент MultiLineTable, который работал поверх стандартного JTable из <a href="https://ru.wikipedia.org/wiki/Swing">Swing</a>. Он позволял делать сложную таблицу со вложенными столбцами.</p>
<p><img src="/img/javafx-in-2019/8536_original.jpg" alt=""></p>
<h2 id="heading-1">Процесс</h2>
<p>По сравнению с 2006 годом, прогресс шагнул вперед. Теперь при разработке многие компоненты явно указывают на стандартный паттерн MVC.</p>
<p><img src="/img/javafx-in-2019/mvc.png" alt=""></p>
<p>В случае JavaFX:</p>
<ul>
<li>Model - FXML. Особый XML в котором описывается то, как компоненты будут расположены на формах. Поддерживаются вложенные XML, импорт XML и прочие приятные штуки. Писать модульный и переиспользуемый UI стало проще и стандартнее. Не обошлось и без ложки дегтя: расположение компонентов надо по-прежнему описывать с помощью различных Layout. С ними есть единственная проблема - никогда не знаешь, как будет выглядить форма, пока не запустишь.</li>
<li>View - CSS. Все стили можно и нужно добавлять отдельным .css файлом. Тут не надо обольщаться - это не настоящий CSS. Многие атрибуты сделаны очень похожими на CSS, но их количество ограничено.</li>
<li>Controller - Controller. В JavaFX он прямо так и называется. Его можно явно привязать к форме. Вот пример:</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-xml" data-lang="xml"><span style="color:#f92672">&lt;BorderPane</span> <span style="color:#a6e22e">fx:id=</span><span style="color:#e6db74">&#34;borderPane&#34;</span>
	<span style="color:#a6e22e">xmlns:fx=</span><span style="color:#e6db74">&#34;http://javafx.com/fxml&#34;</span>
	<span style="color:#a6e22e">fx:controller=</span><span style="color:#e6db74">&#34;ru.r2cloud.rtlspectrum.Controller&#34;</span><span style="color:#f92672">&gt;</span>
<span style="color:#f92672">&lt;/BorderPane&gt;</span>
</code></pre></div><p>И потом исопльзовать методы из контроллера:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-xml" data-lang="xml"><span style="color:#f92672">&lt;Button</span> <span style="color:#a6e22e">text=</span><span style="color:#e6db74">&#34;Run now&#34;</span> <span style="color:#a6e22e">onAction=</span><span style="color:#e6db74">&#34;#runNow&#34;</span> <span style="color:#f92672">/&gt;</span>
</code></pre></div><p>runNow - это публичный метод контроллера.</p>
<p>С помощью всех этих новых технологий и <a href="https://stackoverflow.com">stackoverflow</a> мне удалось за пару дней сделать вполне достойное приложение:</p>
<ul>
<li>асинхронные задачи</li>
<li>progress bar</li>
<li>отображение достаточно кастомизированного LineChart</li>
</ul>
<p><img src="/img/javafx-in-2019/white.png" alt=""></p>
<h2 id="-javafx">Передовой JavaFX</h2>
<p>Несмотря на вполне рабочий результат, внутренний перфекционист не давал мне спать. Поэтому я потратил еще около 4 дней на исследования.</p>
<h3 id="-">Темная тема</h3>
<p>Во-первых, мне захотелось сделать темную тему в приложении. Дело в том, что MacOS у меня переключен на темную тему и многие приложения автоматически (или нет?) стали выглядить в тон основным элементам ОС. Я решил узнать, можно ли поставить темную тему средствами JavaFX. Нельзя. По-умолчанию, все приложения JavaFX запускаются со стандартыми стилями для заданной ОС. Вместе с умельцами со stackoverflow мне удалось сделать нечто похожее на темную тему.</p>
<ul>
<li>все стили JavaFX зависят от одного базового стиля &ldquo;-fx-base&rdquo;, поэтому, изменив его на темный, можно поменять стиль всего приложения.</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-css" data-lang="css">.<span style="color:#a6e22e">root</span> {
    <span style="color:#960050;background-color:#1e0010">-</span>fx-base: rgba(<span style="color:#ae81ff">60</span>, <span style="color:#ae81ff">63</span>, <span style="color:#ae81ff">65</span>, <span style="color:#ae81ff">255</span>);
}
</code></pre></div><ul>
<li>Определить какая сейчас тема установлена в операционной системе можно через системную команду. Она возвращает &ldquo;Dark&rdquo; для темной темы.</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">ProcessBuilder builder <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> ProcessBuilder<span style="color:#f92672">(</span><span style="color:#f92672">)</span><span style="color:#f92672">.</span><span style="color:#a6e22e">command</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;/usr/bin/defaults&#34;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;read&#34;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;-g&#34;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;AppleInterfaceStyle&#34;</span><span style="color:#f92672">)</span><span style="color:#f92672">;</span>
Process process<span style="color:#f92672">;</span>
<span style="color:#66d9ef">try</span> <span style="color:#f92672">{</span>
	process <span style="color:#f92672">=</span> builder<span style="color:#f92672">.</span><span style="color:#a6e22e">start</span><span style="color:#f92672">(</span><span style="color:#f92672">)</span><span style="color:#f92672">;</span>
	<span style="color:#66d9ef">int</span> resultCode <span style="color:#f92672">=</span> process<span style="color:#f92672">.</span><span style="color:#a6e22e">waitFor</span><span style="color:#f92672">(</span><span style="color:#f92672">)</span><span style="color:#f92672">;</span>
	<span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>resultCode <span style="color:#f92672">!</span><span style="color:#f92672">=</span> 0<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
		<span style="color:#66d9ef">return</span> <span style="color:#66d9ef">false</span><span style="color:#f92672">;</span>
	<span style="color:#f92672">}</span>
<span style="color:#f92672">}</span> <span style="color:#66d9ef">catch</span> <span style="color:#f92672">(</span>Exception e1<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
	e1<span style="color:#f92672">.</span><span style="color:#a6e22e">printStackTrace</span><span style="color:#f92672">(</span><span style="color:#f92672">)</span><span style="color:#f92672">;</span>
	<span style="color:#66d9ef">return</span> <span style="color:#66d9ef">false</span><span style="color:#f92672">;</span>
<span style="color:#f92672">}</span>
</code></pre></div><p>Результат вполне неплох:</p>
<p><img src="/img/javafx-in-2019/dark.png" alt=""></p>
<p>Но шапка окна по-прежнему светлая! Ее, конечно, можно убрать, нарисовать свою темную и сэмулировать работу, но тогда придется эмулировать работу для каждой ОС. И в каждой ОС она выглядит и работает по-разному. В общем, я решил, что усилия и потенциальные баги не стоят того.</p>
<h3 id="--1">Выделение текста</h3>
<p>rtlSpectrum на старте отображает небольшую подсказку с чего начать. В частности, есть текст команды для генерации .csv файла.</p>
<p><img src="/img/javafx-in-2019/selectText.png" alt=""></p>
<p>Очевидно, что эту команду надо бы дать скопировать. Как бы не так. Современные браузеры приучили нас к тому, что в любом приложении можно выделить текст. Однако, это не так в десктоп-приложениях: чтобы выделить текст в Label, необходимо приложить усилия. В частности для JavaFX необходимо сделать фиктивный Node и заменить Label на Input с хитрым стилем, который бы мимикрировал под Label. Слишком сложно для такого простого улучшения.</p>
<h3 id="--2">Жирный текст</h3>
<p>Начальную подсказку надо было как-то выделить. &ldquo;Getting started&rdquo; явно терялась среди пары абзацев текста. Самое очевидное - это сделать размер шрифта больше и сделать его жирным. Оказывается, на Mac OS шрифт по-умолчанию <a href="https://bugs.openjdk.java.net/browse/JDK-8176835">не поддерживает bold</a>. На дворе 2019 год и Java не может отрисовать жирный шрифт. Решением стало использовать другой шрифт - &ldquo;Arial&rdquo;.</p>
<h2 id="heading-2">Сборка</h2>
<p>Итак, приложение написано, шрифты побеждены, настало время сделать то, без чего ни одно приложение не может обойтись - сборка и дистрибьюция. Поскольку я знаю только <a href="https://ru.wikipedia.org/wiki/Java_Web_Start">Java Web start</a> и он, вроде как, давно умер, то я начал фантазировать на тему того, чего я бы хотел от идеальной дистрибьюции:</p>
<ul>
<li>нативное приложение</li>
<li>без зависимостей на jre</li>
<li>с инсталлятором</li>
<li>с иконкой</li>
<li>с gpg подписью и компанией &ldquo;dernasherbrezon&rdquo;</li>
</ul>
<p>Для начала необходимо собрать нативное приложение. Быстрый поиск в интернете ни к чему не привел. С одной стороны есть множество статей, как собрать приложение с помощью ant-javafx.jar, а с другой JavaFX была удалена из JDK начиная с версии 11. К сожалению, я не смог восстановить хронологию событий но похоже новый способ через jmod и jlink должен был быть гораздо правильнее. Команда Jmod предназначена для того, чтобы собрать модуль. Этот модуль отличается от .jar тем, что может включать в себя нативные библиотеки, скрипты и пр. Jlink используется для линковки этого модуля и JRE. В результате получается сборка JRE, в которой установлены только модули нужные для работы приложения.</p>
<p>Поскольку приложение у меня собирается с помощью maven, то первым делом я начал искать плагины. Вот тут меня ждало первое разочарование. Официальный плагин <a href="https://maven.apache.org/plugins/maven-jmod-plugin/">maven-jmod-plugin</a> находится 2 года в статусе альфа. Почему? Неужели никто не использует новую модульную систему? При попытке использовать плагин, выскакивает ошибка <a href="https://issues.apache.org/jira/projects/MJMOD/issues/MJMOD-17">раз</a> и <a href="https://issues.apache.org/jira/projects/MJMOD/issues/MJMOD-7">два</a>. Я бросил это дело и решил вручную выполнить необходимые команды и посмотреть, действительно ли то, что получается, мне нужно.</p>
<p>После того, как произошла сборка jmod, необходимо выполнить команду jlink:</p>
<pre><code>jlink --module-path &quot;target/jmods/&quot; --add-modules rtlSpectrum --output ./target/image/
</code></pre><p>И&hellip;ошибка:</p>
<pre><code>Error: Hash of javafx.base (a0351b6767b462b64c66b4cd99d6bfc1763761d1a27ce7c6c19e4db5ba33abc8) differs to expected hash (6ff380e1321d8dcc64b22151ebe8fb31eb10c4484040e49e452ca88d25c1b754) recorded in java.base
</code></pre><p>Откуда это вообще взялось? Что за хэш? Я ведь такого не генерировал. В тщетных попытках исправить ошибку я провел еще пару часов. В результате оказалось, что jmod может хранить в себе хэши других jmod, на которые ссылается.</p>
<pre><code>jmod describe $JAVA_HOME/jmods/java.base.jmod | grep javafx.base
hashes javafx.base SHA-256 6ff380e1321d8dcc64b22151ebe8fb31eb10c4484040e49e452ca88d25c1b754
</code></pre><p>Но в 11 версии же нет JavaFX! Оказывается в liberica jdk <a href="https://bell-sw.com/pages/java-11.0.3/">JavaFX включён</a>. Что же получается? Есть JDK/JRE в которых JavaFX модуль есть, а есть те в которых его нет. Если я буду писать приложение, которое зависит от JavaFX, то мне нужно его вместе с приложением поставлять или извне ожидать? В общем, явно существует путаница с тем, как паковать приложение.</p>
<p>Выкинув JavaFX из maven зависимостей, мне удалось собрать образ приложения. Он занимает ~100Мб и запускается командой <code>./bin/java -m  rtlSpectrum</code>. Простое приложение по выводу графика не должно занимать 100мегабайт. В результирующем обьразе нет rtlSpectrum.sh или просто rtlSpectrum. Этот образ - просто сборка jre, в которой по умолчанию есть rtlSpectrum.</p>
<p>Все это привело меня к мысли о том, что надо делать по старинке. Я откатился на java 8, где JavaFX есть по умолчанию и начал собирать обычный jar. В итоге приложение мультиплатформенное, весит 26кб и требует java.</p>
<h2 id="--3">Что дальше?</h2>
<p>За 6 дней у меня получилось написать достаточно простое приложение для десктопа. Его можно скачать на <a href="https://github.com/dernasherbrezon/rtlSpectrum/releases">github</a>, CI/CD сделан с помощью travis, качество кода анализируется sonarcloud. Из того, что не хватает:</p>
<ul>
<li>Тестирование с помощью <a href="https://github.com/TestFX/TestFX">TestFx</a></li>
<li>Измерение скорости запуска и потребления памяти в сравнении с нативным приложением</li>
</ul>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Время в Raspberrypi</title>
      <link>https://dernasherbrezon.com/posts/time-raspberrypi/</link>
      <pubDate>Sat, 08 Jun 2019 14:22:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/time-raspberrypi/</guid>
      <description>Разобраться со временем в Raspberrypi (RPi) меня сподвиг один достаточно неприятный баг. В какой то момент моя базовая станция r2cloud просто переставала отправлять данные на сервер. В логах приложения при этом появляется следующая ошибка:
Jun 07 09:17:51 raspberrypi java[472]: java.lang.IllegalArgumentException: Bad sample time: 1559899071. Last update time was 1559902330, at least one second step is required Jun 07 09:17:51 raspberrypi java[472]: at com.aerse.core.RrdDb.store(RrdDb.java:799) Jun 07 09:17:51 raspberrypi java[472]: at com.aerse.core.Sample.update(Sample.java:194)  Что же это означает?</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Время в Raspberrypi</h1></header>
      		<div class='container entry-content'>
  <p>Разобраться со временем в Raspberrypi (RPi) меня сподвиг один достаточно неприятный баг. В какой то момент моя базовая станция r2cloud просто переставала отправлять данные на сервер. В логах приложения при этом появляется следующая ошибка:</p>
<pre><code>Jun 07 09:17:51 raspberrypi java[472]: java.lang.IllegalArgumentException: Bad sample time: 1559899071. Last update time was 1559902330, at least one second step is required
Jun 07 09:17:51 raspberrypi java[472]:         at com.aerse.core.RrdDb.store(RrdDb.java:799)
Jun 07 09:17:51 raspberrypi java[472]:         at com.aerse.core.Sample.update(Sample.java:194)
</code></pre>
<p>Что же это означает? Тут нужно сделать небольшой экскурс в rrd. RRD расшифровывается как round robin database - <a href="https://ru.wikipedia.org/wiki/%D0%A6%D0%B8%D0%BA%D0%BB%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B0%D1%8F_%D0%B1%D0%B0%D0%B7%D0%B0_%D0%B4%D0%B0%D0%BD%D0%BD%D1%8B%D1%85">циклическая база данных</a>. Новые метрики перезаписывают старые. У каждой метрики есть время и значение. Важным требованием является то, что метрики должны идти по возрастанию времени. Нельзя записать метрику 5 недель назад, так как данные 5 недель назад могли быть уже перезаписаны 1 неделю назад. Соответственно, при попытке записи метрики с некорректным временем возникает ошибка.</p>
<p>При создании метрики я беру текущее время:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">db<span style="color:#f92672">.</span><span style="color:#a6e22e">createSample</span><span style="color:#f92672">(</span><span style="color:#f92672">)</span><span style="color:#f92672">;</span>
<span style="color:#f92672">.</span><span style="color:#f92672">.</span><span style="color:#f92672">.</span>
<span style="color:#66d9ef">public</span> Sample <span style="color:#a6e22e">createSample</span><span style="color:#f92672">(</span><span style="color:#f92672">)</span> <span style="color:#66d9ef">throws</span> IOException <span style="color:#f92672">{</span>
	<span style="color:#66d9ef">return</span> createSample<span style="color:#f92672">(</span>Util<span style="color:#f92672">.</span><span style="color:#a6e22e">getTime</span><span style="color:#f92672">(</span><span style="color:#f92672">)</span><span style="color:#f92672">)</span><span style="color:#f92672">;</span>
<span style="color:#f92672">}</span>
<span style="color:#f92672">.</span><span style="color:#f92672">.</span><span style="color:#f92672">.</span>
<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">long</span> <span style="color:#a6e22e">getTime</span><span style="color:#f92672">(</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
    <span style="color:#66d9ef">return</span> <span style="color:#f92672">(</span>System<span style="color:#f92672">.</span><span style="color:#a6e22e">currentTimeMillis</span><span style="color:#f92672">(</span><span style="color:#f92672">)</span> <span style="color:#f92672">+</span> 500L<span style="color:#f92672">)</span> <span style="color:#f92672">/</span> 1000L<span style="color:#f92672">;</span>
<span style="color:#f92672">}</span>
</code></pre></div><p>Получается, в базе хранится метрика в будущем. Всё это указывает на явные проблемы с системным временем.</p>
<h2 id="------raspberrypi">Так как же работает время в Raspberrypi?</h2>
<p>В RPi, а так же в различных embedded системах время работает не так, как в обычных компьютерах. В обычных компьютерах используется так называемые <a href="https://ru.wikipedia.org/wiki/%D0%A7%D0%B0%D1%81%D1%8B_%D1%80%D0%B5%D0%B0%D0%BB%D1%8C%D0%BD%D0%BE%D0%B3%D0%BE_%D0%B2%D1%80%D0%B5%D0%BC%D0%B5%D0%BD%D0%B8">часы реального времени</a> (RTC). Это специальный чип с независимым источником питания, который постоянно увеличивает счётчик времени. Даже если отключить компьютер, эта схема будет работать и увеличивать счётчик времени.</p>
<p><img src="/img/time-raspberrypi/rtc.jpg" alt=""></p>
<p>Вот действия при включении питания компьютера:</p>
<ol>
<li>компьютер загружается</li>
<li>ядро линукса получает время от RTC</li>
<li>стартуют сетевые службы и поднимаются сетевые интерфейсы</li>
<li>стартует NTPD, который получает текущее время из интернета по протоколу <a href="https://ru.wikipedia.org/wiki/NTP">NTP</a></li>
<li>он корректирует системное время и время RTC.</li>
<li>стартуют остальные службы и процессы</li>
</ol>
<p>Важно понимать, что RTC не является очень точным источником времени. Из-за этого на шаге 5 системные часы могут быть скорректированы. Обычно это совсем небольшая разница - секунды, редко - минуты.</p>
<p>В современных дистрибутивах NTPD обычно заменяют на <a href="https://wiki.archlinux.org/index.php/Systemd-timesyncd_(%D0%A0%D1%83%D1%81%D1%81%D0%BA%D0%B8%D0%B9)">systemd-timesyncd</a>. Эта более легковесная служба времени:</p>
<ol>
<li>содержит в себе легковесный NTP-клиент</li>
<li>получает список NTP серверов по протоколу DHCP от маршрутизатора</li>
</ol>
<p>Как же это работает в RPi? Совсем по-другому. Дело в том, что в RPi нет RTC чипа. В результате загрузка системы выглядит следующим образом:</p>
<ol>
<li>RPi загружается</li>
<li>стартует служба <a href="https://manpages.debian.org/jessie/fake-hwclock/fake-hwclock.8.en.html">fake-hwclock</a>. Она читает текущее время из файла <code>/etc/fake-hwclock.data</code></li>
<li>стартуют сетевые службы и поднимаются сетевые интерфейсы</li>
<li>стартует NTPD</li>
<li>он корректирует системное время, а fake-hwclock сохраняет текущее правильное время в файл</li>
<li>стартуют остальные службы и процессы</li>
</ol>
<h2 id="------">Что же тут может пойти не так?</h2>
<ol>
<li>При самой первой загрузке в файле <code>/etc/fake-hwclock.data</code> лежит время сборки операционной системы</li>
<li>Если в RPi не настроена сеть, то время надо будет конфигурировать вручную</li>
<li>Если в RPi не настроена сеть и его выключить, то при следующем старте время продолжит увеличиваться с момента выключения. И если RPI будет выключен на час, значит время будет отличаться на час. Если на день, то на день.</li>
</ol>
<p>Но не это всё стало причиной бага. Если внимательно присмотреться, то и в случае с rtc, и в случае с fake-hwclock между шагом 5 и 6 существует race condition. NTPD или systemd-timesyncd обновят время асинхронно от старта операционной системы. А это значит, приложение может получить сначала время в будущем, а потом в прошлом.</p>
<h2 id="heading">Выводы</h2>
<p>У этого исследования есть два вывода:</p>
<ol>
<li>я знаю причину возникновения ошибки</li>
<li>мне придётся обновить документацию. Теперь я не могу утверждать, что моя базовая станция может работать без интернета. Даже если вручную сохранить последние TLE спутников, без интернета текущее время может скакать очень сильно. А это значит, нельзя будет запланировать наблюдение.</li>
<li>возможно, хорошим выходом из ситации может стать <a href="https://thepihut.com/blogs/raspberry-pi-tutorials/17209332-adding-a-real-time-clock-to-your-raspberry-pi">RTC для RPi</a></li>
</ol>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Расчёт мощности радиосигнала</title>
      <link>https://dernasherbrezon.com/posts/power-in-radio-channel/</link>
      <pubDate>Wed, 29 May 2019 07:48:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/power-in-radio-channel/</guid>
      <description>Нашёл в Интернете совершенно потрясающую визуализацию изменения мощности при передаче радио сигнала:

Это картинка описывает как изменяется мощность от передатчика к приёмнику. Формула следующая:
$$ P_r = P_t - L_{tc} + G_{ta} - L_{all} + G_{ra} - L_{rc} $$
Где,
 \( P_r \) - результирующая мощность полученного сигнала \( P_t \) - мощность передачи сигнала \(L_{tc}\) - потери в кабеле при передаче сигнала от передатчика на его антенну \(G_{ta}\) - усиление антенны \(L_{all}\) - потери в среде \(G_{ra}\) - усиление принимающей антенны \(L_{rc}\) - потери в кабеле приёмника  Большинство параметров достаточно очевидны, но собранные все вместе они дают хорошую картину изменения мощности.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Расчёт мощности радиосигнала</h1></header>
      		<div class='container entry-content'>
  <p>Нашёл в Интернете совершенно потрясающую визуализацию изменения мощности при передаче радио сигнала:</p>
<p><a href="https://www.cdt21.com/resources/TechnicalArticle/article9.asp"><img src="/img/power-in-radio-channel/level2-2.gif" alt=""></a></p>
<p>Это картинка описывает как изменяется мощность от передатчика к приёмнику. Формула следующая:</p>
<p>$$
P_r = P_t - L_{tc} + G_{ta} - L_{all} + G_{ra} - L_{rc}
$$</p>
<p>Где,</p>
<ul>
<li>\( P_r \) - результирующая мощность полученного сигнала</li>
<li>\( P_t \) - мощность передачи сигнала</li>
<li>\(L_{tc}\) - потери в кабеле при передаче сигнала от передатчика на его антенну</li>
<li>\(G_{ta}\) - усиление антенны</li>
<li>\(L_{all}\) - потери в среде</li>
<li>\(G_{ra}\) - усиление принимающей антенны</li>
<li>\(L_{rc}\) - потери в кабеле приёмника</li>
</ul>
<p>Большинство параметров достаточно очевидны, но собранные все вместе они дают хорошую картину изменения мощности. Так, например, чтобы увеличить мощность принимаемого сигнала, надо уменьшить потери на различных участках и/или увеличить усиление антенн.</p>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Расчёт вероятности ошибки для BPSK</title>
      <link>https://dernasherbrezon.com/posts/ber-bpsk/</link>
      <pubDate>Sun, 05 May 2019 18:22:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/ber-bpsk/</guid>
      <description>Введение Моя сеть приёма сигналов со спутников r2cloud постепенно растёт. Однако уровень приёма оставляет желать лучшего. Несмотря на то, что на спектограмме виден сигнал, демодулятор не может восстановить его. В попытках найти проблему, я понял, что мне не хватает фундаментальных знаний по теории обработки сигналов и некоторой математики. Дело в том, что в интернете зачастую выкладываются демодуляторы без обоснования их работы. Меня это не устраивает, потому что нужны метрики по которым я буду понимать насколько один алгоритм эффективнее другого.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Расчёт вероятности ошибки для BPSK</h1></header>
      		<div class='container entry-content'>
  <h2 id="heading">Введение</h2>
<p>Моя сеть приёма сигналов со спутников <a href="https://github.com/dernasherbrezon/r2cloud">r2cloud</a> постепенно растёт. Однако уровень приёма оставляет желать лучшего. Несмотря на то, что на спектограмме виден сигнал, демодулятор не может восстановить его. В попытках найти проблему, я понял, что мне не хватает фундаментальных знаний по теории обработки сигналов и некоторой математики. Дело в том, что в интернете зачастую выкладываются демодуляторы без обоснования их работы. Меня это не устраивает, потому что нужны метрики по которым я буду понимать насколько один алгоритм эффективнее другого. И стал ли новый код лучше, если я добавлю какой-нибудь другой блок в обработку.</p>
<p>Всё это привело меня к \( E_b / N_0 \). Эта метрика показывает отношение энергии сигнала, приходящейся на 1 бит принимаемого сообщения (\( E_b \)), к энергетической спектральной плотности шума (\( N_0 \)). Почему она так важна? Дело в том, что она не зависит от способа модуляции сигнала и пропускной способности канала. Из-за этого её можно использовать, чтобы сравнивать различные модуляции между собой. Обычно строят график отношения \( E_b / N_0 \) к вероятности ошибки (BER). Вот <a href="https://ru.wikipedia.org/wiki/Eb/N0">пример</a> графика сравнения BPSK/QPSK/8-PSK/16-PSK:</p>
<p><img src="/img/ber-bpsk/PSK_BER_curves.svg" alt=""></p>
<p>Что из этого графика можно понять?</p>
<ol>
<li>Если увеличивать энергию передаваемого бита, то уменьшается вероятность возникновения ошибки.</li>
<li>В BPSK/QPSK ошибка возникает значительно реже, чем в 8-PSK и 16-PSK при одинаковых значениях энергии передаваемого бита.</li>
<li>График, например, читается следующим образом: при \( E_b / N_0 \) равным 4 децибелла и BPSK модуляции можно получить 1 ошибочный бит на каждые 100 полученных.</li>
</ol>
<p>Мне же график прежде всего нужен:</p>
<ol>
<li>Сравнивать теоретические значения с практической реализацией демодулятора. Прямо сейчас я точно знаю, что различия есть из-за ограниченной точности АЦП. Дело в том, что rtl-sdr имеет разрешающую способность 8 бит. А в теории числа могут быть бесконечной точности. Именно эта разница и должна давать ошибку.</li>
<li>Анализировать улучшится ли демодулятор, если добавить какой-то определённый блок. Как минимум я хочу попробовать различные алгоритмы получения несущего сигнала и компенсации <a href="https://ru.wikipedia.org/wiki/%D0%9C%D0%BD%D0%BE%D0%B3%D0%BE%D0%BB%D1%83%D1%87%D0%B5%D0%B2%D0%BE%D0%B5_%D1%80%D0%B0%D1%81%D0%BF%D1%80%D0%BE%D1%81%D1%82%D1%80%D0%B0%D0%BD%D0%B5%D0%BD%D0%B8%D0%B5">многолучевого распространения</a>.</li>
</ol>
<p>Ну и для того, чтобы понять математику, я решил проделать выводы сам. Ниже я буду рассчитывать вероятности ошибки для BPSK (см. синий график выше). Вдохновение я черпал у <a href="http://www.dsplog.com/2007/08/05/bit-error-probability-for-bpsk-modulation/">dsplog</a> плюс добавлял свои мысли.</p>
<h2 id="heading-1">Дано</h2>
<p>Прежде всего необходимо описать физику процесса. Схема процесса показана ниже:</p>
<p><img src="/img/ber-bpsk/bpsk.png" alt=""></p>
<ol>
<li>Изначальное сообщение кодируется в аналоговый сигнал. &ldquo;1&rdquo; кодируется в \(+\sqrt{E_b}\), &ldquo;0&rdquo; кодируется в \(-\sqrt{E_b}\). Почему именно как корень из \(E_b\)? Не знаю. Это единственное место, где я не разобрался.</li>
<li>После этого сигнал складывается с <a href="https://ru.wikipedia.org/wiki/%D0%90%D0%B4%D0%B4%D0%B8%D1%82%D0%B8%D0%B2%D0%BD%D1%8B%D0%B9_%D0%B1%D0%B5%D0%BB%D1%8B%D0%B9_%D0%B3%D0%B0%D1%83%D1%81%D1%81%D0%BE%D0%B2%D1%81%D0%BA%D0%B8%D0%B9_%D1%88%D1%83%D0%BC">аддитивным белым гауссовским шумом</a>.</li>
<li>Далее сигнал демодулируется.</li>
</ol>
<p>Модулированный BPSK сигнал выглядит следующим образом:</p>
<p><a href="/img/ber-bpsk/bpsk-constellation.m"><img src="/img/ber-bpsk/bpsk-constellation.png" alt=""></a></p>
<p>Красными точками обозначается сигнал без шума. Синими - сигнал с добавлением белого гауссовского шума. Как демодулируется этот сигнал? Все точки, которые больше &ldquo;0&rdquo; становятся &ldquo;1&rdquo;, а те, что меньше &ldquo;0&rdquo; становятся &ldquo;0&rdquo;. На рисунке выше все синие точки достаточно далеко от &ldquo;0&rdquo;, поэтому информацию можно однозначно восстановить. Но что если шум будет сильнее?</p>
<p><a href="/img/ber-bpsk/ber-awgn.m"><img src="/img/ber-bpsk/ber-awgn.png" alt=""></a></p>
<p>Тут уже не всё так однозначно. Видно, что некоторые точки закодированные как &ldquo;1&rdquo; на самом деле оказались меньше &ldquo;0&rdquo;. И если бы я попытался их демодулировать, то получил бы неправильную информацию.</p>
<h2 id="heading-2">Решение</h2>
<p>Теперь, когда стало понятно влияние шума на результат демодуляции, можно переходить к графику зависимости вероятности от энергии сигнала. Этот график поможет посчитать вероятность ошибок для различных входных значений. Для начала возьмём сигнал без шума. Вероятность получения &ldquo;0&rdquo; или &ldquo;1&rdquo; всегда 1.</p>
<p><a href="/img/ber-bpsk/no-error-bpsk.m"><img src="/img/ber-bpsk/no-error-bpsk.png" alt=""></a></p>
<p>Частота получения ошибочных битов (Bit error rate) будет 0. Т.е. 0 ошибочных битов на бесконечное количество принятых. В случае наличия гауссовского шума, вероятность получения определяется гауссовской функцией вероятности:</p>
<p><a href="/img/ber-bpsk/awgn-bpsk.m"><img src="/img/ber-bpsk/awgn-bpsk.png" alt=""></a></p>
<p>Гауссовский шум определяется следующей формулой:</p>
<p>$$
p(x) = \dfrac{1}{\sqrt{2\pi\sigma^2}}e^\dfrac{-(x-\mu)^2}{2\sigma^2}
$$</p>
<p>Где:</p>
<ul>
<li>\(\mu=0\),</li>
<li>\(\sigma^2=N_0/2\)</li>
</ul>
<p>При передаче &ldquo;1&rdquo; \(\mu=+\sqrt{E_b}\), при &ldquo;0&rdquo; \(\mu=-\sqrt{E_b}\). Подставляя это в формулу:</p>
<p>$$
\begin{align}
P(x|s_0)=\dfrac{1}{\sqrt{\pi N_0}}e^\dfrac{-(x+\sqrt{E_b})^2}{N_0} \newline
P(x|s_1)=\dfrac{1}{\sqrt{\pi N_0}}e^\dfrac{-(x-\sqrt{E_b})^2}{N_0}
\end{align}
$$</p>
<p>Теперь самое интересное.</p>
<p><img src="/img/ber-bpsk/awgn-bpsk-error.png" alt=""></p>
<p>На этом рисунке показаны области возникновения ошибки. Зелёная область - это место где возникает ошибка при передаче &ldquo;1&rdquo;, красная - при передаче &ldquo;0&rdquo;. Общую вероятность ошибки можно записать с помощью формулы полной вероятности:</p>
<p>$$
P(error)=\dfrac{1}{2}P(error|s_0) + \dfrac{1}{2}P(error|s_1)
$$</p>
<p>После этого необходимо найти каждую из вероятностей:</p>
<p>$$
\begin{align}
P(error|s_0) = \int_{0}^{\infty}P(x|s_0)dx = \dfrac{1}{\sqrt{\pi N_0}}\int_{0}^{\infty}e^\dfrac{-(x+\sqrt{E_b})^2}{N_0}dx \newline
P(error|s_1) = \int_{-\infty}^{0}P(x|s_1)dx = \dfrac{1}{\sqrt{\pi N_0}}\int_{-\infty}^{0}e^\dfrac{-(x-\sqrt{E_b})^2}{N_0}dx
\end{align}
$$</p>
<p>Обычно вероятность ошибки записывают с помощью <a href="https://ru.wikipedia.org/wiki/%D0%A4%D1%83%D0%BD%D0%BA%D1%86%D0%B8%D1%8F_%D0%BE%D1%88%D0%B8%D0%B1%D0%BE%D0%BA">функции ошибок</a>:</p>
<p>$$
erfc(x)=\dfrac{2}{\sqrt\pi}\int_{0}^{x}e^{-t^2}dt
$$</p>
<p>Для этого необходимо сделать следующее:</p>
<p>$$
z=\dfrac{y+\sqrt{E_b}}{\sqrt{N_0}} =&gt; z\sqrt{N_0} = y + \sqrt{E_b}
$$</p>
<p>Заменить пределы интегрирования:</p>
<p>$$
\begin{align}
y=0 =&gt; z = \dfrac{\sqrt{E_b}}{\sqrt{N_0}} \newline
y=\infty =&gt; z = \infty
\end{align}
$$</p>
<p>Получившаяся ошибка записывается как:</p>
<p>$$
\begin{align}
P(error|s_0)=\dfrac{1}{\sqrt{\pi N_0}}\int_\limits{\sqrt{\dfrac{E_b}{N_0}}}^{\infty}e^{-z^2}\sqrt{N_0}dz
=\dfrac{1}{\sqrt{\pi}}\int_\limits{\sqrt{\dfrac{E_b}{N_0}}}^{\infty}e^{-z^2}dz
=\dfrac{1}{2}erfc(\sqrt{\dfrac{E_b}{N_0}})
\end{align}
$$</p>
<p>Аналогично можно найти ошибку при передачи &ldquo;1&rdquo;:</p>
<p>$$
\begin{align}
P(error|s_1)=1-P(s_1)=1-\dfrac{1}{2}erfc(-\sqrt{\dfrac{E_b}{N_0}})
\end{align}
$$</p>
<p>Можно воспользоваться свойством функции ошибок:</p>
<p>$$
\begin{align}
erfc(-x)=2-erfc(x) =&gt; P(error|s_1) = \dfrac{1}{2}erfc(\sqrt{\dfrac{E_b}{N_0}})
\end{align}
$$</p>
<p>Если подставить в формулу полной вероятности:</p>
<p>$$
P(error)=\dfrac{1}{2}(\dfrac{1}{2}erfc(\sqrt{\dfrac{E_b}{N_0}})) + \dfrac{1}{2}(\dfrac{1}{2}erfc(\sqrt{\dfrac{E_b}{N_0}}))=\dfrac{1}{2}erfc(\sqrt{\dfrac{E_b}{N_0}})
$$</p>
<h2 id="heading-3">Ответ</h2>
<p>Получившийся график:</p>
<p><a href="/img/ber-bpsk/ber-bpsk.m"><img src="/img/ber-bpsk/ber-bpsk.png" alt=""></a></p>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Подписанные ссылки</title>
      <link>https://dernasherbrezon.com/posts/signed-urls/</link>
      <pubDate>Wed, 01 May 2019 18:22:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/signed-urls/</guid>
      <description>Почти все REST сервисы имеют аутентификацию. Есть несколько способов её сделать:
 basic. В каждый запрос добавляется заголовок &amp;ldquo;Authorization&amp;rdquo; с логином и паролем.  GET / HTTP/1.1 Host: example.org Authorization: Basic Zm9vOmJhcg==  token. REST сервис обменивает логин и пароль на специальный токен аутентификации. Клиент должен все последующие запросы делать с этим токеном.  GET / HTTP/1.1 Host: example.org Authorization: Bearer 9yro9yueihfw497y33497y3oeiruhfvskdgjhfaowidayuh Аутентификация на основе токенов наиболее безопасная и гибкая. Токены можно отзывать и обновлять, в них можно класть дополнительную информацию.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Подписанные ссылки</h1></header>
      		<div class='container entry-content'>
  <p>Почти все REST сервисы имеют аутентификацию. Есть несколько способов её сделать:</p>
<ul>
<li>basic. В каждый запрос добавляется заголовок &ldquo;Authorization&rdquo; с логином и паролем.</li>
</ul>
<pre><code>GET / HTTP/1.1
Host: example.org
Authorization: Basic Zm9vOmJhcg==
</code></pre><ul>
<li>token. REST сервис обменивает логин и пароль на специальный токен аутентификации. Клиент должен все последующие запросы делать с этим токеном.</li>
</ul>
<pre><code>GET / HTTP/1.1
Host: example.org
Authorization: Bearer 9yro9yueihfw497y33497y3oeiruhfvskdgjhfaowidayuh
</code></pre><p>Аутентификация на основе токенов наиболее безопасная и гибкая. Токены можно <a href="https://ru.wikipedia.org/wiki/OAuth">отзывать и обновлять</a>, в них можно <a href="https://ru.wikipedia.org/wiki/JSON_Web_Token">класть дополнительную информацию</a>. С ними очень удобно работать из <a href="https://ru.wikipedia.org/wiki/%D0%9E%D0%B4%D0%BD%D0%BE%D1%81%D1%82%D1%80%D0%B0%D0%BD%D0%B8%D1%87%D0%BD%D0%BE%D0%B5_%D0%BF%D1%80%D0%B8%D0%BB%D0%BE%D0%B6%D0%B5%D0%BD%D0%B8%D0%B5">SPA приложений</a>. Например, доступ к защищённому ресурсу можно сделать следующим образом:</p>
<ul>
<li>Установить единый токен для всех запросов</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript"><span style="color:#a6e22e">axios</span>.<span style="color:#a6e22e">defaults</span>.<span style="color:#a6e22e">headers</span>.<span style="color:#a6e22e">common</span>[<span style="color:#e6db74">&#39;Authorization&#39;</span>] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;Bearer &#39;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">token</span>
</code></pre></div><ul>
<li>Делать вызывы к защищённым методам</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript"><span style="color:#a6e22e">$http</span>.<span style="color:#a6e22e">get</span>(<span style="color:#e6db74">&#39;/admin/config/general&#39;</span>).<span style="color:#a6e22e">then</span>(<span style="color:#66d9ef">function</span> (<span style="color:#a6e22e">response</span>) {
	<span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">response</span>)
})
</code></pre></div><p>Но что делать, если необходимо защитить статические ресурсы? Например, в <a href="https://github.com/dernasherbrezon/r2cloud">r2cloud</a> статические ресурсы это снимки со спутников, телеметрия и метрики производительности. Есть несколько способов.</p>
<h3 id="data-src-">Data-src атрибут</h3>
<p>Схема работы следующая:</p>
<ul>
<li>Вместо обычного <code>src</code> атрибута, указывается <code>data-src</code></li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">&lt;<span style="color:#f92672">img</span> <span style="color:#a6e22e">data-src</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;/admin/observation/picture.png&#34;</span>&gt;
</code></pre></div><ul>
<li>После загрузки страницы код на javascript должен проходить по всем элементам img, загружать через ajax картинки и проставлять их в тэг <code>src</code></li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript"><span style="color:#a6e22e">$</span>(<span style="color:#e6db74">&#34;img&#34;</span>).<span style="color:#a6e22e">attr</span>(<span style="color:#e6db74">&#34;src&#34;</span>, <span style="color:#e6db74">&#34;data:image/png;base64,&#34;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">response</span>);
</code></pre></div><p>У этого метода есть один большой недостаток: необходимо на каждой странице выполнять javascript код, который будет подгружать картинки. Но есть и другой способ.</p>
<h3 id="-">Подписанные ссылки</h3>
<p>Суть метода заключается в том, что к ссылке добавляется подпись. Эта подпись обладает следующими свойствами:</p>
<ul>
<li>позволяет получить данные без использования заголовка <code>Authorization</code>.</li>
<li>короткоживущая. Подпись содержит в себе время создания ссылки. Это время проверяется на сервере, и если оно превышает время жизни ссылки, то её данные нельзя получить.</li>
<li>её нельзя подделать. Она сгенерирована с использованием секретного ключа, который известен только на сервере.</li>
</ul>
<p>Вот как выглядит использование таких ссылок на странице:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">&lt;<span style="color:#f92672">img</span> <span style="color:#a6e22e">src</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;/img/a.jpg?hash=3679d97d8b1d497743cd8da8ba0440f5&amp;timestamp=1508716800000&#34;</span>&gt;
</code></pre></div><p>Где <code>hash</code> - это подпись, <code>timestamp</code> - время генерации ссылки. На сервере подпись можно <a href="https://github.com/dernasherbrezon/r2cloud/blob/master/src/main/java/ru/r2cloud/util/SignedURL.java">генерировать</a> следующим образом:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">computeMD5<span style="color:#f92672">(</span>path <span style="color:#f92672">+</span> timestamp <span style="color:#f92672">+</span> password<span style="color:#f92672">)</span>
</code></pre></div><p>Здесь нужно обратить внимание на то, что время включено в алгоритм генерации подписи. Это позволит защититься от <a href="https://ru.wikipedia.org/wiki/%D0%90%D1%82%D0%B0%D0%BA%D0%B0_%D0%BF%D0%BE%D0%B2%D1%82%D0%BE%D1%80%D0%BD%D0%BE%D0%B3%D0%BE_%D0%B2%D0%BE%D1%81%D0%BF%D1%80%D0%BE%D0%B8%D0%B7%D0%B2%D0%B5%D0%B4%D0%B5%D0%BD%D0%B8%D1%8F">атак повторного воспроизведения</a>.</p>
<h3 id="heading">Кэширование</h3>
<p>Данные, полученные по подписанным ссылкам, могут быть кэшированы браузером. Из-за этого необходимо аккуратно выставить заголовки ответа: не кэшировать на прокси серверах и кэшировать в браузере только на время жизни ссылки:</p>
<pre><code>Cache-Control: private, max-age=600
Last-Modified: Wed, 15 Nov 1995 04:58:08 GMT
</code></pre>
</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Тестирование ошибок файловой системы</title>
      <link>https://dernasherbrezon.com/posts/test-fs-failures/</link>
      <pubDate>Sat, 20 Apr 2019 21:50:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/test-fs-failures/</guid>
      <description>Большинство статей в моём блоге посвящены интересным вещам, с которыми я периодически сталкиваюсь. Эта статья не исключение. В одном из моих проектов - r2cloud я столкнулся с одной интересной ошибкой.
Вот, что мне удалось восстановить глядя на логи и исходный код:
 Диск полностью заполнился В какой-то момент времени обновилась конфигурация. Например, обновилось текущее значение PPM При попытке записать в файл, происходит ошибка IOException &amp;ldquo;no disk space&amp;rdquo; Файл пользовательских настроек полностью портится.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Тестирование ошибок файловой системы</h1></header>
      		<div class='container entry-content'>
  <p>Большинство статей в моём блоге посвящены интересным вещам, с которыми я периодически сталкиваюсь. Эта статья не исключение. В одном из моих проектов - <a href="http://github.com/dernasherbrezon/r2cloud">r2cloud</a> я столкнулся с одной интересной ошибкой.</p>
<p>Вот, что мне удалось восстановить глядя на логи и исходный код:</p>
<ol>
<li>Диск полностью заполнился</li>
<li>В какой-то момент времени обновилась конфигурация. Например, обновилось текущее значение <a href="https://davidnelson.me/?p=371">PPM</a></li>
<li>При попытке записать в файл, происходит ошибка IOException &ldquo;no disk space&rdquo;</li>
<li>Файл пользовательских настроек полностью портится. В зависимости от того, сколько диска было свободно, он становится либо частично записанным, либо пустым.</li>
</ol>
<p>Эта ошибка достаточно критичная. Дело в том, что с появлением большого количества спутников, диск будет периодически заполнятся. То есть, &ldquo;no disk space&rdquo; будет достаточно часто возникать. При этом пользовательские настройки не должны пропадать! Даже если диск полностью заполнен, приложение должно работать и отправлять в <a href="https://r2server.com">r2server</a> данные.</p>
<p>Исправить эту ошибку достаточно просто, однако, возникает немаловажный вопрос: а как вообще тестировать отказ файловой системы? И &ldquo;no disk space&rdquo; в частности?</p>
<h2 id="heading">Теория</h2>
<p>До JDK7 необходимо было бы создавать ещё один слой абстракции над файловой системой и делать его mock во время тестирования. В JDK7 появился специальный слой, абстрагирующий файловую систему: <code>java.nio.file.FileSystem</code>. Изначально <a href="http://github.com/dernasherbrezon/r2cloud">r2cloud</a> был написан на основе старого <code>java.io.File</code>, поэтому его необходимо переписать на новый API:</p>
<p><img src="/img/test-fs-failures/api.png" alt=""></p>
<h2 id="mockfilesystem">MockFileSystem</h2>
<p>Во время тестирования FileSystem необходимо заменить на MockFileSystem, которая генерирует IOException по заранее сконфигурированному сценарию. К сожалению, я не нашёл такую файловую систему, поэтому написал свою <a href="http://github.com/dernasherbrezon/mockfs">mockfs</a>.</p>
<p>Она позволяет проксировать запросы к файловой системе по-умолчанию и генерировать IOException при доступе к определённым файлам.</p>
<p>Тест при этом выглядит следующим образом.</p>
<p>Инициалиация. Чтобы MockFileSystem использовалась, необходимо её передавать компонентам извне.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">	<span style="color:#a6e22e">@Before</span>
	<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">start</span><span style="color:#f92672">(</span><span style="color:#f92672">)</span> <span style="color:#66d9ef">throws</span> Exception <span style="color:#f92672">{</span>
		fs <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> MockFileSystem<span style="color:#f92672">(</span>FileSystems<span style="color:#f92672">.</span><span style="color:#a6e22e">getDefault</span><span style="color:#f92672">(</span><span style="color:#f92672">)</span><span style="color:#f92672">)</span><span style="color:#f92672">;</span>
		config <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> TestConfiguration<span style="color:#f92672">(</span>tempFolder<span style="color:#f92672">,</span> fs<span style="color:#f92672">)</span><span style="color:#f92672">;</span>
	<span style="color:#f92672">}</span>
</code></pre></div><p>Сам тест при этом выглядит следующим образом:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">	<span style="color:#a6e22e">@Test</span>
	<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">testCorruptedAfterFailedWrite</span><span style="color:#f92672">(</span><span style="color:#f92672">)</span> <span style="color:#66d9ef">throws</span> Exception <span style="color:#f92672">{</span>
		String lat <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;53.40&#34;</span><span style="color:#f92672">;</span>
		config<span style="color:#f92672">.</span><span style="color:#a6e22e">setProperty</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;locaiton.lat&#34;</span><span style="color:#f92672">,</span> lat<span style="color:#f92672">)</span><span style="color:#f92672">;</span>
		config<span style="color:#f92672">.</span><span style="color:#a6e22e">update</span><span style="color:#f92672">(</span><span style="color:#f92672">)</span><span style="color:#f92672">;</span>

		fs<span style="color:#f92672">.</span><span style="color:#a6e22e">mock</span><span style="color:#f92672">(</span>config<span style="color:#f92672">.</span><span style="color:#a6e22e">getTempDirectoryPath</span><span style="color:#f92672">(</span><span style="color:#f92672">)</span><span style="color:#f92672">,</span> <span style="color:#66d9ef">new</span> FailingByteChannelCallback<span style="color:#f92672">(</span>3<span style="color:#f92672">)</span><span style="color:#f92672">)</span><span style="color:#f92672">;</span>
		Path userParentPath <span style="color:#f92672">=</span> fs<span style="color:#f92672">.</span><span style="color:#a6e22e">getPath</span><span style="color:#f92672">(</span>TestConfiguration<span style="color:#f92672">.</span><span style="color:#a6e22e">getUserSettingsLocation</span><span style="color:#f92672">(</span>tempFolder<span style="color:#f92672">)</span><span style="color:#f92672">)</span><span style="color:#f92672">.</span><span style="color:#a6e22e">getParent</span><span style="color:#f92672">(</span><span style="color:#f92672">)</span><span style="color:#f92672">;</span>
		fs<span style="color:#f92672">.</span><span style="color:#a6e22e">mock</span><span style="color:#f92672">(</span>userParentPath<span style="color:#f92672">,</span> <span style="color:#66d9ef">new</span> FailingByteChannelCallback<span style="color:#f92672">(</span>3<span style="color:#f92672">)</span><span style="color:#f92672">)</span><span style="color:#f92672">;</span>

		String newLat <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;23.40&#34;</span><span style="color:#f92672">;</span>
		config<span style="color:#f92672">.</span><span style="color:#a6e22e">setProperty</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;locaiton.lat&#34;</span><span style="color:#f92672">,</span> newLat<span style="color:#f92672">)</span><span style="color:#f92672">;</span>
		<span style="color:#66d9ef">try</span> <span style="color:#f92672">{</span>
			config<span style="color:#f92672">.</span><span style="color:#a6e22e">update</span><span style="color:#f92672">(</span><span style="color:#f92672">)</span><span style="color:#f92672">;</span>
			fail<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;config should not be updated&#34;</span><span style="color:#f92672">)</span><span style="color:#f92672">;</span>
		<span style="color:#f92672">}</span> <span style="color:#66d9ef">catch</span> <span style="color:#f92672">(</span>Exception e<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
			<span style="color:#75715e">// expected
</span><span style="color:#75715e"></span>		<span style="color:#f92672">}</span>
		
		fs<span style="color:#f92672">.</span><span style="color:#a6e22e">removeMock</span><span style="color:#f92672">(</span>config<span style="color:#f92672">.</span><span style="color:#a6e22e">getTempDirectoryPath</span><span style="color:#f92672">(</span><span style="color:#f92672">)</span><span style="color:#f92672">)</span><span style="color:#f92672">;</span>
		fs<span style="color:#f92672">.</span><span style="color:#a6e22e">removeMock</span><span style="color:#f92672">(</span>userParentPath<span style="color:#f92672">)</span><span style="color:#f92672">;</span>

		config <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> TestConfiguration<span style="color:#f92672">(</span>tempFolder<span style="color:#f92672">,</span> fs<span style="color:#f92672">)</span><span style="color:#f92672">;</span>
		assertEquals<span style="color:#f92672">(</span>lat<span style="color:#f92672">,</span> config<span style="color:#f92672">.</span><span style="color:#a6e22e">getProperty</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;locaiton.lat&#34;</span><span style="color:#f92672">)</span><span style="color:#f92672">)</span><span style="color:#f92672">;</span>
	<span style="color:#f92672">}</span>
</code></pre></div><ul>
<li>В самом начале происходит запись в файл.</li>
<li>Потом идёт установка поведения файловой системы. В данной случае MockFileSystem будет выбрасывать IOException после записи 3 байт.</li>
<li>Очистка mock объектов.</li>
<li>Загрузка данных из файла и проверка того, что предыдущее значение успешно было загружено.</li>
</ul>
<p>После того, как тест был написан, исправление ошибки достаточно простое:</p>
<ul>
<li>делать запись во временный файл</li>
<li>атомарно перезаписывать временный файл в результирующий</li>
</ul>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Сжимание I/Q потока на raspberrypi</title>
      <link>https://dernasherbrezon.com/posts/rtlsdr-gzip/</link>
      <pubDate>Mon, 04 Mar 2019 17:22:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/rtlsdr-gzip/</guid>
      <description>Недавно я добавил поддержку более 20 спутников в r2cloud. Из-за этого принимаемых данных стало значительно больше и диск переполнился. Чтобы как-то решить эту проблему, я уменьшил количество сохраняемых наблюдений. Теперь сохраняются последние 3 наблюдения для каждого спутника. Это не сильно помогло:
Дело в том, что при пролёте спутника, я сохраняю данные в raw I/Q с частотой пример 240 000 сэмплов в секунду. Это создаёт файл:
240 000 байт/сек * 2 (канала) * 12 минут = 288000000 байт = ~288мб Почему такая большая частота?</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Сжимание I/Q потока на raspberrypi</h1></header>
      		<div class='container entry-content'>
  <p>Недавно я добавил поддержку более 20 спутников в <a href="https://github.com/dernasherbrezon/r2cloud">r2cloud</a>. Из-за этого принимаемых данных стало значительно больше и диск переполнился. Чтобы как-то решить эту проблему, я уменьшил количество сохраняемых наблюдений. Теперь сохраняются последние 3 наблюдения для каждого спутника. Это не сильно помогло:</p>
<p><img src="/img/rtlsdr-gzip/1.png" alt=""></p>
<p>Дело в том, что при пролёте спутника, я сохраняю данные в raw I/Q с частотой пример 240 000 сэмплов в секунду. Это создаёт файл:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#ae81ff">240</span> <span style="color:#ae81ff">000</span> байт/сек * <span style="color:#ae81ff">2</span> <span style="color:#f92672">(</span>канала<span style="color:#f92672">)</span> * <span style="color:#ae81ff">12</span> минут <span style="color:#f92672">=</span> <span style="color:#ae81ff">288000000</span> байт <span style="color:#f92672">=</span> ~288мб
</code></pre></div><p>Почему такая большая частота? Кубсаты обычно занимают гораздо меньшую полосу частот, но дело в том, что rtl-sdr не умеет меньше. Поэтому необходимо сохранить данные с такой частотой, а потом даунсэмплировать в более низкую.</p>
<p>Конвертация в .wav файл с частотой 48 000 сэмплов в секунду занимает слишком много времени. Так что, пока она происходит, запускается следующее наблюдение. Предыдущий файл не успевает сконвертироваться, и запускается ещё одно наблюдение и так далее. Всё это приводит к тому, что диск переполняется.</p>
<p>Чтобы этого избежать, я придумал следующее:</p>
<ol>
<li>Не запускать следующее наблюдение, если не произведено даунсэмплирование предыдущего</li>
<li>Сохранять данные на диск сразу в сжатом виде</li>
</ol>
<p>Первый пункт было достаточно просто <a href="https://github.com/dernasherbrezon/r2cloud/commit/ba4550407a352d85134c0a9986e84e6bba184f89">реализовать</a>. Для второго пункта необходимо было провести тестирование, о котором я и хочу написать дальше.</p>
<h2 id="heading">Тестирование</h2>
<p>Тестирование заключается в сравнении старого способа (писать данные напрямую на диск) и нового.</p>
<p>Скрипт для запуска старого способа следующий:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">timeout 10m vmstat <span style="color:#ae81ff">1</span> &gt; ~/nogz_vmstat.txt &amp;
timeout 10m rtl_sdr -f <span style="color:#ae81ff">145952432</span> -s <span style="color:#ae81ff">240000</span> -g <span style="color:#ae81ff">45</span> -p <span style="color:#ae81ff">7</span> /tmp/nogz.raw &amp;
</code></pre></div><p>В результате получаются следующие графики загрузки CPU (us) и диска (wa):</p>
<p><img src="/img/rtlsdr-gzip/2.png" alt=""></p>
<p>Новый способ запускается следующим образом:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">timeout 10m vmstat <span style="color:#ae81ff">1</span> &gt; ~/gz_vmstat.txt &amp;
timeout 10m rtl_sdr -f <span style="color:#ae81ff">145952432</span> -s <span style="color:#ae81ff">240000</span> -g <span style="color:#ae81ff">45</span> -p <span style="color:#ae81ff">7</span> - | gzip &gt; /tmp/gz.raw.gz &amp;
</code></pre></div><p>И получается:</p>
<p><img src="/img/rtlsdr-gzip/3.png" alt=""></p>
<p>На диске при этом:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">pi@raspberrypi:/tmp $ ls -lh
-rw-r--r-- <span style="color:#ae81ff">1</span> pi   pi    47M Apr  <span style="color:#ae81ff">2</span> 21:30 gz.raw.gz
-rw-r--r-- <span style="color:#ae81ff">1</span> pi   pi   275M Apr  <span style="color:#ae81ff">2</span> 21:17 nogz.raw
</code></pre></div><h2 id="heading-1">Выводы</h2>
<ol>
<li>Запись на диск ожидаемо потребляет CPU в районе 10%</li>
<li>Простоя из-за большого потока данных на флэшку меньше при использовании gzip. Тоже ожидаемо</li>
<li>Потребление диска уменьшилось почти в 6 раз!</li>
</ol>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Производительность rtl_sdr на raspberrypi</title>
      <link>https://dernasherbrezon.com/posts/rtlsdr-perf/</link>
      <pubDate>Sat, 02 Mar 2019 18:22:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/rtlsdr-perf/</guid>
      <description>Очень часто в сети можно встретить гиды по быстрой сборке на коленке анализатора радио с помощью rtl_sdr и raspberrypi. Большинство таких гидов ограничивается достаточно простым описанием: &amp;ldquo;возьмите одно вставьте другое, потом немного питоновских скриптов и у вас всё получится&amp;rdquo;. Для новичков и просто любителей DIY - это прекрасный подход. Можно достаточно быстро познакомится с технологией и увидеть результат. Но что делать если нужно собрать что-то более продвинутое? Что если важна производительность?</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Производительность rtl_sdr на raspberrypi</h1></header>
      		<div class='container entry-content'>
  <p>Очень часто в сети можно встретить гиды по быстрой сборке на коленке анализатора радио с помощью rtl_sdr и raspberrypi. Большинство таких гидов ограничивается достаточно простым описанием: &ldquo;возьмите одно вставьте другое, потом немного питоновских скриптов и у вас всё получится&rdquo;. Для новичков и просто любителей DIY - это прекрасный подход. Можно достаточно быстро познакомится с технологией и увидеть результат. Но что делать если нужно собрать что-то более продвинутое? Что если важна производительность? Для этого необходимо провести более серьезные тесты.</p>
<p>Один из таких тестов - производительность системы во время записи сигнала. Дело в том, что есть несколько способов обработки сигнала с rtl_sdr:</p>
<ol>
<li>В реальном времени. Сигнал считывается из rtl_sdr и сразу же демодулируется. Результат либо сохраняется на диск, либо отправляется по сети дальше.</li>
<li>В отложенном режиме.</li>
</ol>
<ul>
<li>предобработки. Сигнял считывается, немного трансформируется и сохраняется на диск. После завершения наблюдения он демодулируется. Например, во время пролёта спутника, сигнал считывается, децимируетс и сохраняется на диск. Обычно это делается для того, чтобы уменьшить размер файла на диске. rtl_sdr поддерживает минимальную ширину 240 КГц. Если ширина сигнала меньше, например, 150 КГц, то имеет смысл уменьшить частоту дискретизации.</li>
<li>сырые данные. Сигнал считывается и напрямую сохраняется в файл. Такой вариант вариант наиболее быстрый, поскольку не требует обработки. С другой стороны он наиболее требовательный к размеру диска.</li>
</ul>
<h2 id="-">Описание теста</h2>
<p>В своём проекте <a href="https://github.com/dernasherbrezon/r2cloud">r2cloud</a> я занимаюсь обработкой телеметрии различных спутников. Поэтому мне интересно было померить поведение системы при обработке сигнала в отложенном режиме. Для этого я провёл несколько тестов:</p>
<ul>
<li>предобработка. В этих тестах я считывал данные из rtl_sdr и делал децимацию с помощью программы <a href="http://sox.sourceforge.net">sox</a>. Передачу данных от одной программы к другой можно сделать через <a href="https://www.gnu.org/software/bash/manual/html_node/Pipelines.html">pipe</a>.
<ul>
<li>pipe сделан в Java. Посколько сама обработка сигнала написана на Java, то и pipe я реализовал на Java. Я создавал sox процесс, затем rtl_sdr процесс, и вручную копировал байти из stdin rtl_sdr в sox. Последний писал результат на диск в файл. Я сделал специальный проект <a href="https://github.com/dernasherbrezon/rtlsdr-pipe-tester">rtlsdr-pipe-tester</a>, чтобы лучше локализовать алгоритм работы.</li>
</ul>
</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">java -jar rtlsdr-pipe-tester-0.0.1-SNAPSHOT-jar-with-dependencies.jar
</code></pre></div><ul>
<li>pipe сделан в bash. То же самое, только команды запускаются в bash. Для измерения скорости записи на диск использовалась команда <a href="https://linux.die.net/man/1/pv">pv</a>.</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">rtl_sdr -f <span style="color:#ae81ff">137900000</span> -s <span style="color:#ae81ff">1440000</span> -g <span style="color:#ae81ff">45</span> -p <span style="color:#ae81ff">0</span> - | pv --numeric --bytes 2&gt;raw.txt | sox --type raw --rate <span style="color:#ae81ff">1440000</span> --encoding unsigned-integer --bits <span style="color:#ae81ff">8</span> --channels <span style="color:#ae81ff">2</span> - /tmp/test.wav rate <span style="color:#ae81ff">150000</span>
</code></pre></div><ul>
<li>сырые данные</li>
<li>raspberrypi 1 и raspberrypi 3. Новая версия имеет большее количество процессоров. Мне хотелось понять, влияет ли количество процессоров на производительность задачи.</li>
<li>использование <a href="https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=f7d34b445abc00e979b7cf36b9580ac3d1a47cd8">usbfs zerocopy</a> (появилось в rtl_sdr 0.6.x) и нет. В этом режиме процесс может читать память драйвера напрямую, без копирования через память ядра Linux. В теории это должно уменьшить нагрузку на систему и сделать её более стабильной.</li>
</ul>
<h2 id="raspberrypi-1">RaspberryPI 1</h2>
<p><img src="/img/rtlsdr-perf/1.png" alt=""></p>
<p>Среднее значение 820 кбайт/сек для bash и 800 кбайт/сек для Java. Это совсем не то, что должно быть. Дело в том, что я запрашиваю 1440000 сэмплов в секунду. Каждый сэмпл содержит в себе I и Q пару по одному байту. Итого мне нужно 2880 кбайт/сек. Похоже сэмплы теряются. Загрузка CPU при этом следующая:</p>
<p><img src="/img/rtlsdr-perf/2.png" alt=""></p>
<p>На графики видны падения использования CPU. Согласно полной статистике из <a href="https://en.wikipedia.org/wiki/Vmstat">vmstat</a> в это время происходит 100% wa. Система явно не справляется с нагрузкой.</p>
<h2 id="raspberrypi-1---zerocopy">RaspberryPI 1 - zerocopy</h2>
<p><img src="/img/rtlsdr-perf/3.png" alt=""></p>
<p>Большой разброс в значениях в обработке с помощью bash pipe - на самом деле хороший признак. Это значит, что система успевает обработать данные и периодически сбрасывает наполняет внутренние буфера для копирования. Конечно, можно было бы и лучше - сразу копировать данные, как только они появляются. Тем не менее среднее значение в районе 2880 кбайт/сек, что очень хорошо.</p>
<p>Копирование с помощью Java pipe по-прежнему 800 кбайт/сек, что значит выигрыша zerocopy не даёт.</p>
<p><img src="/img/rtlsdr-perf/4.png" alt=""></p>
<p>При этом график потребления CPU выглядит достаточно интересным. С одной стороны, видно что потребление при bash pipe снизилось до 35 процентов. С другой стороны, всё равно остались участки, где wa 100 и CPU простаивает. У меня есть подозрение, что нужно оптимизировать запись на диск. Дело в том, что в raspberrypi диск - это флэш карта. Видимо она не справляется с нагрузкой.</p>
<h2 id="raspberrypi-3">RaspberryPI 3</h2>
<p><img src="/img/rtlsdr-perf/5.png" alt=""></p>
<p>Для RaspberryPi 3 ситуация выглядит получше. Похоже производительность хватает, чтобы обработать 2880 кбайт/сек.</p>
<p><img src="/img/rtlsdr-perf/6.png" alt=""></p>
<p>Потребление CPU около 19%. Для 4х ядерного процессора RaspberryPi 3 это значит, что одно ядро почти полностью загружено.</p>
<h2 id="raspberrypi-3---zerocopy">RaspberryPI 3 - zerocopy</h2>
<p><img src="/img/rtlsdr-perf/7.png" alt=""></p>
<p>Скорость обработки более-менее стабильная 2880 кбайт/сек.</p>
<p><img src="/img/rtlsdr-perf/8.png" alt=""></p>
<p>А вот загрузка CPU достаточно неожиданная. При использовании zerocopy, я бы ожидал, что она уменьшится. В реальности же она осталась неизменной. Возможно операционная система запустила sox на втором ядре. Тогда небольшая загрузка на первом ядре (rtl_sdr) и небольшая нагрузка на втором ядре (sox) в сумме как раз дают около 19% загрузки CPU в сумме.</p>
<h2 id="heading">Выводы</h2>
<ol>
<li>RaspberryPi 3 значительно мощнее RaspberryPi 1</li>
<li>Использование rtl_sdr 0.6.x c usbfs zerocopy значительно уменьшает нагрузку на систему</li>
</ol>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Тестирование JSP тэгов</title>
      <link>https://dernasherbrezon.com/posts/jsp-tag-testing/</link>
      <pubDate>Sat, 02 Mar 2019 12:48:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/jsp-tag-testing/</guid>
      <description>Недавно для себя открыл совершенно бесплатный для open source проектов sonarcloud. Я верю, что статичный анализ кода - это очень полезная штука, поэтому сразу же решил перевести свои наиболее популярные проекты туда.
Среди них был достаточно маленький проект jtimeago. Это небольшая библиотека jsp тэгов для вывода дат.
После добавления проекта через travis, я увидел, что jtimeago полностью зеленый.
Если зайти на страницу проекта в sonarcloud, то видно что все показатели хорошие за исключением нескольких мелких code smells.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Тестирование JSP тэгов</h1></header>
      		<div class='container entry-content'>
  <p>Недавно для себя открыл совершенно бесплатный для open source проектов <a href="https://sonarcloud.io/organizations/dernasherbrezon-github/projects">sonarcloud</a>. Я верю, что статичный анализ кода - это очень полезная штука, поэтому сразу же решил перевести свои наиболее популярные проекты туда.</p>
<p>Среди них был достаточно маленький проект <a href="https://github.com/dernasherbrezon/jtimeago">jtimeago</a>. Это небольшая библиотека jsp тэгов для вывода дат.</p>
<p>После добавления проекта через travis, я увидел, что jtimeago полностью зеленый.</p>
<p><img src="/img/jsp-tag-testing/1.png" alt=""></p>
<p>Если зайти на страницу проекта в sonarcloud, то видно что все показатели хорошие за исключением нескольких мелких code smells. Пофиксить их можно было достаточно тривиально, что я и решил сделать.</p>
<p>Однако, после моего коммита sonarcloud начал выдавать статус &ldquo;Failed&rdquo;.</p>
<p><img src="/img/jsp-tag-testing/2.png" alt=""></p>
<p>Оказывается в нём есть несколько метрик, которые влияют на финальный статус проекта:</p>
<ul>
<li>количество критичных багов</li>
<li>процент покрытия кода тестами за последние 30 дней</li>
<li>процент дублирующего кода за последние 30 дней</li>
</ul>
<p>После моего героического изменения кода, он стал отображаться как нетестируемый за последние 30 дней. Тут нужно понимать, что код - это несколько классов для JSP. Внутри него есть сильная привязка к servlet api, которую так просто нельзя замокать. Но и оставлять такой простой проект в статусе &ldquo;Quality: Failed&rdquo; мне не позволяла гордость. Я засучил рукава и принялся исследовать.</p>
<p>Сами классы реализуют <code>javax.servlet.jsp.tagext.TagSupport</code>. Это часть спецификации J2EE для создания тэгов в JSP. Надо сказать технология достаточно древняя и во время её проектирования ни о каком юнит тестировании ещё не думали. Исходя из этого я решил поднимать честный web контейнер для каждого теста, рендерить страницу и сравнивать с результатом.</p>
<p>Jetty - это легковесный web контейнер, который полностью реализует спецификацию j2ee. Его удобно запускать в embedded режиме. Так же в самом Jetty проекте есть несколько модулей для тестирования, которые предоставляют достаточно удобные функции. Подключается так:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-xml" data-lang="xml"><span style="color:#f92672">&lt;dependency</span><span style="color:#f92672">&gt;</span>
	<span style="color:#f92672">&lt;groupId</span><span style="color:#f92672">&gt;</span>org.eclipse.jetty<span style="color:#f92672">&lt;/groupId&gt;</span>
	<span style="color:#f92672">&lt;artifactId</span><span style="color:#f92672">&gt;</span>jetty-http<span style="color:#f92672">&lt;/artifactId&gt;</span>
	<span style="color:#f92672">&lt;version</span><span style="color:#f92672">&gt;</span>${jetty.version}<span style="color:#f92672">&lt;/version&gt;</span>
	<span style="color:#f92672">&lt;classifier</span><span style="color:#f92672">&gt;</span>tests<span style="color:#f92672">&lt;/classifier&gt;</span>
	<span style="color:#f92672">&lt;scope</span><span style="color:#f92672">&gt;</span>test<span style="color:#f92672">&lt;/scope&gt;</span>
<span style="color:#f92672">&lt;/dependency&gt;</span>
</code></pre></div><p>После чего будет доступен класс <code>org.eclipse.jetty.http.HttpTester</code>. С помощью него можно удобно выполнять HTTP запросы и получать ответы:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">HttpTester<span style="color:#f92672">.</span><span style="color:#a6e22e">Request</span> request <span style="color:#f92672">=</span> HttpTester<span style="color:#f92672">.</span><span style="color:#a6e22e">newRequest</span><span style="color:#f92672">(</span><span style="color:#f92672">)</span><span style="color:#f92672">;</span>
HttpTester<span style="color:#f92672">.</span><span style="color:#a6e22e">Response</span> response<span style="color:#f92672">;</span>

request<span style="color:#f92672">.</span><span style="color:#a6e22e">setMethod</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;GET&#34;</span><span style="color:#f92672">)</span><span style="color:#f92672">;</span>
request<span style="color:#f92672">.</span><span style="color:#a6e22e">setVersion</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;HTTP/1.0&#34;</span><span style="color:#f92672">)</span><span style="color:#f92672">;</span>
request<span style="color:#f92672">.</span><span style="color:#a6e22e">setHeader</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Host&#34;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;tester&#34;</span><span style="color:#f92672">)</span><span style="color:#f92672">;</span>
request<span style="color:#f92672">.</span><span style="color:#a6e22e">setURI</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;/&#34;</span> <span style="color:#f92672">+</span> pageName <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;.jsp&#34;</span><span style="color:#f92672">)</span><span style="color:#f92672">;</span>
response <span style="color:#f92672">=</span> HttpTester<span style="color:#f92672">.</span><span style="color:#a6e22e">parseResponse</span><span style="color:#f92672">(</span>HttpTester<span style="color:#f92672">.</span><span style="color:#a6e22e">from</span><span style="color:#f92672">(</span>localConnector<span style="color:#f92672">.</span><span style="color:#a6e22e">getResponse</span><span style="color:#f92672">(</span>request<span style="color:#f92672">.</span><span style="color:#a6e22e">generate</span><span style="color:#f92672">(</span><span style="color:#f92672">)</span><span style="color:#f92672">)</span><span style="color:#f92672">)</span><span style="color:#f92672">)</span><span style="color:#f92672">;</span>
</code></pre></div><p>Сами тесты достаточно простые. Создаётся jsp страница</p>
<pre><code>&lt;%@page contentType=&quot;text/html; charset=UTF-8&quot; pageEncoding=&quot;UTF-8&quot; trimDirectiveWhitespaces=&quot;true&quot; %&gt;
&lt;%@ taglib prefix=&quot;ta&quot; uri=&quot;https://github.com/dernasherbrezon/jtimeago&quot; %&gt;
&lt;%
	java.util.Date comment = new java.util.Date(1534320716000L);
	pageContext.setAttribute(&quot;comment&quot;, comment);
%&gt;
&lt;ta:formatDate value=&quot;${comment}&quot; var=&quot;outputCommentDate&quot; pattern=&quot;dd MMM yyyy HH:mm&quot; /&gt;
${outputCommentDate}
</code></pre><p>Для неё создаётся соответствующий файл проверки результатов:</p>
<pre><code>15 Aug 2018 08:11
</code></pre><p>Параметризованный junit тест проходит по всем файлам в директории и выполняет один и тот же код: запросить страницу и сравнить её с ожидаемой. После того, как я написал несколько тестов, оказалось, что у меня есть несколько багов:</p>
<ol>
<li>Если указать аттрибут var и при этом не указывать scope, то JSP вернёт ошибку 502. По умолчанию scope оказывался равен 0, а это неверное значение.</li>
<li>Изначально scope можно было задавать цифрами. Эти цифры достаточно неочевидны и не совместимы с jstl. Поскольку я старался сделать тэг максимально похожим на fmt:formatDate, то и семантику необходимо было сохранить. scope должен задаваться строкой и конвертироваться в цисло.</li>
<li>Геттеры необязательно указывать для аттрибутов тэга.</li>
</ol>
<p>После всех исправлений покрытие тестами улучшилось и проект снова стал зелёным:</p>
<p><img src="/img/jsp-tag-testing/3.png" alt=""></p>
<p>Несмотря на то, что sonar считает проект зелёным и тэг отрабатывает в настоящем web контейнере как надо, мне не хватает тестов соответствия спецификации. J2EE стандарт достаточно большой с множеством хитрых требований, которые не все полностью реализуют. Например, тэги могут создаваться и кэшироваться на диск. Для этого <code>javax.servlet.jsp.tagext.TagSupport</code> реализует интерфейс <code>java.io.Serializable</code>. J2EE ожидает, что после сериализации кэша тэгов на диск, его можно восстановить и он будет работать. На практике необходимо, чтобы каждый тэг правильно реализовывал <code>java.io.Serializable</code>. Я пока не придумал, как это можно сделать.</p>
<h2 id="heading">Выводы</h2>
<ol>
<li>Sonarcube достаточно мощный и простой в настройке инструмент. Пользуйтесь им для своих проектов.</li>
<li>Процент покрытия тестами кода - важный параметр.</li>
<li>Даже если в проекте всего 3 класса, то тесты нужны.</li>
</ol>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Приватный репозиторий в Ubuntu</title>
      <link>https://dernasherbrezon.com/posts/ubuntu-private-repo/</link>
      <pubDate>Thu, 07 Jun 2018 10:07:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/ubuntu-private-repo/</guid>
      <description>В Ubuntu репозитории – это специальные сервера-хранилища для приложений. Если Вы разрабатываете коммерческое приложение и запускаете его в Ubuntu, то логично положить его в репозиторий. А потом управлять этим приложением так же, как и обычными системными приложениями. Для этого нужно поднять в локальной сети или облаке apache, настроить логин и пароль, не забывать его обновлять&amp;hellip;Но что если есть другой способ?
Облачные хранилища С помощью apt-transport-s3 можно превратить bucket в приватный apt репозиторий.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Приватный репозиторий в Ubuntu</h1></header>
      		<div class='container entry-content'>
  <p>В Ubuntu репозитории – это специальные сервера-хранилища для приложений. Если Вы разрабатываете коммерческое приложение и запускаете его в Ubuntu, то логично положить его в репозиторий. А потом управлять этим приложением так же, как и обычными системными приложениями. Для этого нужно поднять в локальной сети или облаке apache, настроить логин и пароль, не забывать его обновлять&hellip;Но что если есть другой способ?</p>
<h2 id="-">Облачные хранилища</h2>
<p>С помощью <a href="https://packages.debian.org/sid/apt-transport-s3">apt-transport-s3</a> можно превратить bucket в приватный apt репозиторий. Однако, у этого способа появились следующие недостатки:</p>
<ul>
<li>Некоторые адреса Амазона заблокированы в России</li>
<li>Данные находятся в Европе, поэтому может быть медленно.</li>
</ul>
<p>Какие же есть альтернативы?</p>
<p>Самой известной считается <a href="https://docs.openstack.org/swift/latest/">Openstack Swift</a>. Swift (OpenStack Object Storage) — это полностью распределенное «безграничное» хранилище, которое характеризуется отказоустойчивостью и высокой надежностью. Создано как конкурент Amazon S3. Его преимущества:</p>
<ul>
<li>В России как минимум 2 провайдера предоставляют Swift как сервис: <a href="http://lib.clodo.ru/cloud-storage/cloudstorage.html">Clodo</a> и <a href="https://selectel.ru/services/cloud/storage/">Selectel</a></li>
<li>Данные находятся в России</li>
<li>Если Вы достаточно большие, то можете поднять его у себя</li>
<li>Все плюсы облачного хранилища: оплата за непосредственно используемые ресурсы, распределенное хранение, отказоустойчивость, 24/7.</li>
</ul>
<p>Из недостатков можно выделить лишь полное отсутствие интеграции с Ubuntu. Это сложно назвать недостатком, если Вы программист. Поэтому я написал интеграцию сам: <a href="https://github.com/dernasherbrezon/apt-transport-swift">apt-transport-swift</a>.</p>
<h1 id="heading">Разработка</h1>
<p>Для начала нужно немного погрузиться в то, как apt взаимодействует в репозиториями. Для того, чтобы получить информацию из репозитория, apt:</p>
<ul>
<li>находит соответствующий метод из списка установленных. Все они лежат в папке: /usr/lib/apt/methods/</li>
<li>отправляет ему необходимые команды согласно протоколу</li>
</ul>
<p>По умолчанию доступно достаточно много методов: http, ftp, cdrom, file, ssh и тд. Все они работают следующим образом:</p>
<ul>
<li>каждый метод - это отдельная программа</li>
<li>на вход apt отправляет через stdin команды для выполнения</li>
<li>на выходе через stdout метод должен вернуть результат работы</li>
</ul>
<p>Команды и ответы передаются в текстовом виде очень похожим на http. Например:</p>
<pre><code>100 Capabilities
Version: 1.2
Pipeline: true
Send-Config: true
</code></pre><p>Эту команду отправляет метод, чтобы получить конфигурацию apt.conf:</p>
<pre><code>600 URI Acquire
URI: swift://container/dists/stretch/InRelease
Filename: dists_stretch_InRelease
Expected-SHA1: 123
Last-Modified: Wed, 23 May 2018 14:13:16 GMT
</code></pre><p>Эту команду отправляет apt, когда необходимо скачать файл. Когда метод закончил скачивание, он возвращает:</p>
<pre><code>201 URI Done
URI: swift://container/dists/stretch/InRelease
Filename: dists_stretch_InRelease
Expected-SHA1: 123
Size: 762361
Last-Modified: Wed, 23 May 2018 14:13:16 GMT
</code></pre><p>Поскольку все методы написаны на C++, я решил тоже написать на C++. После двух недель, мои глаза стали вытекать и я решил начать с чего-нибудь попроще. С. Программа вылядела достаточно простой, но результат не удовлетворял моих высоких стандартов качества. Еще две недели пришлось потратить на изучение утечек памяти, инструментов тестирования и настройки билда в <a href="https://travis-ci.org/dernasherbrezon/apt-transport-swift">Travis</a>.</p>
<h1 id="--1">Всё вместе</h1>
<p>В результате я получил следующую схему для Java проектов:</p>
<p><img src="/img/ubuntu-private-repo/xxiubje3ios6bvc16lre6dl-vlq.png" alt=""></p>
<ol>
<li>Сброка .deb артефакта с помощью <a href="https://github.com/dernasherbrezon/deb-maven-plugin">deb-maven-plugin</a>. pom.xml:</li>
</ol>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-xml" data-lang="xml"><span style="color:#f92672">&lt;plugins</span><span style="color:#f92672">&gt;</span>
...
	<span style="color:#f92672">&lt;plugin</span><span style="color:#f92672">&gt;</span>
		<span style="color:#f92672">&lt;groupId</span><span style="color:#f92672">&gt;</span>com.aerse.maven<span style="color:#f92672">&lt;/groupId&gt;</span>
		<span style="color:#f92672">&lt;artifactId</span><span style="color:#f92672">&gt;</span>deb-maven-plugin<span style="color:#f92672">&lt;/artifactId&gt;</span>
		<span style="color:#f92672">&lt;version</span><span style="color:#f92672">&gt;</span>1.4<span style="color:#f92672">&lt;/version&gt;</span>
		<span style="color:#f92672">&lt;executions</span><span style="color:#f92672">&gt;</span>
			<span style="color:#f92672">&lt;execution</span><span style="color:#f92672">&gt;</span>
				<span style="color:#f92672">&lt;id</span><span style="color:#f92672">&gt;</span>package<span style="color:#f92672">&lt;/id&gt;</span>
				<span style="color:#f92672">&lt;phase</span><span style="color:#f92672">&gt;</span>package<span style="color:#f92672">&lt;/phase&gt;</span>
				<span style="color:#f92672">&lt;goals</span><span style="color:#f92672">&gt;</span>
					<span style="color:#f92672">&lt;goal</span><span style="color:#f92672">&gt;</span>package<span style="color:#f92672">&lt;/goal&gt;</span>
				<span style="color:#f92672">&lt;/goals&gt;</span>
			<span style="color:#f92672">&lt;/execution&gt;</span>
		<span style="color:#f92672">&lt;/executions&gt;</span>
		<span style="color:#f92672">&lt;configuration</span><span style="color:#f92672">&gt;</span>
			<span style="color:#f92672">&lt;unixUserId</span><span style="color:#f92672">&gt;</span>ubuntu<span style="color:#f92672">&lt;/unixUserId&gt;</span>
			<span style="color:#f92672">&lt;unixGroupId</span><span style="color:#f92672">&gt;</span>ubuntu<span style="color:#f92672">&lt;/unixGroupId&gt;</span>
			<span style="color:#f92672">&lt;osDependencies</span><span style="color:#f92672">&gt;</span>
				<span style="color:#f92672">&lt;openjdk-7-jdk</span><span style="color:#f92672">&gt;</span><span style="color:#f92672">&lt;/openjdk-7-jdk&gt;</span>
				<span style="color:#f92672">&lt;nginx</span><span style="color:#f92672">&gt;</span><span style="color:#f92672">&lt;/nginx&gt;</span>
			<span style="color:#f92672">&lt;/osDependencies&gt;</span>
			<span style="color:#f92672">&lt;javaServiceWrapper</span><span style="color:#f92672">&gt;</span>true<span style="color:#f92672">&lt;/javaServiceWrapper&gt;</span>
			<span style="color:#f92672">&lt;fileSets</span><span style="color:#f92672">&gt;</span>
				<span style="color:#f92672">&lt;fileSet</span><span style="color:#f92672">&gt;</span>
					\<span style="color:#f92672">&lt;source</span><span style="color:#f92672">&gt;</span>${basedir}/src/main/deb<span style="color:#f92672">&lt;/source&gt;</span>
					<span style="color:#f92672">&lt;target</span><span style="color:#f92672">&gt;</span>/<span style="color:#f92672">&lt;/target&gt;</span>
				<span style="color:#f92672">&lt;/fileSet&gt;</span>
			<span style="color:#f92672">&lt;/fileSets&gt;</span>
		<span style="color:#f92672">&lt;/configuration&gt;</span>
	<span style="color:#f92672">&lt;/plugin&gt;</span>
...
<span style="color:#f92672">&lt;/plugins&gt;</span>
</code></pre></div><ol start="2">
<li>Дистрибьюция артефакта в apt репозиторий. <a href="https://github.com/dernasherbrezon/apt-maven-plugin">Плагин</a> проинициализирует репозиторий, если он изначально пустой. pom.xml:</li>
</ol>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-xml" data-lang="xml"><span style="color:#f92672">&lt;plugins</span><span style="color:#f92672">&gt;</span>
...
  <span style="color:#f92672">&lt;plugin</span><span style="color:#f92672">&gt;</span>
    <span style="color:#f92672">&lt;groupId</span><span style="color:#f92672">&gt;</span>com.aerse.maven<span style="color:#f92672">&lt;/groupId&gt;</span>
    <span style="color:#f92672">&lt;artifactId</span><span style="color:#f92672">&gt;</span>apt-maven-plugin<span style="color:#f92672">&lt;/artifactId&gt;</span>
    <span style="color:#f92672">&lt;version</span><span style="color:#f92672">&gt;</span>1.9<span style="color:#f92672">&lt;/version&gt;</span>
    <span style="color:#f92672">&lt;executions</span><span style="color:#f92672">&gt;</span>
      <span style="color:#f92672">&lt;execution</span><span style="color:#f92672">&gt;</span>
        <span style="color:#f92672">&lt;id</span><span style="color:#f92672">&gt;</span>deploy<span style="color:#f92672">&lt;/id&gt;</span>
        <span style="color:#f92672">&lt;goals</span><span style="color:#f92672">&gt;</span>
          <span style="color:#f92672">&lt;goal</span><span style="color:#f92672">&gt;</span>deploy<span style="color:#f92672">&lt;/goal&gt;</span>
        <span style="color:#f92672">&lt;/goals&gt;</span>
      <span style="color:#f92672">&lt;/execution&gt;</span>
    <span style="color:#f92672">&lt;/executions&gt;</span>
	<span style="color:#f92672">&lt;configuration</span><span style="color:#f92672">&gt;</span>
		<span style="color:#f92672">&lt;component</span><span style="color:#f92672">&gt;</span>main<span style="color:#f92672">&lt;/component&gt;</span>
		<span style="color:#f92672">&lt;codename</span><span style="color:#f92672">&gt;</span>myrepo<span style="color:#f92672">&lt;/codename&gt;</span>
		<span style="color:#f92672">&lt;sign</span><span style="color:#f92672">&gt;</span>true<span style="color:#f92672">&lt;/sign&gt;</span>
		<span style="color:#f92672">&lt;keyname</span><span style="color:#f92672">&gt;</span>name<span style="color:#f92672">&lt;/keyname&gt;</span>
		<span style="color:#f92672">&lt;passphraseServerId</span><span style="color:#f92672">&gt;</span>gpg.passphrase<span style="color:#f92672">&lt;/passphraseServerId&gt;</span>
	<span style="color:#f92672">&lt;/configuration&gt;</span>
  <span style="color:#f92672">&lt;/plugin&gt;</span>
...
<span style="color:#f92672">&lt;/plugins&gt;</span>
</code></pre></div><p>settings.xml:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-xml" data-lang="xml"><span style="color:#f92672">&lt;settings</span><span style="color:#f92672">&gt;</span>
  ...
  <span style="color:#f92672">&lt;servers</span><span style="color:#f92672">&gt;</span>
    ...
    <span style="color:#f92672">&lt;server</span><span style="color:#f92672">&gt;</span>
      <span style="color:#f92672">&lt;id</span><span style="color:#f92672">&gt;</span>gpg.passphrase<span style="color:#f92672">&lt;/id&gt;</span>
      <span style="color:#f92672">&lt;passphrase</span><span style="color:#f92672">&gt;</span>passphrase<span style="color:#f92672">&lt;/passphrase&gt;</span>
    <span style="color:#f92672">&lt;/server&gt;</span>
    ...
  <span style="color:#f92672">&lt;/servers&gt;</span>
  ...
<span style="color:#f92672">&lt;/settings&gt;</span>
</code></pre></div><ol start="3">
<li>В maven есть такое понятие как wagon. Это особая точка расширения, позволяющая добавить новый протокол. С помощью <a href="https://github.com/dernasherbrezon/swift-maven">swift-maven</a> я добавил поддержку протокола swift. pom.xml:</li>
</ol>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-xml" data-lang="xml"><span style="color:#f92672">&lt;project</span><span style="color:#f92672">&gt;</span>
  ...
  <span style="color:#f92672">&lt;distributionManagement</span><span style="color:#f92672">&gt;</span>
    <span style="color:#f92672">&lt;repository</span><span style="color:#f92672">&gt;</span>
      <span style="color:#f92672">&lt;id</span><span style="color:#f92672">&gt;</span>private-repo<span style="color:#f92672">&lt;/id&gt;</span>
      <span style="color:#f92672">&lt;url</span><span style="color:#f92672">&gt;</span>swift://api.selcdn.ru/v3<span style="color:#f92672">&lt;/url&gt;</span>
    <span style="color:#f92672">&lt;/repository&gt;</span>
  <span style="color:#f92672">&lt;/distributionManagement&gt;</span>
  ...

  <span style="color:#f92672">&lt;build</span><span style="color:#f92672">&gt;</span>
    ...
    <span style="color:#f92672">&lt;extensions</span><span style="color:#f92672">&gt;</span>
      ...
      <span style="color:#f92672">&lt;extension</span><span style="color:#f92672">&gt;</span>
        <span style="color:#f92672">&lt;groupId</span><span style="color:#f92672">&gt;</span>com.aerse<span style="color:#f92672">&lt;/groupId&gt;</span>
        <span style="color:#f92672">&lt;artifactId</span><span style="color:#f92672">&gt;</span>swift-maven<span style="color:#f92672">&lt;/artifactId&gt;</span>
        <span style="color:#f92672">&lt;version</span><span style="color:#f92672">&gt;</span>1.1<span style="color:#f92672">&lt;/version&gt;</span>
      <span style="color:#f92672">&lt;/extension&gt;</span>
      ...
    <span style="color:#f92672">&lt;/extensions&gt;</span>
    ...
  <span style="color:#f92672">&lt;/build&gt;</span>  
<span style="color:#f92672">&lt;/project&gt;</span>
</code></pre></div><p>settings.xml:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-xml" data-lang="xml"><span style="color:#f92672">&lt;settings</span><span style="color:#f92672">&gt;</span>
  ...
  <span style="color:#f92672">&lt;servers</span><span style="color:#f92672">&gt;</span>
    ...
    <span style="color:#f92672">&lt;server</span><span style="color:#f92672">&gt;</span>
      <span style="color:#f92672">&lt;id</span><span style="color:#f92672">&gt;</span>private-repo<span style="color:#f92672">&lt;/id&gt;</span>
      <span style="color:#f92672">&lt;username</span><span style="color:#f92672">&gt;</span>username<span style="color:#f92672">&lt;/username&gt;</span>
      <span style="color:#f92672">&lt;password</span><span style="color:#f92672">&gt;</span>password<span style="color:#f92672">&lt;/password&gt;</span>
    <span style="color:#f92672">&lt;/server&gt;</span>
    ...
  <span style="color:#f92672">&lt;/servers&gt;</span>
  ...
<span style="color:#f92672">&lt;/settings&gt;</span>
</code></pre></div><ol start="4">
<li>В качестве облачного хранения данных я выбрал <a href="https://selectel.com/?ref_code=9AMKYUS5Md3m">Selectel</a>. Они поддерживают API Swift v3.</li>
<li><a href="https://github.com/dernasherbrezon/apt-transport-swift">apt-transport-swift</a> реализует swift протокол для apt.</li>
</ol>
<pre><code>#: cat /etc/apt/sources.list.d/privaterepo.list

deb swift://container myrepo main
</code></pre><p>И конфигурация:</p>
<pre><code>#: cat /etc/apt/apt.conf.d/80privaterepo

Swift {
 Container0 {
   Name &quot;container&quot;;
   URL &quot;https://api.selcdn.ru&quot;;
   Username &quot;username&quot;;
   Password &quot;password&quot;;
 };
};
</code></pre><h1 id="heading-1">Результат</h1>
<p>Хочется отметить, что схема не добавляет никаких новых сущностей в уже существующие инструменты. Всё реализовано в виде плагинов и должно работать независимо друг от друга. Например, с помощью <a href="https://github.com/dernasherbrezon/apt-maven-plugin">apt-maven-plugin</a> можно деплоить в S3.</p>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>DSP на Java</title>
      <link>https://dernasherbrezon.com/posts/dsp-java/</link>
      <pubDate>Thu, 08 Mar 2018 17:22:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/dsp-java/</guid>
      <description>Java - язык программирования общего назначения. Общего назначения - значит можно писать почти любые программы. Вот я и попытался написать программу, которую обычно пишут на С или C++. Под катом я попытаюсь рассказать, как я декодировал спутниковые снимки с Метеор-М №2.
Предисловие Когда я впервые заинтересовался декодированием спутниковых сигналов, то был, прямо говоря, удивлён. Сейчас софт для декодирования сигналов выглядит так же, как и библиотеки общего назначения лет 20 назад. Каждый пишет, что хочет, в каком хочет формате и совершенно не заботится о результатах.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>DSP на Java</h1></header>
      		<div class='container entry-content'>
  <p>Java - язык программирования общего назначения. Общего назначения - значит можно писать почти любые программы. Вот я и попытался написать программу, которую обычно пишут на С или C++. Под катом я попытаюсь рассказать, как я декодировал спутниковые снимки с <a href="https://ru.wikipedia.org/wiki/%D0%9C%D0%B5%D1%82%D0%B5%D0%BE%D1%80-%D0%9C_%E2%84%962">Метеор-М №2</a>.</p>
<p><img src="/img/dsp-java/evf0t2iu5xcammoaobfgopwewai.png" alt="DSP in Java"></p>
<h1 id="heading">Предисловие</h1>
<p>Когда я впервые заинтересовался декодированием спутниковых сигналов, то был, прямо говоря, удивлён. Сейчас софт для декодирования сигналов выглядит так же, как и библиотеки общего назначения лет 20 назад. Каждый пишет, что хочет, в каком хочет формате и совершенно не заботится о результатах. Яркий тому пример - декодирование сигнала с Метеор-М. <a href="https://www.rtl-sdr.com/rtl-sdr-tutorial-receiving-meteor-m-n2-lrpt-weather-satellite-images-rtl-sdr/">Обычно</a> алгоритм получения картинки выглядит следующим образом:</p>
<ol>
<li>Записать сигнал</li>
<li>Запустить SDR# с определёнными плагинами и настройками и демодулировать сигнал. На выходе получается бинарный файл.</li>
<li>Запустить LRPToffLineDecoder и на вход передать бинарный файл, полученный ранее.</li>
<li>Из LRPToffLineDecoder сохранить картинку куда-нибудь.</li>
</ol>
<p>Видимо, всех радиолюбителей такой подход устраивал, если за 9 лет существования спутника на орбите, ничего лучше не было придумано. Но для <a href="https://github.com/dernasherbrezon/r2cloud">автоматического</a> получения картинки такой подход не работает:</p>
<ol>
<li>Весь софт работает под Windows</li>
<li>Нельзя запускать в headless режиме. Софт - это формочки с кнопочками.</li>
<li>Невозможно получить обратную связь по приёму сигнала. Нет никаких метрик, по которым можно было бы оценить хорошо или плохо была принята картинка.</li>
</ol>
<p>Из-за этого я забросил вэб формочки кровавого энтепрайза и начал долгое погружение в гремучий мир DSP. На полное декодирование сигнала у меня ушло 2 месяца свободного времени.</p>
<p>Разбор сигнала логически можно представить как две фазы:</p>
<ol>
<li>Демодуляция. Преобразование аудио-сигнала в информацию.</li>
<li>Декодирование. Преобразование информации в понятный пользователю вид.</li>
</ol>
<h1 id="heading-1">Демодуляция</h1>
<p>Согласно <a href="http://meteor.robonuka.ru/wp-content/uploads/2014/08/pdf_spe_95413_eps_hrpt-lrpt.pdf">официальной документации</a> сигнал модулирован с помощью <a href="https://ru.wikipedia.org/wiki/%D0%A4%D0%B0%D0%B7%D0%BE%D0%B2%D0%B0%D1%8F_%D0%BC%D0%B0%D0%BD%D0%B8%D0%BF%D1%83%D0%BB%D1%8F%D1%86%D0%B8%D1%8F">QPSK</a>. Если в кратце, то для передачи двух бит информации используется одно положение фазы.</p>
<p>Итак, нужно демодулировать QPSK сигнал на Java. То ли никому это неинтересно, то ли Java медленная, но я не нашёл ни одной библиотеки, которые бы это делали. Поэтому я взял <a href="https://github.com/otti-soft/meteor-m2-lrpt">существующий</a> проект демодуляции QPSK сигнала для GNURadio и начал переписывать блоки на Java.</p>
<p><img src="/img/dsp-java/jcsaroyobfqo11zvh3jino1qq7i.png" alt="QPSK demodulation"></p>
<h2 id="-">Блоки демодуляции</h2>
<p><strong>WavFile source</strong> и <strong>Float to Complex</strong>. Чтение из .wav файла <a href="https://ru.wikipedia.org/wiki/%D0%A1%D0%B8%D0%BD%D1%84%D0%B0%D0%B7%D0%BD%D0%B0%D1%8F_%D0%B8_%D0%BA%D0%B2%D0%B0%D0%B4%D1%80%D0%B0%D1%82%D1%83%D1%80%D0%BD%D0%B0%D1%8F_%D1%81%D0%BE%D1%81%D1%82%D0%B0%D0%B2%D0%BB%D1%8F%D1%8E%D1%89%D0%B8%D0%B5_%D1%81%D0%B8%D0%B3%D0%BD%D0%B0%D0%BB%D0%B0">IQ</a> сигнала. Значения записаны в файле последовательно. Сначала реальная часть, потом мнимая, потом реальная и так далее. В GNURadio есть свои типы данных и каждый блок рассчин для работы только с определёнными. Так как у нас QPSK модуляция, то нам нужно использовать комплексные числа. Здесь ничего сложного, так как в Java есть поддержка .wav файлов - AudioSystem.getAudioInputStream(inputStream).</p>
<p><strong>Low Pass Filter</strong>. Это первый фильтр, который предназначен для фильтрации низких частот. Так как наш сигнал занимает 130Mhz, то нам надо отфильтровать лишние частоты.</p>
<p><img src="/img/dsp-java/yp4g51xrjxss0v9ho9sqt8rdd4y.png" alt="lowpass"></p>
<p>На картинке выше, частоты нашего сигнала обведены зелёным. Остальные частоты справа должны быть отфильтрованы. Это делается с помощью <a href="https://ru.wikipedia.org/wiki/%D0%A4%D0%B8%D0%BB%D1%8C%D1%82%D1%80_%D1%81_%D0%BA%D0%BE%D0%BD%D0%B5%D1%87%D0%BD%D0%BE%D0%B9_%D0%B8%D0%BC%D0%BF%D1%83%D0%BB%D1%8C%D1%81%D0%BD%D0%BE%D0%B9_%D1%85%D0%B0%D1%80%D0%B0%D0%BA%D1%82%D0%B5%D1%80%D0%B8%D1%81%D1%82%D0%B8%D0%BA%D0%BE%D0%B9">КИХ-фильтра</a>. Для программиста это выглядит как:</p>
<ol>
<li>Взять последние N значений, текущее и положить в массив</li>
<li>Перемножить получившийся массив с заранее заданным (вычисляется из ЛАФЧХ фильтра). По сути, перемножение одного вектора на другой.</li>
<li>Все значения результирующего массива сложить.</li>
<li>Это и будет результат.</li>
</ol>
<p><strong><a href="https://ru.wikipedia.org/wiki/%D0%90%D0%B2%D1%82%D0%BE%D0%BC%D0%B0%D1%82%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B0%D1%8F_%D1%80%D0%B5%D0%B3%D1%83%D0%BB%D0%B8%D1%80%D0%BE%D0%B2%D0%BA%D0%B0_%D1%83%D1%81%D0%B8%D0%BB%D0%B5%D0%BD%D0%B8%D1%8F">AGC</a></strong>. Автоматическая регулировка усиления.</p>
<p><img src="/img/dsp-java/hcpmhaclhse8f7-ye05iml_sjvi.png" alt="agc"></p>
<p>С точки зрения реализации - перемножение входного сигнала на некий уровень и вычисление следующего уровня в зависимости от текущего.</p>
<p><strong><a href="https://en.wikipedia.org/wiki/Root-raised-cosine_filter">Root Raised Cosine Filter</a></strong>. Используется для уменьшения <a href="https://en.wikipedia.org/wiki/Intersymbol_interference">Intersymbol interference</a>. Если вкратце, то при получении сигнала одни уровни переданного сигнала могут накладываться на последующие. Чтобы выделить максимальный уровень сигнала между символами, применяют этот фильтр. Работает так же как и Low Pass Filter, но использует другую <a href="https://ru.wikipedia.org/wiki/%D0%9B%D0%BE%D0%B3%D0%B0%D1%80%D0%B8%D1%84%D0%BC%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B0%D1%8F_%D0%B0%D0%BC%D0%BF%D0%BB%D0%B8%D1%82%D1%83%D0%B4%D0%BD%D0%BE-%D1%84%D0%B0%D0%B7%D0%BE%D0%B2%D0%B0%D1%8F_%D1%87%D0%B0%D1%81%D1%82%D0%BE%D1%82%D0%BD%D0%B0%D1%8F_%D1%85%D0%B0%D1%80%D0%B0%D0%BA%D1%82%D0%B5%D1%80%D0%B8%D1%81%D1%82%D0%B8%D0%BA%D0%B0#%D0%9B%D0%90%D0%A7%D0%A5_2">ЛАФЧХ</a></p>
<p><img src="/img/dsp-java/42kvsx8xtrx3k14qehe1jziunde.png" alt="rrcf"></p>
<p><strong><a href="https://ru.wikipedia.org/wiki/%D0%A4%D0%B0%D0%B7%D0%BE%D0%B2%D0%B0%D1%8F_%D0%B0%D0%B2%D1%82%D0%BE%D0%BF%D0%BE%D0%B4%D1%81%D1%82%D1%80%D0%BE%D0%B9%D0%BA%D0%B0_%D1%87%D0%B0%D1%81%D1%82%D0%BE%D1%82%D1%8B">Costas Loop</a></strong> - это алгоритм фазовой подстройки частоты. Для чего он нужен? Например, для того, чтобы корректировать доплеровское смещение частоты. Так как, мы точно знаем, что фаза у нас скачет по четырём уровням, то можно сравнивать значение двух разных фаз. Если оно отличается на дельта, то корректировать частоту. Это ярче всего видно на картинках внизу.</p>
<p><img src="/img/dsp-java/it-g9hju18tmhnqq0twuj2qizja.png" alt="before costas loop"></p>
<p>До коррекции частоты, у нас круг (почти). Это значит, что частота немного меняется каждый раз, и точки фазы не попадают в одно и то же место.</p>
<p><img src="/img/dsp-java/um77gdjsnwyirvj1joikwgb8qk4.png" alt="after costas loop"></p>
<p>Здесь уже значительно лучше - видны 4 отчётливые точки фазы.</p>
<p><strong><a href="https://www.tablix.org/~avian/blog/archives/2015/03/notes_on_m_m_clock_recovery/">Clock recovery MM</a></strong>. Этот блок пытается восстановить шаг часов передатчика и отбрасывает все сэмплы, которые не относятся к изменению уровня. Примерная схема работы изображена ниже:</p>
<p><img src="/img/dsp-java/n1i8mli4sagj4lh-qc_6wif7kjw.jpg" alt="clock recovery in a nutshell"></p>
<p>После того, как все лишние сэмплы выкинуты, получается хорошее QPSK созвездие.</p>
<p><img src="/img/dsp-java/cxrwwpey0e-solb-mig03ua1dvs.png" alt="clock recovery"></p>
<p><strong>Constellation Soft Decoder</strong>. Этот блок преобразует координаты в вероятность битов. Тут надо остановится поподробнее, так это очень важно в дальнейшем. Допустим все точки у которых координаты положительные будут отображаться в пару &ldquo;00&rdquo;.</p>
<p><img src="/img/dsp-java/s3bddzcvb9z7te0u7y2hjhyt6ua.png" alt="initial"></p>
<p>Теперь допустим, что мы получили значение в красной точке.</p>
<p><img src="/img/dsp-java/nerub3aklfpmzkksbtdbyo0ik90.png" alt="hard decision"></p>
<p>Если мы будем делать жёсткое решение, то координаты красной точки мы преобразуем в пару &ldquo;00&rdquo;. При этом мы потеряем информацию о том, что точка-то почти &ldquo;01&rdquo; (в нижним квадранте). А эта информация на самом деле может помочь в декодировании. Есть алгоритмы, которые дают лучшие результаты, если передать эту информацию. Поэтому вместо того, чтобы принимать жёсткое решение, надо посчитать вероятность 0 и вероятность 1. Например 100% вероятность нахождения в правом верхнем квадранте будет 255,255. Использование мягких решений увеличивает поток данных в 8 раз, зато даёт более лучшие результаты при декодировании сигнала. Для того, чтобы посчитать мягкое решение, необходимо рассчитать расстояние между текущей точкой и каждой из точек созвездия.</p>
<p><strong>Rail</strong>, <strong>Float to char</strong>, <strong>File sink</strong>. Эти блоки немного преобразуют результаты и записывают их в файл. Для моего декодера записывать результаты в промежуточный файл не надо. Но в целях отладки было крайне полезно сначала демодулировать сигнал из Java, а затем посмотреть может ли LRPToffLineDecoder извлечь картинку.</p>
<h1 id="heading-2">Декодирование</h1>
<p>Итак, у нас есть поток 0 и 1 из которого нужно получить картинку. Для начала необходимо открыть <a href="http://planet.iitp.ru/spacecraft/meteor_m_n2_structure_2.pdf">официальную документацию</a>, где неплохо описана структура пакетов. Некоторые моменты там были опущены, поэтому я открыл еще <a href="http://meteor.robonuka.ru/wp-content/uploads/2014/08/pdf_spe_95413_eps_hrpt-lrpt.pdf">более официальную документацию</a>.</p>
<p>Декодирование состоит из следующих этапов:</p>
<ul>
<li>поиск в потоке бит синхромаркера. Каждый пакет начинается с него.</li>
<li>после того, как синхромаркер был найден, декодировать следующие 16384 бита алгоритмом Витерби</li>
<li>результат подвергнуть скрэмблированию, после чего</li>
<li>применить коды рида соломона и извлечь данные транспортного кадра</li>
<li>из последовательности транспортных кадров извлечь последовательность парциальных пакетов. Для тех, кто изучал <a href="https://ru.wikipedia.org/wiki/%D0%A1%D0%B5%D1%82%D0%B5%D0%B2%D0%B0%D1%8F_%D0%BC%D0%BE%D0%B4%D0%B5%D0%BB%D1%8C_OSI">модель OSI</a> вопросов быть не должно.</li>
<li>из парциальных пакетов извлечь MCU формата JPEG</li>
<li>декодировать пикселы JPEG, используя коды Хаффмана и Run-length coding</li>
<li>правильно заполнить пикселами картинку с учётом пропущенных пакетов</li>
<li>наложить 3 канала друг на друга с учётом пропущенных пакетов</li>
</ul>
<p>Пожалуй я не буду здесь рассказывать про каждый из алгоритмов. Они сами по себе потянут на отдельную статью. Хочу лишь выложить результаты работы <a href="https://github.com/dernasherbrezon/jradio">моей программы</a>, <a href="http://meteor.robonuka.ru/for-experts/soft/">официальной</a> и <a href="https://github.com/artlav/meteor_decoder">на паскале</a>.</p>
<p><img src="/img/dsp-java/gjnitpweqxobjmifktc5mli_ehu.jpg" alt="compare"></p>
<p>К сожалению общая картина занимает 4500x2800px, поэтому я привожу сильно пожатую версию.</p>
<h1 id="heading-3">Оптимизации</h1>
<p>А при чём тут Java? - скажут самые стойкие, кто смог дочитать до сюда.</p>
<p>Сейчас будет немного Java. Дело в том, что оптимизацию имеет смысл для корректно работающей программы. После каждого шага оптимизации можно запустить тесты и убедиться, что всё по прежнему работает корректно.</p>
<p>Итак, я начну с декодирования. При запуске <a href="https://www.yourkit.com/java/profiler/features/">профайлера</a>, ничего странного не обнаружилось:</p>
<ul>
<li>одно ядро работает на полную мощность</li>
<li>самый горячий метод - это <a href="https://ru.wikipedia.org/wiki/%D0%90%D0%BB%D0%B3%D0%BE%D1%80%D0%B8%D1%82%D0%BC_%D0%92%D0%B8%D1%82%D0%B5%D1%80%D0%B1%D0%B8">декодирование Витерби</a>. Сложность этого алгоритма О(T*S), где T - это длина массива данных, S - пространство состояний. В нашем случае у нас 8 (бит) * 4 (00,01,10,11) = 32.</li>
</ul>
<p>Помимо CPU, я запустил еще анализ аллокаций объектов. Оказывается, этот метод создаёт миллионы короткоживущих объектов. Они создают лишнюю нагрузку на GC и процессор. Посмотрим, можно ли это оптимизировать. Наивная реализация создаёт связный список для хранения решений каждого входящего бита:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">	LinkedList<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">long</span><span style="color:#f92672">[</span><span style="color:#f92672">]</span><span style="color:#f92672">&gt;</span> decisions <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> LinkedList<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">long</span><span style="color:#f92672">[</span><span style="color:#f92672">]</span><span style="color:#f92672">&gt;</span><span style="color:#f92672">(</span><span style="color:#f92672">)</span><span style="color:#f92672">;</span>
	<span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> 0<span style="color:#f92672">;</span> i <span style="color:#f92672">&lt;</span> data<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span><span style="color:#f92672">;</span> i <span style="color:#f92672">+</span><span style="color:#f92672">=</span> 2<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
		<span style="color:#66d9ef">long</span><span style="color:#f92672">[</span><span style="color:#f92672">]</span> d <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#66d9ef">long</span><span style="color:#f92672">[</span>2<span style="color:#f92672">]</span><span style="color:#f92672">;</span> <span style="color:#75715e">//decision
</span><span style="color:#75715e"></span>		<span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> b <span style="color:#f92672">=</span> 0<span style="color:#f92672">;</span> b <span style="color:#f92672">&lt;</span> 32<span style="color:#f92672">;</span> b<span style="color:#f92672">+</span><span style="color:#f92672">+</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
			d<span style="color:#f92672">[</span>b <span style="color:#f92672">/</span> 16<span style="color:#f92672">]</span> <span style="color:#f92672">=</span> <span style="color:#f92672">.</span><span style="color:#f92672">.</span><span style="color:#f92672">.</span><span style="color:#f92672">;</span>
		<span style="color:#f92672">}</span>
		<span style="color:#f92672">.</span><span style="color:#f92672">.</span><span style="color:#f92672">.</span>
		decisions<span style="color:#f92672">.</span><span style="color:#a6e22e">add</span><span style="color:#f92672">(</span>d<span style="color:#f92672">)</span><span style="color:#f92672">;</span>
	<span style="color:#f92672">}</span>
</code></pre></div><p>Это можно попробовать развернуть в одномерный массив и обращаться к результатам хитро вычисляя индекс. Например так:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">	<span style="color:#66d9ef">long</span><span style="color:#f92672">[</span><span style="color:#f92672">]</span> decisions <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#66d9ef">long</span><span style="color:#f92672">[</span>data<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span><span style="color:#f92672">]</span><span style="color:#f92672">;</span>
	<span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> 0<span style="color:#f92672">;</span> i <span style="color:#f92672">&lt;</span> data<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span><span style="color:#f92672">;</span> i <span style="color:#f92672">+</span><span style="color:#f92672">=</span> 2<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
		decisions<span style="color:#f92672">[</span>i <span style="color:#f92672">+</span> b <span style="color:#f92672">/</span> 16<span style="color:#f92672">]</span> <span style="color:#f92672">=</span> <span style="color:#f92672">.</span><span style="color:#f92672">.</span><span style="color:#f92672">.</span><span style="color:#f92672">;</span>
	<span style="color:#f92672">}</span>
</code></pre></div><p>В итоге, на одно декодирование создаётся один объект - массив decisions. ViterbiSoft можно ещё дальше оптимизировать. Например, зная то, что размер массива всегда одинаковый, создать long[] decisions в конструкторе и переиспользовать.</p>
<p>Ещё одним проблемным местом оказался класс FixedLengthTagger. Этот класс содержит скользящее окно. Оно работает следующим образом:</p>
<ul>
<li>новый байт читается из источника</li>
<li>записывается в конец окна</li>
<li>если размер окна больше размера пакета, то удалить байт из начала окна</li>
</ul>
<p>Наивная реализация использовала LinkedList<Byte> и алгоритм движения окна был такой:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">	window<span style="color:#f92672">.</span><span style="color:#a6e22e">offerLast</span><span style="color:#f92672">(</span>curByte<span style="color:#f92672">)</span><span style="color:#f92672">;</span>
	<span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>window<span style="color:#f92672">.</span><span style="color:#a6e22e">size</span><span style="color:#f92672">(</span><span style="color:#f92672">)</span> <span style="color:#f92672">&gt;</span> packet_len<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
		window<span style="color:#f92672">.</span><span style="color:#a6e22e">removeFirst</span><span style="color:#f92672">(</span><span style="color:#f92672">)</span><span style="color:#f92672">;</span>
	<span style="color:#f92672">}</span>
</code></pre></div><p>На самом деле это очень накладная операция, так как на каждую операцию offerLast внутри LinkedList создаётся объект Node. Он будет содержать наш байт и иметь ссылки на следующий элемент списка и предыдущий. Однако, зная, что размер нашего окна фиксированный, его можно заменить на циклический массив:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">	window<span style="color:#f92672">[</span>windowIndex<span style="color:#f92672">]</span> <span style="color:#f92672">=</span> curByte<span style="color:#f92672">;</span>
	windowIndex<span style="color:#f92672">+</span><span style="color:#f92672">+</span><span style="color:#f92672">;</span>
	<span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>windowIndex <span style="color:#f92672">&gt;</span><span style="color:#f92672">=</span> window<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
		windowIndex <span style="color:#f92672">=</span> 0<span style="color:#f92672">;</span>
	<span style="color:#f92672">}</span>
</code></pre></div><p>Для того, чтобы правильно взять его содержимое надо скопировать данные до текущего указателя первыми и после текущего указателя последними. Как то так:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">	<span style="color:#66d9ef">byte</span><span style="color:#f92672">[</span><span style="color:#f92672">]</span> packet<span style="color:#f92672">;</span>
	System<span style="color:#f92672">.</span><span style="color:#a6e22e">arraycopy</span><span style="color:#f92672">(</span>window<span style="color:#f92672">,</span> windowIndex<span style="color:#f92672">,</span> packet<span style="color:#f92672">,</span> 0<span style="color:#f92672">,</span> window<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span> <span style="color:#f92672">-</span> windowIndex<span style="color:#f92672">)</span><span style="color:#f92672">;</span>
	System<span style="color:#f92672">.</span><span style="color:#a6e22e">arraycopy</span><span style="color:#f92672">(</span>window<span style="color:#f92672">,</span> 0<span style="color:#f92672">,</span> packet<span style="color:#f92672">,</span> window<span style="color:#f92672">.</span><span style="color:#a6e22e">length</span> <span style="color:#f92672">-</span> windowIndex<span style="color:#f92672">,</span> windowIndex<span style="color:#f92672">)</span><span style="color:#f92672">;</span>
</code></pre></div><p>Эти две оптимизации позволили уменьшить время декодирования файла с 4 минут до 20 секунд. Для сравнения LRPToffLineDecoder делает это за 40 секунд.</p>
<p>Декодирование можно ещё немного оптимизировать, но в ущерб читаемости. Вместо этого можно попробовать ускорить демодуляцию.</p>
<p>Алгоритмы демодуляции на входе получают большой поток данных, а на выходе выдают сравнительно небольшой. Поэтому эти алгоритмы очень чувствительны к различным оптимизациям. При запуске профайлера, видно, что большая часть приходится именно на математические операции внутри блоков.</p>
<p><img src="/img/dsp-java/aeenpwb8z_nfkpg8w8pfl6iqsuo.png" alt="profiling demodulation"></p>
<p>Тут мало что можно сделать: память не выделяется, безумных циклов нет. Единственное что интересно проверить это компилирует ли Java JIT код в <a href="https://ru.wikipedia.org/wiki/SIMD">SIMD</a> инструкции. Если вкратце, то это специальные инструкции процессора, которые работают с 128битными регистрами и обрабатывают их одной командой. Схематично это выглядит так:</p>
<p><img src="/img/dsp-java/l7ng0x8bwn8-z4fe1001iwsj9gq.png" alt="simd"></p>
<p>Как видно, такие инструкции идеально ложаться на КИХ-фильтры. GNURadio использует библиотеку VOLK, которая в зависимости от поддерживаемой архитектуры, может использовать SIMD инструкции. В Java скорей всего вызывать JNI обёртку будет значительно затратнее, чем выигрыш от использования таких инструкций. Одна надежда на JIT, который может съоптимизировать перемножение одного массива на другой. Чтобы это проверить, необходимо запустить JVM с опцией &ldquo;-XX:CompileCommand=print,*FIRFilter.filterComplex&rdquo;. Она заставит JVM выводить ассемблерный код для метода filterComplex из класса FIRFilter.</p>
<p>Вот что у меня получилось при запуске с Oracle JDK 1.8.0_161 на MacBook Air:</p>
<blockquote>
<p>0x0000000115994750: vmovss 0x10(%r10,%r11,4),%xmm1
0x0000000115994757: vmulss 0x10(%rcx,%r11,4),%xmm1,%xmm4
0x000000011599475e: vmulss 0x10(%r8,%r11,4),%xmm1,%xmm1
0x0000000115994765: vaddss %xmm2,%xmm4,%xmm3
0x0000000115994769: vaddss %xmm0,%xmm1,%xmm0
0x000000011599476d: movslq %r11d,%r9
0x0000000115994770: vmovss 0x1c(%r10,%r9,4),%xmm2
0x0000000115994777: vmulss 0x1c(%rcx,%r9,4),%xmm2,%xmm8
0x000000011599477e: vmulss 0x1c(%r8,%r9,4),%xmm2,%xmm1
0x0000000115994785: vmovss 0x14(%r10,%r9,4),%xmm4
0x000000011599478c: vmulss 0x14(%rcx,%r9,4),%xmm4,%xmm2
0x0000000115994793: vmulss 0x14(%r8,%r9,4),%xmm4,%xmm5
0x000000011599479a: vmovss 0x18(%r10,%r9,4),%xmm4  ;*faload
; - ru.r2cloud.jradio.blocks.FIRFilter::filterComplex@24 (line 26)</p>
</blockquote>
<p>Судя по всему SIMD инструкции не используются.</p>
<p>Ещё одним интересным местом стало вычисление sincos. Блок Costasloop вычисляет значение синуса и косинуса для одного и того же угла (фазы) для каждого входящего значения. В CPU есть специальная команда - fsincos. Она вычисляет одновременно синус и косинус угла. Однако, в Java такой функции нет. Да и реализовывать её непонятно как: надо либо возвращать double[] (а это сильно ударит по GC), либо возвращать одно значение как результат работы функции, а другое через изменяемый параметр (double в функцию Java передаётся копированием, а Double опять же ударит по GC). Наивная же имплементация выглядит так:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">	<span style="color:#66d9ef">float</span> sinImg <span style="color:#f92672">=</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">float</span><span style="color:#f92672">)</span> Math<span style="color:#f92672">.</span><span style="color:#a6e22e">sin</span><span style="color:#f92672">(</span><span style="color:#f92672">-</span>d_phase<span style="color:#f92672">)</span><span style="color:#f92672">;</span>
	<span style="color:#66d9ef">float</span> cosReal <span style="color:#f92672">=</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">float</span><span style="color:#f92672">)</span> Math<span style="color:#f92672">.</span><span style="color:#a6e22e">cos</span><span style="color:#f92672">(</span><span style="color:#f92672">-</span>d_phase<span style="color:#f92672">)</span><span style="color:#f92672">;</span>
</code></pre></div><p>Можно попробовать вспомнить тригонометрию и заменить на:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">	<span style="color:#66d9ef">float</span> sinImg <span style="color:#f92672">=</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">float</span><span style="color:#f92672">)</span> Math<span style="color:#f92672">.</span><span style="color:#a6e22e">sin</span><span style="color:#f92672">(</span><span style="color:#f92672">-</span>d_phase<span style="color:#f92672">)</span><span style="color:#f92672">;</span>
	<span style="color:#66d9ef">float</span> cosReal <span style="color:#f92672">=</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">float</span><span style="color:#f92672">)</span> Math<span style="color:#f92672">.</span><span style="color:#a6e22e">sqrt</span><span style="color:#f92672">(</span>1 <span style="color:#f92672">-</span> sinImg <span style="color:#f92672">*</span> sinImg<span style="color:#f92672">)</span> <span style="color:#f92672">+</span> calculate sign<span style="color:#f92672">;</span>
</code></pre></div><p>Переход с Math.cos на Math.sqrt позволил сократить время демодуляции с 6 минут до 5 минут и 30 секунд. Тригонометрические операции можно ещё больше ускорить, если использовать <a href="https://ru.wikipedia.org/wiki/%D0%A2%D0%B0%D0%B1%D0%BB%D0%B8%D1%86%D0%B0_%D0%BF%D0%BE%D0%B8%D1%81%D0%BA%D0%B0">таблицы поиска</a>. Однако, я пока не готов исследовать зависимость результатов декодирования от точности таблиц. Может быть кто-нибудь поможет с этим?</p>
<h1 id="heading-4">Заключение</h1>
<p>Поскольку я использовал одни и те же блоки для демодуляции сигнала, то можно сравнить время работы Java программы и GNURadio. Как и ожидалось, GNURadio быстрее: ~2 минуты против 5.5 минут. Да, Java почти в 2 раза медленее. Но, если учесть, что файл записывался в течении 15 минут, то производительности Java вполне хватит, чтобы в реальном времени демодулировать сигнал.</p>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Тестирование debian пакетов в Travis-CI</title>
      <link>https://dernasherbrezon.com/posts/test-deb-travis/</link>
      <pubDate>Sat, 04 Nov 2017 13:51:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/test-deb-travis/</guid>
      <description>Возникла передо мной такая задача: тестирование debian пакета. И требования:
 пакет устанавливает и стартует systemd сервис. используются native armhf библиотеки  Тестирование должно включать в себя:
 установка пакета на чистую систему: проверка наличия зависимостей запуск: проверка зависимостей в рантайме тестирование запущенного приложения: проверка prod конфигурации  Введение Как обычно, первым делом необходимо оглядеться по сторонам и поискать уже существующие решения и подходы. Системе Debian уже 20+ лет и я не должен быть первым, кому пришло в голову тестирование пакетов.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Тестирование debian пакетов в Travis-CI</h1></header>
      		<div class='container entry-content'>
  <p>Возникла передо мной такая задача: тестирование debian пакета. И требования:</p>
<ul>
<li>пакет устанавливает и стартует systemd сервис.</li>
<li>используются native armhf библиотеки</li>
</ul>
<p>Тестирование должно включать в себя:</p>
<ul>
<li>установка пакета на чистую систему: проверка наличия зависимостей</li>
<li>запуск: проверка зависимостей в рантайме</li>
<li>тестирование запущенного приложения: проверка prod конфигурации</li>
</ul>
<p><img src="/img/test-deb-travis/1tonmhzpsbqtt5yqf6sxnpumnk8.png" alt=""></p>
<h2 id="heading">Введение</h2>
<p>Как обычно, первым делом необходимо оглядеться по сторонам и поискать уже существующие решения и подходы. Системе Debian уже 20+ лет и я не должен быть первым, кому пришло в голову тестирование пакетов. Поэтому я провел небольшое исследование экосистемы и получил следующее:</p>
<p><img src="/img/test-deb-travis/rw9hiwy9lgzw4oxcgijh85_qvnw.png" alt=""></p>
<h2 id="autopkgtest">autopkgtest</h2>
<p>Итак, в центре тестирования любого debian пакета находится autopkgtest. Это по сути набор правил для сборки и набор скриптов для запуска тестов. Более детально о том, как писать такие тесты и конфигурировать сборку пакетов можно почитать в <a href="http://packaging.ubuntu.com/ru/html/auto-pkg-test.html">официальной документации</a>.</p>
<h2 id="debci">debci</h2>
<p><img src="/img/test-deb-travis/soiwyhiobqzphzpiagvplg9ryfo.png" alt=""></p>
<p><a href="https://github.com/terceiro/debci">debci</a>  - это <a href="https://ci.debian.net">официальная</a> система для тестирования пакетов. Используется самим сообществом debian для continuous integration релизов. Представляет собой набор сервисов, которые общаются между собой через rabbitmq:</p>
<ul>
<li>debci-enqueue - добавление пакета в очередь на тестирование</li>
<li>debci-worker - запуск autopkgtest на конкретной машине</li>
<li>debci-collector - сбор результатов запуска и генерация статичного html</li>
</ul>
<p>Идеально подходит для моей задачи, поэтому я решил глубоко разобраться с системой и настроить. Наибольшую сложность доставила настройка debci-worker:</p>
<ul>
<li>по умолчанию он запускает autopkgtest-virt-lxc, который запускает lxc контейнер, которому нужен настроенный lvm.</li>
<li>логов работы нет</li>
<li>документации почти нет</li>
</ul>
<p>Методом проб и ошибок я поднял debci и понял следующее:</p>
<ol>
<li>никакой это не continuous integration. В моём понимании CI должен не только постоянно интегрировать пакет в систему, но и не пропускать ошибки интеграции в прод. В настоящий момент debci попросту показывает ошибку. Пакет как был в репозитории, так и останется там. Таким образом, если хочется большей автоматизации (а для проекта с одним разработчиком это важно), то необходимо настроить такую схему:
<ul>
<li>CI собирает пакет и кладёт его в dev/unstable apt репозиторий</li>
<li>CI дёргает debci, чтобы тот его протестировал</li>
<li>debci запускает тестирование</li>
<li>если тест прошел, то debci должен дёргать какой-то внешний скрипт, который</li>
<li>перекладывает успешно протестированный пакет из dev/unstable в stable apt репозиторий
Подобной интеграции сейчас просто нет, поэтому придется её писать.</li>
</ul>
</li>
<li>debci должен работать на отдельно выделенном сервере. Добавить собственный проект в уже работающий <a href="https://ci.debian.net">https://ci.debian.net</a> нельзя. Там тестируются только пакеты из официального репозитория. Сервер должен быть на armhf. Найти облачный хостинг с такими серверами непросто, но у меня <a href="https://www.scaleway.com">получилось</a>.</li>
<li>Зачем rabbitmq?</li>
<li>Баги в настройке LXC и LVM. К слову в <a href="https://github.com/terceiro/debci/tree/master/docs">офциальной документации</a> ничего про LVM не сказано.</li>
</ol>
<h2 id="travisdebiannet">travis.debian.net</h2>
<p>Представляет собой скрипт для <a href="http://travis-ci.org/">travis-ci</a>, который создаёт docker образ, который внутри себя запускает сборку проекта и autopkgtest. Из положительных моментов:</p>
<ul>
<li>не нужен хостинг. travis-ci может абсолютно бесплатно собирать ваши приложения.</li>
<li>запускает autopkgtest</li>
</ul>
<p>Чего не хватает:</p>
<ul>
<li>пропуск стадии сборки пакета. Мой пакет собирается с помощью <a href="https://github.com/dernasherbrezon/deb-maven-plugin">maven</a> и структура никак не похожа на стандартную.</li>
<li>тестирование systemd сервиса.</li>
</ul>
<h2 id="heading-1">Своё</h2>
<p>Итак, всё-таки ничего не подошло. В принципе, после достаточно продолжительного исследования, уже становится понятно, что нужно:</p>
<ul>
<li>сборка на travis-ci</li>
<li>собственный docker образ, в котором</li>
<li>устанавливается пакет</li>
<li>запускается интеграционный тест, который</li>
<li>выполняет интеграционные тесты напротив работающего приложения</li>
</ul>
<p>Мне <a href="https://travis-ci.org/dernasherbrezon/r2cloud/builds/296993677">удалось</a> собрать такую конфигурацию. Но дьявол, как обычно, в деталях, поэтому я приведу здесь наиболее яркие wtf:</p>
<ol>
<li>Вы знали, что разработчики systemd и docker друг друга ненавидят? У них что-то вроде архитектурного коллапса. Одни хотят легковесности, а другие говорят, что <a href="https://blog.phusion.nl/2015/01/20/docker-and-the-pid-1-zombie-reaping-problem/">PID 1 проблему</a> таки надо решать. Страдают, конечно, при этом простые пользователи. &ldquo;Нельзя просто взять и запустить systemd в docker&rdquo; (c). Есть правда восхитительная компания <a href="https://resin.io">resin</a>, которая очень много сделала, чтобы <a href="https://docs.resin.io/runtime/resin-base-images/">помочь</a>.</li>
<li>Билд машины travis-ci работают на архитектуре intel. Нужно хитро подключить qemu и надеяться, что проблема решена.</li>
<li>При запуске resin-based контейнера, ваша команда запускается как ещё один systemd сервис (сам systemd запускается как pid 1). Команда может запустить systemd сервис, который будет тестировать, nginx, выполнить тесты, но не сможет убить systemd и завершить работу docker контейнера. Из-за этого необходимо сначала запускать контейнер в detached режиме, а выполнять тесты в работающем контейнере через docker exec. Как только последняя команда в travis.yaml выполнится, то travis сможет завершить билд с работающим контейнером.</li>
</ol>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Управление сертификатами с помощью протокола ACME</title>
      <link>https://dernasherbrezon.com/posts/java-acme/</link>
      <pubDate>Sun, 10 Sep 2017 16:45:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/java-acme/</guid>
      <description>Возникла передо мной такая задача: автоматический выпуск сертификатов для Web приложения. И требования:
 CA должны доверять все браузеры т.е. самоподписанные сертификаты не подходят; желательно бесплатно; Выпуск надо делать программно с помощью Java Embedded compact1 profile. Это всё по следам Java и без 16Gb памяти?.  Наверное многие уже слышали про бесплатные сертификаты от LetsEncrypt и certbot. А можно ли certbot заменить Java?
ACME Многие, конечно, любят LetsEncrypt за бесплатные сертификаты, которые, фактически, позволят перевести весь вэб на https.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Управление сертификатами с помощью протокола ACME</h1></header>
      		<div class='container entry-content'>
  <p>Возникла передо мной такая задача: автоматический выпуск сертификатов для Web приложения. И требования:</p>
<ul>
<li>CA должны доверять все браузеры т.е. самоподписанные сертификаты не подходят;</li>
<li>желательно бесплатно;</li>
<li>Выпуск надо делать программно с помощью Java Embedded compact1 profile. Это всё по следам <a href="https://dernasherbrezon.com/posts/java-small-heap/">Java и без 16Gb памяти?</a>.</li>
</ul>
<p>Наверное многие уже слышали про бесплатные сертификаты от <a href="https://letsencrypt.org">LetsEncrypt</a> и certbot. А можно ли certbot заменить Java?</p>
<p><img src="/img/java-acme/67f139f59aff4f0d82e4ae0b3c0d1e64.png" alt=""></p>
<h1 id="acme">ACME</h1>
<p>Многие, конечно, любят LetsEncrypt за бесплатные сертификаты, которые, фактически, позволят перевести весь вэб на https. Но не многие знают, что для этого они придумали специальный протокол - ACME. И для меня он по значимости чуть ли не выше самих бесплатных сертификатов.</p>
<p>Основные особенности протокола:</p>
<ul>
<li>Описывает взаимодействие клиента и REST сервера;</li>
<li>Есть поддержка как платных сертификатов, так и бесплатных;</li>
<li>Несколько способов авторизации владения доменом;</li>
<li>Внесен на принятие в IETF. Сейчас находится в состоянии <a href="https://tools.ietf.org/html/draft-ietf-acme-acme-06">draft</a>;</li>
<li>Все сообщения передаются в формате <a href="https://tools.ietf.org/html/rfc7519">JSON Web Token</a>.</li>
</ul>
<p>Для тех, кому интересны детали и все возможные варианты взаимодействия, можно почитать <a href="https://tools.ietf.org/html/draft-ietf-acme-acme-06">официальную документацию</a>. Она действительно простая и легко читается в отличии от наших гостов. Здесь же я приведу диаграмму последовательности при выдаче сертификата, которую нужно представлять, если Вы решили интегрироваться.</p>
<p><img src="/img/java-acme/f00f2eb1b57a414b8443304b7b01de3b.png" alt=""></p>
<h1 id="heading">Использование</h1>
<p>На официальном сайте LetsEncrypt есть <a href="https://letsencrypt.org/docs/client-options/">множество клиентов</a> работающих по протоколу ACME. Я взял <a href="https://github.com/shred/acme4j">acme4j</a>. Эта библиотека достаточно компактная и работает в compact1 profile!</p>
<p>У неё есть вполне рабочий <a href="https://github.com/shred/acme4j/blob/master/acme4j-example/src/main/java/org/shredzone/acme4j/ClientTest.java">пример использования</a>, с помощью которого я смог выпустить себе сертификат. Для того, чтобы интегрировать библиотеку достаточно с минимальными изменениями скопировать этот код.</p>
<p>Для продления сертификата необходимо авторизоваться, взять уже готовый CSR и <a href="https://shredzone.org/maven/acme4j/usage/certificate.html">отправить его в CA</a>. После чего скачать новый сертификат.</p>
<p>Единственная проблема, которая у меня возникла - это подкладывание сертификата в nginx. Поясню на примере:</p>
<ul>
<li>приложение стартует в первый раз;</li>
<li>nginx стартует. Поскольку приложение стартует в первый раз, то сертификата ещё нет, и nginx слушает на 80 порту;</li>
<li>пользователь заходит в приложение, соглашается с правилами использования сертификатов LetsEncrypt и нажимает кнопку &ldquo;выдать сертификат&rdquo;;</li>
<li>сертификат скачивается.</li>
</ul>
<p>И вот тут проблема: для того чтобы включить 443 порт с новым сертификатом, nginx должен перезачитать конфигурацию. Но чтобы это сделать нужен root. Запускать приложение из под root - плохая идея. Запускать nginx из под пользователя тоже - нельзя будет слушать 80 и 443 порты.</p>
<p>Я добавил правило для пользователя в sudoers, чтобы можно было делать <code>sudo nginx -s reload</code>. Но это выглядит как костыль. Может кто-нибудь знает как это сделать красивее?</p>
<h1 id="heading-1">Итого</h1>
<p>Получение сертификата в автоматическом режиме оказалось достаточно простой процедурой. А если использовать ACME сервер <a href="https://github.com/letsencrypt/boulder">boulder</a>, то можно даже развернуть такую схему у себя в большой организации! Если у вас есть собственный CA для внутренних сервисов, то ACME должен сильно упростить работу с сертификатами.</p>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Мониторинг Raspberry PI</title>
      <link>https://dernasherbrezon.com/posts/raspberrypi-monitoring/</link>
      <pubDate>Mon, 31 Jul 2017 12:45:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/raspberrypi-monitoring/</guid>
      <description>Возникла передо мной такая задача: сделать мониторинг Raspberry PI. И требования:
 самодостаточность. Возможность показывать статус и исторические данные без доступа в интернет; работа в Java Embedded compact1 profile. Это всё по следам Java и без 16Gb памяти?.  Анализ требований Здесь и далее под мониторингом системы я буду понимать сбор time series данных. Например, JVM heap size или количество обработанных сообщений за интервал.
Самодостаточность автоматически означает, что данные надо хранить локально.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Мониторинг Raspberry PI</h1></header>
      		<div class='container entry-content'>
  <p>Возникла передо мной такая задача: сделать мониторинг Raspberry PI. И требования:</p>
<ul>
<li>самодостаточность. Возможность показывать статус и исторические данные без доступа в интернет;</li>
<li>работа в Java Embedded compact1 profile. Это всё по следам <a href="https://dernasherbrezon.com/posts/java-small-heap/">Java и без 16Gb памяти?</a>.</li>
</ul>
<p><img src="/img/raspberrypi-monitoring/3231b4f9f5a3453799d709d10c39c4a1.jpg" alt=""></p>
<h2 id="-">Анализ требований</h2>
<p>Здесь и далее под мониторингом системы я буду понимать сбор time series данных. Например, JVM heap size или количество обработанных сообщений за интервал.</p>
<p>Самодостаточность автоматически означает, что данные надо хранить локально. Отображать их надо в браузере, потому что уже есть вэб-админка для этого. Итак, что мы имеем из современного:</p>
<ul>
<li>
<p><a href="https://www.influxdata.com">InfluxDB</a>. Специальная база для хранения time series данных. Умеет делать аггрегации и data retention. Opensource версия не поддерживает кластеризацию, но для Raspberry PI и не нужно. Проблема с системными требованиями: <a href="https://docs.influxdata.com/influxdb/v1.3/guides/hardware_sizing/">CPU 2-4 ядра и RAM 2-4 Gb</a>. Не подходит.</p>
</li>
<li>
<p><a href="https://graphiteapp.org">Graphite</a>. Хранит данные в базе данных <a href="http://graphite.readthedocs.io/en/latest/whisper.html">whisper</a>, который, <a href="http://graphite.wikidot.com/whisper#toc1">как уверяется</a>, немного лучше RRD. В зависимостях Python 2.7 и Django. Имеет свой собственный интерфейс, который надо бы ещё интегрировать в существующую админку. Ну можно конечно же взять.. Но когда на сервере сплошная Java, стоит ли тащить весь мир Python? Опять же запущенные WSGI процессы будут занимать дополнительную память.</p>
</li>
</ul>
<p>Все остальные варианты найденные на просторах, не подошли либо потому, что надо вручную делать data retention, либо требовательны к ресурсам, либо уж совсем наколеночные.</p>
<p>А что если продолжить мысль про RRD и Java? Получается <a href="https://github.com/rrd4j/rrd4j">RRD4J</a>. Эта библиотека на Java, которая полностью поддерживает все операции и возможности оригинального <a href="https://oss.oetiker.ch/rrdtool/index.en.html">rrdtool</a>. Единственное отличие - это несовместимость баз данных между rrdtool и RRD4J. Но с другой стороны это даже лучше. Базы, созданные оригинальным rrdtool, бинарно несовместимы между различными архитектурами.</p>
<p>Итак, RRD. Он идеально подходит для Raspberry PI:</p>
<ul>
<li>файлы баз данных фиксированного размера. Можно легко посчитать размер на диске. Очень удобно для embedded систем, которые надо один раз настроить и забыть;</li>
<li>один раз открытый файл обновляется через RandomAccessFile. Оригинальный rrdtool <a href="https://oss.oetiker.ch/rrdtool/doc/rrdupdate.en.html#___top">каждый раз</a> открывает файл, записывает данные и закрывает файл.</li>
</ul>
<p>Но и не без проблем.</p>
<ul>
<li>
<p>Не совместим с compact1 профайлом. RRD4J написан, похоже, в лихие 2000-е, когда шаблон <a href="https://ru.wikipedia.org/wiki/%D0%9F%D0%BE%D1%81%D0%B5%D1%82%D0%B8%D1%82%D0%B5%D0%BB%D1%8C_(%D1%88%D0%B0%D0%B1%D0%BB%D0%BE%D0%BD_%D0%BF%D1%80%D0%BE%D0%B5%D0%BA%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F)">visitor</a> был очень модным, поэтому базовые классы зависят от org.w3c.*. Оказывается одной из фич оригинального rrdtool была возможность писать в XML вместо бинарного файла. И эту фичу RRD4J гордо скопировал. Решается просто: делается <a href="https://github.com/dernasherbrezon/rrd4j-light">hard fork</a> и удаляется все ненужное. Грязно, но работает.</p>
</li>
<li>
<p>Создание графиков. С самой генерацией проблем нет. Графики действительно получаются красивые. Но вот шаблоны создания никуда не годятся. В те же лихие 2000-е, когда RRD был на пике популярности, вполне нормальным считалось добавление команды <a href="https://oss.oetiker.ch/rrdtool/doc/rrdgraph.en.html">rrdgraph</a> в crontab и выполнение с периодом в 5 минут. Заставлять генерировать .png графики на Raspberry PI - дело неблагородное. Слишком много ресурсов будет тратиться. А если учесть специфику проекта (вэб-админка, которая используется в лучшем случае раз в год), то видимо нужно придумать более хитрую схему.</p>
</li>
</ul>
<h2 id="rrd4j-js">RRD4J-js</h2>
<p>И тут мне в голову приходит осознание. Мы же в 2017 году! Время, когда у нас есть стандарты на передачу бинарных файлов в браузер и разные мощные javascript библиотеки для рисования графиков. Что если передавать скачивать RRD базу с сервера как есть, вытаскивать из неё данные и рисовать уже какой-нибудь готовой и проверенной временем Javascript библиотекой?</p>
<p>Посидев несколько ночей в попытке понять как писать на Javascript и создать плагин для Jquery (а на нём ещё модно писать?), я создал <a href="https://www.npmjs.com/package/rrd4j-js">rrd4j-js</a>.</p>
<p>Суть проекта достаточно проста: скачивать RRD, парсить и передавать данные для отрисовки во <a href="http://www.flotcharts.org">flot</a>. А уже плагинами flot добивать нужные стили и интерактив. В итоге, решение оказалось даже лучше, чем стандартные графики rrdgraph:</p>
<ul>
<li>по наведению мышки в подсказке можно отображать значение точки в момент времени</li>
<li>растягивать, сжимать и изменять размер графика в зависимости от разрешения экрана</li>
<li>форматировать данные в зависимости от типа. Например, с помощью <a href="https://github.com/whatbox/jquery.flot.byte">jquery.flot.byte</a> можно форматировать данные в килобайты, мегабайты и гигабайты.</li>
</ul>
<p><img src="/img/raspberrypi-monitoring/b43bb4a25a8c451dbc599ce70708f435.png" alt=""></p>
<p>Библиотека получилась достаточно простая. Больше всего времени конечно заняло выяснение конвенций по оформлению кода, созданию классов (sic!) в javascript и попытке поделиться проектом с миром.</p>
<p>Я с самого начала решил сделать самодостаточную библиотеку, которую можно загрузить в npm. После нескольких попыток это сделать, у меня, конечно же, всё получилось. Но тут же выяснилось, что npm используется только для server-side разработки на nodejs. И нельзя <a href="https://stackoverflow.com/questions/35062852/npm-vs-bower-vs-browserify-vs-gulp-vs-grunt-vs-webpack">просто так</a> зарелизить библиотеку в правильный репозиторий. Да что тут стесняться: нельзя понять какой из репозиториев правильный. В итоге я остановился на npm. Может кто-нибудь сведущий подскажет как правильно?</p>
<h2 id="heading">Послесловие</h2>
<p>С получившимся инструментом, уже можно было начинать творить. А именно периодически сохранять метрики в RRD4J. Обвязка в виде достаточно распространённых <a href="https://github.com/dropwizard/metrics">metrics</a> работающая в compact1 - приятное дополнение. В итоге пришлось написать достаточно простой <a href="https://github.com/dernasherbrezon/r2cloud/blob/master/src/main/java/ru/r2cloud/metrics/RRD4JReporter.java">RRD4JReporter</a>, который расширяет com.codahale.metrics.ScheduledReporter и пользоваться в удовольствие.</p>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Java и без 16Gb памяти?</title>
      <link>https://dernasherbrezon.com/posts/java-small-heap/</link>
      <pubDate>Sun, 16 Jul 2017 15:11:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/java-small-heap/</guid>
      <description>Однажды меня посетила мысль о том, что надо закодить что-нибудь на Java для RaspberryPI. Предыстория того, как я дошёл до жизни такой, сама по себе потянет на отдельный пост. Но вот сочные технические подробности, трудности и счастливый конец ниже под катом.
Постановка задачи Немного разочаровавшись в движении проекта satnogs, я решил попробовать сам написать базовую станцию для приёма радио сигналов на raspberry pi. Проанализировав текущую функциональность satnogs и сложив с собственным заскорузлым enterprise пониманием того, что такое стабильная платформа, я придумал следующие требования:</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Java и без 16Gb памяти?</h1></header>
      		<div class='container entry-content'>
  <p>Однажды меня посетила мысль о том, что надо закодить что-нибудь на Java для RaspberryPI. Предыстория того, как я дошёл до жизни такой, сама по себе потянет на отдельный пост. Но вот сочные технические подробности, трудности и счастливый конец ниже под катом.</p>
<p><img src="/img/java-small-heap/0ebcb88f4c7d47cc96e872f9c182638c.jpg" alt=""></p>
<h2 id="-">Постановка задачи</h2>
<p>Немного разочаровавшись в движении проекта <a href="https://satnogs.org">satnogs</a>, я решил попробовать сам написать базовую станцию для приёма радио сигналов на <a href="https://www.raspberrypi.org">raspberry pi</a>. Проанализировав текущую функциональность satnogs и сложив с собственным заскорузлым enterprise пониманием того, что такое стабильная платформа, я придумал следующие требования:</p>
<ul>
	<li>java вместо python. Конечно же.</li>
<li>низкое потребление ресурсов. Embedded же.</li>
<li>переиспользование уже существующих библиотек. Цель проекта не научиться декодировать самому, а максимально интегрировать уже существующие библиотеки</li>
<li>стабильность. Коробочка должна работать сама по себе как можно дольше. В идеале её нужно настроить и забыть.</li>
</ul>
<p>В результате в противоречие вступают только два требования: Java и низкое потребление ресурсов.</p>
<p>В этот момент я почему то вспомнил древний древний слоган &ldquo;Java - write once, run everywhere&rdquo; и присказку, что Java может запускаться на кофеварке. С этого момента началось погружение в Java Embedded.</p>
<p>Если вкратце, то в Java существуют две платформы для написания под маленькие устройства: <a href="https://ru.wikipedia.org/wiki/Java_Platform,_Micro_Edition">Java ME</a> и Java Embedded. Первая платформа предназначена для совсем маленьких (кофеварки) устройств, а вторая для тех, что чуть-чуть покрупнее. Я выбрал Java Embedded.</p>
<p>Сама Java Embedded в Java 8 претерпела изменения. Теперь её можно собрать с различными профайлами: compact1, compact2, compact3. По сути, это depedency management для бедных. Каждый профайл содержит <a href="http://www.oracle.com/technetwork/java/embedded/resources/tech/compact-profiles-overview-2157132.html">какие-то части rt.jar</a>, тем самым уменьшая минимальное потребление памяти JVM при загрузке. На моих как-бы тестах (колонка %RES в выводе команды top), я получил следующее потребление:</p>
<ul>
	<li>compact1 - <b>10mb</b></li>
	<li>compact2 - <b>12mb</b></li>
</ul>
<p>Для начала я выбрал самый хардкорный вариант: compact1. Нo если не получится найти под него библиотеки, то можно попробовать compact2.</p>
<p>После выбора версии Java нужно выбрать библиотеки. И вот тут дикий-дикий запад. Поскольку в Java мире всё течёт неспеша и с оглядкой на обратную совместимость, то никто из разработчиков библиотек не побежал оптимизировать свой код под новые профайлы. Тем более скоро выходит Java 9, где всё может ещё раз измениться.</p>
<p>Дальше я проанализировал, минимальный набор библиотек для создания не слишком нагруженного web приложения.</p>
<h3>IoC фреймворк</h3>
<ul>
<li><a href="https://github.com/google/dagger">Dagger</a>, <a href="https://github.com/zsoltherpai/feather">Feather</a> - нет @PreDestroy, @PostConstruct и принципиально не планируется. Про graceful shutdown разработчики видимо не слышали. Вручную контролировать последовательность вызова метода start, чтобы при остановке в обратном порядке вызвать stop, совсем не хочется делать. </li>
<li><a href="https://github.com/google/guice">Guice</a> - зависимость на <a href="https://github.com/google/guava">guava</a>, а значит ещё +2mb.</li>
<li><a href="http://picocontainer.com">picocontainer</a> - не compact1</li>
</ul>
<h3>База данных</h3>
<p>Какой же Java проект без базы данных. Но тут есть один подвох: в compact1 нет java.sql api. Поэтому я первым делом посмотрел на базы с native api без jdbc:</p>
<ul>
	<li><a href="http://www.oracle.com/technetwork/database/berkeleydb/overview/index-093405.html">berkleydb</a>. NoSQL, но почему-то зависит от javax.transactional. </li>
</ul>
<p>И с jdbc:</p>
<ul>
	<li> <a href="https://github.com/xerial/sqlite-jdbc">sqlite</a> - библиотека весит 5mb. Видимо содержит все нативные библиотеки для всех платформ.</li>
<li><a href="https://github.com/xerial/sqlite-jdbc">java db</a>. Весит конечно много и разные версии отличаются существенно: 10.8 - 2.5mb, 10.13 - 3.1mb. </li>
</ul>
<p>Есть ещё куча других мелких непонятных embedded баз данных, которые можно было бы попробовать. Но отлавливать их баги под raspberry pi у меня желания нет.</p>
<p>Зато есть пара других идей:</p>
<ul>
<li>
<p>А что, если обхитрить JVM: взять compact1 и вручную подложить <a href="https://mvnrepository.com/artifact/org.xerial.thirdparty/jdbc-api/1.4">java.sql api</a>? Ответ: не получится. В Classloader есть вот такой замечательный код:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">       <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span><span style="color:#f92672">(</span>name <span style="color:#f92672">!</span><span style="color:#f92672">=</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">)</span> <span style="color:#f92672">&amp;</span><span style="color:#f92672">&amp;</span> name<span style="color:#f92672">.</span><span style="color:#a6e22e">startsWith</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;java.&#34;</span><span style="color:#f92672">)</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
            <span style="color:#66d9ef">throw</span> <span style="color:#66d9ef">new</span> SecurityException
                <span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Prohibited package name: &#34;</span> <span style="color:#f92672">+</span>
                 name<span style="color:#f92672">.</span><span style="color:#a6e22e">substring</span><span style="color:#f92672">(</span>0<span style="color:#f92672">,</span> name<span style="color:#f92672">.</span><span style="color:#a6e22e">lastIndexOf</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#39;.&#39;</span><span style="color:#f92672">)</span><span style="color:#f92672">)</span><span style="color:#f92672">)</span><span style="color:#f92672">;</span>
        <span style="color:#f92672">}</span>
</code></pre></div><pre><code>
 Вообще непонятно почему существует такой maven артефакт, если его даже теоретически нельзя загрузить.
</code></pre></li>
<li>
<p>А может без базы? Для моих целей вполне подходят обычные файлы. Sql join тоже вроде не имеет смысла делать.</p>
</li>
</ul>
<p>В общем отказался совсем от базы. Посмотрим надолго ли.</p>
<h3>Web container</h3>
<ul>
	<li><a href="https://github.com/apache/tomcat">tomcat</a> - Ха-ха-ха</li>
<li><a href="http://www.eclipse.org/jetty/">jetty</a> - не compact1  </li>
<li><a href="https://github.com/NanoHttpd/nanohttpd">nanohttpd</a> - не servlet, нет поддержки сессий. Но видимо такова судьба Embedded разработчика. </li>
</ul>
<h3>SSL temination</h3>
<ul>
	<li>nginx. 3mb master node + 3mb 1 client worker. = 6mb. Вроде неплохо. </li>
</ul>
<h3>Вэб клиент</h3>
<ul>
	<li>angular, reactjs - на ровном месте привносят десяток короткоживущих технологий. </li>
<li>good-o-templates - наш выбор же.</li>
</ul>
<h3>Шаблонизаторы</h3>
<ul>
	<li>JSP - слишком тяжело и нужно много библиотек. Даже не стал копать.</li>
<li>Freemarker - легко, но как оказалось не compact1.</li>
<li>Кто-нибудь слышал про <a href="http://jtwig.org">jtwig</a>? Я тоже нет, но они умееют работать в compact1 и поддерживают базовые фичи. </li>
</ul>
<h3>Логирование</h3>
<ul>
	<li>logback - <a href="https://jira.qos.ch/browse/LOGBACK-1071">только</a> compact3 </li>
<li>log4j - full JRE</li>
<li>java.util.logging? - Хуже уже не будет.</li>
</ul>
<h3>Json</h3>
<ul>
	<li><a href="https://github.com/google/gson">gson</a>. Зависимость на java.sql (!!!)</li>
<li><a href="https://github.com/FasterXML/jackson-databind">jacksonxml</a>. Зависимость на org.w3c.dom.Node</li>
<li>очередной "нагуглил-ночью" код <a href="https://github.com/ralfstx/minimal-json">https://github.com/ralfstx/minimal-json</a>. Посмотрел, вроде там нечему ломаться.</li>
</ul>
<p>После нескольких запусков и сборке всего вместе выплыло несколько косяков, но их можно поправить конфигурацией. Например:
<a href="https://stackoverflow.com/questions/13825403/java-how-to-get-logger-to-work-in-shutdown-hook"><a href="https://stackoverflow.com/questions/13825403/java-how-to-get-logger-to-work-in-shutdown-hook%3C/a%3E">https://stackoverflow.com/questions/13825403/java-how-to-get-logger-to-work-in-shutdown-hook&lt;/a&gt;</a></p>
<h2>Итого</h2>
<ul>
	<li>все библиотеки в сборе + прогретый кэш для шаблонизатора занимают в памяти ~<b>23mb</b></li>
<li>код открыт и доступен: <a href="https://github.com/dernasherbrezon/r2cloud">https://github.com/dernasherbrezon/r2cloud</a> (надеюсь пароли нигде там не закоммитил)</li>
</ul>
</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Enterprise Java на страже космоса</title>
      <link>https://dernasherbrezon.com/posts/enterprise-java-space/</link>
      <pubDate>Sat, 08 Apr 2017 12:48:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/enterprise-java-space/</guid>
      <description>Научно технический прогресс постепенный по своей природе. Никто не берет горсть песка с пляжа и делает из нее компьютер. Мы берем грубые инструменты и создаем с помощью них более качественные. Затем с помощью последних еще более точные и так далее. Каждое малое усовершенствование - это ступенька прогресса и все они должны быть пройдены.
Председатель Шенчжи Ян.
 В сознании каждого человека есть одна простая мысль: космические технологии - это сложно.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Enterprise Java на страже космоса</h1></header>
      		<div class='container entry-content'>
  <blockquote>
<p>Научно технический прогресс постепенный по своей природе. Никто не берет горсть песка с пляжа и делает из нее компьютер. Мы берем грубые инструменты и создаем с помощью них более качественные. Затем с помощью последних еще более точные и так далее. Каждое малое усовершенствование - это ступенька прогресса и все они должны быть пройдены.</p>
<p>Председатель Шенчжи Ян.</p>
</blockquote>
<p><img src="/img/enterprise-java-space/24dbbef6d38b4de59fef6b67a0308e40.jpg" alt=""></p>
<p>В сознании каждого человека есть одна простая мысль: космические технологии - это сложно. На самом деле это не так. Не все технологии, применимые в космической отрасли - это Rocket science. И последние успехи в космонавтике, ренессанс космической тематики сподвигли меня на поиск проблемных областей, которые простой Enterprise Java разработчик может улучшить.
<cut /></p>
<h2>Предисловие</h2>
Самый простой способ - это пойти на сайт любой компании, работающей в космической отрасли, и поискать вакансии. Несмотря на то, что <a href="http://www.spacex.com/careers">SpaceX</a> ищет программистов, мне было отказано на этапе резюме. Видимо, государственные контракты от NASA не позволяют им нанимать людей из других стран. Видимо, по этой же причине <a href="https://www.linkedin.com/jobs/search/?keywords=nasa&f_C=2003">NASA</a> даже не ответили на моё резюме. <a href="http://global.jaxa.jp/about/employ/index.html">JAXA</a> набирает не-программистов и тех, у кого японский не ниже уровня jlpt2.
<p>С небольшими частными компаниями должно было бы быть значительно лучше. Но <a href="http://www.planetaryresources.com/careers/#pri-workplace">Planetary Resources</a> отказали на этапе резюме. Видимо, слишком маленькие, чтобы держать под рукой Enterprise Java разработчика. <a href="https://www.planet.com/company/careers/?office=View%20All&department=Software%20Engineering">Planet</a> попросили написать программу на Си. Я конечно вспомнил синтаксис и смог, но после пары интервью они отказали. Видимо, слишком маленькая компания, у которой нет офиса в России, и переезд в другую страну они не потянут.</p>
<p>Ну и, наконец, дефолт сити. <a href="https://www.roscosmos.ru/23310/">Роскосмос</a> - ни списка вакансий, ни требований.</p>
<h2>Станции наблюдения за спутниками</h2>
Но мне повезло, и я случайно обнаружил проект <a href="https://geektimes.ru/post/241834/">Satnogs</a>. Это проект по созданию любительских станций наблюдения за спутниками по всему миру. Можно самому распечатать на 3д принтере части станции и по инструкции собрать. Также у них есть центральный сервер, который рассылает на станции запросы для наблюдения за пролетающими спутниками и собирает данные со всего мира: <a href="https://network.satnogs.org">https://network.satnogs.org</a>. 
<p>Для меня, как новичка в этой области, было не совсем понятно кому и зачем это нужно. Однако, повертевшись на <a href="https://community.satnogs.org">форумах</a> и в mailing листах <a href="http://www.cubesat.org/mailinglist">cubesat</a>, я стал немного представлять проблематику.</p>
<p>Обычно маленькие спутники и кубсаты запускают университеты для отработки той или иной <a href="http://sail.planetary.org">технологии</a>. Иногда их запускают даже солидные коммерческие компании для финальных тестов своих <a href="https://www.nasa.gov/centers/ames/engineering/projects/nodes">наработок</a>. Обычно эти компании и университеты достаточно небольшие и не могут себе позволить <a href="https://geektimes.ru/company/mailru/blog/280132/">флот</a> для наблюдения за спутниками. Однако, понимание того, как ведет себя технология, важно в <a href="https://geektimes.ru/post/251506/">течении всего времени</a> полета, а не только во время пятиминутного интервала связи. Именно поэтому университеты и компании <a href="http://www.space.aau.dk/aausat4/index.php?n=Main.ReportBeaconsAndPassInfo">заинтересованы</a> в постоянном слежении за своими спутниками.</p>
<p>И тут на помощь должны прийти интернет и <a href="https://en.wikipedia.org/wiki/Space_Communications_and_Navigation_Program">глобальная сеть наблюдения</a>.</p>
<h2>Телеметрия</h2>
По мере того, как спутник вращается на орбите, он периодически посылает телеметрию. <a href="https://ru.wikipedia.org/wiki/Телеметрия">Телеметрия</a> - это текущее состояние системы: напряжение батарей, момент вращения, температура и пр. Если постоянно получать эту информацию, то можно построить график изменения данных во времени и провести анализ.
<p>Поскольку я прежде всего программист, меня заинтересовала именно программная часть, а в особенности digital signal processing. Как из .wav файла можно получить данные. Но прежде чем расчехлять прибор и начать кодить необходимо проанализировать существующие решения. Если вкратце, то эта область застряла где-то в 60х. Энтузиасты пересылают данные в виде <a href="http://www.dk3wn.info/p/?cat=8">скриншотов</a> к windows программам.</p>
<p><img src="/img/enterprise-java-space/192591f0007246fc8cc434b47e76ef4f.jpg" alt=""></p>
<p>Хотелось бы что-то более современное. Например, облачный сервис, который на вход получает .wav файл, а на выходе возвращает json. Почему именно такая архитектура?</p>
<ol>
<li>для того, чтобы отправить данные и получить результат не нужно специального ПО. Достаточно лишь curl, который есть во всех linux дистрибутивах;</li>
<li>результат в текстовом формате упрощает разработку и интеграцию;</li>
<li>микросервисная архитектура. Такой сервис будет отлично встраивается в другие более сложные системы.</li>
</ol>
Следующим этапом был выбор технологий. Поскольку специализированные железки для декодирования радио сигналов ну совсем никак не поставить в обычные датацентры, то необходимо программное декодирование. Тут все просто: <a href="http://gnuradio.org">gnuradio</a>. Это стандарт де-факто для программного декодирования - достаточно мощный и бесплатный инструмент, который поддерживает множество режимов и способов работы. Как раз то, что нужно для того, чтобы работать с зоопарком различных способов кодирования сигнала. Daniel Estévez <a href="https://github.com/daniestevez/gr-satellites">написал</a> замечательные скрипты по декодированию сигналов различных спутников и приложил рабочие примеры.
<p><img src="/img/enterprise-java-space/e9ddc3c4bc8e448f8ca1d6f7e0b99e79.png" alt=""></p>
<p>Казалось бы вот оно, счастье. Однако, и тут есть несколько ложек дегтя:</p>
<ol>
<li><a href="https://www.gnu.org/licenses/old-licenses/gpl-2.0.ru.html">GPLv2</a>. Это не позволит вам писать коммерческий софт по декодированию сигналов. И уж точно не подходит для облачного сервиса - кто-то должен платить за хостинг.</li>
<li>Безумная связка C/C++/Python/Swig. Если вкратце, то в gnuradio есть понятие блока. Это такой атомарный преобразователь сигнала. Когда сигнал декодируется данные проходят через множества, связанных между собой, блоков, и на выходе из последнего блока получается результат. Так вот, блоки можно писать на С++ и python. А раз можно писать, значит кто-то обязательно напишет. В итоге, часть блоков написана на Python 2, часть на <a href="https://github.com/gnuradio/gnuradio/issues/1153">Python 3</a>, часть на C++, который иногда <a href="http://stackoverflow.com/questions/24898791/gnu-radio-build-error-no-rule-to-make-target-filter-generated-includes-neede">не компилируется</a> и <a href="https://wiki.gnuradio.org/index.php/MacInstall">не всегда устанавливается</a>, и все это связано через <a href="http://www.swig.org">SWIG</a>.</li>
</ol>
Переписывать уже рабочий код, который используется уже много лет и знаком многим энтузиастам, задача неблагодарная. Но помучившись с виртуальными машинами и продравшись сквозь десяток ошибок компиляции, я решил пойти на невозможное: переписать ключевые блоки на <a href="https://github.com/dernasherbrezon/jradio">Java</a>. Разумеется бездумно переписывать все подряд блоки не имеет смысла, поэтому я решил проверить концепцию, переписав только блоки, нужные для декодирования <a href="https://github.com/daniestevez/gr-aausat">aausat-4</a>. В итоге у меня получилось сделать бинарно совместимые с gnuradio блоки и декодировать сигнал.
<p>Поскольку концепция оказалась успешной, я решил запустить <a href="https://r2cloud.ru">облачный сервис</a>, который по сути предоставляет REST интерфейс к библиотеке <a href="https://github.com/dernasherbrezon/jradio">jradio</a>. Следующим этапом я планирую подключить его к <a href="https://network.satnogs.org">satnogs</a> для декодирования данных.</p>
<h2>Выводы</h2>
Даже если вы Enterprise Java разработчик, вы можете помочь Элону. Возможно, по прошествии времени Вы сможете говорить внукам что шаттл, который летает между Марсом и Землей, каждую секунду выполняет Ваш код. Дерзайте!
</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Дистрибьюция Java приложений</title>
      <link>https://dernasherbrezon.com/posts/java-dist/</link>
      <pubDate>Tue, 18 Aug 2015 13:55:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/java-dist/</guid>
      <description>Удивительно, но факт - дистрибьюция Java приложений в 21 веке по прежнему огромный костыль. Разработчики до сих пор придумывают способы вроде rsync/copy-paste/wget для установки java приложений на сервер. И только монструозные enterprise production ready платформы иногда позволяют сделать чуть больше - откатить приложение на предыдущую версию. В этой статье я хотел бы рассказать о доступном и простом способе организации дистрибьюции.
deb и apt В мире существует множество действительно гигантских репозиториев приложений и инструментов по их дистрибьюции.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Дистрибьюция Java приложений</h1></header>
      		<div class='container entry-content'>
  <p><img src="/img/java-dist/75bbd9f6074d4cb8a46ad705051aa8e0.png" alt=""></p>
<p>Удивительно, но факт - дистрибьюция Java приложений в 21 веке по прежнему огромный костыль. Разработчики до сих пор придумывают способы вроде rsync/copy-paste/wget для установки java приложений на сервер. И только монструозные enterprise production ready платформы иногда позволяют сделать чуть больше - откатить приложение на предыдущую версию. В этой статье я хотел бы рассказать о доступном и простом способе организации дистрибьюции.</p>
<h2 id="deb--apt">deb и apt</h2>
<p>В мире существует множество действительно гигантских репозиториев приложений и инструментов по их дистрибьюции. Самые большие, по ощущениям, - это AppStore, Google Play, Debian/Ubuntu репозитории и CentOS/Fedora YUM репозитории. Например в Ubuntu репозитории для версии 15.04 содержится около 90000 приложений (без учета различных версий). Почему бы не воспользоваться провернной временем системой и для дистрибьюции Java приложений? Тем более, что:</p>
<ul>
<li><a href="http://w3techs.com/technologies/details/os-linux/all/all">большинство</a> серверов и так используют Debian/Ubuntu</li>
<li>проверенный временем инструмент: первый релиз был <a href="https://en.wikipedia.org/wiki/Advanced_Packaging_Tool">16 лет</a> назад</li>
<li>нативная поддержка в операционной системе</li>
</ul>
<p>Для начала немного о системе дистрибьюции приложений в Debian/Ubuntu. Она состоит из двух основных частей:</p>
<ul>
<li>deb пакеты</li>
<li>apt (Advanced Package Tool) инструменты</li>
</ul>
<h2 id="deb-">deb пакеты</h2>
<p>deb это бинарный дистрибутив приложения. Он состоит из 3 основных частей:</p>
<ul>
<li>метаинформация. Производитель, версия, зависимости на другие пакеты (очень похоже на maven), описание и пр.</li>
<li>непосредственно приложение. .tar.gz архив</li>
<li>(опционально) скрипты, которые будут выполняться во время установки</li>
</ul>
<p>Структура .tar.gz архива может быть абсолютно произвольной. Однако, чтобы Ваше приложение было похоже на все остальные приложения системы, оно должно следовать структуре каталогов Debian/Ubuntu:</p>
<ul>
<li>/etc - конфиги</li>
<li>/etc/init.d/ - скрипты запуска демонов</li>
<li>/usr/bin - исполняемые файлы</li>
<li>/usr/lib - библиотеки</li>
<li>/var/log - логи</li>
</ul>
<p>В зависимости от Вашего приложения каталоги могут немного отличаться, но общая структура надеюсь понятна.</p>
<p>Еще одной важной особенностью deb пакетов является возможность запускать скрипты во время установки. Эти скрипты тоже хранятся в deb пакете и имеют стандартное именование. Каждый скрипт может выполняться в определенную фазу установки. Установка пакета делится на несколько фаз:</p>
<ul>
<li>preinst</li>
<li>inst</li>
<li>postinst</li>
<li>prerm</li>
<li>rm</li>
<li>postrm</li>
</ul>
<p>Существует множество различных промежуточных фаз и различные комбинации состояния инсталляции. Нас они мало интересуют, но тем кто хочет разобраться можно почитать <a href="https://www.debian.org/doc/debian-policy/ch-maintainerscripts.html">официальную документацию</a>. Обычно эти скрипты настраивают ротацию и архивирование логов, задают начальные значения конфигураций (например, root-пароль для mysql). Если же у вас конечное бизнес-приложение, то лучше взять какое-нибудь нормальное средство автоматизации вроде <a href="http://www.ansible.com/home">Ansible</a>, <a href="https://www.chef.io/chef/">Chief</a>, <a href="https://puppetlabs.com">Puppet</a>.</p>
<h2 id="apt">apt</h2>
<p>apt - это набор инструментов для работы с deb пакетами. Он позволяет:</p>
<ul>
<li>конфигурировать репозитории и работать с ними: добавлять, удалять, менять, обновлять индекс</li>
<li>управлять пакетами: устанавливать, удалять, обновлять, искать</li>
</ul>
<p>apt репозиторий в упрощенном виде - это HTTP сервер, который раздает deb пакеты. У него есть индекс (файл), который доступен по стандартному пути и непосредственно бинарники, путь к которым находится в индексе.</p>
<h2 id="--">Связывая все воедино</h2>
<p>После того, как стала понятна примерная схема работы связки deb + apt, можно попробовать их съинтегрировать. Примерная схема такая:</p>
<ul>
<li>создания deb пакета в фазе package</li>
<li>публикация получившегося пакета в фазе deploy</li>
</ul>
<p>Для этого есть несколько maven плагинов.</p>
<h2 id="a-hrefhttpsgithubcomtcurdtjdebjdeba"><a href="https://github.com/tcurdt/jdeb">jdeb</a></h2>
<p>Схема его работы достаточно <a href="https://github.com/tcurdt/jdeb/blob/master/src/examples/maven/pom.xml">проста</a>:</p>
<ul>
<li>перечислить файлы и директории, которые попадут в результирующий .tar.gz архив</li>
<li>указать пермиссии</li>
</ul>
<p>Более полная документация о возможностях плагина можно узнать на официальной <a href="https://github.com/tcurdt/jdeb/blob/master/docs/maven.md">странице</a>.</p>
<h2 id="a-hrefhttpsgithubcomdernasherbrezonapt-maven-pluginapt-maven-plugina"><a href="https://github.com/dernasherbrezon/apt-maven-plugin">apt-maven-plugin</a></h2>
<p>Работает с репозиторием заданным в distributionManagement как с apt репозиторием, а не maven репозиторием. Хотя ничего не мешает их использовать одновременно под одним url. Их layout'ы совместимы между собой.</p>
<p>Пример конфигурации выглядит следующим образом:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-xml" data-lang="xml"><span style="color:#f92672">&lt;plugin</span><span style="color:#f92672">&gt;</span>
	<span style="color:#f92672">&lt;groupId</span><span style="color:#f92672">&gt;</span>com.aerse.maven<span style="color:#f92672">&lt;/groupId&gt;</span>
	<span style="color:#f92672">&lt;artifactId</span><span style="color:#f92672">&gt;</span>apt-maven-plugin<span style="color:#f92672">&lt;/artifactId&gt;</span>
	<span style="color:#f92672">&lt;version</span><span style="color:#f92672">&gt;</span>1.5<span style="color:#f92672">&lt;/version&gt;</span>
	<span style="color:#f92672">&lt;executions</span><span style="color:#f92672">&gt;</span>
		<span style="color:#f92672">&lt;execution</span><span style="color:#f92672">&gt;</span>
			<span style="color:#f92672">&lt;id</span><span style="color:#f92672">&gt;</span>deploy<span style="color:#f92672">&lt;/id&gt;</span>
			<span style="color:#f92672">&lt;goals</span><span style="color:#f92672">&gt;</span>
				<span style="color:#f92672">&lt;goal</span><span style="color:#f92672">&gt;</span>deploy<span style="color:#f92672">&lt;/goal&gt;</span>
			<span style="color:#f92672">&lt;/goals&gt;</span>
		<span style="color:#f92672">&lt;/execution&gt;</span>
	<span style="color:#f92672">&lt;/executions&gt;</span>
	<span style="color:#f92672">&lt;configuration</span><span style="color:#f92672">&gt;</span>
		<span style="color:#f92672">&lt;component</span><span style="color:#f92672">&gt;</span>main<span style="color:#f92672">&lt;/component&gt;</span>
		<span style="color:#f92672">&lt;codename</span><span style="color:#f92672">&gt;</span>strepo<span style="color:#f92672">&lt;/codename&gt;</span>
	<span style="color:#f92672">&lt;/configuration&gt;</span>
<span style="color:#f92672">&lt;/plugin&gt;</span>
</code></pre></div><p>И секция distributionManagement (ничего <a href="https://maven.apache.org/plugins/maven-deploy-plugin/usage.html">необычного</a>):</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-xml" data-lang="xml"><span style="color:#f92672">&lt;distributionManagement</span><span style="color:#f92672">&gt;</span>
	<span style="color:#f92672">&lt;repository</span><span style="color:#f92672">&gt;</span>
		<span style="color:#f92672">&lt;id</span><span style="color:#f92672">&gt;</span>maven-release-repo<span style="color:#f92672">&lt;/id&gt;</span>
		<span style="color:#f92672">&lt;url</span><span style="color:#f92672">&gt;</span>http://example.com/maven<span style="color:#f92672">&lt;/url&gt;</span>
	<span style="color:#f92672">&lt;/repository&gt;</span>
<span style="color:#f92672">&lt;/distributionManagement&gt;</span>
</code></pre></div><p>После выполнения фазы deploy, <a href="http://example.com/maven">http://example.com/maven</a> станет еще и apt репозиторием. И можно смело писать:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">sudo add-apt-repository <span style="color:#e6db74">&#34;deb http://example.com/maven strepo main&#34;</span>
sudo apt-get update
sudo apt-get install &lt;artifactId&gt;
</code></pre></div><h2 id="--enterprise">Немного любимого enterprise</h2>
<p>Манца любого java-enterprise разработчика звучит следующим образом:</p>
<ul>
<li>security</li>
<li>stability</li>
<li>high availability production ready platform</li>
</ul>
<p>Все это отлично решается, если устроить apt репозиторий из самого популярного хостинга для разработчиков: <a href="https://aws.amazon.com/s3/">s3</a>. Вкупе с cloudfront, он даёт гарантию <a href="https://aws.amazon.com/s3/sla/">99.9%</a> надёжности и географическую <a href="https://www.google.com/maps/d/viewer?mid=zq41xmfbtRfA.kUKJZcl-4O7k&hl=en">распределённость</a>.</p>
<p>Делается это опять же достаточно просто. Надо подключить плагин для работы с s3:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-xml" data-lang="xml"><span style="color:#f92672">&lt;build</span><span style="color:#f92672">&gt;</span>
	<span style="color:#f92672">&lt;extensions</span><span style="color:#f92672">&gt;</span>
		<span style="color:#f92672">&lt;extension</span><span style="color:#f92672">&gt;</span>
			<span style="color:#f92672">&lt;groupId</span><span style="color:#f92672">&gt;</span>org.springframework.build<span style="color:#f92672">&lt;/groupId&gt;</span>
			<span style="color:#f92672">&lt;artifactId</span><span style="color:#f92672">&gt;</span>aws-maven<span style="color:#f92672">&lt;/artifactId&gt;</span>
			<span style="color:#f92672">&lt;version</span><span style="color:#f92672">&gt;</span>5.0.0.RELEASE<span style="color:#f92672">&lt;/version&gt;</span>
		<span style="color:#f92672">&lt;/extension&gt;</span>
	<span style="color:#f92672">&lt;/extensions&gt;</span>
<span style="color:#f92672">&lt;/build&gt;</span>
</code></pre></div><p>Поменять url в секции distributionManagement на имя bucket'a:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-xml" data-lang="xml"><span style="color:#f92672">&lt;distributionManagement</span><span style="color:#f92672">&gt;</span>
	<span style="color:#f92672">&lt;repository</span><span style="color:#f92672">&gt;</span>
		<span style="color:#f92672">&lt;id</span><span style="color:#f92672">&gt;</span>maven-release-repo<span style="color:#f92672">&lt;/id&gt;</span>
		<span style="color:#f92672">&lt;url</span><span style="color:#f92672">&gt;</span>s3://example.bucket<span style="color:#f92672">&lt;/url&gt;</span>
	<span style="color:#f92672">&lt;/repository&gt;</span>
<span style="color:#f92672">&lt;/distributionManagement&gt;</span>
</code></pre></div><p>И настроить доступ к вашему bucket'у:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-xml" data-lang="xml"><span style="color:#f92672">&lt;servers</span><span style="color:#f92672">&gt;</span>
	<span style="color:#f92672">&lt;server</span><span style="color:#f92672">&gt;</span>  
		<span style="color:#f92672">&lt;id</span><span style="color:#f92672">&gt;</span>maven-release-repo<span style="color:#f92672">&lt;/id&gt;</span>  
		<span style="color:#f92672">&lt;username</span><span style="color:#f92672">&gt;</span>apikey<span style="color:#f92672">&lt;/username&gt;</span>  
		<span style="color:#f92672">&lt;password</span><span style="color:#f92672">&gt;</span>apisecret<span style="color:#f92672">&lt;/password&gt;</span>  
	<span style="color:#f92672">&lt;/server&gt;</span>
<span style="color:#f92672">&lt;/servers&gt;</span>
</code></pre></div><p>На конечных серверах для доступа к такому репозиторию существует специальный плагин: <a href="https://launchpad.net/~leonard-ehrenfried/+archive/ubuntu/apt-transport-s3">apt-transport-s3</a>. К сожалению его еще нет в официальных репозиториях, поэтому необходимо добавить вручную один из репозиториев, где он содержится:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">sudo add-apt-repository ppa:leonard-ehrenfried/apt-transport-s3
sudo apt-get install apt-transport-s3
</code></pre></div><p>После чего можно уже указывать наш s3 репозиторий:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">sudo add-apt-repository <span style="color:#e6db74">&#34;deb s3://apikey:apisecret@s3.amazonaws.com/example.bucket strepo main&#34;</span>
</code></pre></div><h2 id="heading">Итого</h2>
<p>В результате всех манипуляций установка приложения:</p>
<ul>
<li>mvn clean deploy</li>
</ul>
<p>На любом Debian/Ubuntu сервере в любой точке мира:</p>
<ul>
<li>apt-get update</li>
<li>apt-get install artifactId</li>
</ul>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Спецификация конструкции CubeSat</title>
      <link>https://dernasherbrezon.com/posts/cubespec/</link>
      <pubDate>Tue, 24 Sep 2013 13:14:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/cubespec/</guid>
      <description>1. Введение. CubeSat (Cube Satellite - кубический спутник, КубСат) - это малые спутники (пикоспутники) модульной кубической формы. Самый маленький имеет длину ребра 10 см и массу до 1.33кг. Более крупные спутники имеют форму и массу, кратные 1.5x, 2x, 3x одиночных модулей, состыкованным друг с другом по одной линии.
1.1 История создания Проект CubeSat был начат в 1999 году совместными усилиями профессора Джорди Пьюг-Суари (Prof. Jordi Puig-Suari) из Калифорнийского Политехнического Университета (California Polytechnic State University), Сан Луис Обиспо (San Luis Obispo), профессором Бобом Твиггсом (Prof.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Спецификация конструкции CubeSat</h1></header>
      		<div class='container entry-content'>
  <h2 id="1-">1. Введение.</h2>
<p>CubeSat (Cube Satellite - кубический спутник, КубСат) - это малые спутники (пикоспутники) модульной кубической формы. Самый маленький имеет длину ребра 10 см и массу до 1.33кг. Более крупные спутники имеют форму и массу, кратные 1.5x, 2x, 3x одиночных модулей, состыкованным друг с другом по одной линии.</p>
<h3 id="11--">1.1 История создания</h3>
<p>Проект CubeSat был начат в 1999 году совместными усилиями профессора Джорди Пьюг-Суари (Prof. Jordi Puig-Suari) из Калифорнийского Политехнического Университета (California Polytechnic State University),  Сан Луис Обиспо (San Luis Obispo), профессором Бобом Твиггсом (Prof. Bob Twiggs) из Лаборатории Развития Космических Систем Стэнфордского университета (Stanford University's Space Systems Development Laboratory (SSDL)).
Целью проекта является создание стандартных требований к конструкции пикоспутников для уменьшение стоимости и сроков разработки, обеспечения доступности доступа в космос и осуществления частых запусков.
В настоящее время в работе над проектом CubeSat участвуют более 100 международных универсистетов,  школ и частных предприятий, разрабатывающих пикоспутники для научных, частных и государственных задач.</p>
<div class="row pagination-centered">
	<div class="span12">
		<img src="/img/cubespec/cubesat-figure1.jpg" width="500" height="333" alt="кубсаты и P-POD">
	</div>
</div>
<h3 id="12-">1.2 Назначение</h3>
<p>Основное назначение проекта CubeSat - предоставить возможность запускать в космос небольшие полезные нагрузки. Основной зоной ответственности Калифорнийского Политехнического Университета, как разработчика P-POD (Poly Picosatellite Orbital Deployer - Носитель для вывода на орбиту набора пикоспутников), является обеспечение безопасности запускаемого CubeSat'а, ракеты-носителя, основной полезной нагрузки и других CubeSat'ов.
Разработчики CubeSat'ов должны активно участвовать в обеспечении безопасности и успешности CubeSat миссий, применяя хорошие инженерные практики, тестирование и проверку систем. Аварии в работе CubeSat, P-POD или интерфейсных систем могут повредить ракету-носитель, основную полезную нагрузку и подвергнуть всю программу CubeSat большому риску. Все участники сообщества CubeSat обязаны обеспечить безопасную работу своих систем и соответствие требованиям к конструкции и испытаниям, описанным в данном документе. Требования, приведенные в данном документе, могут быть заменены требованиями поставщика запуска ракеты-носителя.</p>
<h3 id="13------">1.3 Процедура согласования отклонений от основных требований.</h3>
<p>Разработчики обязаны заполнить форму &ldquo;Запроса проверки отклонений от   требований&rdquo; DAR (Deviation Wavier Approval Request), если их CubeSat не удовлетворяет любому требованию из указанных в разделе 2 или 3 настоящего документа. Процесс согласования должен быть быстрым и простым. Его назначение - это облегчение взаимных согласований и обмена сложной документацией между CubeSat разработчиками, интеграторами P-POD, различным персоналом безопасности и поставщиком запуска ракеты-носителя. Это должно облегчить определение, а также нахождение путей решения любого вопроса, который может возникнуть до интеграции P-POD и запуска. Скачать DAR можно с сайта <a href="http://www.cubesat.org">http://www.cubesat.org</a>. Все запросы следует отправлять по адресу: <a href="mailto:standards@cubesat.org">standards@cubesat.org</a></p>
<p>При получении запроса согласования отклонений DAR интегратор P-POD рассматривает запрос, решает все возникшие вопросы, и определяет какие дополнительные действия (тесты, анализы или издержки) необходимы для выполнения процедуры согласования. При наличии дополнительных действий, разработчик на основе информации от интегратора P-POD составляет план испытаний и проводит испытания до того, как запрос будет одобрен P-POD интегратором. Запросы одобряются интегратором P-POD до того, как будет определен конкретный запуск CubeSat. Как только подробности конкретного запуска становятся известны, процедура согласования становится специфичной для запуска и отправляется на рассмотрение Менеджеру Миссии запуска ракеты-носителя (Launch Vehicle Mission Manager). Менеджер Миссии запуска имеет право утверждения запроса согласования, а также может потребовать дополнительные изменения и/или испытания перед одобрением запроса. Разработчики должны понимать, что каждое отклонение от требований уменьшает шансы найти возможность подходящего запуска.</p>
<div class="row pagination-centered">
	<div class="span12">
		<object width="369.004" height="567.429" data="/img/cubespec/cubesat-figure2.svg" type="image/svg+xml"></object>
	</div>
</div>
<h2 id="2-------">2. Носитель для вывода на орбиту набора пикоспутников</h2>
<p>Poly Picosatellite Orbital Deployer (P-POD)</p>
<h3 id="21--p-pod">2.1 Интерфейс P-POD</h3>
<p>P-POD - это стандартизированная система для вывода на орбиту CubeSat. P-POD может нести 3 стандартных CubeSat'а и служит промежутоным звеном между CubeSat'ом и ракетой-носителем. P-POD - это прямоугольный контейнер с крышкой и пружинным механизмом. По сигналу с ракеты-носителя о начале вывода на орбиту включается освобождающий механизм P-POD'а, несколько торсионных пружин в петле открывают крышку, и CubeSat'ы выталкиваются пружиной по направляющим P-POD'а (см. рис. 3а). P-POD изготовлен из анодированного алюминия. Выталкиваемые CubeSat'ы скользят по нескольким направляющим при выводе на орбиту. CubeSat'ы совместимы с P-POD при выполнении всех требований, приведенных в данном документе. P-POD имеет обратную совместимость, поэтому CubeSat'ы, созданные в соответствии со Спецификацией конструкции CubeSat (CDS) версии 9 и выше, не будут иметь проблем с совместимостью. Разработчикам рекомендуется применять последнюю актуальную версию Спецификации конструкции CubeSat, чтобы использовать все возможности P-POD.</p>
<div class="row pagination-centered">
	<div class="span12">
		<img src="/img/cubespec/cubesat-figure3.png" width="1015" height="443" alt="P-POD">
	</div>
</div>
<h2 id="3--cubesat">3. Спецификация CubeSat</h2>
<h3 id="31--">3.1 Общие требования</h3>
<p>3.1.1 CubeSat'ы с отклонениями от Спецификации конструкции CubeSat'ов должны пройти процедуру согласования отклонений и отправить запрос на согласование отклонений DAR (см. раздел 1.3 и Дополнение А).
3.1.2 Все детали CubeSat'а должны быть закреплены во время запуска, вывода на орбиту и функционирования, чтобы не создавать дополнительный космический мусор.
3.1.3 Использование пиротехники не допускается.
3.1.4 Любые двигательные системы должны быть спроектированы, установлены и протестированы в соответствии с <a href="afspcman91-710v3.html">AFSPCMAN 91-710 Volume 3</a>.
3.1.5 Двигательные системы должны иметь как минимум 3 блокировки активации.
3.1.6 Общий запас химической энергии не должен превышать 100 Вт·Ч (360 кДж).
3.1.6.1 Примечание: допускаются большие значения, но это может ограничить возможность запуска.
3.1.7 Применяемые опасные материалы  должны соответствовать требованиям <a href="afspcman91-710v3.html">AFSPCMAN 91-710 Volume 3</a>.
3.1.8 Применяемые материалы должны удовлетворять высокой устойчивости к дегазации для предотвращения загрязнения космического аппарата во время интеграции, тестирования и запуска. Список одобренных NASA подобных материалов можно найти на <a href="http://outgassing.nasa.gov">http://outgassing.nasa.gov</a>.
3.1.8.1 Применяемые материалы должны иметь <a href="material/tml.html">общую убыль массы</a> (Total Mass Loss) &lt;= 1.0%.
3.1.8.2 Применяемые Материалы кубсатов должны иметь <a href="material/cvcm.html">содержание летучих конденсируемых материалов</a> (Collected Volatile Condensable Material (CVCM)) &lt;= 0.1%.
3.1.9 Последняя версия Спецификации CubeSat является официальной версией, которой должны придерживаться разработчики. Последняя версия доступна по адресу: <a href="http://www.cubesat.org">http://www.cubesat.org</a>.
3.1.9.1 Калифорнийский Политехнический Университет рассылает обновления по списку подписчиков CubeSat при изменениях спецификации. Вы можете подписаться на обновления по адресу: <a href="http://www.cubesat.org/index.php/about-us/how-to-join">http://www.cubesat.org/index.php/about-us/how-to-join</a>.
3.1.10 Примечание: Некоторые ракеты-носители имеют дополнительные требования к величине магнитного поля. Кроме того сильные магниты могут помешать разделению CubeSat'ов из одного P-POD. Рекомендуется ограничить магнитное поле за пределами внешнего габарита CubeSat'а величиной не превышающей магнитное поле Земли более чем на 0.5 гс (Гаусс).
3.1.11  Конструкция CubeSat'a должна обеспечивать при подъеме вентиляцию вентилируемого объема/пространства &lt; 2000 дюймов (50,8 метра).</p>
<h3 id="32----cubesat">3.2 Механические требования к CubeSat</h3>
<p>Кубсаты - это пикоспутники в форме куба. Основные изображения и размеры приведены на чертеже в приложении Б. Система координат P-POD представлена ниже на Рис. 4.</p>
<div class="row pagination-centered">
	<div class="span12">
		<img src="/img/cubespec/cubesat-figure4.png" width="577" height="437" alt="Координатная система PPOD">
	</div>
</div>
<p>Рис. 4: Координатная система P-POD</p>
<p>3.2.1 Система координат CubeSat должна соответствовать изображенной в приложении Б соответствующего размера. Система координат СubeSat должна совпадать с системой координат P-POD при интеграции.Точка начала системы координат CubeSat совпадает с геометрическим центром CubeSat.
3.2.1.1 Конфигурации CubeSat и физические размеры приведены в приложении Б.
3.2.1.2 Для CubeSat размера 3U+ доступен дополнительный объем, который представлен на рис 6 .
3.2.2 CubeSat устанавливается в P-POD стороной -Z.
3.2.3 Никакие компоненты на сторонах, отмеченных зеленым и желтым, не должны выступать более чем на 6.5 мм по нормали к поверхности.
3.2.3.1 При проверке перечня приемки CubeSat'а (CubeSat Acceptance Checklist (CAC)) выступающие элементы измеряются от плоскости направляющих.
3.2.4 Выводимые на орбиту компоненты должны быть соединены с CubeSat'том, но не P-POD'ом.
3.2.5 Ширина направляющих должна быть не менее 8.5 мм.
3.2.6 Направляющие должны иметь шероховатость поверхности менее 1.6 мкм.
3.2.7 Кромки направляющих должны быть скруглены радиусом не менее 1 мм.
3.2.8 Торцы направляющих на на сторонах +/- Z должны иметь минимальный размер зоны контакта с направляющими соседних CubeSat'ов 6.5 мм х 6.5 мм (см. Рис 6).
3.2.9 Не менее 75% поверхности направляющих должны соприкасаться с направляющими P-POD'а. Остальные 25% направляющих могут быть утоплены, но направляющие не должны выходить за границы, указанные в спецификации.
3.2.10 Максимальная масса 1U CubeSat'а не более 1.33 кг.
3.2.10.1 Примечание: большая масса может быть рассмотрена в зависимости от конкретной миссии (запуска).
3.2.11 Максимальная масса 1.5U CubeSat'а не более 2.00 кг.
3.2.11.1 Примечание: большая масса может быть рассмотрена в зависимости от конкретной миссии (запуска).
3.2.12 Максимальная масса 2U CubeSat'а не более 2.66 кг.
3.2.12.1 Примечание: большая масса может быть рассмотрена в зависимости от конкретной миссии (запуска).
3.2.13 Максимальная масса 3U CubeSat'а должна быть 4.00 кг.
3.2.13.1 Примечание: большая масса может быть рассмотрена в зависимости от конкретной миссии (запуска).
3.2.14 Центр масс CubeSat'а должен быть расположен в пределах 2 см от его геометрического центра в направлении осей X и Y.
3.2.14.1 Центр масс 1U CubeSat'а должен быть расположен в пределах 2 см от его геометрического центра в направлении оси Z.
3.2.14.2 Центр масс 1.5U CubeSat'а должен быть расположен в пределах 3 см от его геометрического центра в направлении оси Z.
3.2.14.3 Центр масс 2U CubeSat'а должен быть расположен в пределах 4.5 см от его геометрического центра в направлении оси Z.
3.2.14.4 Центр масс 3U и 3U+ CubeSat'ов должен быть расположен в пределах 7 см от его геометрического центра в направлении оси Z.
3.2.15 Для каркаса CubeSat'а и его направляющих должен применяться Алюминий 7075, 6061, 5005, и/или 5052.
3.2.15.1 Если применяются другие материалы, разработчик должен отправить запрос согласования отклонений DAR и пройти процедуру согласования отклонений от требований спецификации.
3.2.16 Боковые поверхности направляющих и торцевые поверхности выступающих концов направляющих CubeSat'а, которые соприкасаются с P-POD и соседними CubeSat'ами, должны иметь твердое анодирование для предотвращения холодной сварки внутри P-POD.
3.2.17 CubeSat'ы 1U, 1.5U и 2U  должны использовать разделительные упругие элементы для обеспечения надежного разделения.
3.2.17.1 Примечание: Характеристики рекомендуемого разделительного упругого элемента приведены ниже в Таблице 1. Эти элементы изготавливаются на заказ и доступны в Калифорнийском Политехническом Университете. Для получения разделительных упругих элементов обратитесь по адресу <a href="mailto:cubesat@gmail.com">cubesat@gmail.com</a>.
3.2.17.2 Разделительные упругие элементы в сжатом виде не должны выступать за пределы торцевой поверхности выступающих концов направляющих и могут быть утоплены глубже этой поверхности.
3.2.17.3 Разделительные пружины для 1U, 1.5U и 2U CubeSat'ов должны располагаться в центре торцевой части выступающего конца направляющей со стороны -Z CubeSat'а, как показано на рис. 7.
3.2.17.4 Разделительные упругие элементы не требуются для 3U CubeSat'ов.</p>
<table class="table table-striped table-condensed table-bordered">
	<tr>
		<th>Характеристика</th>
		<th>Значение</th>
	</tr>
	<tr>
		<td>Материал толкателя</td>
		<td>Нержавеющая сталь</td>
	</tr>
	<tr>
		<td>Усилие начальное/конечное</td>
		<td>0.14 lbs. / 0.9 lbs. (63 г / 408 г)</td>
	</tr>
	<tr>
		<td>Ход толкателя</td>
		<td>минимум 0.16 дюйма над поверхностью отступа</td>
	</tr>
	<tr>
		<td>Резьба</td>
		<td>8-36 UNF-2B</td>
	</tr>
</table>
<p>Таблица 1. Свойства разделительных упругих элементов CubeSat'а.</p>
<div class="row pagination-centered">
	<div class="span12">
		<img src="/img/cubespec/cubesat-figure5.jpg" width="632" height="440" alt="Разделительная пружина">
	</div>
</div>
<p>Рис. 5: Разделительный упругий элемент (толкатель).</p>
<div class="row pagination-centered">
	<div class="span12">
		<img src="/img/cubespec/cubesat-figure6.jpg" width="976" height="368" alt="дополнительный объем для 3U+">
	</div>
</div>
<p>Рис. 6: 3U+ Дополнительный Объем (&ldquo;Tuna Can&rdquo;)</p>
<div class="row pagination-centered">
	<div class="span12">
		<img src="/img/cubespec/cubesat-figure7.jpg" width="1040" height="680" alt="Местоположение разделительных упругих элементов и выключателей развертывания">
	</div>
</div>
<p>Рис. 7: Выключатели развертывания и разделительные упругие элементы</p>
<h3 id="33--">3.3 Электрические требования</h3>
<p>Электронные системы должны разрабатываться с учетом следующих требований.</p>
<p>3.3.1 Система энергоснабжения CubeSat'а должна находиться в выключенном состоянии для предотвращения запуска и выполнения любых функций при нахождении внутри P-POD'а с момента монтажа на ракету-носитель до момента вывода на орбиту. Электрические системы CubeSat'а могут включать в себя различные подсистемы, такие как: система обработки команд и данных (Command and Data Handling (C&amp;DH), радиосвязь (RF Communication), определение и управление положением (Attitude Determine and Control (ADC)), привод складного механизма. Системы энергоснабжения CubeSat'а включают в себя любые батарейные сборки, солнечные панели и батарейки таблеточного типа.
3.3.2 CubeSat должен иметь как минимум один выключатель развертывания на выступе направляющих, как указано на рисунке 7.
3.3.3 В нажатом состоянии переключатель развертывания CubeSat'а должен разъединять электрическую схему питания от электрических потребителей; Это относится и к часам реального времени RTC.
3.3.4 Выключатель развертывания должен находиться в нажатом состоянии в течении всего времени когда CubeSat находится внутри P-POD.
3.3.4.1 В нажатом состоянии выключатель развертывания CubeSat не должен выступать над торцевой поверхностью выступающей части направляющей CubeSat'а.
3.3.5 Если выключатель развертывания CubSat'а из нажатого состояния перейдет в отжатое и обратно, таймеры передачи и развертывания должны быть сброшены к значению t=0.
3.3.6 Стержень, вынимаемый перед полетом (Remove Before Flight pin - RBF), и все коннекторы отрывных кабелей CubeSat'а должны находиться  в области окон доступа, выделенных темно-зеленым цветом  в приложении Б.
3.3.6.1 Примечание: Вся диагностика и зарядка батарей будет происходить внутри P-POD при не нажатом выключателе развертывания.
3.3.7 CubeSat должен содержать стержень, вынимаемый перед полётом (RBF pin).
3.3.7.1 RBF pin должен отключать все питание спутника с момента его установки в CubeSat.
3.3.7.2 По завершению интеграции CubeSat'а в P-POD необходимо извлечь RBF pin.
3.3.7.3 Установленный в спутник RBF пин не должен выступать более чем на 6.5 мм за плоскость направляющих.
3.3.8 CubSat должен содержать цепь защиты батареи от заряда/разряда во избежание несбалансированных состояний ячеек батареи.
3.3.9 При проектировании CubeSat необходимо выполнить как минимум одно из следующих требований по предотвращению случайной передачи радиосигнала. Настоятельно рекомендуется наличие трех независимых блокировок, что может уменьшить количество необходимой документации и исследований. Блокировка - это физическое устройство между источником энергии и опасным компонентом. Таймер не считается  независимой блокировкой.
3.3.9.1 CubeSat должен иметь одну блокировку включения передачи радиосигнала, и выходная мощность радиосигнала не должна превышать 1.5 Вт на входе передающей антенны.
3.3.9.2 CubeSat  должен иметь две независимых блокировки передачи радиосигнала.</p>
<p>###3.4 Требования по эксплуатации</p>
<p>CubeSat должен удовлетворять конкретным требованиям, зависящим от конкретного набора интегрированных CubeSat'ов и выполняемых ими функций, чтобы соответствовать правовым обязательствам и обеспечивать безопасность других CubeSat'ов.
3.4.1 Операторы должны получить и предоставить документы соответствующих лицензий на использование радиочастот.
3.4.1.1 Для использования любительских радиочастот, необходимо предоставить доказательство согласования использования частот с Международным Союзом Радиолюбителей  (International Amateur Radio Union (IARU)). Формы заявлений могут быть найдены на <a href="http://www.iaru.org">www.iaru.org</a>.
3.4.2 CubeSat'ы должны соответствовать государственным лицензионным соглашениям и ограничениям по использованию радиочастот.
3.4.3 Конструкции и оборудование миссий CubeSat должны соответствовать NPR 8715.6 по ограничению космического мусора.
3.4.3.1 Любой компонент кубсата должен (?) возвращаться/повторно входить/входить в атмосферу (?) с энергией менее 15 Дж.
3.4.3.2 Разработчики должны получить и предоставить документацию одобрения плана по снижению космического мусора от FCC (Federal Communication Commission - Федеральная комиссия связи (США)) (или NOAA (National Oceanic and Atmospheric Administration - Национальное управление по исследованию океанов и атмосферы (США)) если существует ?? imager ??)
3.4.3.2.1 Примечание: Правила/Регламент любительского радио FCC можно найти по адресу <a href="http://www.arrl.org/part-97-amateur-radio">http://www.arrl.org/part-97-amateur-radio</a>.
3.4.3.3 Примечание: Анализ на соответствие вышеуказанным правилам может быть проведен с помощью Программы для оценки космического мусора NASA DAS (Debris Assessment Software), доступной по адресу <a href="http://orbitaldebris.jsc.nasa.gov/mitigate/das.html">http://orbitaldebris.jsc.nasa.gov/mitigate/das.html</a>.
3.4.4 Все развертываемые элементы спутника, такие как штанги (фермы), антенны и солнечные панели должны иметь задержку разворачивания как минимум 30 мин после срабатывания выключателей развертывания при выталкивании из P-POD.
3.4.5 CubeSat&rsquo; не должны генерировать или передавать любые сигналы с момента интеграции в P-POD и в течении 45 минут после выхода на орбиту из P-POD'а. Тем не менее CubeSat могут питаться (?) в последующем разворачивании от P-POD (?) (возможно опечатка FORM - FROM) (?) on following deployment form the P-POD (?).
3.4.6 Частным организациям (не относящимся к Правительству США), управляемым или подпадающим под юрисдикцию США, которые предполагают использование системы (спутника) дистанционных измерений (телеметрической системы), может потребоваться лицензия в по требованиям Закона США. Для получения дополнительной информации посетите <a href="http://www.nesdis.noaa.gov/CRSRA/licenseHome.html">http://www.nesdis.noaa.gov/CRSRA/licenseHome.html</a>. Нажмите на ссылку Application Process.
3.4.7 Калифорнийский Политехнический Университет произведет как минимум одну проверку соответствия, при которой оборудование разработчика будет исследовано и интегрировано в P-POD или TestPOD. Окончательная проверка соответствия будет произведена перед запуском. Для проверки соответствия спутника требованиям Спецификации используется Перечень Приемки CubeSat (CubeSat Acceptance Checklist (CAC)). Список приведен в  приложении к этому документу или доступен по адресу <a href="http://cubesat.org/index.php/documents/developers">http://cubesat.org/index.php/documents/developers</a>.</p>
<h2 id="4---">4. Требования к испытаниям</h2>
<p>Испытания проводятся с целью проверки соответствия всем требованиям поставщика запуска ракеты-носителя, а также любым дополнительным требованиям испытаний, необходимым для обеспечения безопасности CubeSat'ов, P-POD'а и основной миссии. Если условия работы (?) ракеты-носителя неизвестны, то для определения требований к испытаниям могут использоваться стандарты The General Environmental Verification Standard (GEVS, GSFC-STD-7000) и MIL-STD-1540. Стандарты GSFC-STD-7000 и MIL-STD-1540 являются полезной справочной информацией при определении условий испытаний и требований к испытаниям, но нет гарантий, что контрольные уровни в них полностью охватывают и удовлетворяют всем условиям испытаний ракеты-носителя. Официальными требованиями к испытаниям и контрольными уровнями считаются только предоставленные поставщиком запуска или интегратором P-POD. Требования к испытаниям от поставщика запуска имеют более высокий приоритет и заменяют собой требования из любого другого источника. P-POD испытывается подобным образом для обеспечения безопасности и качества изготовления перед интеграцией с CubeSat'ами. Все CubeSat'ы проходят как минимум все нижеприведенные испытания.</p>
<h3 id="41---random-vibration">4.1 Случайные колебания (Random Vibration)</h3>
<p>Испытание на случайные колебания проводятся в соответствии с требованиями поставщика запуска.</p>
<p>###4.2 Термический вакуумный отжиг (Thermal Vacuum Bakeout)</p>
<p>Термический вакуумный отжиг проводится, чтобы убедиться в надлежащем газовыделении компонентов. Спецификацию испытаний предоставляет поставщик запуска.</p>
<h3 id="43---shock-testing">4.3 Ударное испытание (Shock Testing)</h3>
<p>Ударное испытание должно быть производится согласно требованиям поставщика запуска.</p>
<h3 id="44---visual-inspection">4.4 Визуальный осмотр (Visual Inspection)</h3>
<p>Визуальный осмотр CubeSat'а и измерение критических областей производится согласно приемочному листу CubeSat'а CAC (Приложение В)</p>
<h3 id="45---cubesat">4.5 Принципы испытаний CubeSat'ов</h3>
<p>CubeSat подвергается либо квалификационным испытаниям (проверка соответствия техническим условиям), либо испытаниям по сокращенной программе (protoflight) согласно диаграмме процесса испытаний CubeSat'ов (CubeSat Testing Flow Diagram), представленной на Рис. 8. Контрольные уровни и продолжительности определяются поставщиком запуска или  интегратором P-POD.</p>
<h4 id="451--">4.5.1 Квалификационные испытания</h4>
<p>Квалификационные испытания производятся на инженерном образце, идентичному полетной модели CubeSat'а. Квалификационные уровни определяются поставщиком запуска или интегратором P-POD. Оба стандарта MIL-STD-1540 и LSP-REQ-317.01 используются в качестве руководства при определении уровней испытаний. После этого полётная модель подвергается приемочным испытаниям в TestPOD, затем интегрируется в полетный P-POD для окончательного испытания на случайные колебания. Если конструкция CubeSat'а подверглась изменению или модификации после квалификационных испытаний, то могут потребоваться дополнительные испытания.</p>
<h4 id="452-----protoflight">4.5.2 Испытание по сокращенной программе (Protoflight)</h4>
<p>Испытание по сокращенной программе производиться на полетной модели CubeSat'а. Уровни испытаний определяются поставщиком запуска или интегратором P-POD. Оба стандарта MIL-STD-1540 и LSP-REQ-317.01 используются в качестве руководства при определении уровней испытаний. Полётная модель подвергается испытаниям по сокращенной программе в TestPOD, затем интегрируется в полетный P-POD для окончательных приёмочных испытаний, испытаний качества изготовления и испытаний на случайные колебания. После испытаний по сокращенной программе полетная модель CubeSat'а не разбирается и не модифицируется. Разборка оборудования после испытаний по сокращенной программе потребует подачи разработчиком &ldquo;Запроса проверки отклонений от   требований&rdquo; DAR и пройти процедуру согласования отклонений перед разборкой. Если конструкция CubeSat'а подверглась изменению или модификации после испытаний по ускоренной программе, то могут потребоваться дополнительные испытания.</p>
<h4 id="453-">4.5.3 Приёмка</h4>
<p>После доставки и интеграции CubeSat в P-POD, дополнительные испытания проводятся над всей системой P-POD с интегрированными CubeSat'ами. Данные испытания проверяет надлежащую интеграцию CubeSat'а и P-POD. Кроме того, любые неизвестные и опасные взаимодействия между CubeSat'ами могут быть выявлены во время приемочного испытания. Интегратор P-POD координирует и проводит приемочные испытания. Оба стандарта MIL-STD-1540 и LSP-REQ-317.01 используются в качестве руководства при определении уровней испытаний. С этого момента P-POD и находящиеся внутри CubeSat'ы не разделяются. При обнаружении неисправности CubeSat'а, решение о разделении P-POD принимается разработчиками CubeSat'ов в конкретном P-POD и интегратором P-POD исходя из соображений безопасности. Разработчик несет ответственность за любые дополнительные испытания, требующимися в связи с доводочными исправлениями, с разделенными P-POD и CubeSat'ами.</p>
<div class="row pagination-centered">
	<div class="span12">
		<object width="611.389" height="410.502" data="/img/cubespec/cubesat-figure8.svg" type="image/svg+xml"></object>
	</div>
</div>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Оптимизация web приложения с помощью YourKit и JMeter</title>
      <link>https://dernasherbrezon.com/posts/webapp-perf/</link>
      <pubDate>Fri, 28 Dec 2012 14:58:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/webapp-perf/</guid>
      <description>Постановка задачи  web server - Jetty. Запускается в embedded режиме с помощью spring. Общая настройка очень похожа на http://wiki.eclipse.org/Jetty/Howto/Spring IoC - spring 3.0.5 Servlet - собственный сервлет для роутинга запросов к обработчикам. Mysql 5.5, jdbc driver 5.1.21 view - JSP + JSTL YourKit 11 JMeter 2.8  Приложение:
 две страницы требующие локализации. первая - статичная страница (главная). Собирается из разных кусочков jsp вторая - динамичная. Отображает некоторую сущность. Например товар и его свойства.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Оптимизация web приложения с помощью YourKit и JMeter</h1></header>
      		<div class='container entry-content'>
  <h2 id="-">Постановка задачи</h2>
<ul>
<li>web server - Jetty. Запускается в embedded режиме с помощью spring. Общая настройка очень похожа на <a href="http://wiki.eclipse.org/Jetty/Howto/Spring">http://wiki.eclipse.org/Jetty/Howto/Spring</a></li>
<li>IoC - spring 3.0.5</li>
<li>Servlet - собственный сервлет для роутинга запросов к обработчикам.</li>
<li>Mysql 5.5, jdbc driver 5.1.21</li>
<li>view - JSP + JSTL</li>
<li>YourKit 11</li>
<li>JMeter 2.8</li>
</ul>
<p>Приложение:</p>
<ul>
<li>две страницы требующие локализации.</li>
<li>первая - статичная страница (главная). Собирается из разных кусочков jsp</li>
<li>вторая - динамичная. Отображает некоторую сущность. Например товар и его свойства.</li>
</ul>
<p>Итак, для начала будем оптимизировать первую страницу. Перед тем, как начать что-то оптимизировать, необходимо померить текущее состояние, найти узкие места. Для этого необходимо сконфигурировать JMeter. Он будет симулировать пользователей, которые кликают ссылки.</p>
<ol>
<li>Скачать JMeter можно тут: <a href="http://jmeter.apache.org/">http://jmeter.apache.org/</a></li>
<li>Запустить jmeter.sh и настроить тест:</li>
<li>Количество пользователей: 500
<img src="/img/webapp-perf/1.png" alt=""></li>
<li>Настроить запрос: сервер находится по адресу localhost:8080 путь: / (главная). Так же нужно добавить http cache manager и http cookie manager, чтобы съэмулировать поведение реальных браузеров
<img src="/img/webapp-perf/2.png" alt=""></li>
</ol>
<p>После этого, необходимо запустить jetty из под YourKit. Это очень удобно можно сделать, если использовать интеграцию с IDE. Например, Eclipse: <a href="http://www.yourkit.com/docs/12/help/eclipse.jsp">http://www.yourkit.com/docs/12/help/eclipse.jsp</a>. После запуска приложения, необходимо запустить JMeter на выполнение.</p>
<h2 id="--1">Анализ данных</h2>
<p>Первые вещи, которые бросаются в глаза это:</p>
<ul>
<li>278 потоков приложения
<img src="/img/webapp-perf/3.png" alt=""></li>
<li>большой затуп всех этих ~200 потоков в самом начале
<img src="/img/webapp-perf/4.png" alt=""></li>
</ul>
<p>Что говорят эти графики:</p>
<ul>
<li>Jetty сконфигурирован с использованием NIO. На каждый входящий запрос, NIO коннектор получает запрос и адресует его внутреннему threadpool'у, который и обрабатывает этот запрос (потоки с именем qtp******). Поскольку пользователей больше 200, то создаются все потоки из внутреннего пула и новые пользователи ждут пока отработает запрос предыдущих пользователей. Такая схема обработки запросов достаточно правильная, однако тут есть тонкость: не в каждой машине есть ~250 ядер. А следовательно операционная система будет тратить больше времени на переключение между этими потоками. Поэтому максимальный размер пула необходимо изменить. Хорошая формула размера пула приведена здесь: <a href="http://www.ibm.com/developerworks/library/j-jtp0730/index.html#heading6">http://www.ibm.com/developerworks/library/j-jtp0730/index.html#heading6</a>. Настроить пул можно передав в JettyServer новый <code>org.eclipse.jetty.util.thread.QueuedThreadPool</code> c указанным свойством maxThreads.</li>
<li>Затуп вначале связан с первичной компиляцией jsp страницы. В development среде это очень полезная вещь: можно менять jsp страницы и сервер будет автоматически показывать новую версию. В production среде, это необходимо отключить. Это можно сделать в файле webdefault.xml в Jetty. Или переопределить параметры org.apache.jasper.servlet.JspServlet в web.xml приложения. Необходимо настроить параметры: scratchdir - в эту директорию необходимо поместить скопилированные jsp и параметр development = false - jsp сервлет не будет проверять новую версию файла, из-за этого сильно увеличится быстродействие, так как не будут использоваться локи внутри сервлета.</li>
</ul>
<p>После произведённых начальных оптимизаций можно посмотреть на потребляемые ресурсы.</p>
<p>На рисунке ниже приведён stacktrace узкого места (performance snapshot, CPU profiling: sampling):
<img src="/img/webapp-perf/5.png" alt=""></p>
<p>В YourKit есть специальный инструмент, который называется &ldquo;Hot spots&rdquo;, но он выдаёт простым списком все узкие места и методы и не учитывает то, что одни узкие места вложены в другие (находятся в одном стеке вызовов). На картинке видно, что узкое место находится в index.jsp. Однако, на этой картинке не видно сколько раз вызывался этот метод и сколько времени (в среднем хотя бы) занимает обработка одного запроса. Для этого необходимо получить snapshot с использованием CPU profiling: Tracing:</p>
<p><img src="/img/webapp-perf/6.png" alt=""></p>
<p>После этого можно получить snapshot с абсолютными значениями</p>
<p><img src="/img/webapp-perf/7.png" alt=""></p>
<p>Как видно, обработка jsp страницы занимает <strong>34ms</strong>.</p>
<p>Зачем же нужны абсолютные значения? В режиме sampling YourKit выдаёт информацию об узких местах, это оптимальный способ узнать где приложение работает медленно и при этом профайлер даёт низкий overhead. Однако для итерационной оптимизации, этот метод не очень подходит, так как необходимо понимать на сколько увеличилось или уменьшилось быстродействие после каждой оптимизации.</p>
<p>Как видно из картинки, всё время занимает отрисовка страницы. Как это можно оптимизировать?</p>
<ol>
<li>Если приглядется к тому, что происходит при отрисовке, то видно что очень много времени занимает выполнение <a href="http://www.tutorialspoint.com/jsp/jstl_format_message_tag.htm">fmt:message</a>. Этот тэг используется для локализации страницы. Если посмотреть код <code>org.apache.taglibs.standard.tag.common.fmt.MessageSupport.doEndTag()</code> то видно, что там происходит слишком много общей логики, от которой можно отказаться. Для этого необходимо сделать следующие допущения (ввести ограничения): локализация приложения не зависит от параметров запроса пользователя - это позволяет закэшировать ResourceBundle на старте приложения, используется один и тот же ResourceBundle для всех типов сообщений. После оптимизации время отрисовки страницы на сервере стало занимать: <strong>7ms</strong>. <strong>Оптимизация 80%</strong>!</li>
<li>Кэширование. Бывает на разных уровнях. Для данной статичной страницы, можно сделать два уровня кэширования: 1. На уровне сервера - при старте страница полностью отрисовывается и помещается в кэш. При обращении пользователей, она отдаётся из кэша. 2. На уровне клиента - если пользователь запросил страницу, то браузер кэширует её и при последующем обращении отображает страницу из кэша. Поскольку наша страница статична, то её можно попробовать закэшировать. В протоколе HTTP предусмотрено множество способов кэширования данных. Очень хорошая статья про типы кэширования: <a href="http://betterexplained.com/articles/how-to-optimize-your-site-with-http-caching/">http://betterexplained.com/articles/how-to-optimize-your-site-with-http-caching/</a>. Для кэширования страницы мы будем использовать lastModifiedTime. По умолчанию в <code>javax.servlet.http.HttpServlet.getLastModified()</code> возвращает -1 (не использует lastModified). Какое же время необходимо возвращать на нашей странице? Поскольку у нас выключена перекомпиляция jsp на production, то новые изменения могут появится не раньше рестарта сервера. А значит lastModifiedTime можно вычислить следующим способом: на старте обработчика (сервлета) запомнить время System.currentTimeMillis()/1000 * 1000 и возвращать всегда его. После оптимизации время ответа стало занимать: <strong>3ms</strong>. Т.е. для пользователя, который посещает страницу второй и более раз <strong>оптимизация 91%</strong>.</li>
</ol>
<p>Настало время посмотреть на вторую страницу, тут несколько сложнее, так как есть больше логики приложения.</p>
<p>Для этого необходимо указать другой путь сервлета/обработчика запроса в JMeter. Например path: &ldquo;/servlet&rdquo;</p>
<p>Изначально отрисовка страницы занимает <strong>7ms</strong>, так как же и для первой страницы, выполнение бизнес логики занимает <strong>21ms</strong>. Бизнес логика заключается в получении из базы сущности. Сущность - иерархическая, т.е. состоит из нескольких простых сущностей, каждая из которой хранится в отдельной таблице. После запуска JMeter:</p>
<p><img src="/img/webapp-perf/8.png" alt=""></p>
<p>Из этой картины видно, что потоки блокируются при получении <code>java.sql.Connection</code> из <code>org.apache.commons.dbcp.BasicDataSource</code>. Это происходит из-за того, что для обработки одного запроса несколько раз вызывается <code>datasource.getConnection</code> и <code>conn.close()</code> - т.е. соединение берётся и кладётся в пул. Это можно оптимизировать, если использовать ThreadBoundDatasource. Как он работает?</p>
<ol>
<li>Он реализует интерфейс <code>java.sql.Datasource</code> и работает поверх <code>org.apache.commons.dbcp.BasicDataSource</code></li>
<li>При получении запроса, в методе doGet он получает соединение и кэширует его для этого потока. Например, с помощью ThreadLocal.</li>
<li>При любом обращении datasource.getConnection() он возвращает это соединение.</li>
<li>Бизнес логика не закрывает соединение, оно закрывается на выходе из doGet.</li>
</ol>
<p>Алгоритм достаточно простой, но для большого приложения, где есть очень много сервлетов, контроллеров и простых потоков, реализовать и поддерживать его достаточно сложно: нужно не забывать получать и возвращать соединение в пул.</p>
<p>Реализовать этот алгоритм можно двумя способами:</p>
<ol>
<li>С использованием aop (aspect oriented programming) и aspectj. Для этого необходимо создать аннотацию, например, <code>@ThreadBoundDatasource(readOnly=false)</code> и пометить ею метод сервлета. Создать аспект, который будет создавайть соединение перед методом с этой аннотацией, а затем возвращать соединение после выполнения метода. У этого подхода есть недостатки: aspectj генерирует очень много мусора и как оказалось выигрыш в производительности не даёт (увеличивает время выполнения на ~1ms), создание Proxy объекта не позволяет посмотреть stacktrace в YourKit.</li>
<li>Ручное добавление логики к каждому из сервлетов. Из недостатков можно отметить рутинность операции и большую вероятность ошибок для большого проекта.</li>
</ol>
<p>После реализации алгоритма, график стал выглядеть следующим образом:</p>
<p><img src="/img/webapp-perf/9.png" alt=""></p>
<p>Время обработки запроса стало <strong>16ms. Оптимизация 20%</strong></p>
<p>Как видно потоки больше не ждут соединения, или ждут но очень мало времени, так что YourKit не успевает это отобразить. Из блокировок остались блокировки на пуле тэгов. Небольшое исследование показало, что есть пул PerThreadTagHandlerPool, но в нём есть утечки памяти и его использование не рекомендовано: <a href="https://issues.apache.org/bugzilla/show_bug.cgi?id=43790">https://issues.apache.org/bugzilla/show_bug.cgi?id=43790</a></p>
<p>На следующим этапе оптимизации встала задача внедрения кэширования результатов запросов к базе данных. Performance snapshot показал, что узкое место приложения - это запрос к базе данных. Так же исходя из графика потребления памяти видно, что генерируется очень много мусора (~600Mb), который можно сократить если переиспользовать объекты:</p>
<p><img src="/img/webapp-perf/10.png" alt=""></p>
<p>YourKit имеет замечательный UI на котором можно посмотреть сколько времени потрачено на сборку мусора и как при этом работали потоки:</p>
<p><img src="/img/webapp-perf/11.png" alt=""></p>
<p>Белая область в работе потоков означает stop-the-world, когда останавливаются все потоки приложения и выполняется сборка мусора. Как видно, со временем сборка мусора начинает занимать больше времени.</p>
<p>Для кэширования использовалась библиотека <a href="http://ehcache.org/">Ehcache</a>.</p>
<p>После введения кэширования для некоторых объектов, время обработки бизнес логики стало составлять <strong>9ms</strong>. Что в сумме даёт <strong>оптимизацию 57%</strong>.</p>
<p>В YourKit есть замечательная метрика: количество и типы Exception'ов и stacktrace мест, где они были вызваны. Генерация Exception - это очень ресурсоёмкая операция. Поэтому генерацию обычно стараются избегать в высоконагруженных приложениях. При запуске performance теста, данная метрика выдала следующую картину:</p>
<p><img src="/img/webapp-perf/12.png" alt=""></p>
<p>Оказывается драйвер кидает SQLException при закрытии курсора, и проглатывает (не обрабатывает) его. На каждый запрос к базе кидается несколько SQLException. Это баг самого драйвера: <a href="http://bugs.mysql.com/bug.php?id=67318">http://bugs.mysql.com/bug.php?id=67318</a>. После того, как этот баг пофиксят, ожидается серьёзный прирост в производительности.</p>
<h2 id="heading">Выводы</h2>
<ol>
<li>Современные фреймворки позволяют быстро разрабатывать приложения, но есть место для их оптимизации.</li>
<li>Настройки по умолчанию не всегда оптимальны для нагруженных проектов.</li>
<li>Даже проекты проверенные временем, не всегда оптимизированы под быстродействие.</li>
<li>Многоуровневое кэширование очень сильно разгружает сервер и увеличивает быстродействие.</li>
<li>Кэширование сократило объём генерируемого мусора, но серьёзных изменений не произошло, кривая роста мусора в памяти лишь немного стала пологой. Видимо есть ещё места, в которых генерируется мусор.</li>
</ol>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Log4j DOMConfigurator</title>
      <link>https://dernasherbrezon.com/posts/dom4jconfigurator/</link>
      <pubDate>Thu, 11 Oct 2012 15:14:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/dom4jconfigurator/</guid>
      <description>DOMConfigurator не поддерживает подстановку свойств при реконфигурации. Будьте бдительны!
Use case:
 Конфигурация по умолчанию с использованием log4j.configuration параметра Получение свойств и проставление через System.setProperty() DOMConfigurator.configure(System.getProperty(&amp;quot;log4j.configuration&amp;quot;))  </description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Log4j DOMConfigurator</h1></header>
      		<div class='container entry-content'>
  <p>DOMConfigurator не поддерживает подстановку свойств при реконфигурации. Будьте бдительны!</p>
<p>Use case:</p>
<ol>
<li>Конфигурация по умолчанию с использованием <code>log4j.configuration</code> параметра</li>
<li>Получение свойств и проставление через <code>System.setProperty()</code></li>
<li><code>DOMConfigurator.configure(System.getProperty(&quot;log4j.configuration&quot;))</code></li>
</ol>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Производительность функции split</title>
      <link>https://dernasherbrezon.com/posts/splitperf/</link>
      <pubDate>Sat, 11 Aug 2012 15:14:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/splitperf/</guid>
      <description>В одном из проектов в очередной раз пришлось писать собственную реализацию split строки, в связи с этим заинтересовался о производительности различных решений.
Для тестирования выбраны следующие кандидаты:
 JDK Guava Apache commons-lang Custom  Проводилось тестирование следующих параметров в различных комбинациях: короткая строка большое количество итераций, длинная строка малое количество итераций.
Поскольку Guava поддерживает lazy вычисление, то была добавлена ещё одна комбинация: отложенная итерация по результатам и непосредственная итерация.
В результате получились следующие значения:</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Производительность функции split</h1></header>
      		<div class='container entry-content'>
  <p>В одном из проектов в очередной раз пришлось писать собственную реализацию split строки, в связи с этим заинтересовался о производительности различных решений.</p>
<p>Для тестирования выбраны следующие кандидаты:</p>
<ul>
<li>JDK</li>
<li>Guava</li>
<li>Apache commons-lang</li>
<li>Custom</li>
</ul>
<p>Проводилось тестирование следующих параметров в различных комбинациях: короткая строка большое количество итераций, длинная строка малое количество итераций.</p>
<p>Поскольку Guava поддерживает lazy вычисление, то была добавлена ещё одна комбинация: отложенная итерация по результатам и непосредственная итерация.</p>
<p>В результате получились следующие значения:</p>
<p><img src="/img/splitperf/1.png" alt="">
<img src="/img/splitperf/2.png" alt="">
<img src="/img/splitperf/3.png" alt="">
<img src="/img/splitperf/4.png" alt=""></p>
<p>Выводы:</p>
<ul>
<li>Стабильно плохой результат показывает Pattern.split. Он генерирует множество объектов, да и слишком общий для решения такой частной задачи. Использования паттерна это достаточно большой overhead.</li>
<li>для не lazy тестов google guava показывает достаточно плохой результат. Видимо это связано с количеством мусора который генерирует библиотека. В исходных кодах можно найти следующие конструкции:</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">String description <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> StringBuilder<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;CharMatcher.is(&#34;</span><span style="color:#f92672">)</span>  
    <span style="color:#f92672">.</span><span style="color:#a6e22e">append</span><span style="color:#f92672">(</span>Integer<span style="color:#f92672">.</span><span style="color:#a6e22e">toHexString</span><span style="color:#f92672">(</span>match<span style="color:#f92672">)</span><span style="color:#f92672">)</span>  
    <span style="color:#f92672">.</span><span style="color:#a6e22e">append</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;)&#34;</span><span style="color:#f92672">)</span>  
    <span style="color:#f92672">.</span><span style="color:#a6e22e">toString</span><span style="color:#f92672">(</span><span style="color:#f92672">)</span><span style="color:#f92672">;</span>  
<span style="color:#66d9ef">return</span> <span style="color:#66d9ef">new</span> CharMatcher<span style="color:#f92672">(</span>description<span style="color:#f92672">)</span> <span style="color:#f92672">{</span><span style="color:#f92672">.</span><span style="color:#f92672">.</span><span style="color:#f92672">.</span><span style="color:#f92672">}</span><span style="color:#f92672">;</span> 
</code></pre></div><ul>
<li>Заметное отставание даёт commons-lang на lazy итерациях. Наверное потому, что они не поддерживаются.</li>
<li>Как всегда победителем становится собственная реализация.</li>
</ul>
<p>Выводы 2:</p>
<p>Как говорят в google guava: &ldquo;Знайте свои библиотеки&rdquo;. Даже знаменитые библиотеки иногда могут быть написаны очень коряво. В частности в guava лежат очень много здравых идей, например, &ldquo;везде возвращать Iterable&rdquo; для lazy обхода. Это очень мощная идея, о которой я раньше не догадывался. Однако реализация очень сильно страдает от большого количество &ldquo;как-бы&rdquo; функционального кода, который в java сильно ударяет по производительности.</p>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Сборка пакета с помощью debconf</title>
      <link>https://dernasherbrezon.com/posts/debconf/</link>
      <pubDate>Sat, 11 Aug 2012 13:14:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/debconf/</guid>
      <description>Недавно столкнулся с задачей создания .deb пакета. Поскольку информация в сети разбросана и само описание команд debhelper несколько сумбурно, ниже привожу список действий помогающих собрать архив с нуля:
Создание исходников.
#: mkdir package-1.0 #: echo &amp;quot;Sample file in package&amp;quot; &amp;gt; package-1.0/file  Создание специального архива с исходниками
#: tar czf package-1.0.tar.gz package-1.0/ #: dh_make -c apache -f ../package-1.0.tar.gz  Редактирование параметров пакета.
#: nano debian/control  Создание конфигураций:
#: nano debain/package.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Сборка пакета с помощью debconf</h1></header>
      		<div class='container entry-content'>
  <p>Недавно столкнулся с задачей создания .deb пакета. Поскольку информация в сети разбросана и само описание команд debhelper несколько сумбурно, ниже привожу список действий помогающих собрать архив с нуля:</p>
<p>Создание исходников.</p>
<pre><code>#: mkdir package-1.0
#: echo &quot;Sample file in package&quot; &gt; package-1.0/file
</code></pre>
<p>Создание специального архива с исходниками</p>
<pre><code>#: tar czf package-1.0.tar.gz package-1.0/
#: dh_make -c apache -f ../package-1.0.tar.gz
</code></pre>
<p>Редактирование параметров пакета.</p>
<pre><code>#: nano debian/control
</code></pre>
<p>Создание конфигураций:</p>
<pre><code>#: nano debain/package.templates

Template: package/test
Type: boolean
Default: true
Description: Test boolean property
  Test boolean property long description
</code></pre>
<p>Создание конфига</p>
<pre><code>#: nano debian/package.config

#!/bin/bash -e

. /usr/share/debconf/confmodule

db_input medium package/test || true
db_go || true
</code></pre>
<p>Вызов конфига из postinst скрипта. debhelper не может сгенерировать такой postinst так как &ldquo;слишком сложно&rdquo;.</p>
<pre><code>#: mv debian/postinst.ex debian/postinst
#: nano debian/postinst

...
configure)
. /usr/share/debconf/confmodule
db_get package/test
echo &quot;$RET;
;;
...
</code></pre>
<p>Копирование скриптов в некую временную директорию</p>
<pre><code>#: sudo dh_installdebconf
#: sudo dh_installdeb
</code></pre>
<p>Создание пакета</p>
<pre><code>#: sudo dh_builddeb

#: cd ../
</code></pre>
<p>Пакет package_1.0-1_any.deb готов.
Имя пакета package изменить везде выше на необходимое. Например: mycoollapp.</p>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Выбор быстрого алгоритма поиска подстроки</title>
      <link>https://dernasherbrezon.com/posts/substring/</link>
      <pubDate>Mon, 11 Jun 2012 13:14:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/substring/</guid>
      <description>Есть такая задача: отфильтровать строки в множестве файлов. Вариантов решения я вижу несколько:
 ReplaceAll. String.replaceAll(&amp;ldquo;pattern&amp;rdquo;,&amp;ldquo;$1&amp;rdquo; + 1); Pattern. Pattern p = Pattern.compile(&amp;ldquo;pattern&amp;rdquo;); and etc. Ручной способ через indexOf и substring  Первый способ можно сразу отбросить так как он медленный: на каждый файл будет компилироваться pattern. На следующих двух можно остановиться поподробнее.
У меня было чувство что ручной способ всегда быстрее, хоть и немного дольше в реализации. Я написал небольшой тест, чтобы проверить насколько быстрее.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Выбор быстрого алгоритма поиска подстроки</h1></header>
      		<div class='container entry-content'>
  <p>Есть такая задача: отфильтровать строки в множестве файлов. Вариантов решения я вижу несколько:</p>
<ul>
<li>ReplaceAll. String.replaceAll(&ldquo;pattern&rdquo;,&ldquo;$1&rdquo; + 1);</li>
<li>Pattern. Pattern p = Pattern.compile(&ldquo;pattern&rdquo;); and etc.</li>
<li>Ручной способ через indexOf и substring</li>
</ul>
<p>Первый способ можно сразу отбросить так как он медленный: на каждый файл будет компилироваться pattern. На следующих двух можно остановиться поподробнее.</p>
<p>У меня было чувство что ручной способ всегда быстрее, хоть и немного дольше в реализации. Я написал небольшой тест, чтобы проверить насколько быстрее. Результат графически изображён ниже:</p>
<p><img src="/img/substring/1.png" alt=""></p>
<p>Тест запускал фильтрацию одного и того же файла 10к раз. Размер файла - 4286 символов. Время выполнения абсолютное и указано в миллисекундах.</p>
<p>Столбец А: время выполнения фильтрации с помощью ручного способа</p>
<p>Столбец В: время выполнения фильтрации с помощью pattern'а</p>
<p><strong>Вывод 1</strong>: ручная фильтрация на порядок быстрее фильтрации с помощью pattern. Если не нужно производить более сложных подстановок, то ручной способ значительно лучше.</p>
<p><strong>Вывод 2</strong>: при линейном увеличении размера файла, время фильтрации возрастает линейно для обоих способов.</p>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Производительность Hibernate Validator</title>
      <link>https://dernasherbrezon.com/posts/hibernate-perf/</link>
      <pubDate>Wed, 11 Apr 2012 13:14:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/hibernate-perf/</guid>
      <description>Недавно столкнулся с библиотекой Hibernate Validator и jsr 303 в частности. Ниже привожу небольшой микро-бенчмарк тестирования производительности. Тестовый POJO:
public class BusinessObject { @NotBlank private String name; @CustomNotNull(groups = { APIValidationGroup.class }) private String uuid; public String getName() { return name; } public void setName(String name) { this.name = name; } public String getUuid() { return uuid; } public void setUuid(String uuid) { this.uuid = uuid; } }  Для чистоты эксперимента и приближения к реальному сценарию я сделал кастомную валидацию, которая просто проверяет на null:</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Производительность Hibernate Validator</h1></header>
      		<div class='container entry-content'>
  <p>Недавно столкнулся с библиотекой Hibernate Validator и jsr 303 в частности. Ниже привожу небольшой микро-бенчмарк тестирования производительности.
Тестовый POJO:</p>
<pre><code>public class BusinessObject {  

    @NotBlank  
    private String name;  
    @CustomNotNull(groups = { APIValidationGroup.class })  
    private String uuid;  
  
    public String getName() {  
        return name;  
    }  
  
    public void setName(String name) {  
        this.name = name;  
    }  
  
    public String getUuid() {  
        return uuid;  
    }  
  
    public void setUuid(String uuid) {  
        this.uuid = uuid;  
    }  

}  
</code></pre>
<p>Для чистоты эксперимента и приближения к реальному сценарию я сделал кастомную валидацию, которая просто проверяет на null:</p>
<pre><code>public class CustomNotNullValidator implements ConstraintValidator&lt;CustomNotNull, String&gt; {  

    public void initialize(CustomNotNull constraintAnnotation) {  
    }  
   
    public boolean isValid(String value, ConstraintValidatorContext context) {  
        if( value == null ) {  
            return false;  
        }  
        return true;  
    }  
}
</code></pre>
<p>Собственно сам тест:</p>
<pre><code>public static void main(String[] args) {  

    int heatCount = 10000;  
    int count = 1000000;  

    Validator validator = Validation.buildDefaultValidatorFactory().getValidator();  

    BusinessObject validObject = new BusinessObject();  
     validObject.setName(&quot;123&quot;);  
     validObject.setUuid(&quot;123&quot;);  
	  
     for (int i = 0; i &lt; heatCount; i++) {  
      validator.validate(validObject, Default.class);  
     }  
	  
     long start = System.currentTimeMillis();  
     for (int i = 0; i &lt; count; i++) {  
      validator.validate(validObject, Default.class);  
     }  
     long diff = (System.currentTimeMillis() - start);  
     System.out.println(&quot;hibernate validation absolute: &quot; + diff + &quot; avg: &quot; + ((double)diff / count));  
	  
     for (int i = 0; i &lt; heatCount; i++) {  
      validate(validObject);  
     }  
	  
     start = System.currentTimeMillis();  
     for (int i = 0; i &lt; count; i++) {  
      validate(validObject);  
     }  
     diff = (System.currentTimeMillis() - start);  
     System.out.println(&quot;static validation absolute: &quot; + diff + &quot; avg: &quot; + ((double)diff / count));  
	  
     start = System.currentTimeMillis();  
     for (int i = 0; i &lt; count; i++) {  
      validator.validate(validObject, APIValidationGroup.class);  
     }  
     diff = (System.currentTimeMillis() - start);  
     System.out.println(&quot;hibernate custom validation absolute: &quot; + diff + &quot; avg: &quot; + ((double)diff / count));  
	  
     start = System.currentTimeMillis();  
     for (int i = 0; i &lt; count; i++) {  
      validateCustom(validObject);  
     }  
     diff = (System.currentTimeMillis() - start);  
     System.out.println(&quot;static custom validation absolute: &quot; + diff + &quot; avg: &quot; + ((double)diff / count));  
    }  
	  
    private static boolean validate(BusinessObject obj) {  
     if (StringUtils.isBlank(obj.getName())) {  
      return false;  
     }  
     return true;  
    }  
	  
    private static boolean validateCustom(BusinessObject obj) {  
     if (!validate(obj)) {  
      return false;  
     }  
     if (obj.getUuid() == null) {  
      return false;  
     }  
     return true;  
}
</code></pre>
<p>Результаты выполнения следующие (hibernate validator 4.2.0.Final):</p>
<ul>
<li>hibernate validation absolute: 2410 avg: 0.00241</li>
<li>static validation absolute: 17 avg: 1.7E-5</li>
<li>hibernate custom validation absolute: 3407 avg: 0.003407</li>
<li>static custom validation absolute: 16 avg: 1.6E-5</li>
</ul>
<p>Выводы:</p>
<ol>
<li>Hibernate валидация на ровном месте даёт падение производительности в ~150 раз. Поэтому если Ваше приложение это low-latency система, то, возможно, стоит подумать сколько объектов нужно проверять и как много полей. Возможно (но не гарантированно) стоит делать проверки через static методы.</li>
<li>Однако если посмотреть абсолютные величины, то заметно, что удобство и гибкость в настройки валидации стоит всего 0.002 миллисекунды. Если у Вас CRUD интернет приложение, то Hibernate validator будет гораздо лучшим выбором.</li>
</ol>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Оптимизация spring jmx</title>
      <link>https://dernasherbrezon.com/posts/spring-jmx-tuning/</link>
      <pubDate>Sun, 11 Dec 2011 13:14:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/spring-jmx-tuning/</guid>
      <description>Spring по умолчанию позволяет настроить экспорт бинов в jmx. Сделано это через удобные аннотации @ManagedResource. Однако существует сценарий при котором поведение по умолчанию не совсем подходит. Рассмотрим этот случай:
 spring context лениво инициализируется. Очень удобно если есть некоторый db-context.xml в котором описаны все Datasource. Соответственно инициализируются только те которые используются. Также очень удобно при ограниченных ресурсах. fail-fast + старт только необходимого. org.springframework.jmx.export.MBeanExporter умеет инициализировать JMX бины для ленивых spring бинов.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Оптимизация spring jmx</h1></header>
      		<div class='container entry-content'>
  <p>Spring по умолчанию позволяет настроить экспорт бинов в jmx. Сделано это через удобные аннотации @ManagedResource. Однако существует сценарий при котором поведение по умолчанию не совсем подходит. Рассмотрим этот случай:</p>
<ul>
<li>spring context лениво инициализируется. Очень удобно если есть некоторый db-context.xml в котором описаны все Datasource. Соответственно инициализируются только те которые используются. Также очень удобно при ограниченных ресурсах. fail-fast + старт только необходимого.</li>
<li>org.springframework.jmx.export.MBeanExporter умеет инициализировать JMX бины для ленивых spring бинов. Как это происходит: если spring бин - лениво инициализируется, то создаётся proxy через cglib который и будет jmx бином. При первом обращении к его методам/аттрибутам происходит инициализация spring бина.</li>
</ul>
<p>Проблема:</p>
<ul>
<li>возможна инициализация ненужных соединений. Список бинов содержит все возможные jmx бины.</li>
</ul>
<p>Решение:</p>
<ul>
<li>Необходимо создать BeanPostProcessor для контроля уже проинициализированных бинов.</li>
</ul>
<p>Например:</p>
<pre><code>import java.util.ArrayList;  
import java.util.List;  
  
import org.springframework.beans.BeansException;  
import org.springframework.beans.factory.config.BeanPostProcessor;  
  
public class StartedBeansAwarePostProcessor implements BeanPostProcessor {  
  
 private final List&lt;String&gt; beanNames = new ArrayList&lt;String&gt;();  
  
 @Override  
 public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {  
  return bean;  
 }  
  
 @Override  
 public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {  
  beanNames.add(beanName);  
  return bean;  
 }  
   
 public boolean isStarted(String beanName) {  
  return beanNames.contains(beanName);  
 }  
  
} 
</code></pre>
<p>После этого необходимо создать свой Assembler. Например:</p>
<pre><code>import org.springframework.beans.factory.annotation.Required;  
import org.springframework.jmx.export.assembler.MetadataMBeanInfoAssembler;  
import org.springframework.jmx.support.JmxUtils;  
  
public class LazyAssembler extends MetadataMBeanInfoAssembler {  
  
 private StartedBeansAwarePostProcessor startedBeans;  
  
 @Override  
 public boolean includeBean(Class beanClass, String beanName) {  
  if (startedBeans.isStarted(beanName)) {  
   if (isMBean(beanClass)) {  
    return true;  
   }  
   return super.includeBean(beanClass, beanName);  
  }  
  return false;  
 }  
  
 @Required  
 public void setStartedBeans(StartedBeansAwarePostProcessor startedBeans) {  
  this.startedBeans = startedBeans;  
 }  
  
 private boolean isMBean(Class beanClass) {  
  return JmxUtils.isMBean(beanClass);  
 }  
  
} 
</code></pre>
<p>И сконфигурировать spring контекст:</p>
<pre><code>&lt;bean id=&quot;lazyAssembler&quot; class=&quot;LazyAssembler&quot; p:attributeSource-ref=&quot;jmxAttributeSource&quot;&gt;  
 &lt;property name=&quot;startedBeans&quot; ref=&quot;startedBeanAwarePostProcessor&quot; /&gt;  
&lt;/bean&gt;  
&lt;bean id=&quot;startedBeanAwarePostProcessor&quot; class=&quot;StartedBeansAwarePostProcessor&quot; /&gt;  
&lt;bean name=&quot;mbeanServer&quot; class=&quot;org.springframework.jmx.support.MBeanServerFactoryBean&quot; p:locateExistingServerIfPossible=&quot;true&quot; /&gt;  
&lt;bean id=&quot;jmxAttributeSource&quot; class=&quot;org.springframework.jmx.export.annotation.AnnotationJmxAttributeSource&quot; /&gt;  
&lt;bean id=&quot;mbeanExporter&quot; class=&quot;org.springframework.jmx.export.MBeanExporter&quot;  
 p:server-ref=&quot;mbeanServer&quot;&gt;  
 &lt;property name=&quot;assembler&quot; ref=&quot;lazyAssembler&quot; /&gt;  
 &lt;property name=&quot;autodetectMode&quot; value=&quot;2&quot; /&gt;  
 &lt;property name=&quot;namingStrategy&quot;&gt;  
  &lt;bean class=&quot;org.springframework.jmx.export.naming.MetadataNamingStrategy&quot;&gt;  
   &lt;property name=&quot;attributeSource&quot; ref=&quot;jmxAttributeSource&quot; /&gt;  
   &lt;property name=&quot;defaultDomain&quot; value=&quot;domain&quot; /&gt;  
  &lt;/bean&gt;  
 &lt;/property&gt;  
&lt;/bean&gt; 
</code></pre>
<p>Особое внимание на параметр: autodetectMode. Он должен обязательно быть равен 2, иначе MBeanExporter будет игнорировать Assembler при принятии решении о том включать бин или нет. Теперь можно инициализировать контекст. Например:</p>
<pre><code>ctx.getBean(SomeBean.class); //инициализация корневого бина. По зависимостям должна инициализировать все бины необходимые для работы приложения. StartedBeansAwarePostProcessor запоминает все проинициализированные бины.  
ctx.getBean(&quot;mbeanExporter&quot;); //инициализация jmx бинов. Выполнять строго после инициализации всех бинов приложения.
</code></pre>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Оптимизация spring-mvc</title>
      <link>https://dernasherbrezon.com/posts/spring-mvc-tuning/</link>
      <pubDate>Fri, 11 Nov 2011 13:14:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/spring-mvc-tuning/</guid>
      <description>Общие решения всегда медленнее частных. Ниже я собираюсь немного оптимизировать spring-mvc. Оптимизация прежде всего рассчитана на уменьшение генерируемого мусора. Прежде чем начать оптимизировать надо определиться какие функции фреймворка можно выкинуть и какими фичами пренебречь:
 ISO-8859-1-encoded URLs. Человеко-понятные-урл (ЧПУ) используются SEO продвижения в поисковых движках. Но что если это не нужно? Зачем на каждый запрос тратить процессорное время и память? Всегда абсолютные пути для сервлетов-контроллёров. По умолчанию spring-mvc позволяет использовать относительные пути для include запросов.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Оптимизация spring-mvc</h1></header>
      		<div class='container entry-content'>
  <p>Общие решения всегда медленнее частных. Ниже я собираюсь немного оптимизировать spring-mvc. Оптимизация прежде всего рассчитана на уменьшение генерируемого мусора. Прежде чем начать оптимизировать надо определиться какие функции фреймворка можно выкинуть и какими фичами пренебречь:</p>
<ul>
<li>ISO-8859-1-encoded URLs. Человеко-понятные-урл (ЧПУ) используются SEO продвижения в поисковых движках. Но что если это не нужно? Зачем на каждый запрос тратить процессорное время и память?</li>
<li>Всегда абсолютные пути для сервлетов-контроллёров. По умолчанию spring-mvc позволяет использовать относительные пути для include запросов. При оптимизации выполненной ниже и использовании Jetty результат такой же. Возможно это актуально для других контейнеров.</li>
<li>Не использовать jstl. Достаточно спорное предположение, однако кто то может не использовать jstl и писать на обычных JSP. Я не знаю jstl. И пишу &lt;% %&gt;.</li>
</ul>
<p>Итак первая достаточно безболезненная оптимизация не требующая никаких жертв: выключить publishEvent в DispatcherServlet. По умолчанию он отправляет в ApplicationContext сообщение о времени обработки запроса. В production зачастую уже поздно что то мерить. Делается это в web.xml:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-xml" data-lang="xml"><span style="color:#f92672">&lt;init-param</span><span style="color:#f92672">&gt;</span>  
	<span style="color:#f92672">&lt;param-name</span><span style="color:#f92672">&gt;</span>publishEvents<span style="color:#f92672">&lt;/param-name&gt;</span>  
	<span style="color:#f92672">&lt;param-value</span><span style="color:#f92672">&gt;</span>false<span style="color:#f92672">&lt;/param-value&gt;</span>  
<span style="color:#f92672">&lt;/init-param&gt;</span>
</code></pre></div><p>Избавиться от @RequestMapping. Это очень удобно передавать @Param напрямую в метод. Однако реализация AnnotationMethodHandlerAdapter в spring-mvc достаточно требовательна к ресурсам и генерирует кучу мусора на каждый запрос. Логичнее было бы сделать найденные методы кешируемыми, но согласно <a href="https://jira.springsource.org/browse/SPR-6151">https://jira.springsource.org/browse/SPR-6151</a> разработчики считают сложным пофиксить. Поэтому для простоты и небольшого увеличения скорости сделаем новый контроллёр:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">interface</span> <span style="color:#a6e22e">FastController</span> <span style="color:#f92672">{</span>  
  
    String <span style="color:#a6e22e">handleRequest</span><span style="color:#f92672">(</span>HttpServletRequest request<span style="color:#f92672">,</span> HttpServletResponse response<span style="color:#f92672">)</span> <span style="color:#66d9ef">throws</span> Exception<span style="color:#f92672">;</span>  
      
    String <span style="color:#a6e22e">getRequestMappingURL</span><span style="color:#f92672">(</span><span style="color:#f92672">)</span><span style="color:#f92672">;</span>  

<span style="color:#f92672">}</span>
</code></pre></div><p>Чем он лучше чем org.springframework.web.servlet.mvc.Controller? Он позволяет задавать url в том же месте где и содержится его реализация. Не нужно делать лишних движений чтобы добавить его в spring.xml. Соответственно необходимо определить классы которые будут его использовать:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">FastUrlDetector</span> <span style="color:#66d9ef">extends</span> AbstractDetectingUrlHandlerMapping <span style="color:#f92672">{</span>  
  
      
    <span style="color:#66d9ef">public</span> <span style="color:#a6e22e">FastUrlDetector</span><span style="color:#f92672">(</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>  
        setAlwaysUseFullPath<span style="color:#f92672">(</span><span style="color:#66d9ef">true</span><span style="color:#f92672">)</span><span style="color:#f92672">;</span>  
        setUrlDecode<span style="color:#f92672">(</span><span style="color:#66d9ef">false</span><span style="color:#f92672">)</span><span style="color:#f92672">;</span>  
    <span style="color:#f92672">}</span>  
      
    <span style="color:#a6e22e">@Override</span>  
    <span style="color:#66d9ef">protected</span> String<span style="color:#f92672">[</span><span style="color:#f92672">]</span> <span style="color:#a6e22e">determineUrlsForHandler</span><span style="color:#f92672">(</span>String beanName<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>  
        ApplicationContext context <span style="color:#f92672">=</span> getApplicationContext<span style="color:#f92672">(</span><span style="color:#f92672">)</span><span style="color:#f92672">;</span>  
        Class<span style="color:#f92672">&lt;</span><span style="color:#f92672">?</span><span style="color:#f92672">&gt;</span> handlerType <span style="color:#f92672">=</span> context<span style="color:#f92672">.</span><span style="color:#a6e22e">getType</span><span style="color:#f92672">(</span>beanName<span style="color:#f92672">)</span><span style="color:#f92672">;</span>  
        <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>FastController<span style="color:#f92672">.</span><span style="color:#a6e22e">class</span><span style="color:#f92672">.</span><span style="color:#a6e22e">isAssignableFrom</span><span style="color:#f92672">(</span>handlerType<span style="color:#f92672">)</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>  
            FastController controller <span style="color:#f92672">=</span> <span style="color:#f92672">(</span>FastController<span style="color:#f92672">)</span> context<span style="color:#f92672">.</span><span style="color:#a6e22e">getBean</span><span style="color:#f92672">(</span>beanName<span style="color:#f92672">)</span><span style="color:#f92672">;</span>  
            String result <span style="color:#f92672">=</span> controller<span style="color:#f92672">.</span><span style="color:#a6e22e">getRequestMappingURL</span><span style="color:#f92672">(</span><span style="color:#f92672">)</span><span style="color:#f92672">;</span>  
            <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>result <span style="color:#f92672">=</span><span style="color:#f92672">=</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>  
                <span style="color:#66d9ef">throw</span> <span style="color:#66d9ef">new</span> IllegalArgumentException<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;controller doesnt have url mapping: &#34;</span> <span style="color:#f92672">+</span> beanName<span style="color:#f92672">)</span><span style="color:#f92672">;</span>  
            <span style="color:#f92672">}</span>  
            <span style="color:#66d9ef">if</span><span style="color:#f92672">(</span> result<span style="color:#f92672">.</span><span style="color:#a6e22e">isEmpty</span><span style="color:#f92672">(</span><span style="color:#f92672">)</span> <span style="color:#f92672">)</span> <span style="color:#f92672">{</span>  
                <span style="color:#66d9ef">throw</span> <span style="color:#66d9ef">new</span> IllegalArgumentException<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;controller doesnt have url mapping: &#34;</span> <span style="color:#f92672">+</span> beanName<span style="color:#f92672">)</span><span style="color:#f92672">;</span>  
            <span style="color:#f92672">}</span>  
            <span style="color:#66d9ef">if</span><span style="color:#f92672">(</span> <span style="color:#f92672">!</span>result<span style="color:#f92672">.</span><span style="color:#a6e22e">startsWith</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;/&#34;</span><span style="color:#f92672">)</span> <span style="color:#f92672">)</span> <span style="color:#f92672">{</span>  
                <span style="color:#66d9ef">throw</span> <span style="color:#66d9ef">new</span> IllegalArgumentException<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;only absolute urls are required. Beanname: &#34;</span> <span style="color:#f92672">+</span> beanName <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34; Url: &#34;</span> <span style="color:#f92672">+</span> result<span style="color:#f92672">)</span><span style="color:#f92672">;</span>  
            <span style="color:#f92672">}</span>  
            <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">new</span> String<span style="color:#f92672">[</span><span style="color:#f92672">]</span><span style="color:#f92672">{</span>result<span style="color:#f92672">}</span><span style="color:#f92672">;</span>  
        <span style="color:#f92672">}</span>  
        <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">;</span>  
    <span style="color:#f92672">}</span>  
  
<span style="color:#f92672">}</span>  
  
<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">FastMethodHandlerAdapter</span> <span style="color:#66d9ef">implements</span> HandlerAdapter <span style="color:#f92672">{</span>  
  
    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">boolean</span> <span style="color:#a6e22e">supports</span><span style="color:#f92672">(</span>Object handler<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>  
        <span style="color:#66d9ef">return</span> <span style="color:#f92672">(</span>handler <span style="color:#66d9ef">instanceof</span> FastController<span style="color:#f92672">)</span><span style="color:#f92672">;</span>  
    <span style="color:#f92672">}</span>  
  
    <span style="color:#66d9ef">public</span> ModelAndView <span style="color:#a6e22e">handle</span><span style="color:#f92672">(</span>HttpServletRequest request<span style="color:#f92672">,</span> HttpServletResponse response<span style="color:#f92672">,</span> Object handler<span style="color:#f92672">)</span> <span style="color:#66d9ef">throws</span> Exception <span style="color:#f92672">{</span>  
        <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">new</span> ModelAndView<span style="color:#f92672">(</span><span style="color:#f92672">(</span><span style="color:#f92672">(</span>FastController<span style="color:#f92672">)</span> handler<span style="color:#f92672">)</span><span style="color:#f92672">.</span><span style="color:#a6e22e">handleRequest</span><span style="color:#f92672">(</span>request<span style="color:#f92672">,</span> response<span style="color:#f92672">)</span><span style="color:#f92672">)</span><span style="color:#f92672">;</span>  
    <span style="color:#f92672">}</span>  
  
    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">long</span> <span style="color:#a6e22e">getLastModified</span><span style="color:#f92672">(</span>HttpServletRequest request<span style="color:#f92672">,</span> Object handler<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>  
 <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>handler <span style="color:#66d9ef">instanceof</span> LastModified<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>  
  <span style="color:#66d9ef">return</span> <span style="color:#f92672">(</span><span style="color:#f92672">(</span>LastModified<span style="color:#f92672">)</span> handler<span style="color:#f92672">)</span><span style="color:#f92672">.</span><span style="color:#a6e22e">getLastModified</span><span style="color:#f92672">(</span>request<span style="color:#f92672">)</span><span style="color:#f92672">;</span>  
 <span style="color:#f92672">}</span>  
        <span style="color:#66d9ef">return</span> <span style="color:#f92672">-</span>1<span style="color:#f92672">;</span>  
    <span style="color:#f92672">}</span>  
  
<span style="color:#f92672">}</span>
</code></pre></div><p>Они практически не генерируют мусора. Убрать new ModelAndView не получится не переписав DispatcherServlet. Тем более генерация ModelAndView занимает небольшой процент мусора генерируемого при каждом запросе. После этого необходимо добавить Adapter и Decoder в spring.xml чтобы они автоматически подцеплялись DispatcherServlet при поиске контроллёров.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-xml" data-lang="xml"><span style="color:#f92672">&lt;bean</span> <span style="color:#a6e22e">class=</span><span style="color:#e6db74">&#34;FastMethodHandlerAdapter&#34;</span><span style="color:#f92672">/&gt;</span>  
<span style="color:#f92672">&lt;bean</span> <span style="color:#a6e22e">class=</span><span style="color:#e6db74">&#34;FastUrlDetector&#34;</span> <span style="color:#f92672">/&gt;</span>  
</code></pre></div><p>Далее. Следующим большим местом которое генерирует много мусора является Renderer. Я не знаю как работает jstl и почему spring-mvc делает множество приседаний для его работы. Поэтому я просто выкинул JstlView (которое используется по умолчанию для .jsp) и заменил его на:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">FastJSPView</span> <span style="color:#66d9ef">extends</span> AbstractUrlBasedView <span style="color:#f92672">{</span>  
  
    <span style="color:#a6e22e">@Override</span>  
    <span style="color:#66d9ef">protected</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">renderMergedOutputModel</span><span style="color:#f92672">(</span>Map<span style="color:#f92672">&lt;</span>String<span style="color:#f92672">,</span> Object<span style="color:#f92672">&gt;</span> model<span style="color:#f92672">,</span> HttpServletRequest request<span style="color:#f92672">,</span> HttpServletResponse response<span style="color:#f92672">)</span> <span style="color:#66d9ef">throws</span> Exception <span style="color:#f92672">{</span>  
        RequestDispatcher rd <span style="color:#f92672">=</span> request<span style="color:#f92672">.</span><span style="color:#a6e22e">getRequestDispatcher</span><span style="color:#f92672">(</span>getUrl<span style="color:#f92672">(</span><span style="color:#f92672">)</span><span style="color:#f92672">)</span><span style="color:#f92672">;</span>  
        <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>useInclude<span style="color:#f92672">(</span>request<span style="color:#f92672">,</span> response<span style="color:#f92672">)</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>  
            response<span style="color:#f92672">.</span><span style="color:#a6e22e">setContentType</span><span style="color:#f92672">(</span>getContentType<span style="color:#f92672">(</span><span style="color:#f92672">)</span><span style="color:#f92672">)</span><span style="color:#f92672">;</span>  
            <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>logger<span style="color:#f92672">.</span><span style="color:#a6e22e">isDebugEnabled</span><span style="color:#f92672">(</span><span style="color:#f92672">)</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>  
                logger<span style="color:#f92672">.</span><span style="color:#a6e22e">debug</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Including resource [&#34;</span> <span style="color:#f92672">+</span> getUrl<span style="color:#f92672">(</span><span style="color:#f92672">)</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;] in InternalResourceView &#39;&#34;</span> <span style="color:#f92672">+</span> getBeanName<span style="color:#f92672">(</span><span style="color:#f92672">)</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;&#39;&#34;</span><span style="color:#f92672">)</span><span style="color:#f92672">;</span>  
            <span style="color:#f92672">}</span>  
            rd<span style="color:#f92672">.</span><span style="color:#a6e22e">include</span><span style="color:#f92672">(</span>request<span style="color:#f92672">,</span> response<span style="color:#f92672">)</span><span style="color:#f92672">;</span>  
        <span style="color:#f92672">}</span>  
  
        <span style="color:#66d9ef">else</span> <span style="color:#f92672">{</span>  
            <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>logger<span style="color:#f92672">.</span><span style="color:#a6e22e">isDebugEnabled</span><span style="color:#f92672">(</span><span style="color:#f92672">)</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>  
                logger<span style="color:#f92672">.</span><span style="color:#a6e22e">debug</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Forwarding to resource [&#34;</span> <span style="color:#f92672">+</span> getUrl<span style="color:#f92672">(</span><span style="color:#f92672">)</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;] in InternalResourceView &#39;&#34;</span> <span style="color:#f92672">+</span> getBeanName<span style="color:#f92672">(</span><span style="color:#f92672">)</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;&#39;&#34;</span><span style="color:#f92672">)</span><span style="color:#f92672">;</span>  
            <span style="color:#f92672">}</span>  
            rd<span style="color:#f92672">.</span><span style="color:#a6e22e">forward</span><span style="color:#f92672">(</span>request<span style="color:#f92672">,</span> response<span style="color:#f92672">)</span><span style="color:#f92672">;</span>  
        <span style="color:#f92672">}</span>          
    <span style="color:#f92672">}</span>  
      
    <span style="color:#66d9ef">protected</span> <span style="color:#66d9ef">boolean</span> <span style="color:#a6e22e">useInclude</span><span style="color:#f92672">(</span>HttpServletRequest request<span style="color:#f92672">,</span> HttpServletResponse response<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>  
        <span style="color:#66d9ef">return</span> <span style="color:#f92672">(</span>WebUtils<span style="color:#f92672">.</span><span style="color:#a6e22e">isIncludeRequest</span><span style="color:#f92672">(</span>request<span style="color:#f92672">)</span> <span style="color:#f92672">|</span><span style="color:#f92672">|</span> response<span style="color:#f92672">.</span><span style="color:#a6e22e">isCommitted</span><span style="color:#f92672">(</span><span style="color:#f92672">)</span><span style="color:#f92672">)</span><span style="color:#f92672">;</span>  
    <span style="color:#f92672">}</span>  
  
<span style="color:#f92672">}</span>  
  
<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">FastJSPViewResolver</span> <span style="color:#66d9ef">extends</span> UrlBasedViewResolver <span style="color:#f92672">{</span>  
  
    <span style="color:#66d9ef">public</span> <span style="color:#a6e22e">FastJSPViewResolver</span><span style="color:#f92672">(</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>  
        setViewClass<span style="color:#f92672">(</span>FastJSPView<span style="color:#f92672">.</span><span style="color:#a6e22e">class</span><span style="color:#f92672">)</span><span style="color:#f92672">;</span>  
    <span style="color:#f92672">}</span>  
      
<span style="color:#f92672">}</span>  
</code></pre></div><p>Часть кода в FastJSPView скопирована с JstlView. И соответственно необходимо добавить в spring.xml:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-xml" data-lang="xml"><span style="color:#f92672">&lt;bean</span> <span style="color:#a6e22e">id=</span><span style="color:#e6db74">&#34;viewResolver&#34;</span>  
 <span style="color:#a6e22e">class=</span><span style="color:#e6db74">&#34;com.st.FastJSPViewResolver&#34;</span><span style="color:#f92672">&gt;</span>  
 <span style="color:#f92672">&lt;property</span> <span style="color:#a6e22e">name=</span><span style="color:#e6db74">&#34;prefix&#34;</span><span style="color:#f92672">&gt;</span>  
  <span style="color:#f92672">&lt;value</span><span style="color:#f92672">&gt;</span>/WEB-INF/pages/<span style="color:#f92672">&lt;/value&gt;</span>  
 <span style="color:#f92672">&lt;/property&gt;</span>  
 <span style="color:#f92672">&lt;property</span> <span style="color:#a6e22e">name=</span><span style="color:#e6db74">&#34;suffix&#34;</span><span style="color:#f92672">&gt;</span>  
  <span style="color:#f92672">&lt;value</span><span style="color:#f92672">&gt;</span>.jsp<span style="color:#f92672">&lt;/value&gt;</span>  
 <span style="color:#f92672">&lt;/property&gt;</span>  
<span style="color:#f92672">&lt;/bean&gt;</span> 
</code></pre></div><p>Чтобы проверить что есть некоторые улучшения ниже приведён тестовый контроллер который перенаправляет запрос в jsp:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#a6e22e">@Controller</span>  
<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">FastServlet</span> <span style="color:#66d9ef">implements</span> FastController <span style="color:#f92672">{</span>  
  
    <span style="color:#66d9ef">public</span> String <span style="color:#a6e22e">handleRequest</span><span style="color:#f92672">(</span>HttpServletRequest request<span style="color:#f92672">,</span> HttpServletResponse response<span style="color:#f92672">)</span> <span style="color:#66d9ef">throws</span> Exception <span style="color:#f92672">{</span>  
        <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;index2&#34;</span><span style="color:#f92672">;</span>  
    <span style="color:#f92672">}</span>  
      
    <span style="color:#66d9ef">public</span> String <span style="color:#a6e22e">getRequestMappingURL</span><span style="color:#f92672">(</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>  
        <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;/test2&#34;</span><span style="color:#f92672">;</span>  
    <span style="color:#f92672">}</span>  
      
<span style="color:#f92672">}</span> 
</code></pre></div><p>Аннотация @Controller используется для автоматического поиска контроллёра в classpath при старте приложения. В результате под нагрузкой jmeter (50 пользователей) получаются следующие показатели:</p>
<ul>
<li>Настройки GC по умолчанию. Оптимизированная версия ~3 коллекции в секунду, неоптимизированная ~6 коллекций</li>
<li>Latency &amp; throughtput одинаковые для обоих версий.</li>
<li>Время работы HandlerAdapter.handle (от общего времени обработки запроса): для оптимизированной версии 0%, неоптимизированной 31%. Результат впечатляющий. Очевидно это связано с тем что вызов метода напрямую быстрее поиска метода по аанотации и вызова через Reflection</li>
<li>Время работы для DispatcherServlet.getLastModified: для оптимизированной версии 0%, неоптимизированной 11%. Связано с тем что AbstractHandlerMapping.getHandler использует абсолютные пути и не использует DefaultAnnotationHandlerMapping.</li>
<li>Среднее количество генерируемых объектов в минуту: для оптимизированной версии 4к-5к, неоптимизированной 9к-14к. Уменьшение в 2 раза!</li>
</ul>
<p>Дополнительные находки:</p>
<ul>
<li>ServletRequestAttributes. Не очень удачная абстракция. На каждый запрос создаётся этот объект. Не совсем понятно зачем он нужен когда обычный HTTPServletRequest предоставляет методы setAttribute и getAttribute и пр.</li>
<li>Не очень удачная имплементация некоторых объектов в Jetty: Response.setLocale, Request.getRequestDispatcher, Dispatcher.forward. После оптимизации они стали теми местами которые генерируют наибольшее количество мусора. Не совсем понятно зачем им генерировать много объектов, также непонятно почему они не кешируют результаты вычислений.</li>
<li>при использовании for each генерируется итератор, который превращается в мусор. Настольные microbenchmark'и показали что итерация по ArrayList при использовании простых индексов быстрее в два раза.</li>
</ul>
<p>Выводы:</p>
<ul>
<li>чем больше слоёв абстракции и &ldquo;упрощений&rdquo;, тем медленнее обработка.</li>
<li>текущие технологии есть куда оптимизировать.</li>
<li>нужно хорошо понимать что можно оптимизировать а что нет</li>
</ul>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Запуск Jetty Embedded через spring</title>
      <link>https://dernasherbrezon.com/posts/jetty-embedded-maven/</link>
      <pubDate>Thu, 11 Nov 2010 13:14:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/jetty-embedded-maven/</guid>
      <description>Для начала необходимо добавить зависимости в pom.xml:
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.eclipse.jetty&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;jetty-server&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;7.2.0.RC0&amp;lt;/version&amp;gt; &amp;lt;exclusions&amp;gt; &amp;lt;exclusion&amp;gt; &amp;lt;groupId&amp;gt;org.mortbay.jetty&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;test-jndi-webapp&amp;lt;/artifactId&amp;gt; &amp;lt;/exclusion&amp;gt; &amp;lt;exclusion&amp;gt; &amp;lt;groupId&amp;gt;org.mortbay.jetty&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;test-annotation-webapp&amp;lt;/artifactId&amp;gt; &amp;lt;/exclusion&amp;gt; &amp;lt;exclusion&amp;gt; &amp;lt;groupId&amp;gt;org.mortbay.jetty&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;test-jaas-webapp&amp;lt;/artifactId&amp;gt; &amp;lt;/exclusion&amp;gt; &amp;lt;exclusion&amp;gt; &amp;lt;groupId&amp;gt;org.mortbay.jetty&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;example-async-rest-webapp&amp;lt;/artifactId&amp;gt; &amp;lt;/exclusion&amp;gt; &amp;lt;/exclusions&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.eclipse.jetty&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;jetty-servlet&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;7.2.0.RC0&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.eclipse.jetty&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;jetty-jsp-2.1&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;7.2.0.RC0&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.eclipse.jetty&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;jetty-webapp&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;7.2.0.RC0&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-core&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;3.0.1.RELEASE&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-context&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;3.0.1.RELEASE&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-web&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;3.0.1.RELEASE&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-webmvc&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;3.0.1.RELEASE&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; Затем в main-class указать:
Server server = new Server(9090); ServletHolder holder = new ServletHolder(new DispatcherServlet()); holder.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Запуск Jetty Embedded через spring</h1></header>
      		<div class='container entry-content'>
  <p>Для начала необходимо добавить зависимости в pom.xml:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-xml" data-lang="xml"><span style="color:#f92672">&lt;dependency</span><span style="color:#f92672">&gt;</span>  
 <span style="color:#f92672">&lt;groupId</span><span style="color:#f92672">&gt;</span>org.eclipse.jetty<span style="color:#f92672">&lt;/groupId&gt;</span>  
 <span style="color:#f92672">&lt;artifactId</span><span style="color:#f92672">&gt;</span>jetty-server<span style="color:#f92672">&lt;/artifactId&gt;</span>  
 <span style="color:#f92672">&lt;version</span><span style="color:#f92672">&gt;</span>7.2.0.RC0<span style="color:#f92672">&lt;/version&gt;</span>  
 <span style="color:#f92672">&lt;exclusions</span><span style="color:#f92672">&gt;</span>  
  <span style="color:#f92672">&lt;exclusion</span><span style="color:#f92672">&gt;</span>  
   <span style="color:#f92672">&lt;groupId</span><span style="color:#f92672">&gt;</span>org.mortbay.jetty<span style="color:#f92672">&lt;/groupId&gt;</span>  
   <span style="color:#f92672">&lt;artifactId</span><span style="color:#f92672">&gt;</span>test-jndi-webapp<span style="color:#f92672">&lt;/artifactId&gt;</span>  
  <span style="color:#f92672">&lt;/exclusion&gt;</span>  
  <span style="color:#f92672">&lt;exclusion</span><span style="color:#f92672">&gt;</span>  
   <span style="color:#f92672">&lt;groupId</span><span style="color:#f92672">&gt;</span>org.mortbay.jetty<span style="color:#f92672">&lt;/groupId&gt;</span>  
   <span style="color:#f92672">&lt;artifactId</span><span style="color:#f92672">&gt;</span>test-annotation-webapp<span style="color:#f92672">&lt;/artifactId&gt;</span>  
  <span style="color:#f92672">&lt;/exclusion&gt;</span>  
  <span style="color:#f92672">&lt;exclusion</span><span style="color:#f92672">&gt;</span>  
   <span style="color:#f92672">&lt;groupId</span><span style="color:#f92672">&gt;</span>org.mortbay.jetty<span style="color:#f92672">&lt;/groupId&gt;</span>  
   <span style="color:#f92672">&lt;artifactId</span><span style="color:#f92672">&gt;</span>test-jaas-webapp<span style="color:#f92672">&lt;/artifactId&gt;</span>  
  <span style="color:#f92672">&lt;/exclusion&gt;</span>  
  <span style="color:#f92672">&lt;exclusion</span><span style="color:#f92672">&gt;</span>  
   <span style="color:#f92672">&lt;groupId</span><span style="color:#f92672">&gt;</span>org.mortbay.jetty<span style="color:#f92672">&lt;/groupId&gt;</span>  
   <span style="color:#f92672">&lt;artifactId</span><span style="color:#f92672">&gt;</span>example-async-rest-webapp<span style="color:#f92672">&lt;/artifactId&gt;</span>  
  <span style="color:#f92672">&lt;/exclusion&gt;</span>  
 <span style="color:#f92672">&lt;/exclusions&gt;</span>  
<span style="color:#f92672">&lt;/dependency&gt;</span>  
<span style="color:#f92672">&lt;dependency</span><span style="color:#f92672">&gt;</span>  
 <span style="color:#f92672">&lt;groupId</span><span style="color:#f92672">&gt;</span>org.eclipse.jetty<span style="color:#f92672">&lt;/groupId&gt;</span>  
 <span style="color:#f92672">&lt;artifactId</span><span style="color:#f92672">&gt;</span>jetty-servlet<span style="color:#f92672">&lt;/artifactId&gt;</span>  
 <span style="color:#f92672">&lt;version</span><span style="color:#f92672">&gt;</span>7.2.0.RC0<span style="color:#f92672">&lt;/version&gt;</span>  
<span style="color:#f92672">&lt;/dependency&gt;</span>  
      <span style="color:#f92672">&lt;dependency</span><span style="color:#f92672">&gt;</span>  
          <span style="color:#f92672">&lt;groupId</span><span style="color:#f92672">&gt;</span>org.eclipse.jetty<span style="color:#f92672">&lt;/groupId&gt;</span>  
          <span style="color:#f92672">&lt;artifactId</span><span style="color:#f92672">&gt;</span>jetty-jsp-2.1<span style="color:#f92672">&lt;/artifactId&gt;</span>  
          <span style="color:#f92672">&lt;version</span><span style="color:#f92672">&gt;</span>7.2.0.RC0<span style="color:#f92672">&lt;/version&gt;</span>  
      <span style="color:#f92672">&lt;/dependency&gt;</span>    
      <span style="color:#f92672">&lt;dependency</span><span style="color:#f92672">&gt;</span>  
          <span style="color:#f92672">&lt;groupId</span><span style="color:#f92672">&gt;</span>org.eclipse.jetty<span style="color:#f92672">&lt;/groupId&gt;</span>  
          <span style="color:#f92672">&lt;artifactId</span><span style="color:#f92672">&gt;</span>jetty-webapp<span style="color:#f92672">&lt;/artifactId&gt;</span>  
          <span style="color:#f92672">&lt;version</span><span style="color:#f92672">&gt;</span>7.2.0.RC0<span style="color:#f92672">&lt;/version&gt;</span>  
      <span style="color:#f92672">&lt;/dependency&gt;</span>    
<span style="color:#f92672">&lt;dependency</span><span style="color:#f92672">&gt;</span>  
 <span style="color:#f92672">&lt;groupId</span><span style="color:#f92672">&gt;</span>org.springframework<span style="color:#f92672">&lt;/groupId&gt;</span>  
 <span style="color:#f92672">&lt;artifactId</span><span style="color:#f92672">&gt;</span>spring-core<span style="color:#f92672">&lt;/artifactId&gt;</span>  
 <span style="color:#f92672">&lt;version</span><span style="color:#f92672">&gt;</span>3.0.1.RELEASE<span style="color:#f92672">&lt;/version&gt;</span>  
<span style="color:#f92672">&lt;/dependency&gt;</span>  
<span style="color:#f92672">&lt;dependency</span><span style="color:#f92672">&gt;</span>  
 <span style="color:#f92672">&lt;groupId</span><span style="color:#f92672">&gt;</span>org.springframework<span style="color:#f92672">&lt;/groupId&gt;</span>  
 <span style="color:#f92672">&lt;artifactId</span><span style="color:#f92672">&gt;</span>spring-context<span style="color:#f92672">&lt;/artifactId&gt;</span>  
 <span style="color:#f92672">&lt;version</span><span style="color:#f92672">&gt;</span>3.0.1.RELEASE<span style="color:#f92672">&lt;/version&gt;</span>  
<span style="color:#f92672">&lt;/dependency&gt;</span>  
<span style="color:#f92672">&lt;dependency</span><span style="color:#f92672">&gt;</span>  
 <span style="color:#f92672">&lt;groupId</span><span style="color:#f92672">&gt;</span>org.springframework<span style="color:#f92672">&lt;/groupId&gt;</span>  
 <span style="color:#f92672">&lt;artifactId</span><span style="color:#f92672">&gt;</span>spring-web<span style="color:#f92672">&lt;/artifactId&gt;</span>  
 <span style="color:#f92672">&lt;version</span><span style="color:#f92672">&gt;</span>3.0.1.RELEASE<span style="color:#f92672">&lt;/version&gt;</span>  
<span style="color:#f92672">&lt;/dependency&gt;</span>  
<span style="color:#f92672">&lt;dependency</span><span style="color:#f92672">&gt;</span>  
 <span style="color:#f92672">&lt;groupId</span><span style="color:#f92672">&gt;</span>org.springframework<span style="color:#f92672">&lt;/groupId&gt;</span>  
 <span style="color:#f92672">&lt;artifactId</span><span style="color:#f92672">&gt;</span>spring-webmvc<span style="color:#f92672">&lt;/artifactId&gt;</span>  
 <span style="color:#f92672">&lt;version</span><span style="color:#f92672">&gt;</span>3.0.1.RELEASE<span style="color:#f92672">&lt;/version&gt;</span>  
<span style="color:#f92672">&lt;/dependency&gt;</span>
</code></pre></div><p>Затем в <code>main-class</code> указать:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">Server server <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> Server<span style="color:#f92672">(</span>9090<span style="color:#f92672">)</span><span style="color:#f92672">;</span>  
ServletHolder holder <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> ServletHolder<span style="color:#f92672">(</span><span style="color:#66d9ef">new</span> DispatcherServlet<span style="color:#f92672">(</span><span style="color:#f92672">)</span><span style="color:#f92672">)</span><span style="color:#f92672">;</span>  
holder<span style="color:#f92672">.</span><span style="color:#a6e22e">setName</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;root&#34;</span><span style="color:#f92672">)</span><span style="color:#f92672">;</span>  
WebAppContext webappContext <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> WebAppContext<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;src/main/webapp/&#34;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;/&#34;</span><span style="color:#f92672">)</span><span style="color:#f92672">;</span>  
webappContext<span style="color:#f92672">.</span><span style="color:#a6e22e">addServlet</span><span style="color:#f92672">(</span>holder<span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;*.do&#34;</span><span style="color:#f92672">)</span><span style="color:#f92672">;</span>  
server<span style="color:#f92672">.</span><span style="color:#a6e22e">setHandler</span><span style="color:#f92672">(</span>webappContext<span style="color:#f92672">)</span><span style="color:#f92672">;</span>  
server<span style="color:#f92672">.</span><span style="color:#a6e22e">start</span><span style="color:#f92672">(</span><span style="color:#f92672">)</span><span style="color:#f92672">;</span>  
server<span style="color:#f92672">.</span><span style="color:#a6e22e">join</span><span style="color:#f92672">(</span><span style="color:#f92672">)</span><span style="color:#f92672">;</span>
</code></pre></div><p>После этого создать WEB-INF/root-servlet.xml:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-xml" data-lang="xml"><span style="color:#75715e">&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt;</span>  
<span style="color:#f92672">&lt;beans</span>  <span style="color:#a6e22e">xmlns=</span><span style="color:#e6db74">&#34;http://www.springframework.org/schema/beans&#34;</span>   
        <span style="color:#a6e22e">xmlns:xsi=</span><span style="color:#e6db74">&#34;http://www.w3.org/2001/XMLSchema-instance&#34;</span>   
        <span style="color:#a6e22e">xmlns:mvc=</span><span style="color:#e6db74">&#34;http://www.springframework.org/schema/mvc&#34;</span>  
        <span style="color:#a6e22e">xmlns:context=</span><span style="color:#e6db74">&#34;http://www.springframework.org/schema/context&#34;</span>  
       <span style="color:#a6e22e">xsi:schemaLocation=</span><span style="color:#e6db74">&#34;http://www.springframework.org/schema/beans   
</span><span style="color:#e6db74">                           http://www.springframework.org/schema/beans/spring-beans.xsd  
</span><span style="color:#e6db74">                           http://www.springframework.org/schema/context   
</span><span style="color:#e6db74">                           http://www.springframework.org/schema/context/spring-context.xsd  
</span><span style="color:#e6db74">                           http://www.springframework.org/schema/mvc  
</span><span style="color:#e6db74">                           http://www.springframework.org/schema/mvc/spring-mvc.xsd&#34;</span><span style="color:#f92672">&gt;</span>  
  
  
    <span style="color:#f92672">&lt;context:component-scan</span> <span style="color:#a6e22e">base-package=</span><span style="color:#e6db74">&#34;com.my.package&#34;</span> <span style="color:#f92672">/&gt;</span>  
    <span style="color:#f92672">&lt;mvc:annotation-driven</span> <span style="color:#f92672">/&gt;</span>  
  
<span style="color:#f92672">&lt;/beans&gt;</span> 
</code></pre></div>
</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Рефакторинг старых систем</title>
      <link>https://dernasherbrezon.com/posts/refactoring-legacy/</link>
      <pubDate>Mon, 11 May 2009 13:14:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/refactoring-legacy/</guid>
      <description>Навеяно http://www.amazon.com/Working-Effectively-Legacy-Robert-Martin/dp/0131177052
Мне достаточно часто приходилось работать с наследными системами. Поэтому выработал некоторые свои собственные интересные практики при работе с такими системами.
 Зачастую имена классов, методов и переменных не отражают сути. В таких случаях обычно переименовывают их. Однако в наследных системах такого делать не рекомендуется. Даже при использовании мощных инструментов в современных IDE. Это связано с тем что в конечном итоге подобные системы собираются своими скриптами сборки, зачастую такими же запутанными и очень confuse&#39;ными как и сам код.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Рефакторинг старых систем</h1></header>
      		<div class='container entry-content'>
  <p>Навеяно <a href="http://www.amazon.com/Working-Effectively-Legacy-Robert-Martin/dp/0131177052">http://www.amazon.com/Working-Effectively-Legacy-Robert-Martin/dp/0131177052</a></p>
<p>Мне достаточно часто приходилось работать с наследными системами. Поэтому выработал некоторые свои собственные интересные практики при работе с такими системами.</p>
<ol>
<li>Зачастую имена классов, методов и переменных не отражают сути. В таких случаях обычно переименовывают их. Однако в наследных системах такого делать не рекомендуется. Даже при использовании мощных инструментов в современных IDE. Это связано с тем что в конечном итоге подобные системы собираются своими скриптами сборки, зачастую такими же запутанными и очень confuse'ными как и сам код. Если используется maven, то задача сильно упрощается. По крайней мере можно посмотреть на зависимости и проанализировать зависимости между артефактами. Если же используется ant&hellip; Сочувствую. В одной из систем с которыми я работал, различные конечные артефакты собирались фильтрованием уже скомпилированных классов. Определить в какие артефакты попадёт ваш класс просто так не получится. Поэтому есть два варианта:
* Добавить комментарий.
* Более предпочтительный. Использовать @deprecated. Например смысл переменной price изменился. По всей системе она используется как amount. Как будет выглядеть рефакторинг:</li>
</ol>
<p>До</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Pojo</span> <span style="color:#f92672">{</span>  
    <span style="color:#66d9ef">private</span> Integer price<span style="color:#f92672">;</span>  
    <span style="color:#66d9ef">public</span> Integer <span style="color:#a6e22e">getPrice</span><span style="color:#f92672">(</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>  
         <span style="color:#66d9ef">return</span> price<span style="color:#f92672">;</span>  
    <span style="color:#f92672">}</span>  
    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">setPrice</span><span style="color:#f92672">(</span>Integer price<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>  
         <span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">price</span> <span style="color:#f92672">=</span> price<span style="color:#f92672">;</span>  
    <span style="color:#f92672">}</span>  
<span style="color:#f92672">}</span>
</code></pre></div><p>После:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Pojo</span> <span style="color:#f92672">{</span>  
    <span style="color:#66d9ef">private</span> Integer amount<span style="color:#f92672">;</span>  
    <span style="color:#75715e">/** 
</span><span style="color:#75715e">    * @deprecated use getAmount() 
</span><span style="color:#75715e">    **/</span>  
    <span style="color:#a6e22e">@deprecated</span>  
    <span style="color:#66d9ef">public</span> Integer <span style="color:#a6e22e">getPrice</span><span style="color:#f92672">(</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>  
         <span style="color:#66d9ef">return</span> amount<span style="color:#f92672">;</span>  
    <span style="color:#f92672">}</span>  
    <span style="color:#75715e">/** 
</span><span style="color:#75715e">    * @deprecated use setAmount(amount) 
</span><span style="color:#75715e">    **/</span>  
    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">setPrice</span><span style="color:#f92672">(</span>Integer amount<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>  
         <span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">amount</span> <span style="color:#f92672">=</span> amount<span style="color:#f92672">;</span>  
    <span style="color:#f92672">}</span>  
    <span style="color:#66d9ef">public</span> Integer <span style="color:#a6e22e">getAmount</span><span style="color:#f92672">(</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>  
         <span style="color:#66d9ef">return</span> amount<span style="color:#f92672">;</span>  
    <span style="color:#f92672">}</span>  
    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">setAmount</span><span style="color:#f92672">(</span>Integer amount<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>  
         <span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">amount</span> <span style="color:#f92672">=</span> amount<span style="color:#f92672">;</span>  
    <span style="color:#f92672">}</span>  
<span style="color:#f92672">}</span> 
</code></pre></div><ol start="2">
<li>Использование синглетона вида: Application.getInstance(). В общем случае использование синглетонов ведёт к спагетти коду. Например в двух совершенно разных системах я обнаружил не только наличие подобных синглетонов но их их использование вида.</li>
</ol>
<p>Использование:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Pojo</span> <span style="color:#f92672">{</span>  
	<span style="color:#66d9ef">private</span> Integer amount<span style="color:#f92672">;</span>  
	<span style="color:#66d9ef">public</span> Integer <span style="color:#a6e22e">getCalculatedAmount</span><span style="color:#f92672">(</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>  
         Integer someDiff <span style="color:#f92672">=</span> Application<span style="color:#f92672">.</span><span style="color:#a6e22e">getInstance</span><span style="color:#f92672">(</span><span style="color:#f92672">)</span><span style="color:#f92672">.</span><span style="color:#a6e22e">getDAO</span><span style="color:#f92672">(</span><span style="color:#f92672">)</span><span style="color:#f92672">.</span><span style="color:#a6e22e">queryDBByKey</span><span style="color:#f92672">(</span>amount<span style="color:#f92672">)</span><span style="color:#f92672">;</span>  
         <span style="color:#66d9ef">return</span> amount <span style="color:#f92672">-</span> someDiff<span style="color:#f92672">;</span>  
    <span style="color:#f92672">}</span>  
<span style="color:#f92672">}</span>
</code></pre></div><p>Разумеется поддерживать подобные вещи достаточно сложно. Зачастую эти синглетоны содержат соединения с базами данных, читают из файлов какую то информацию и делают прочие вещи. Единственным возможным эффективным образом работать с наследными системами - написание тестов перед внесением новой функциональности, для того чтобы проверить работоспособность системы после внесения изменений. С подобным использованием синглетонов модульные тесты практически невозможно написать. Однако опять же существует два способа:</p>
<ul>
<li>Писать интеграционные тесты с базами данных другими сервисами и пр. Но это неудобно если нужно протестировать небольшую часть системы.</li>
<li>Немного отрефакторить синглетон</li>
</ul>
<p>До</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Aplication</span> <span style="color:#f92672">{</span>  
     <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">static</span> Application instance<span style="color:#f92672">;</span>  
  
     <span style="color:#66d9ef">private</span> <span style="color:#a6e22e">Application</span><span style="color:#f92672">(</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>  
     <span style="color:#f92672">}</span>  
  
     <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">synchronized</span> Application <span style="color:#a6e22e">getInstace</span><span style="color:#f92672">(</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>  
           <span style="color:#66d9ef">if</span><span style="color:#f92672">(</span>instance <span style="color:#f92672">=</span><span style="color:#f92672">=</span> <span style="color:#66d9ef">null</span> <span style="color:#f92672">)</span> <span style="color:#f92672">{</span>  
                  instance <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> Application<span style="color:#f92672">(</span><span style="color:#f92672">)</span><span style="color:#f92672">;</span>  
           <span style="color:#f92672">}</span>  
           <span style="color:#66d9ef">return</span> instance<span style="color:#f92672">;</span>  
     <span style="color:#f92672">}</span>  
<span style="color:#f92672">}</span> 
</code></pre></div><p>После</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Aplication</span> <span style="color:#f92672">{</span>  
     <span style="color:#66d9ef">protected</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">final</span> String APPLICATION_CLASS_NAME <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;application&#34;</span><span style="color:#f92672">;</span>  
     <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">static</span> Application instance<span style="color:#f92672">;</span>  
  
     <span style="color:#66d9ef">private</span> <span style="color:#a6e22e">Application</span><span style="color:#f92672">(</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>  
     <span style="color:#f92672">}</span>  
  
     <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">synchronized</span> Application <span style="color:#a6e22e">getInstace</span><span style="color:#f92672">(</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>  
           <span style="color:#66d9ef">if</span><span style="color:#f92672">(</span>instance <span style="color:#f92672">=</span><span style="color:#f92672">=</span> <span style="color:#66d9ef">null</span> <span style="color:#f92672">)</span> <span style="color:#f92672">{</span>  
                  Class clazz <span style="color:#f92672">=</span> Class<span style="color:#f92672">.</span><span style="color:#a6e22e">forName</span><span style="color:#f92672">(</span>System<span style="color:#f92672">.</span><span style="color:#a6e22e">getProperty</span><span style="color:#f92672">(</span>APPLICATION_CLASS_NAME<span style="color:#f92672">)</span><span style="color:#f92672">)</span><span style="color:#f92672">;</span>  
                  instance <span style="color:#f92672">=</span> <span style="color:#f92672">(</span>Application<span style="color:#f92672">)</span>clazz<span style="color:#f92672">.</span><span style="color:#a6e22e">newInstance</span><span style="color:#f92672">(</span><span style="color:#f92672">)</span><span style="color:#f92672">;</span>  
           <span style="color:#f92672">}</span>  
           <span style="color:#66d9ef">return</span> instance<span style="color:#f92672">;</span>  
     <span style="color:#f92672">}</span>  
<span style="color:#f92672">}</span>  
<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">ApplicationMock</span> <span style="color:#66d9ef">extends</span> Application <span style="color:#f92672">{</span>  
  
     <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">configure</span><span style="color:#f92672">(</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>  
          System<span style="color:#f92672">.</span><span style="color:#a6e22e">setProperty</span><span style="color:#f92672">(</span>APPLICATION_CLASS_NAME<span style="color:#f92672">,</span>ApplicationMock<span style="color:#f92672">.</span><span style="color:#a6e22e">class</span><span style="color:#f92672">.</span><span style="color:#a6e22e">getName</span><span style="color:#f92672">(</span><span style="color:#f92672">)</span><span style="color:#f92672">)</span><span style="color:#f92672">;</span>  
     <span style="color:#f92672">}</span>  
  
<span style="color:#f92672">}</span>
</code></pre></div>
</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Glassfish Async JMS JCA</title>
      <link>https://dernasherbrezon.com/posts/glassfish-async-jms-jca/</link>
      <pubDate>Sat, 11 Apr 2009 13:14:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/glassfish-async-jms-jca/</guid>
      <description>Достаточно интересное и недокументированное поведение Glassfish v.2.0.
Если в потоке вызова endpointActivation(...) в реализации Resource Adapter&#39;a вызвать метод consumer.setMessageListener(...) то потоки асинхронного получения сообщения не создадутся. С чем это связано - неизвестно. Исходные коды не смотрел. Возможно с требованиями спецификации о создании потоков через WorkManager. Но разработчик не контролирует создания потоков в JMS клиенте!
Решение:
 Создать инициализацию message listener&#39;a в отдельном потоке через WorkManager.  </description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Glassfish Async JMS JCA</h1></header>
      		<div class='container entry-content'>
  <p>Достаточно интересное и недокументированное поведение Glassfish v.2.0.</p>
<p>Если в потоке вызова <code>endpointActivation(...)</code> в реализации Resource Adapter'a вызвать метод <code>consumer.setMessageListener(...)</code> то потоки асинхронного получения сообщения не создадутся. С чем это связано - неизвестно. Исходные коды не смотрел. Возможно с требованиями спецификации о создании потоков через WorkManager. Но разработчик не контролирует создания потоков в JMS клиенте!</p>
<p>Решение:</p>
<ul>
<li>Создать инициализацию message listener'a в отдельном потоке через WorkManager.</li>
</ul>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>IMQ Connection Concurrent Glassfish</title>
      <link>https://dernasherbrezon.com/posts/imq-connection-glassfish/</link>
      <pubDate>Sun, 11 Jan 2009 13:14:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/imq-connection-glassfish/</guid>
      <description>Наблюдается следующая проблема:
thread1:
javax.jms.Connection conn = connFactory.createConnection(); Work connectionHandler = new MyWorker(conn); WorkManager.scheduleWork(connectionHandler);  thread2 (MyWorker):
Session s = conn.createSession(...); Consumer c = s.createConsumer(someDestination); Message m = c.receive();  При receive JMSException и пишет что consumer closed. Однако если:
thread1:
Work connectionHandler = new MyWorker(connFactory); WorkManager.scheduleWork(connectionHandler);  thread2 (MyWorker):
javax.jms.Connection conn = connFactory.createConnection(); Session s = conn.createSession(...); Consumer c = s.createConsumer(someDestination); Message m = c.receive();  То всё работает. Happy holidays</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>IMQ Connection Concurrent Glassfish</h1></header>
      		<div class='container entry-content'>
  <p>Наблюдается следующая проблема:</p>
<p>thread1:</p>
<pre><code>javax.jms.Connection conn = connFactory.createConnection();  
Work connectionHandler = new MyWorker(conn);  
WorkManager.scheduleWork(connectionHandler); 
</code></pre>
<p>thread2 (MyWorker):</p>
<pre><code>Session s = conn.createSession(...);  
Consumer c = s.createConsumer(someDestination);  
Message m = c.receive(); 
</code></pre>
<p>При receive JMSException и пишет что consumer closed. Однако если:</p>
<p>thread1:</p>
<pre><code>Work connectionHandler = new MyWorker(connFactory);  
WorkManager.scheduleWork(connectionHandler);
</code></pre>
<p>thread2 (MyWorker):</p>
<pre><code>javax.jms.Connection conn = connFactory.createConnection();  
Session s = conn.createSession(...);  
Consumer c = s.createConsumer(someDestination);  
Message m = c.receive(); 
</code></pre>
<p>То всё работает. Happy holidays</p>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Интеграция Eclipse и Maven</title>
      <link>https://dernasherbrezon.com/posts/eclipse-maven/</link>
      <pubDate>Sat, 10 Jan 2009 13:14:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/eclipse-maven/</guid>
      <description>Maven в Eclipse - это очень удобно.
Однако при всех достоинствах каждого есть некоторые неудобства интеграции. Например следующий вариант: Есть проект. В нём есть основные исходные коды и для тестов. Соответственно они находятся в разных папках. Есть два builder&#39;а. Стандартный JDT и Maven Builder. Я не сильно вдавался в детали их работы, но в первом приближении они компилируют. JDT&#39;шный стандартно в output folder для Eclipse&#39;a, а maven&#39;овский я так понимаю выполняет target compile и помещает скомпилированные классы в target/classes &amp;amp; target/test-classes (по дефолту).</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Интеграция Eclipse и Maven</h1></header>
      		<div class='container entry-content'>
  <p>Maven в Eclipse - это очень удобно.</p>
<p>Однако при всех достоинствах каждого есть некоторые неудобства интеграции. Например следующий вариант:
Есть проект. В нём есть основные исходные коды и для тестов. Соответственно они находятся в разных папках. Есть два builder'а. Стандартный JDT и Maven Builder. Я не сильно вдавался в детали их работы, но в первом приближении они компилируют. JDT'шный стандартно в output folder для Eclipse'a, а maven'овский я так понимаю выполняет target compile и помещает скомпилированные классы в target/classes &amp; target/test-classes (по дефолту).</p>
<p>Вот тут то и возникает проблема. Вернее маленькое неудобство. Хочется выполнять тесты с помощью JUnit'a встроенного в Eclipse. Потому что удобно. Однако он как то странно съинтегрирован с maven'ом и похоже видит только классы скомпилированные JDT. Поэтому если нажать Run -&gt; JUnit Test то можно увидеть сообщение: NoClassDefFoundError: /my/test/Class</p>
<p>Решение проблемы два:</p>
<ol>
<li>Выполнять компиляцию тестов с помощью maven'а а затем выполнять запуск junit тестов. Но это же слишком неудобно? Каждый раз при изменении класса запускать компиляцию maven'ом, поэтому есть ещё один путь.</li>
<li>Написать нехитрые настройки.</li>
</ol>
<p>У каждого maven-проекта есть родительским pom. Поэтому в родительском pom'е нужно:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-xml" data-lang="xml"><span style="color:#f92672">&lt;build</span><span style="color:#f92672">&gt;</span>  
    <span style="color:#f92672">&lt;outputdirectory</span><span style="color:#f92672">&gt;</span>${output.dir}<span style="color:#f92672">&lt;/outputdirectory&gt;</span>  
    <span style="color:#f92672">&lt;testoutputdirectory</span><span style="color:#f92672">&gt;</span>${testoutput.dir}<span style="color:#f92672">&lt;/testoutputdirectory&gt;</span>  
    ...  
<span style="color:#f92672">&lt;/build&gt;</span>  
  
<span style="color:#f92672">&lt;properties</span><span style="color:#f92672">&gt;</span>  
    <span style="color:#f92672">&lt;output.dir</span><span style="color:#f92672">&gt;</span>${basedir}/target/classes<span style="color:#f92672">&lt;/output.dir&gt;</span>  
    <span style="color:#f92672">&lt;testoutput.dir</span><span style="color:#f92672">&gt;</span>${basedir}/target/test-classes<span style="color:#f92672">&lt;/testoutput.dir&gt;</span>  
<span style="color:#f92672">&lt;/properties&gt;</span>  
   
<span style="color:#f92672">&lt;profiles</span><span style="color:#f92672">&gt;</span>  
    <span style="color:#f92672">&lt;profile</span><span style="color:#f92672">&gt;</span>  
        <span style="color:#f92672">&lt;id</span><span style="color:#f92672">&gt;</span>eclipse-folders<span style="color:#f92672">&lt;/id&gt;</span>  
        <span style="color:#f92672">&lt;properties</span><span style="color:#f92672">&gt;</span>  
            <span style="color:#f92672">&lt;output.dir</span><span style="color:#f92672">&gt;</span>${basedir}/target/eclipse<span style="color:#f92672">&lt;/output.dir&gt;</span>  
            <span style="color:#f92672">&lt;testoutput.dir</span><span style="color:#f92672">&gt;</span>${basedir}/target/eclipse<span style="color:#f92672">&lt;/testoutput.dir&gt;</span>  
        <span style="color:#f92672">&lt;/properties&gt;</span>  
    <span style="color:#f92672">&lt;/profile&gt;</span>  
<span style="color:#f92672">&lt;/profiles&gt;</span>
</code></pre></div><p>В настройках проекта:</p>
<ul>
<li>Maven -&gt; Active Maven Profiles написать &ldquo;eclipse-folders&rdquo;</li>
<li>Java build Path -&gt; Default Output Folder написать &ldquo;target/eclipse&rdquo; и в настройках папок ресурсов (типа &ldquo;/src/test/resources&rdquo;) удалить Excluded чтобы ресурсы подцеплялись при запуске тестов (например log4j.properties)</li>
</ul>
<p>Я ещё отключил Maven Builder. Но думаю это необязательно.</p>

</div>

      	]]>
      </turbo:content>
    </item>
    
  </channel>
</rss>