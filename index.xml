<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>dernasherbrezon</title>
    <link>https://dernasherbrezon.com/</link>
    <description>Recent content on dernasherbrezon</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 24 Sep 2013 13:14:18 +0100</lastBuildDate>
    
	<atom:link href="https://dernasherbrezon.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Об авторе</title>
      <link>https://dernasherbrezon.com/%D0%BE%D0%B1-%D0%B0%D0%B2%D1%82%D0%BE%D1%80%D0%B5/</link>
      <pubDate>Tue, 24 Sep 2013 13:14:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/%D0%BE%D0%B1-%D0%B0%D0%B2%D1%82%D0%BE%D1%80%D0%B5/</guid>
      <description>Меня зовут Андрей. Я занимаюсь профессиональной разработкой программного обеспечения с 2002 года. В этом блоге я пишу о разных технических штуках.
Вы можете поддержать меня здесь.</description>
    </item>
    
    <item>
      <title>Поддержать</title>
      <link>https://dernasherbrezon.com/%D0%BF%D0%BE%D0%B4%D0%B4%D0%B5%D1%80%D0%B6%D0%B0%D1%82%D1%8C/</link>
      <pubDate>Tue, 24 Sep 2013 13:14:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/%D0%BF%D0%BE%D0%B4%D0%B4%D0%B5%D1%80%D0%B6%D0%B0%D1%82%D1%8C/</guid>
      <description>Я посвящаю большую часть своего свободного времени на различные исследования технологий и поддержку нескольких open source проектов. Мне просто нравится этим заниматься.
Правда иногда приходится покупать различные лицензии или железо для исследований, а также оплачивать хостинг хобби проектов.
Если Вы хотите поддержать меня, то это вполне возможно, используя ссылку ниже. Я совсем непротив и других способов поддержки, просто напишите мне на почту (она внизу сайта).
Become a Patron!
Или
 </description>
    </item>
    
    <item>
      <title>Тестирование maven плагинов</title>
      <link>https://dernasherbrezon.com/posts/testing-maven-plugins/</link>
      <pubDate>Fri, 15 Nov 2019 19:49:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/testing-maven-plugins/</guid>
      <description>Часть моей хобби инфраструктуры завязана на .deb пакеты и apt репозитории. Чтобы со всем этим работать из java, я написал несколько maven плагинов и выложил в открытый доступ. Один из этих плагинов - deb-maven-plugin. Он позволяет собирать из java проекта .deb пакет. Этот формат пакетов имеет достаточно сложную структуру и большое историческое наследие. Я очень тщательно разобрался с тем, как собирать такой пакет для java проектов и создал плагин, который сильно облегчает сборку.</description>
    </item>
    
    <item>
      <title>В поисках хорошего кода</title>
      <link>https://dernasherbrezon.com/posts/code-smells/</link>
      <pubDate>Thu, 14 Nov 2019 18:22:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/code-smells/</guid>
      <description>В январе 2019 года я поставил себе задачу добавить поддержку спутников из gr-satellites в свой проект r2cloud. На тот момент их было около 70. Это достаточно большое количество, добавление которых, по моим оценкам, может занять до конца года. Однако, как показал опыт, я справился где-то за месяц. Некоторые спутники уже сгорели в атмосфере, поэтому их нет смысла добавлять. Некоторые спутники не предоставляют формат своей телеметрии, поэтому полученные биты данных, так и остаются битами данных.</description>
    </item>
    
    <item>
      <title>Я слежу за спутниками</title>
      <link>https://dernasherbrezon.com/posts/satellite-telemetry/</link>
      <pubDate>Thu, 24 Oct 2019 21:40:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/satellite-telemetry/</guid>
      <description>Вступление Иногда в разговоре с разными людьми речь заходит о моём хобби. В таком случае я говорю, что слежу за спутниками. Для большинства это объяснение не слишком-то информативно, поэтому оно идеально подходит для того, чтобы продолжить разговор и одновременно возбудить любопытство. Однако, не все могут лично со мной пообщаться, поэтому в этом посте я хотел бы рассказать о том, что такое - следить за спутниками.
Телеметрия Первое, что приходит людям на ум, когда говоришь &amp;ldquo;следить за спутниками&amp;rdquo; - это шпионские страсти.</description>
    </item>
    
    <item>
      <title>Синхронизация кадров в Метеор-М №2</title>
      <link>https://dernasherbrezon.com/posts/meteor-mn2-frame-synchronization/</link>
      <pubDate>Fri, 13 Sep 2019 22:30:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/meteor-mn2-frame-synchronization/</guid>
      <description>Введение Спутник Метеор-М №2 передаёт информацию согласно протоколу LRPT. Этот протокол определяет физический, канальный и сетевой уровни модели OSI. На физическом уровне используется QPSK модуляция. На канальном уровне LRPT подразумевает использование кадров фиксированного размера с интерливингом и несколькими методами коррекции ошибок. Однако, на практике Метеор-М №2 не использует часть алгоритмов из стандарта. В этой статье я хотел бы описать как необходимо синхронизировать и получать кадры Метеор-М №2.
Генерация кадров Прежде, чем делать получение кадров, необходимо понять как они создаются на спутнике.</description>
    </item>
    
    <item>
      <title>Логирование из Java в Journald</title>
      <link>https://dernasherbrezon.com/posts/journald-java/</link>
      <pubDate>Tue, 03 Sep 2019 21:22:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/journald-java/</guid>
      <description>Недавно обнаружил одну интересную особенность journald, которую сразу же решил использовать в r2cloud.
Для начала немного о том, как вообще работает логирование. Большинство Linux дистрибутивов перешли на systemd. Эта система имеет множество различных фич, в том числе поддержку логирования - journald. Чем же это логирование лучше syslog:
 Структурированные логи. Каждая запись в логе имеет некоторую мета информацию. Например, уровень (INFO, DEBUG, ERROR), дату, сообщение и пр. В syslog же, запись в логе это строка текста, которую нужно правильно парсить.</description>
    </item>
    
    <item>
      <title>История одной картинки</title>
      <link>https://dernasherbrezon.com/posts/decoding-meteor-m/</link>
      <pubDate>Mon, 26 Aug 2019 08:31:17 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/decoding-meteor-m/</guid>
      <description>Введение В ноябре 2018 года команда конференции JPoint объявила о конкурсе докладов для будущей конференции. Я очень воодушевился и решил подать свою заявку. В своём докладе я хотел рассказать о том, как я декодировал сигнал со спутника Meteor-M 2. В декабре мне позвонили организаторы и мы немножко поговорили про меня и мой доклад. Он им показался интересным и они попросили меня набросать презентацию и текст.
На январских праздниках я засел за презентацию и сделал, как мне кажется, неплохой доклад.</description>
    </item>
    
    <item>
      <title>Декодирование телеметрии Aistechsat-3</title>
      <link>https://dernasherbrezon.com/posts/aistechsat-3/</link>
      <pubDate>Wed, 21 Aug 2019 14:40:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/aistechsat-3/</guid>
      <description>Вступление Наступило лето, а это значит начался отпускной сезон. Самое время немного расслабиться и добавить декодирование телеметрии для новых спутников. С января Daniel добавил десяток новых спутников. Я начал с Aistechsat-3.
Декодирование Как и в других случаях я взял готовый демодулятор и реализовал его на Java. Daniel написал, что формат телеметрии задокументирован, но он не успел задекодировать телеметрию.
Казалось бы, что может пойти не так? Документация есть, данные есть. Надо просто написать код.</description>
    </item>
    
    <item>
      <title>Расчёт вероятности ошибки для BPSK демодулятора</title>
      <link>https://dernasherbrezon.com/posts/jradio-ber-bpsk/</link>
      <pubDate>Fri, 16 Aug 2019 10:22:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/jradio-ber-bpsk/</guid>
      <description>Введение Спустя несколько недель я наконец-то закончил одну очень важную задачу - расчёт вероятности ошибки в BSPK демодуляторе. Почему это важно? Демодулятор работает с сигналом, который проходит через физическую среду. В этой среде возможны сильные или слабые возмущения, которые непосредственно влияют на сигнал. И принимаемый сигнал может меняться со временем от хорошего до плохого и обратно. Из-за этого нельзя однозначно сказать демодулятор &amp;ldquo;работает&amp;rdquo; или &amp;ldquo;не работает&amp;rdquo;. Чтобы оценить его эффективность, необходимо симулировать среду передачи данных и сказать сколько ошибок он выдаёт при разных возмущениях среды.</description>
    </item>
    
    <item>
      <title>Тестирование SDR Filter v1.1</title>
      <link>https://dernasherbrezon.com/posts/test-sdr-filter/</link>
      <pubDate>Thu, 08 Aug 2019 19:20:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/test-sdr-filter/</guid>
      <description>Одна из моих базовых станций принимает очень много помех. Из-за низкой чувствительности rtl-sdr, полезный сигнал почти нельзя получить. У меня возникла идея о том, что часть помех может приходить от USB разъёма RPi. Чтобы проверить эту идею, я недавно приобрёл SDR Filter v1.1 от компании ExpElectroLab и решил сделать на него небольшое видео ревью.
  Процесс тестирования Самое интересное началось сразу же после распаковки устройства. Дело в том, что входящий USB порт формата Type B.</description>
    </item>
    
    <item>
      <title>Тестирование FM фильтров с помощью RTL-SDR</title>
      <link>https://dernasherbrezon.com/posts/test-fm-filter/</link>
      <pubDate>Sun, 14 Jul 2019 14:20:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/test-fm-filter/</guid>
      <description>TL;TR; Фильтры тестировать можно, но выводы нужно делать аккуратно.
Постановка задачи Архитектура rtl sdr требует специального фильтра на входе. Поскольку сильнешими источниками сигнала являются фм станции, то я решил поставить фм фильтры на входе приёмника. Но прежде, чем устанавливать их, мне хотелось измерить частотные характеристики фильтров и пощупать их в деле. Для этого я купил несколько фм фильтров и собрал стэнд для их тестирования.
Описание стэнда Тестирование заключается в том, что генератор сигнала создаёт широкополосный шум по всей ширине спектра.</description>
    </item>
    
    <item>
      <title>Работа с bash pipe из java</title>
      <link>https://dernasherbrezon.com/posts/bash-pipe-in-java/</link>
      <pubDate>Tue, 09 Jul 2019 20:50:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/bash-pipe-in-java/</guid>
      <description>Постановка задачи Не так давно передо мной встала задача работать с нативным приложением из java. Это приложение - rtl_sdr. Суть его работы достаточно простая: оно подключается к USB, читает данные и пишет их в файл или в stdout.
А дальше Обычно нативные приложения не рекомендуется запускать из JVM. Дело в том, что как только управление передаётся из JVM вовне, то все предоставленные гарантии JVM теряются. Но если хочется, то вызвать приложение можно так:</description>
    </item>
    
    <item>
      <title>Динамический диапазон rtl-sdr</title>
      <link>https://dernasherbrezon.com/posts/dynamic-range/</link>
      <pubDate>Sun, 30 Jun 2019 22:22:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/dynamic-range/</guid>
      <description>Ниже я сделал перевод одной замечательной заметки Mile Kokotov о динамическом диапазоне rtl-sdr. Это очень важный показатель, которым я заинтересовался и решил разобраться. Возможно кому-нибудь это тоже будет полезно.
 Большинство людей думает, что наиболее важной характеристикой радиоприёмника является чувствительность, но это не совсем так. Вообще, спроектировать и произвести приёмник с высокой чувствительностью не проблема. Гораздо сложнее для инженеров спроектировать приёмник с большим динамическим диапазоном, который смог бы принимать как очень слабые сигналы, так и очень сильные одновременно.</description>
    </item>
    
    <item>
      <title>Расчёт SQNR</title>
      <link>https://dernasherbrezon.com/posts/sqnr/</link>
      <pubDate>Thu, 27 Jun 2019 21:22:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/sqnr/</guid>
      <description>Введение Если открыть спецификацию на любой rtl-sdr приемник, то можно увидеть следующую характеристику: АЦП - 8 бит. Почему эта характеристика важна? Почему о ней пишут и что она значит? Я решил разобраться и провёл небольшое расследование.
SQNR АЦП преоразует сигнал из аналогового вида в цифровой. Это преобразование по своей сути всегда неточное. Дело в том, что аналоговый сигнал непрерывный, а цифровой - набор отсчетов. Процесс преобразования сигнала называется квантированием. При этом часть информации теряется, а значит, в терминах обработки сигнала появляется шум.</description>
    </item>
    
    <item>
      <title>JavaFX в 2019</title>
      <link>https://dernasherbrezon.com/posts/javafx-in-2019/</link>
      <pubDate>Sun, 16 Jun 2019 10:20:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/javafx-in-2019/</guid>
      <description>Зачем? Зачем вообще кому-то писать толстый клиент в 2019 году? Web и atom уже победили. Можно поставить браузер или еще 8Гб оперативной памяти и получить переливающееся приложение. К сожалению, не все задачи можно решать через web. Для измерения АЧХ фильтров, мне необходимо было достаточно простое приложение:
 запуск rtl_power и вывод результатов в виде графика чтение .csv файла и вывод в виде графика график должен реагировать на мышь и показывать текущее значение по X и Y  Понятно, что для такого простого приложения использовать web + web server или atom - это слишком.</description>
    </item>
    
    <item>
      <title>Время в Raspberrypi</title>
      <link>https://dernasherbrezon.com/posts/time-raspberrypi/</link>
      <pubDate>Sat, 08 Jun 2019 14:22:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/time-raspberrypi/</guid>
      <description>Разобраться со временем в Raspberrypi (RPi) меня сподвиг один достаточно неприятный баг. В какой то момент моя базовая станция r2cloud просто переставала отправлять данные на сервер. В логах приложения при этом появляется следующая ошибка:
Jun 07 09:17:51 raspberrypi java[472]: java.lang.IllegalArgumentException: Bad sample time: 1559899071. Last update time was 1559902330, at least one second step is required Jun 07 09:17:51 raspberrypi java[472]: at com.aerse.core.RrdDb.store(RrdDb.java:799) Jun 07 09:17:51 raspberrypi java[472]: at com.</description>
    </item>
    
    <item>
      <title>Расчёт мощности радиосигнала</title>
      <link>https://dernasherbrezon.com/posts/power-in-radio-channel/</link>
      <pubDate>Wed, 29 May 2019 07:48:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/power-in-radio-channel/</guid>
      <description>Нашёл в Интернете совершенно потрясающую визуализацию изменения мощности при передаче радио сигнала:

Это картинка описывает как изменяется мощность от передатчика к приёмнику. Формула следующая:
$$ P_r = P_t - L_{tc} + G_{ta} - L_{all} + G_{ra} - L_{rc} $$
Где,
 \( P_r \) - результирующая мощность полученного сигнала \( P_t \) - мощность передачи сигнала \(L_{tc}\) - потери в кабеле при передаче сигнала от передатчика на его антенну \(G_{ta}\) - усиление антенны \(L_{all}\) - потери в среде \(G_{ra}\) - усиление принимающей антенны \(L_{rc}\) - потери в кабеле приёмника  Большинство параметров достаточно очевидны, но собранные все вместе они дают хорошую картину изменения мощности.</description>
    </item>
    
    <item>
      <title>Расчёт вероятности ошибки для BPSK</title>
      <link>https://dernasherbrezon.com/posts/ber-bpsk/</link>
      <pubDate>Sun, 05 May 2019 18:22:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/ber-bpsk/</guid>
      <description>Введение Моя сеть приёма сигналов со спутников r2cloud постепенно растёт. Однако уровень приёма оставляет желать лучшего. Несмотря на то, что на спектограмме виден сигнал, демодулятор не может восстановить его. В попытках найти проблему, я понял, что мне не хватает фундаментальных знаний по теории обработки сигналов и некоторой математики. Дело в том, что в интернете зачастую выкладываются демодуляторы без обоснования их работы. Меня это не устраивает, потому что нужны метрики по которым я буду понимать насколько один алгоритм эффективнее другого.</description>
    </item>
    
    <item>
      <title>Подписанные ссылки</title>
      <link>https://dernasherbrezon.com/posts/signed-urls/</link>
      <pubDate>Wed, 01 May 2019 18:22:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/signed-urls/</guid>
      <description>Почти все REST сервисы имеют аутентификацию. Есть несколько способов её сделать:
 basic. В каждый запрос добавляется заголовок &amp;ldquo;Authorization&amp;rdquo; с логином и паролем.  GET / HTTP/1.1 Host: example.org Authorization: Basic Zm9vOmJhcg==   token. REST сервис обменивает логин и пароль на специальный токен аутентификации. Клиент должен все последующие запросы делать с этим токеном.  GET / HTTP/1.1 Host: example.org Authorization: Bearer 9yro9yueihfw497y33497y3oeiruhfvskdgjhfaowidayuh  Аутентификация на основе токенов наиболее безопасная и гибкая.</description>
    </item>
    
    <item>
      <title>Тестирование ошибок файловой системы</title>
      <link>https://dernasherbrezon.com/posts/test-fs-failures/</link>
      <pubDate>Sat, 20 Apr 2019 21:50:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/test-fs-failures/</guid>
      <description>Большинство статей в моём блоге посвящены интересным вещам, с которыми я периодически сталкиваюсь. Эта статья не исключение. В одном из моих проектов - r2cloud я столкнулся с одной интересной ошибкой.
Вот, что мне удалось восстановить глядя на логи и исходный код:
 Диск полностью заполнился В какой-то момент времени обновилась конфигурация. Например, обновилось текущее значение PPM При попытке записать в файл, происходит ошибка IOException &amp;ldquo;no disk space&amp;rdquo; Файл пользовательских настроек полностью портится.</description>
    </item>
    
    <item>
      <title>Сжимание I/Q потока на raspberrypi</title>
      <link>https://dernasherbrezon.com/posts/rtlsdr-gzip/</link>
      <pubDate>Mon, 04 Mar 2019 17:22:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/rtlsdr-gzip/</guid>
      <description>Недавно я добавил поддержку более 20 спутников в r2cloud. Из-за этого принимаемых данных стало значительно больше и диск переполнился. Чтобы как-то решить эту проблему, я уменьшил количество сохраняемых наблюдений. Теперь сохраняются последние 3 наблюдения для каждого спутника. Это не сильно помогло:
Дело в том, что при пролёте спутника, я сохраняю данные в raw I/Q с частотой пример 240 000 сэмплов в секунду. Это создаёт файл:
240 000 байт/сек * 2 (канала) * 12 минут = 288000000 байт = ~288мб Почему такая большая частота?</description>
    </item>
    
    <item>
      <title>Производительность rtl_sdr на raspberrypi</title>
      <link>https://dernasherbrezon.com/posts/rtlsdr-perf/</link>
      <pubDate>Sat, 02 Mar 2019 18:22:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/rtlsdr-perf/</guid>
      <description>Очень часто в сети можно встретить гиды по быстрой сборке на коленке анализатора радио с помощью rtl_sdr и raspberrypi. Большинство таких гидов ограничивается достаточно простым описанием: &amp;ldquo;возьмите одно вставьте другое, потом немного питоновских скриптов и у вас всё получится&amp;rdquo;. Для новичков и просто любителей DIY - это прекрасный подход. Можно достаточно быстро познакомится с технологией и увидеть результат. Но что делать если нужно собрать что-то более продвинутое? Что если важна производительность?</description>
    </item>
    
    <item>
      <title>Тестирование JSP тэгов</title>
      <link>https://dernasherbrezon.com/posts/jsp-tag-testing/</link>
      <pubDate>Sat, 02 Mar 2019 12:48:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/jsp-tag-testing/</guid>
      <description>Недавно для себя открыл совершенно бесплатный для open source проектов sonarcloud. Я верю, что статичный анализ кода - это очень полезная штука, поэтому сразу же решил перевести свои наиболее популярные проекты туда.
Среди них был достаточно маленький проект jtimeago. Это небольшая библиотека jsp тэгов для вывода дат.
После добавления проекта через travis, я увидел, что jtimeago полностью зеленый.
Если зайти на страницу проекта в sonarcloud, то видно что все показатели хорошие за исключением нескольких мелких code smells.</description>
    </item>
    
    <item>
      <title>Приватный репозиторий в Ubuntu</title>
      <link>https://dernasherbrezon.com/posts/ubuntu-private-repo/</link>
      <pubDate>Thu, 07 Jun 2018 10:07:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/ubuntu-private-repo/</guid>
      <description>В Ubuntu репозитории – это специальные сервера-хранилища для приложений. Если Вы разрабатываете коммерческое приложение и запускаете его в Ubuntu, то логично положить его в репозиторий. А потом управлять этим приложением так же, как и обычными системными приложениями. Для этого нужно поднять в локальной сети или облаке apache, настроить логин и пароль, не забывать его обновлять&amp;hellip;Но что если есть другой способ?
Облачные хранилища С помощью apt-transport-s3 можно превратить bucket в приватный apt репозиторий.</description>
    </item>
    
    <item>
      <title>DSP на Java</title>
      <link>https://dernasherbrezon.com/posts/dsp-java/</link>
      <pubDate>Thu, 08 Mar 2018 17:22:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/dsp-java/</guid>
      <description>Java - язык программирования общего назначения. Общего назначения - значит можно писать почти любые программы. Вот я и попытался написать программу, которую обычно пишут на С или C++. Под катом я попытаюсь рассказать, как я декодировал спутниковые снимки с Метеор-М №2.
Предисловие Когда я впервые заинтересовался декодированием спутниковых сигналов, то был, прямо говоря, удивлён. Сейчас софт для декодирования сигналов выглядит так же, как и библиотеки общего назначения лет 20 назад.</description>
    </item>
    
    <item>
      <title>Тестирование debian пакетов в Travis-CI</title>
      <link>https://dernasherbrezon.com/posts/test-deb-travis/</link>
      <pubDate>Sat, 04 Nov 2017 13:51:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/test-deb-travis/</guid>
      <description>Возникла передо мной такая задача: тестирование debian пакета. И требования:
 пакет устанавливает и стартует systemd сервис. используются native armhf библиотеки  Тестирование должно включать в себя:
 установка пакета на чистую систему: проверка наличия зависимостей запуск: проверка зависимостей в рантайме тестирование запущенного приложения: проверка prod конфигурации  Введение Как обычно, первым делом необходимо оглядеться по сторонам и поискать уже существующие решения и подходы. Системе Debian уже 20+ лет и я не должен быть первым, кому пришло в голову тестирование пакетов.</description>
    </item>
    
    <item>
      <title>Управление сертификатами с помощью протокола ACME</title>
      <link>https://dernasherbrezon.com/posts/java-acme/</link>
      <pubDate>Sun, 10 Sep 2017 16:45:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/java-acme/</guid>
      <description>Возникла передо мной такая задача: автоматический выпуск сертификатов для Web приложения. И требования: - CA должны доверять все браузеры т.е. самоподписанные сертификаты не подходят; - желательно бесплатно; - Выпуск надо делать программно с помощью Java Embedded compact1 profile. Это всё по следам Java и без 16Gb памяти?.
Наверное многие уже слышали про бесплатные сертификаты от LetsEncrypt и certbot. А можно ли certbot заменить Java?
ACME Многие, конечно, любят LetsEncrypt за бесплатные сертификаты, которые, фактически, позволят перевести весь вэб на https.</description>
    </item>
    
    <item>
      <title>Мониторинг Raspberry PI</title>
      <link>https://dernasherbrezon.com/posts/raspberrypi-monitoring/</link>
      <pubDate>Mon, 31 Jul 2017 12:45:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/raspberrypi-monitoring/</guid>
      <description>Возникла передо мной такая задача: сделать мониторинг Raspberry PI. И требования:
 самодостаточность. Возможность показывать статус и исторические данные без доступа в интернет; работа в Java Embedded compact1 profile. Это всё по следам Java и без 16Gb памяти?.  Анализ требований Здесь и далее под мониторингом системы я буду понимать сбор time series данных. Например, JVM heap size или количество обработанных сообщений за интервал.
Самодостаточность автоматически означает, что данные надо хранить локально.</description>
    </item>
    
    <item>
      <title>Java и без 16Gb памяти?</title>
      <link>https://dernasherbrezon.com/posts/java-small-heap/</link>
      <pubDate>Sun, 16 Jul 2017 15:11:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/java-small-heap/</guid>
      <description>Однажды меня посетила мысль о том, что надо закодить что-нибудь на Java для RaspberryPI. Предыстория того, как я дошёл до жизни такой, сама по себе потянет на отдельный пост. Но вот сочные технические подробности, трудности и счастливый конец ниже под катом.
Постановка задачи Немного разочаровавшись в движении проекта satnogs, я решил попробовать сам написать базовую станцию для приёма радио сигналов на raspberry pi. Проанализировав текущую функциональность satnogs и сложив с собственным заскорузлым enterprise пониманием того, что такое стабильная платформа, я придумал следующие требования:</description>
    </item>
    
    <item>
      <title>Enterprise Java на страже космоса</title>
      <link>https://dernasherbrezon.com/posts/enterprise-java-space/</link>
      <pubDate>Sat, 08 Apr 2017 12:48:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/enterprise-java-space/</guid>
      <description>Научно технический прогресс постепенный по своей природе. Никто не берет горсть песка с пляжа и делает из нее компьютер. Мы берем грубые инструменты и создаем с помощью них более качественные. Затем с помощью последних еще более точные и так далее. Каждое малое усовершенствование - это ступенька прогресса и все они должны быть пройдены.
Председатель Шенчжи Ян.
 В сознании каждого человека есть одна простая мысль: космические технологии - это сложно.</description>
    </item>
    
    <item>
      <title>Дистрибьюция Java приложений</title>
      <link>https://dernasherbrezon.com/posts/java-dist/</link>
      <pubDate>Tue, 18 Aug 2015 13:55:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/java-dist/</guid>
      <description>Удивительно, но факт - дистрибьюция Java приложений в 21 веке по прежнему огромный костыль. Разработчики до сих пор придумывают способы вроде rsync/copy-paste/wget для установки java приложений на сервер. И только монструозные enterprise production ready платформы иногда позволяют сделать чуть больше - откатить приложение на предыдущую версию. В этой статье я хотел бы рассказать о доступном и простом способе организации дистрибьюции.
deb и apt В мире существует множество действительно гигантских репозиториев приложений и инструментов по их дистрибьюции.</description>
    </item>
    
    <item>
      <title>Спецификация конструкции CubeSat</title>
      <link>https://dernasherbrezon.com/posts/cubespec/</link>
      <pubDate>Tue, 24 Sep 2013 13:14:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/cubespec/</guid>
      <description>1. Введение. CubeSat (Cube Satellite - кубический спутник, КубСат) - это малые спутники (пикоспутники) модульной кубической формы. Самый маленький имеет длину ребра 10 см и массу до 1.33кг. Более крупные спутники имеют форму и массу, кратные 1.5x, 2x, 3x одиночных модулей, состыкованным друг с другом по одной линии.
1.1 История создания Проект CubeSat был начат в 1999 году совместными усилиями профессора Джорди Пьюг-Суари (Prof. Jordi Puig-Suari) из Калифорнийского Политехнического Университета (California Polytechnic State University), Сан Луис Обиспо (San Luis Obispo), профессором Бобом Твиггсом (Prof.</description>
    </item>
    
    <item>
      <title>Оптимизация web приложения с помощью YourKit и JMeter</title>
      <link>https://dernasherbrezon.com/posts/webapp-perf/</link>
      <pubDate>Fri, 28 Dec 2012 14:58:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/webapp-perf/</guid>
      <description>Постановка задачи  web server - Jetty. Запускается в embedded режиме с помощью spring. Общая настройка очень похожа на http://wiki.eclipse.org/Jetty/Howto/Spring IoC - spring 3.0.5 Servlet - собственный сервлет для роутинга запросов к обработчикам. Mysql 5.5, jdbc driver 5.1.21 view - JSP + JSTL YourKit 11 JMeter 2.8  Приложение:
 две страницы требующие локализации. первая - статичная страница (главная). Собирается из разных кусочков jsp вторая - динамичная. Отображает некоторую сущность.</description>
    </item>
    
    <item>
      <title>Log4j DOMConfigurator</title>
      <link>https://dernasherbrezon.com/posts/dom4jconfigurator/</link>
      <pubDate>Thu, 11 Oct 2012 15:14:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/dom4jconfigurator/</guid>
      <description>DOMConfigurator не поддерживает подстановку свойств при реконфигурации. Будьте бдительны!
Use case:
 Конфигурация по умолчанию с использованием log4j.configuration параметра Получение свойств и проставление через System.setProperty() DOMConfigurator.configure(System.getProperty(&amp;quot;log4j.configuration&amp;quot;))  </description>
    </item>
    
    <item>
      <title>Производительность функции split</title>
      <link>https://dernasherbrezon.com/posts/splitperf/</link>
      <pubDate>Sat, 11 Aug 2012 15:14:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/splitperf/</guid>
      <description>В одном из проектов в очередной раз пришлось писать собственную реализацию split строки, в связи с этим заинтересовался о производительности различных решений.
Для тестирования выбраны следующие кандидаты:
 JDK Guava Apache commons-lang Custom   Проводилось тестирование следующих параметров в различных комбинациях: короткая строка большое количество итераций, длинная строка малое количество итераций.
Поскольку Guava поддерживает lazy вычисление, то была добавлена ещё одна комбинация: отложенная итерация по результатам и непосредственная итерация.</description>
    </item>
    
    <item>
      <title>Сборка пакета с помощью debconf</title>
      <link>https://dernasherbrezon.com/posts/debconf/</link>
      <pubDate>Sat, 11 Aug 2012 13:14:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/debconf/</guid>
      <description>Недавно столкнулся с задачей создания .deb пакета. Поскольку информация в сети разбросана и само описание команд debhelper несколько сумбурно, ниже привожу список действий помогающих собрать архив с нуля:
Создание исходников.
#: mkdir package-1.0 #: echo &amp;quot;Sample file in package&amp;quot; &amp;gt; package-1.0/file  Создание специального архива с исходниками
#: tar czf package-1.0.tar.gz package-1.0/ #: dh_make -c apache -f ../package-1.0.tar.gz  Редактирование параметров пакета.
#: nano debian/control  Создание конфигураций:
#: nano debain/package.</description>
    </item>
    
    <item>
      <title>Выбор быстрого алгоритма поиска подстроки</title>
      <link>https://dernasherbrezon.com/posts/substring/</link>
      <pubDate>Mon, 11 Jun 2012 13:14:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/substring/</guid>
      <description>Есть такая задача: отфильтровать строки в множестве файлов. Вариантов решения я вижу несколько:
 ReplaceAll. String.replaceAll(&amp;ldquo;pattern&amp;rdquo;,&amp;ldquo;$1&amp;rdquo; + 1); Pattern. Pattern p = Pattern.compile(&amp;ldquo;pattern&amp;rdquo;); and etc. Ручной способ через indexOf и substring   Первый способ можно сразу отбросить так как он медленный: на каждый файл будет компилироваться pattern. На следующих двух можно остановиться поподробнее.
У меня было чувство что ручной способ всегда быстрее, хоть и немного дольше в реализации. Я написал небольшой тест, чтобы проверить насколько быстрее.</description>
    </item>
    
    <item>
      <title>Производительность Hibernate Validator</title>
      <link>https://dernasherbrezon.com/posts/hibernate-perf/</link>
      <pubDate>Wed, 11 Apr 2012 13:14:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/hibernate-perf/</guid>
      <description>Недавно столкнулся с библиотекой Hibernate Validator и jsr 303 в частности. Ниже привожу небольшой микро-бенчмарк тестирования производительности. Тестовый POJO:
public class BusinessObject { @NotBlank private String name; @CustomNotNull(groups = { APIValidationGroup.class }) private String uuid; public String getName() { return name; } public void setName(String name) { this.name = name; } public String getUuid() { return uuid; } public void setUuid(String uuid) { this.uuid = uuid; } }  Для чистоты эксперимента и приближения к реальному сценарию я сделал кастомную валидацию, которая просто проверяет на null:</description>
    </item>
    
    <item>
      <title>Оптимизация spring jmx</title>
      <link>https://dernasherbrezon.com/posts/spring-jmx-tuning/</link>
      <pubDate>Sun, 11 Dec 2011 13:14:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/spring-jmx-tuning/</guid>
      <description>Spring по умолчанию позволяет настроить экспорт бинов в jmx. Сделано это через удобные аннотации @ManagedResource. Однако существует сценарий при котором поведение по умолчанию не совсем подходит. Рассмотрим этот случай:
 spring context лениво инициализируется. Очень удобно если есть некоторый db-context.xml в котором описаны все Datasource. Соответственно инициализируются только те которые используются. Также очень удобно при ограниченных ресурсах. fail-fast + старт только необходимого. org.springframework.jmx.export.MBeanExporter умеет инициализировать JMX бины для ленивых spring бинов.</description>
    </item>
    
    <item>
      <title>Оптимизация spring-mvc</title>
      <link>https://dernasherbrezon.com/posts/spring-mvc-tuning/</link>
      <pubDate>Fri, 11 Nov 2011 13:14:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/spring-mvc-tuning/</guid>
      <description>Общие решения всегда медленнее частных. Ниже я собираюсь немного оптимизировать spring-mvc. Оптимизация прежде всего рассчитана на уменьшение генерируемого мусора. Прежде чем начать оптимизировать надо определиться какие функции фреймворка можно выкинуть и какими фичами пренебречь:
 ISO-8859-1-encoded URLs. Человеко-понятные-урл (ЧПУ) используются SEO продвижения в поисковых движках. Но что если это не нужно? Зачем на каждый запрос тратить процессорное время и память? Всегда абсолютные пути для сервлетов-контроллёров. По умолчанию spring-mvc позволяет использовать относительные пути для include запросов.</description>
    </item>
    
    <item>
      <title>Запуск Jetty Embedded через spring</title>
      <link>https://dernasherbrezon.com/posts/jetty-embedded-maven/</link>
      <pubDate>Thu, 11 Nov 2010 13:14:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/jetty-embedded-maven/</guid>
      <description>Для начала необходимо добавить зависимости в pom.xml:
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.eclipse.jetty&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;jetty-server&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;7.2.0.RC0&amp;lt;/version&amp;gt; &amp;lt;exclusions&amp;gt; &amp;lt;exclusion&amp;gt; &amp;lt;groupId&amp;gt;org.mortbay.jetty&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;test-jndi-webapp&amp;lt;/artifactId&amp;gt; &amp;lt;/exclusion&amp;gt; &amp;lt;exclusion&amp;gt; &amp;lt;groupId&amp;gt;org.mortbay.jetty&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;test-annotation-webapp&amp;lt;/artifactId&amp;gt; &amp;lt;/exclusion&amp;gt; &amp;lt;exclusion&amp;gt; &amp;lt;groupId&amp;gt;org.mortbay.jetty&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;test-jaas-webapp&amp;lt;/artifactId&amp;gt; &amp;lt;/exclusion&amp;gt; &amp;lt;exclusion&amp;gt; &amp;lt;groupId&amp;gt;org.mortbay.jetty&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;example-async-rest-webapp&amp;lt;/artifactId&amp;gt; &amp;lt;/exclusion&amp;gt; &amp;lt;/exclusions&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.eclipse.jetty&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;jetty-servlet&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;7.2.0.RC0&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.eclipse.jetty&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;jetty-jsp-2.1&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;7.2.0.RC0&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.eclipse.jetty&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;jetty-webapp&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;7.2.0.RC0&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-core&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;3.0.1.RELEASE&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-context&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;3.0.1.RELEASE&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-web&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;3.0.1.RELEASE&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-webmvc&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;3.0.1.RELEASE&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; Затем в main-class указать:
Server server = new Server(9090); ServletHolder holder = new ServletHolder(new DispatcherServlet()); holder.</description>
    </item>
    
    <item>
      <title>Рефакторинг старых систем</title>
      <link>https://dernasherbrezon.com/posts/refactoring-legacy/</link>
      <pubDate>Mon, 11 May 2009 13:14:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/refactoring-legacy/</guid>
      <description>Навеяно http://www.amazon.com/Working-Effectively-Legacy-Robert-Martin/dp/0131177052
Мне достаточно часто приходилось работать с наследными системами. Поэтому выработал некоторые свои собственные интересные практики при работе с такими системами.
 Зачастую имена классов, методов и переменных не отражают сути. В таких случаях обычно переименовывают их. Однако в наследных системах такого делать не рекомендуется. Даже при использовании мощных инструментов в современных IDE. Это связано с тем что в конечном итоге подобные системы собираются своими скриптами сборки, зачастую такими же запутанными и очень confuse&amp;rsquo;ными как и сам код.</description>
    </item>
    
    <item>
      <title>Glassfish Async JMS JCA</title>
      <link>https://dernasherbrezon.com/posts/glassfish-async-jms-jca/</link>
      <pubDate>Sat, 11 Apr 2009 13:14:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/glassfish-async-jms-jca/</guid>
      <description>Достаточно интересное и недокументированное поведение Glassfish v.2.0.
Если в потоке вызова endpointActivation(...) в реализации Resource Adapter&amp;rsquo;a вызвать метод consumer.setMessageListener(...) то потоки асинхронного получения сообщения не создадутся. С чем это связано - неизвестно. Исходные коды не смотрел. Возможно с требованиями спецификации о создании потоков через WorkManager. Но разработчик не контролирует создания потоков в JMS клиенте!
Решение:
 Создать инициализацию message listener&amp;rsquo;a в отдельном потоке через WorkManager.  </description>
    </item>
    
    <item>
      <title>IMQ Connection Concurrent Glassfish</title>
      <link>https://dernasherbrezon.com/posts/imq-connection-glassfish/</link>
      <pubDate>Sun, 11 Jan 2009 13:14:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/imq-connection-glassfish/</guid>
      <description>Наблюдается следующая проблема:
thread1:
javax.jms.Connection conn = connFactory.createConnection(); Work connectionHandler = new MyWorker(conn); WorkManager.scheduleWork(connectionHandler);  thread2 (MyWorker):
Session s = conn.createSession(...); Consumer c = s.createConsumer(someDestination); Message m = c.receive();  При receive JMSException и пишет что consumer closed. Однако если:
thread1:
Work connectionHandler = new MyWorker(connFactory); WorkManager.scheduleWork(connectionHandler);  thread2 (MyWorker):
javax.jms.Connection conn = connFactory.createConnection(); Session s = conn.createSession(...); Consumer c = s.createConsumer(someDestination); Message m = c.receive();  То всё работает. Happy holidays</description>
    </item>
    
    <item>
      <title>Интеграция Eclipse и Maven</title>
      <link>https://dernasherbrezon.com/posts/eclipse-maven/</link>
      <pubDate>Sat, 10 Jan 2009 13:14:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/eclipse-maven/</guid>
      <description>Maven в Eclipse - это очень удобно.
Однако при всех достоинствах каждого есть некоторые неудобства интеграции. Например следующий вариант: Есть проект. В нём есть основные исходные коды и для тестов. Соответственно они находятся в разных папках. Есть два builder&amp;rsquo;а. Стандартный JDT и Maven Builder. Я не сильно вдавался в детали их работы, но в первом приближении они компилируют. JDT&amp;rsquo;шный стандартно в output folder для Eclipse&amp;rsquo;a, а maven&amp;rsquo;овский я так понимаю выполняет target compile и помещает скомпилированные классы в target/classes &amp;amp; target/test-classes (по дефолту).</description>
    </item>
    
  </channel>
</rss>