<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>dernasherbrezon</title>
    <link>https://dernasherbrezon.com/</link>
    <description>Recent content on dernasherbrezon</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 09 Aug 2021 15:52:18 +0000</lastBuildDate><atom:link href="https://dernasherbrezon.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Об авторе</title>
      <link>https://dernasherbrezon.com/%D0%BE%D0%B1-%D0%B0%D0%B2%D1%82%D0%BE%D1%80%D0%B5/</link>
      <pubDate>Tue, 24 Sep 2013 13:14:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/%D0%BE%D0%B1-%D0%B0%D0%B2%D1%82%D0%BE%D1%80%D0%B5/</guid>
      <description>Меня зовут Андрей. Я занимаюсь профессиональной разработкой программного обеспечения с 2002 года. В этом блоге я пишу о разных технических штуках.
Вы можете поддержать меня здесь.</description>
    </item>
    
    <item>
      <title>Поддержать</title>
      <link>https://dernasherbrezon.com/%D0%BF%D0%BE%D0%B4%D0%B4%D0%B5%D1%80%D0%B6%D0%B0%D1%82%D1%8C/</link>
      <pubDate>Tue, 24 Sep 2013 13:14:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/%D0%BF%D0%BE%D0%B4%D0%B4%D0%B5%D1%80%D0%B6%D0%B0%D1%82%D1%8C/</guid>
      <description>Я посвящаю большую часть своего свободного времени на различные исследования технологий и поддержку нескольких open source проектов. Мне просто нравится этим заниматься.
Правда иногда приходится покупать различные лицензии или железо для исследований, а также оплачивать хостинг хобби проектов.
Если Вы хотите поддержать меня, то это вполне возможно, используя ссылку ниже. Я совсем непротив и других способов поддержки, просто напишите мне на почту (она внизу сайта).
 Или
 </description>
    </item>
    
    <item>
      <title>Создание Prometheus exporter</title>
      <link>https://dernasherbrezon.com/posts/writing-prometheus-exporter/</link>
      <pubDate>Mon, 09 Aug 2021 15:52:18 +0000</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/writing-prometheus-exporter/</guid>
      <description>Prometheus - база данных для хранения метрик. Туда можно записать метрики производительности системы, роутеров, Java-приложений и многое другое. Если приложение не поддерживает протокол Prometheus для экспорта метрик, то можно взять один из готовых exporter&amp;rsquo;ов. Exporter - это небольшой прокси сервер, который берёт метрики из приложения в одном формате и выдаёт метрики в Prometheus формате. Но что, если готового exporter&amp;rsquo;а нет? Не беда - его можно написать!
8430FT 8430FT - это LTE-модем, который может раздавать интернет через Wi-Fi.</description>
    </item>
    
    <item>
      <title>Мониторинг Mikrotik роутеров с помощью Prometheus</title>
      <link>https://dernasherbrezon.com/posts/prometheus-monitoring-mikrotik/</link>
      <pubDate>Sat, 07 Aug 2021 06:50:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/prometheus-monitoring-mikrotik/</guid>
      <description>Для начала вообще пара слов о том, зачем мониторить роутеры. Роутер, как и любое другое устройство, имеет аппаратные ресурсы, которые могут закончится. Например, браузер стал медленнее открывать страницы или видео стало медленнее загружаться. Это может быть как из-за провайдера, так и из-за роутера. Возможно, к роутеру подключено слишком много устройств, и он стал медленнее, или параллельно кто-то качает слишком много - всё это может быть причиной замедления.
Большинство роутеров позволяют посмотреть загруженность ЦПУ или памяти прямо в админке.</description>
    </item>
    
    <item>
      <title>Задержка в sdr-modem</title>
      <link>https://dernasherbrezon.com/posts/sdr-modem-latency/</link>
      <pubDate>Fri, 06 Aug 2021 09:47:18 +0000</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/sdr-modem-latency/</guid>
      <description>В предыдущей статье я планировал реализовать не только отправку, но и приём сигнала с помощью plutosdr. Спустя месяц и несколько важных рефакторингов, я сделал всё, что хотел. Теперь можно напрямую сравнивать приём через plutosdr и через sdr-server. Понятное дело, через plutosdr будет намного быстрее. Мне же хотелось узнать насколько быстрее и померить эту задержку.
Описание стэнда Алгоритм тестирования для plutosdr и sdr-server выглядит следущим образом:
 создать сообщение отправить в sdr-modem записать время отправки принять это же сообщение из sdr-modem найти разницу между временем отправки и получения  Для того, чтобы отправить сообщение, его нужно закодировать во фрейм.</description>
    </item>
    
    <item>
      <title>Передача сигнала с помощью plutosdr</title>
      <link>https://dernasherbrezon.com/posts/plutosdr-tx/</link>
      <pubDate>Fri, 25 Jun 2021 10:58:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/plutosdr-tx/</guid>
      <description>Последние несколько месяцев я напряжённо работаю над своим проектом sdr-modem. Он представляет собой небольшой TCP сервер, который получает массив байт от клиента и передаёт их с помощью радио сигнала в эфир. Также он может и получать сигнал, декодировать и отправлять клиентам поток байт.
Пару недель назад я наконец-то дописал основную функциональность и тесты. Пришло время протестировать его работу в реальных условиях. Для этого я сделал небольшой тестовый стенд:
 java приложение соединяется с sdr-modem по TCP и отправляет массив байтов.</description>
    </item>
    
    <item>
      <title>Оптимизация sincos функции</title>
      <link>https://dernasherbrezon.com/posts/sincos-tuning/</link>
      <pubDate>Tue, 25 May 2021 17:05:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/sincos-tuning/</guid>
      <description>Давненько я ничего не писал в свой блог и на это было несколько причин. Во-первых, я полностью погрузился в написание своего нового проекта - sdr-modem. Не сказать, что он простой, но он гармонично развивает идеи sdr-server и не содержит того, о чём хотелось бы написать. Во-вторых, ничего особенного не происходит.
Тем не менее, хочется написать небольшую заметку о том, как я измерял производительность функции sincos, и что из этого получилось.</description>
    </item>
    
    <item>
      <title>Создание и поддержка своего собственного APT репозитория</title>
      <link>https://dernasherbrezon.com/posts/r2cloud-apt/</link>
      <pubDate>Sun, 07 Mar 2021 20:45:18 +0000</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/r2cloud-apt/</guid>
      <description>С появлением нового проекта - sdr-server, у меня стало слишком много приложений, которые нужно как-то устанавливать. И всё бы ничего, но каждое приложение в свою очередь требует разных системных библиотек. А эти системные библиотеки не всегда нужных версий. А если сюда добавить разные версии дистрибутивов и разные архитектуры процессоров, то начинается комбинаторный взрыв, и всё становится очень запутанным.
Для решения этой проблемы можно было бы сделать докер образа и на этом успокоится.</description>
    </item>
    
    <item>
      <title>Динамические библиотеки, RPATH и Conan</title>
      <link>https://dernasherbrezon.com/posts/dynamic-libraries-rpath/</link>
      <pubDate>Thu, 18 Feb 2021 23:11:18 +0000</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/dynamic-libraries-rpath/</guid>
      <description>Эта статья - скорее коспект того, что я узнал за последнюю неделю о динамических библиотеках, RPATH и Conan.
Введение Никто в здравом уме не начнёт изучать то, как линкуются библиотеки в MacOS. Поэтому для начала я попытаюсь обрисовать проблему, которую пытался решить.
Итак, на заре времён, когда жёсткие диски компьютеров были маленькие, память компьютеров была маленькая, люди придумали переиспользование библиотек. Как всё это работает? Допустим у нас есть 2 приложения:</description>
    </item>
    
    <item>
      <title>Оптимизация SIMD кода</title>
      <link>https://dernasherbrezon.com/posts/simd-optimization/</link>
      <pubDate>Fri, 12 Feb 2021 22:30:18 +0000</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/simd-optimization/</guid>
      <description>Остапа понесло.
&amp;ldquo;12 стульев&amp;rdquo;
 Почувствовав прилив сил и некоторую уверенность после оптимизации программ на Си, я решил погрузиться ещё глубже. И поводом для этого стало странное поведение функции volk_8i_s32f_convert_32f под RaspberryPI.
В предыдущей статье я смог с помощью этой функции существенно ускорить работу своей программы sdr-server. На скриншоте ниже видно, что конкретная реализация этой функции под MacOS была volk_8i_s32f_convert_32f_u_sse4_1.
Это значит, что все метод реализован с помощью инструкций и регистров SSE4.</description>
    </item>
    
    <item>
      <title>Оптимизация производительности приложения на Си</title>
      <link>https://dernasherbrezon.com/posts/tune-c-application/</link>
      <pubDate>Sun, 07 Feb 2021 13:20:17 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/tune-c-application/</guid>
      <description>Введение По следам разработки моего нового проекта sdr-server я решил написать очередную статью. И опять про производительность. Прошлая статья закончилась удивительным результатом: использование SIMD ускоряет операцию более, чем в 2 раза. Я даже написал небольшую программу для того, чтобы это проверить.
Однако, в реальной жизни тормозить может совершенно безобидный участок кода. И для того, чтобы увидеть как работает программа под реальной нагрузкой, нужно использовать профайлеры.
Выбор профайлера Оказывается, в мире Си с этим обстоит всё достаточно неплохо.</description>
    </item>
    
    <item>
      <title>SIMD для цифровой обработки сигналов</title>
      <link>https://dernasherbrezon.com/posts/simd-for-dsp/</link>
      <pubDate>Mon, 25 Jan 2021 01:10:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/simd-for-dsp/</guid>
      <description>Несмотря на то, что мой блог о разработке на Java, мне иногда приходится расчехлять старые знания и писать на Си. Вообще, программирование на Си - это целый мир со своими заморочками, инструментами и подходами. И он совсем не пересекается с тем, что творится в Java. Это, с одной стороны, немного досадно, так как все накопленные знания не имеют никакого смысла, а с другой стороны немного волнительно, как открытие Америки.
Совсем недавно я придумал одну идею - сделать небольшой TCP сервер, который бы раздавал некоторый диапазон радио частот клиентам.</description>
    </item>
    
    <item>
      <title>Open source cubesat workshop 2020</title>
      <link>https://dernasherbrezon.com/posts/oscw-2020/</link>
      <pubDate>Thu, 14 Jan 2021 20:20:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/oscw-2020/</guid>
      <description>Под конец 2020 я принял участие в Open Source Cubeset Workshop и рассказал о том, как в одиночку разрабатывать опенсорс проект.</description>
    </item>
    
    <item>
      <title>Восстановление jpeg файлов</title>
      <link>https://dernasherbrezon.com/posts/restore-jpeg-file/</link>
      <pubDate>Wed, 16 Dec 2020 14:40:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/restore-jpeg-file/</guid>
      <description>1kuns-pf уже давно сгорел в плотных слоях атмосферы, но он оставил яркий след в базе данных Satnogs. Это самый наблюдаемый спутник на текущий момент. За два года своей работы сообщество приняло около 6 миллионов сообщений.
Я решил посмотреть, что же это за данные и как то нормализировать их. Так как спутник сгорел, то в результате должен получиться законченный датасет, удобный для анализа.
У меня есть описание формата трёх типов данных:</description>
    </item>
    
    <item>
      <title>Сравнение бесплатных программ для электронных таблиц</title>
      <link>https://dernasherbrezon.com/posts/compare-excel/</link>
      <pubDate>Sun, 15 Nov 2020 11:29:18 +0000</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/compare-excel/</guid>
      <description>Совершенно неожиданно даже для себя самого я решил сравнить программы для работы с электронными таблицами. Всё началось с того, что мне захотелось проанализировать какие спутники поддерживает r2cloud, какие можно декодировать с помощью jradio, а какие из них активные. Для этого я по-старинке открыл Libre Office и быстренько накидал табличку. После этого, мне захотелось поделиться ею с нашим небольшим сообществом ловцов спутников в twitter. Я её расшарил в google docs, но тут же задумался: а зачем мне нужен Libre Office, если google docs вполне работает?</description>
    </item>
    
    <item>
      <title>Коварные нули</title>
      <link>https://dernasherbrezon.com/posts/how-to-map-zero/</link>
      <pubDate>Wed, 07 Oct 2020 17:23:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/how-to-map-zero/</guid>
      <description>Всё началось в того, что мне захотелось добавить поддержку plutosdr в свой проект r2cloud. Для этого я открыл код, который читает данные из rtlsdr и увидел следующее:
for (int i = 0; i &amp;lt; 0x100; ++i) { lookupTable[i] = ((i &amp;amp; 0xff) - 127.4f) * (1.0f / 128.0f); } Мой глаз зацепился за 127.4. Я не помню откуда у меня этот код, но число 127.4 выглядит уж больно подозрительно. Во-первых, алгоритм какой-то сложный, а во-вторых странное число.</description>
    </item>
    
    <item>
      <title>Оптимизация расписания</title>
      <link>https://dernasherbrezon.com/posts/r2cloud-scheduler/</link>
      <pubDate>Sun, 27 Sep 2020 22:50:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/r2cloud-scheduler/</guid>
      <description>Задачка А вот задачка для любителей алгоритмов. Необходимо максимизировать время наблюдения за спутниками. Поясню поподробнее, в чём же она заключается. Итак, есть станция слежения за спутниками. В один момент времени она может записывать сигнал только с одного пролетающего спутника. Спутники летают независимо друг от друга и их количество фиксированно. Можно считать, что пролетают они над одной и той же точкой одинаковое количество раз в день. Но время пролёта случайное. В один момент времени над станцией могут пролетать два и более спутника.</description>
    </item>
    
    <item>
      <title>Жемчужины Python кода</title>
      <link>https://dernasherbrezon.com/posts/python-way/</link>
      <pubDate>Wed, 23 Sep 2020 22:01:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/python-way/</guid>
      <description>В своих статьях я стараюсь рассказывать о небольших технологических штуках и проблемах, с которыми периодически сталкиваюсь. Но вот недавно я столкнулся с совершенно замечательным кодом, написанным на Python, и не могу пройти мимо, чтобы не покритиковать. Итак, есть вот такая функция:
def getkbits8(num, k, p): binary = bin(num)[2:] # convert number into binary first leadingzeros = 8 - len(binary) # Count the necessary leading zeros to fill byte binary = &amp;#39;0&amp;#39; * leadingzeros + binary # Fill byte with leading zeros end = 8 - p - 1 start = end - k + 1 k_bit_sub_str = binary[start: end + 1] # extract k bit sub-string return int(k_bit_sub_str, 2) # convert extracted sub-string into decimal again Она используется следующим образом:</description>
    </item>
    
    <item>
      <title>Странный Wi-Fi</title>
      <link>https://dernasherbrezon.com/posts/wifi-country-codes/</link>
      <pubDate>Sat, 19 Sep 2020 14:40:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/wifi-country-codes/</guid>
      <description>В процессе исследования странного поведения WiFi в RPi, я наткнулся на довольно интересную информацию. Немногие знают, но WiFi работает в разных странах на разных частотах. Исторически, частоты современного Wifi 2.4Ггц и 5Ггц использовались военными, метеорологическими станциями и радарами. В разных странах они работали немножко на разных частотах, поэтому когда пришёл WiFi, инженеры начали выкручиваться.
Они придумали довольно простой способ - это конфигурация WiFi в зависимости от страны. Несмотря на то, что железо в принципе может работать в широком диапазоне частот, его ограничивают на уровне прошивки в зависимости от страны.</description>
    </item>
    
    <item>
      <title>Протокол Pacsat</title>
      <link>https://dernasherbrezon.com/posts/pacsat/</link>
      <pubDate>Sun, 06 Sep 2020 22:50:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/pacsat/</guid>
      <description>Вступление 30 лет назад, когда я ещё под стол ходил, собрались умные люди и придумали протокол под названием Pacsat. Этот протокол позволял обмениваться сообщениями и файлами через спутники. Звучит, как будто в конце 80-х решили придумать космический FTP сервер. Всё это, а так же многое другое я обнаружил, когда решил декодировать Falconsat-3. В голове почему-то сразу всплыли ББС, телетайпы и запахло пылью. Недолго думая, я решил погрузиться в мир старины и заняться активной археологией.</description>
    </item>
    
    <item>
      <title>Питание Raspberrypi</title>
      <link>https://dernasherbrezon.com/posts/power-supply-for-raspberrypi/</link>
      <pubDate>Sat, 29 Aug 2020 00:04:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/power-supply-for-raspberrypi/</guid>
      <description>Если поискать в интернете словосочетание &amp;ldquo;питание для raspberrypi&amp;rdquo;, то можно найти массу статей о том, что нужно использовать официальный блок питания на 5В и 2.5А. Но что, если RPi питается от солнечных панелей и в логах постоянно проскальзывает &amp;ldquo;Under-voltage detected!&amp;rdquo;? Для решения этой проблемы мне немного пришлось повозиться с теорией и корзиной для покупок.
Предыстория Прежде, чем пытаться найти решение, нужно понять начальные условия. Для одной из своих станций слежения за спутниками я решил использовать солнечную панель.</description>
    </item>
    
    <item>
      <title>Толстые и тонкие дистрибутивы</title>
      <link>https://dernasherbrezon.com/posts/thin-and-fat-distributives/</link>
      <pubDate>Wed, 26 Aug 2020 22:31:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/thin-and-fat-distributives/</guid>
      <description>На этой неделе я окончательно перевёл все мои проекты на Ubuntu 18.04 и тонкие .deb дистрибутивы. Этот проект я начал в начале года и окончательно завершил только сейчас, спустя почти 8 месяцев. Сама по себе миграция заслуживает отдельной статьи с нытьём и риторическими вопросами. Здесь же, я хочу немного описать противостояние тонких и толстых дистрибутивов. То, как я видел эту историю и немного анализа. Поехали!
Дистрибутивы Почти сразу же, как только написана первая версия любой программы, становится вопрос о том, как её распространять.</description>
    </item>
    
    <item>
      <title>Время в Raspberrypi - 3</title>
      <link>https://dernasherbrezon.com/posts/time-raspberrypi-3/</link>
      <pubDate>Wed, 19 Aug 2020 18:30:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/time-raspberrypi-3/</guid>
      <description>&amp;ldquo;Да сколько уже можно про время в Raspberrypi?!&amp;rdquo; - скажут некоторые. Однако, несмотря на две предыдущие статьи, мне есть о чём написать. Опять.
Как я уже неоднократно писал, время можно получить двумя способами:
 подключившись к интернету используя RTC модуль  На некоторых станциях у меня стоит RTC модуль, на некоторых нет. Но я не особо переживал по этому поводу, так как станции имели постоянное подключение к интернету.
Запах приключений Всё работало очень хорошо и стабильно, до тех пор пока я не обратил на странное поведения в логах.</description>
    </item>
    
    <item>
      <title>Оптимизация FSK демодулятора</title>
      <link>https://dernasherbrezon.com/posts/tune-ber-fsk/</link>
      <pubDate>Mon, 03 Aug 2020 20:22:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/tune-ber-fsk/</guid>
      <description>Не прошло и года, а я уже придумал как улучшить свой FSK демодулятор. Как уже писал, имея на руках BER кривую, можно начинать улучшать демодулятор. Первым делом я сравнил FSK демодулятор SatNOGS и свой.
Для этого я взял сырые данные (.wav файл) из обработанного пролёта спутника и попробовал прогнать его через свой демодулятор. В результате у меня получилось 23 пакета. Однако, демодулятор SatNOGS смог найти 24 пакета.
Всё это значит, что есть пространство для оптимизации.</description>
    </item>
    
    <item>
      <title>Расчёт вероятности ошибки для FSK демодулятора</title>
      <link>https://dernasherbrezon.com/posts/jradio-ber-fsk/</link>
      <pubDate>Sat, 01 Aug 2020 10:22:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/jradio-ber-fsk/</guid>
      <description>Введение Прошёл почти год с того момента, когда я измерял BER для BPSK демодулятора. И вот пришло время измерить вероятность ошибки для FSK демодулятора. Поводом к такому исследованию послужило большое количество спутников, передающих частотно-модулированный сигнал. Мне хотелось прежде всего измерить текущие характеристики демодулятора, чтобы в последствии можно было его улучшать.
Описание теста С прошлого раза я решил существенно поменять методологию. Раньше для подсчёта ошибок использовалось скремблирование. Все полученные нулевые биты делились на 6, из-за характеристик полинома скремблера и дифференциального кодирования.</description>
    </item>
    
    <item>
      <title>r2weather - Открытые метеоснимки из космоса</title>
      <link>https://dernasherbrezon.com/posts/r2weather/</link>
      <pubDate>Sun, 26 Jul 2020 14:05:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/r2weather/</guid>
      <description>В последнее время я очень много писал про r2weather. В том числе про различные технические особенности реализации. В этой же статье я хочу описать общую схему работы.
Введение За Зёмлей наблюдает множество метеорологических спутников. Основная их задача - получение различных метеосников поверхности Земли. Эти данные используются в различных моделях. Например, чтобы предсказывать погоду, таяние полярных льдов или плотность распределения плактона в прибрежных водах.
Одним из таких спутников является Метеор-М №2. Помимо множества разных камер, на нём установлена камера МСУ-МР.</description>
    </item>
    
    <item>
      <title>Какую Open source лицензию выбрать?</title>
      <link>https://dernasherbrezon.com/posts/open-source-license/</link>
      <pubDate>Thu, 09 Jul 2020 22:20:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/open-source-license/</guid>
      <description>На самом деле универсального ответа на этот вопрос нет. Всё, как обычно, зависит от целей проекта и личных предпочтений автора. Open source лицензий великое множество и каждый может выбрать абсолютно любую. Главное, что нужно помнить, open source - это не код без лицензии.
Даже для мини-проектов на github нужно указывать лицензии. Зачем? Допустим, Вы сделали небольшую, но крайне полезную библиотеку. Допустим, её нашёл какой-нибудь разработчик и захочет использовать в своём коммерческом приложении.</description>
    </item>
    
    <item>
      <title>Полевые испытания поворотного устройства</title>
      <link>https://dernasherbrezon.com/posts/rotator-for-r2cloud-3/</link>
      <pubDate>Tue, 07 Jul 2020 21:39:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/rotator-for-r2cloud-3/</guid>
      <description>Очередная неделя тестирования поворотного устройства принесла удивительные результаты. Для начала, немного изменений по сравнению с предыдущей неделей.
  Работа от батареек. В этот раз я решил попробовать работать от батареек. Это должно уменьшить количество помех, приходящих из сети. Не то, чтобы их очень много, но я надеялся уменьшить noise floor. Кстати, кто-нибудь знает как это перевести на русский язык?
70см фильтр Недавно мне пришёл новый 70см фильтр, который я протестировал в предыдущей статье.</description>
    </item>
    
    <item>
      <title>Тестирование 70см фильтра с помощью RTL-SDR</title>
      <link>https://dernasherbrezon.com/posts/test-70cm-filter/</link>
      <pubDate>Sat, 20 Jun 2020 17:30:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/test-70cm-filter/</guid>
      <description>Последние наблюдения показали, что у меня очень высокий уровень шума, если антенна направлена в центр города. У меня возникло предположение, что это связано со слишком сильными сигналами на соседних частотах. Если это так, то это значит, что GSM, FM и DVB перегрузили вход rtl-sdr, полностью заглушив слабые сигналы. Такое возможно, так как у rtl-sdr достаточно низкий динамический диапазон.
Для того, чтобы проверить теорию, я решил купить вот такой фильтр на 70см и протестировать его.</description>
    </item>
    
    <item>
      <title>Поворотное устройство - продолжение</title>
      <link>https://dernasherbrezon.com/posts/rotator-for-r2cloud-2/</link>
      <pubDate>Tue, 16 Jun 2020 20:04:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/rotator-for-r2cloud-2/</guid>
      <description>Каждый раз, когда я выхожу тестировать поворотное устройство, находятся удивительные и разнообразные ошибки. Если в прошлый раз после включения вообще ничего не происходило, то на этот раз что-то явно пошло не так.
  Главные отличия от предыдущей версии:
 крепление антенны более надёжное. Я использовал стандартные крепления, которые шли в комплекте с поворотным устройством. Несмотря на более громоздкую конструкцию, антенна закреплена гораздо прочнее. облучатели для 70см теперь вертикально расположены. По идее это должно улучшить качество приёма.</description>
    </item>
    
    <item>
      <title>Время в Raspberrypi - 2</title>
      <link>https://dernasherbrezon.com/posts/time-raspberrypi-2/</link>
      <pubDate>Thu, 11 Jun 2020 21:35:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/time-raspberrypi-2/</guid>
      <description>Прошёл почти год с момента написания оригинальной статьи про время в Raspberrypi, и вот я уже снова столкнулся с этой проблемой. На этот раз мне захотелось сделать мобильную станцию слежения за спутниками вместе с поворотным устройством. Мобильность в данном случае означает то, что я могу принести станцию в поле, поймать несколько сигналов во время чтения книги, отнести домой и залить результаты в https://r2server.ru. Проблема оказалась там, где её никто не ждал.</description>
    </item>
    
    <item>
      <title>Поворотное устройство для r2cloud</title>
      <link>https://dernasherbrezon.com/posts/rotator-for-r2cloud/</link>
      <pubDate>Wed, 10 Jun 2020 18:41:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/rotator-for-r2cloud/</guid>
      <description>Введение Последние несколько недель я активно работал над поддержкой поворотных устройств в r2cloud. Тут стоит немного рассказать зачем вообще нужны поворотные устройства и направленные антенны.
Если совсем грубо, то существует несколько основных классов антенн: всенаправленные, направленные и фазовые решётки. Мой проект до недавнего времени поддерживал только всенаправленные антенны.
Причина достаточно проста: они просты в настройке и установке. При этом здесь нет движущихся частей и такие антенны могут работать сразу в нескольких диапазонах.</description>
    </item>
    
    <item>
      <title>Юнит-тесты</title>
      <link>https://dernasherbrezon.com/posts/unit-tests/</link>
      <pubDate>Mon, 25 May 2020 17:27:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/unit-tests/</guid>
      <description>15 лет назад никто не слышал про юнит-тесты. Код писался один раз, потом проверялся вручную QA и методами пристального вглядывания. Все жили в гармонии и мире. Но тут пришли юнит-тесты и мир разделился на два враждующих лагеря: на тех, кто пишет тесты и тех, кто нет.
Спойлер: я за авто-тесты.
В интернете очень много аргументов как за, так и против. Я решил собрать свой собственный список аргументов за юнит-тесты.
1 Тесты пишутся не для того, чтобы протестировать каждое логическое условие и всевозможные комбинации входных и выходных данных.</description>
    </item>
    
    <item>
      <title>Декодирование картинки fox-1d</title>
      <link>https://dernasherbrezon.com/posts/decoding-fox1d/</link>
      <pubDate>Thu, 14 May 2020 21:21:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/decoding-fox1d/</guid>
      <description>Люди по-прежнему запускают спутники в космос, а я по-прежнему пытаюсь декодировать с них сигналы. На этот раз я решил разобраться со спутниками семейства Fox. Они передают достаточно много данных:
 телеметрия результаты исследований радиации картинки  Если первые два типа данных достаточно стандартны, то вот картинки - это то, перед чем я не могу устоять.
Формат передачи данных Эти спутники могут передавать информацию с помощью двух протоколов:
 медленный. Скорость 200 бит в секунду.</description>
    </item>
    
    <item>
      <title>Ошибки прозрачности в gdal2tiles</title>
      <link>https://dernasherbrezon.com/posts/gdal2tiles-transparency/</link>
      <pubDate>Thu, 07 May 2020 22:21:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/gdal2tiles-transparency/</guid>
      <description>В своей работе над r2weather.ru я нахожу множество багов. Иногда они случаются по собственной глупости, а иногда появляются в самых неожиданных местах. Причём, ошибки связаны не только с программированием и различными алгоритмами, но и со странным поведением внешних систем.
Из недавнего, я обнаружил на результирующей карте совершенно странные полупрозрачные полоски толщиной один-два пиксела.
Выглядит это, прямо скажем, не очень. Особенно на большой карте мира.
Исследование Вообще, я специально конвертирую jpeg-файл, принимаемый со спутника в формат .</description>
    </item>
    
    <item>
      <title>Прозрачность в GeoTIFF</title>
      <link>https://dernasherbrezon.com/posts/geotiff-transparency/</link>
      <pubDate>Thu, 30 Apr 2020 16:15:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/geotiff-transparency/</guid>
      <description>Работа над r2weather.ru идёт полным ходом, а значит появляются и фиксятся различные баги. Один из последних и самых интересных - настройка прозрачности.
После того, как я создал GeoTIFF и нарезал его на тайлы с помощью gdal2tiles у меня получился следующий результат:
Если присмотреться, то можно увидеть отдельные &amp;ldquo;выколотые&amp;rdquo; пикселы там, где находится море. А если взять ночную фотографию, то такие пикселы еще более заметны:
Это явно ошибка определения прозрачности, так как на оригинальном изображении этой проблемы нет.</description>
    </item>
    
    <item>
      <title>Геокодирование спутниковых снимков: Тайлы</title>
      <link>https://dernasherbrezon.com/posts/georeferencing-tiles/</link>
      <pubDate>Mon, 20 Apr 2020 20:52:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/georeferencing-tiles/</guid>
      <description>Это финальная статья о том, как геокодировать спутниковые снимки. Здесь я постараюсь описать, а что же делать дальше с полученным GeoTIFF файлом. Если интересно о том, как получить GeoTIFF, то можно почитать предыдущие статьи:
 Введение Опорные точки GeoTIFF Тайлы  QGIS GeoTIFF, полученный на предыдущем шаге выглядит правдоподобно, но хочется убедиться, что проекция выполнена правильно. Самый простой способ - это наложить файл на настоящую карту. Для этого достаточно взять бесплатную QGIS и добавить слой OpenStreetMap:</description>
    </item>
    
    <item>
      <title>Геокодирование спутниковых снимков: GeoTIFF</title>
      <link>https://dernasherbrezon.com/posts/georeferencing-geotiff/</link>
      <pubDate>Sun, 19 Apr 2020 18:09:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/georeferencing-geotiff/</guid>
      <description>Начало Итак, в прошлом посте я описал основные шаги, необходимые для получения списка опорных точек. Следующим шагом будет создание файла в формате GeoTIFF. Это подмножество формата tiff, в котором хранится дополнительная геоинформация. Почти все современные ГИС поддерживают этот формат, поэтому в нём распространяются как карты Google Earth, так и панорамы съёмки квадрокоптерами.
GDAL Для работы с GeoTIFF форматом существует множество библиотек. Наиболее популярная и открытая - GDAL. Она позволяет создавать и редактировать GeoTIFF, выполнять преобразование из одной проекции в другую, создавать тайлы.</description>
    </item>
    
    <item>
      <title>Геокодирование спутниковых снимков: опорные точки</title>
      <link>https://dernasherbrezon.com/posts/georeferencing-gcp/</link>
      <pubDate>Sat, 18 Apr 2020 18:15:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/georeferencing-gcp/</guid>
      <description>Начало В прошлом посте я описал основные шаги, необходимые для геокодирования изображения. Здесь же, я хочу более подробно описать алгоритм получения опорных точек. Опорная точка - это отображение координат пиксела (X,Y) на географические координаты (широта, долгота).
Зная список опорных точек, можно растянуть изображение по ширине и высоте так, чтобы оно совпало с картой. Их, например, можно задать вручную в любой ГИС. Обычно выбирают береговые линии с характерными полуостровами:
Мне же такой способ не подходит, так как я хочу делать это в автоматическом режиме.</description>
    </item>
    
    <item>
      <title>Геокодирование спутниковых снимков: Введение</title>
      <link>https://dernasherbrezon.com/posts/georeferencing-satellite-images/</link>
      <pubDate>Sat, 18 Apr 2020 09:33:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/georeferencing-satellite-images/</guid>
      <description>Начало Пару лет назад я научился получать изображение со спутника Метеор-М2. Тогда я подробно прошёлся по всей модели OSI, начиная с физического уровня rtl-sdr и заканчивая транспортным LRPT. Все наработки я интегрировал в r2cloud, и с тех пор у меня в автоматическом режиме сохраняются все изображения.
Однако, меня не покидало ощущение некоторой незавершённости задачи. Изображения-то я получал, но что делать с ними дальше совершенно не знал. Вернее, конечно же, знал: как и любой другой метеорологический снимок, он нужен для того, чтобы предсказывать погоду.</description>
    </item>
    
    <item>
      <title>Работа с Orekit</title>
      <link>https://dernasherbrezon.com/posts/orekit/</link>
      <pubDate>Sat, 28 Mar 2020 10:05:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/orekit/</guid>
      <description>Совсем недавно я обнаружил программу LicenseFinder. Она позволяет сканировать проект и найти все лицензии, которые используются в зависимостях. Это очень удобно, так как не все лицензии совместимы между собой. Я решил проверить свои open source проекты и обнаружил нестыковку лицензий для r2cloud. У меня использовалась библиотека predict4java с лицензией GPL-v2, а у моего проекта лицензия Apache 2.0. Такая зависимость фактически означает, что мой проект тоже должен распространяться под лицензией GPL-v2. И этого мне совсем не хотелось.</description>
    </item>
    
    <item>
      <title>Создание и публикация приложения в Launchpad</title>
      <link>https://dernasherbrezon.com/posts/publishing-to-launchpad/</link>
      <pubDate>Tue, 24 Mar 2020 18:40:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/publishing-to-launchpad/</guid>
      <description>Последнюю неделю я активно стал разрабатывать небольшое приложение epever-tracer-influxdb. Оно позволяет читать параметры солнечного контроллера и отправлять данные в InfluxDB. Само приложение написано на C и предполагается, что оно будет работать на Raspberry PI. После того, как я написал это приложение передо мной в очередной раз встала задача дистрибуции. Самый простой способ - попытаться добавить его в основной репозиторий Debian. Но тут есть несколько проблем:
 непонятно в какой момент пакет окажется в основном репозитории.</description>
    </item>
    
    <item>
      <title>Тестирование REST клиентов</title>
      <link>https://dernasherbrezon.com/posts/mock-server/</link>
      <pubDate>Wed, 18 Mar 2020 19:37:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/mock-server/</guid>
      <description>Последние несколько дней я работал над декодированием сигналов со спутника SMOG-P. Помимо декодирования самого протокола я решил заморочится и написать полноценную интеграцию между r2server и gnd.bme.hu.
Gnd bme - это сайт, на котором отображаются последние пакеты, принятые со спутника, общая информация о том, как декодировать сигнал.
Но самое интересное заключается в том, что этот сайт предоставляет небольшой API, чтобы можно было программно отправлять им данные. На самом сайте нет описания этого API, но я внимательно посмотрел исходники и нашёл в них всё необходимое.</description>
    </item>
    
    <item>
      <title>Декодирование телеметрии D-STAR ONE</title>
      <link>https://dernasherbrezon.com/posts/dstar1-telemetry/</link>
      <pubDate>Wed, 19 Feb 2020 14:14:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/dstar1-telemetry/</guid>
      <description>Я уже давно декодирую телеметрию с D-STAR ONE, но совсем недавно, просматривая логи базовой станции, наткнулся на следующую ошибку:
unable to parse beacon java.io.EOFException at java.base/java.io.DataInputStream.readUnsignedByte(DataInputStream.java:295) at ru.r2cloud.jradio.dstar1.PayloadData.&amp;lt;init&amp;gt;(PayloadData.java:102) at ru.r2cloud.jradio.dstar1.Dstar1Beacon.readBeacon(Dstar1Beacon.java:27) at ru.r2cloud.jradio.Beacon.readExternal(Beacon.java:16) Эта случайная ошибка в логах и моя любознательность стали причиной интересного расследования, которое значительно улучшило качество приёма телеметрии.
Расследование Как обычно в таких случаях, я скачал сырые данные и попытался воспроизвести ошибку локально. Код Dstar1Beacon достаточно простой, поэтому остановившись в дебаг-режиме, я сразу понял в чём дело.</description>
    </item>
    
    <item>
      <title>Изображения с DSLWP-B</title>
      <link>https://dernasherbrezon.com/posts/dslwp-b-images/</link>
      <pubDate>Sat, 15 Feb 2020 15:40:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/dslwp-b-images/</guid>
      <description>Недавно Дэниел и команда DSLWP выложили в общий доступ данные со спутника DSLWP-B. Эти данные включают в себя телеметрию, а также изображения Луны и Земли. Сам спутник уже был штатно разбит о Луну, поэтому больше данных с него не будет. Мне же стало интересно, как передавались изображения с лунной орбиты. Плюс, это была бы отличная возможность проверить работу моего ssdv декодера.
Для начала я скачал dslwp-data репозиторий и попытался декодировать файлы *.</description>
    </item>
    
    <item>
      <title>Кодирование jpeg</title>
      <link>https://dernasherbrezon.com/posts/jpeg-encoding/</link>
      <pubDate>Sat, 08 Feb 2020 16:04:00 +0000</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/jpeg-encoding/</guid>
      <description>Введение Для работой с jpeg файлами написано множество библиотек. Даже Java по умолчанию поддерживает чтение и запись jpeg файлов. Однако, когда требуется декодировать более сложные типы передачи jpeg, то необходимо понимать как устроен формат и какие алгоритмы используются. В этой статье я постараюсь максимально дотошно разобрать кодирование jpeg.
Типы передачи jpeg Прежде, чем разбирать кодирование цвета в jpeg, необходимо чётко разделять две вещи: кодирование цвета и передача блоков изображения.
Кодирование цвета - это набор алгоритмов для формирования, так называемых MCU, блоков пикселей 8х8 или 16х16.</description>
    </item>
    
    <item>
      <title>Fosdem 2020</title>
      <link>https://dernasherbrezon.com/posts/fosdem-2020/</link>
      <pubDate>Sun, 02 Feb 2020 21:50:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/fosdem-2020/</guid>
      <description>В этом году я съездил на Fosdem 2020 и выступил там с речью. Рассказал о r2cloud и отлично пообщался с многими знакомыми.</description>
    </item>
    
    <item>
      <title>Декодирование картинки jy1sat</title>
      <link>https://dernasherbrezon.com/posts/decoding-jy1sat/</link>
      <pubDate>Thu, 23 Jan 2020 00:20:17 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/decoding-jy1sat/</guid>
      <description>Введение Все началось с того, что я решил подчистить неиспользуемый код в jradio. Оказалось, спутники семейства funcube шлют дополнительные 200 байт в пакете. В зависимости от спутника, там могут содержаться более детальная телеметрия или просто текстовые сообщения с земли. После небольшого исследования выяснилось, что спутник jy1sat использует их, чтобы передавать картинку! Это мгновенно заинтересовало меня, и в следующие несколько недель я не смог спать, думая о том, как её декодировать.</description>
    </item>
    
    <item>
      <title>Abbreviated jpeg в Java</title>
      <link>https://dernasherbrezon.com/posts/abbreviated-jpeg-java/</link>
      <pubDate>Thu, 09 Jan 2020 21:11:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/abbreviated-jpeg-java/</guid>
      <description>Я думаю все, кто хоть раз запускал компьютер, знают, что такое jpeg. Этот стандарт появился в далёком 1991 году и с тех пор оброс различными расширениями и дополнительными возможностями. Для обычных пользователей все эти изменения не видны. Вы просто кликаете по файлу и видите красивую картинку. Для 99% разработчиков jpeg также представляет собой чёрный ящик. Максимум, с чем может столкнуться среднестатистический разработчик - это оптимизировать размер картинок с помощью jpegtran или сконвертировать один формат в другой с помощью ImageIO.</description>
    </item>
    
    <item>
      <title>Настройка проекта на Си</title>
      <link>https://dernasherbrezon.com/posts/setting-up-c/</link>
      <pubDate>Tue, 24 Dec 2019 18:29:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/setting-up-c/</guid>
      <description>У меня есть небольшой проект на Си, который позволяет сделать приватный apt репозиторий в облачном хранилище Selectel - apt-transport-swift. Почему именно на Си? Во-первых, я думал, что знаю Си. Во-вторых, в моём представлении все системные утилиты для массового пользования должны быть написаны на низкоуровневом языке. Это значит, что для запуска приложения у меня должны быть минимальное количество зависимостей и минимальное потребление памяти. Ведь я не знаю на каком железе будет запущена моя программа.</description>
    </item>
    
    <item>
      <title>Сравнение JSP и VueJS</title>
      <link>https://dernasherbrezon.com/posts/compare-jsp-vuejs/</link>
      <pubDate>Sun, 15 Dec 2019 07:14:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/compare-jsp-vuejs/</guid>
      <description>Споры о том, насколько SPA лучше или хуже проверенных серверных технологий, не утихают до сих пор. Сторонники SPA (React, Angular, VueJS) в один голос говорят насколько это просто и удобно. Сторонники серверных технологий (PHP, JSP, ASP) ничего не говорят, потому что их мало и они заняты разработкой. Из-за того, что оба подхода достаточно разные, то и сравнивать их очень сложно. Зачастую сравнение сваливается во вкусовщину, так как нет людей, которые бы разрабатывали как с помощью одних, так и с помощью других.</description>
    </item>
    
    <item>
      <title>Регистрация пользователей: 5 обязательных вещей</title>
      <link>https://dernasherbrezon.com/posts/design-registration/</link>
      <pubDate>Thu, 12 Dec 2019 14:40:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/design-registration/</guid>
      <description>Есть множество причин по которым может потребоваться собственная регистрация в своём сервисе. Это может быть как скорость разработки (нет необходимости изучать многочисленные API для интеграции), так и дополнительные требования к приватности данных. В регистрации пользователя нет ничего сложного: достаточно спросить его имя и пароль, добавить соль к паролю и сохранить это в базу. Однако, по мере эксплуатации, возникают различные ситуации, которые были не предусмотрены при дизайне системы. Ниже я собрал 5 вещей, полученные кровью и пОтом, багами в проде и мучительными часами ожиданий обычных пользователей.</description>
    </item>
    
    <item>
      <title>Переиспользование компонентов в JSP</title>
      <link>https://dernasherbrezon.com/posts/jsp-tagfile/</link>
      <pubDate>Sun, 08 Dec 2019 19:18:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/jsp-tagfile/</guid>
      <description>Несмотря на то, что технологии JSP уже почти 20 лет, она по-прежнему не перестаёт удивлять своей продуманностью. В частности, мне очень нравится как реализовано переиспользование компонентов. Если вкратце, то в JSP есть несколько способов.
include Позволяет вставлять в страницу кусок другой страницы. Обычно используется, если нужно переиспользовать блоки без параметров. Например:
&amp;lt;%@ include file=&amp;#34;/WEB-INF/jsp/header.jsp&amp;#34;%&amp;gt; &amp;lt;div class=&amp;#34;container&amp;#34;&amp;gt; &amp;lt;h1&amp;gt;Hello world!&amp;lt;/h1&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;%@ include file=&amp;#34;/WEB-INF/jsp/footer.jsp&amp;#34;%&amp;gt; Тэги Позволяют создавать блоки с параметрами. Сами тэги описываются в java коде.</description>
    </item>
    
    <item>
      <title>Разговоры о приёме сигналов со спутников</title>
      <link>https://dernasherbrezon.com/posts/big-beard-theory/</link>
      <pubDate>Thu, 05 Dec 2019 22:31:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/big-beard-theory/</guid>
      <description>Зашёл в гости к подкасту Big Beard Theory поговорить о спутниках и приёме сигналов с них. Огромное спасибо Антону за приглашение и помощь в организации выпуска.</description>
    </item>
    
    <item>
      <title>Работа с Json в 2019 году</title>
      <link>https://dernasherbrezon.com/posts/json-in-2019/</link>
      <pubDate>Wed, 04 Dec 2019 22:29:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/json-in-2019/</guid>
      <description>Введение В работе над своей небольшой библиотечкой jsp-openapi мне понадобилось сериализировать Java объекты в JSON. Я, не долго думая, подключил свою любимую библиотеку gson и пошёл дальше. Проект успешно проходил тест и собирался локально. Следующим моим шагом, как обычно, должна была стать сборка в travis-ci и подключение в sonarcloud.
Но что-то пошло не так&amp;hellip;
Вот ключевое место лога:
Caused by: java.lang.NoClassDefFoundError: java/sql/Time at com.google.gson.Gson.&amp;amp;lt;init&amp;amp;gt;(Gson.java:265) at com.google.gson.GsonBuilder.create(GsonBuilder.java:597) Оказывается, gson зависит от пакета java.</description>
    </item>
    
    <item>
      <title>Сигналы со спутников</title>
      <link>https://dernasherbrezon.com/posts/satellite-signal/</link>
      <pubDate>Thu, 28 Nov 2019 15:51:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/satellite-signal/</guid>
      <description>До того, как заняться приёмом сигналов со спутников, я ничего не знал о радио сигналах. Тем более о радио сигналах со спутников. В моём представлении это было: навести антенну на спутник и выставить частоту приёма.
На самом деле частота сигнала меняется и на спектограмме выглядит как-то вот так:
Если схематично представить, то принимаемый сигнал будет выглядеть вот так:
С этим сигналом есть 2 проблемы (на самом деле больше):
 Эффект Доплера.</description>
    </item>
    
    <item>
      <title>Создание VueJS компонента</title>
      <link>https://dernasherbrezon.com/posts/creating-vuejs-component/</link>
      <pubDate>Sat, 23 Nov 2019 17:33:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/creating-vuejs-component/</guid>
      <description>Введение Мне очень нравится идея маленьких переиспользуемых компонент. Если передо мной встаёт задача добавить какой-нибудь функционал, я прежде всего трачу некоторое время на поиск уже существующего решения. Так и в этот раз. Немногие знают, что r2cloud - это полноценный REST сервер. А значит им можно управлять программно. Сейчас существует только один клиент для него - r2cloud-ui. Это приложение VueJS, которое предоставляет UI для управления. Однако, вся мощь REST сервисов заключается в том, что с ними можно взаимодействовать программно с помощью различных языков программирования.</description>
    </item>
    
    <item>
      <title>Тестирование maven плагинов</title>
      <link>https://dernasherbrezon.com/posts/testing-maven-plugins/</link>
      <pubDate>Fri, 15 Nov 2019 19:49:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/testing-maven-plugins/</guid>
      <description>Часть моей хобби инфраструктуры завязана на .deb пакеты и apt репозитории. Чтобы со всем этим работать из java, я написал несколько maven плагинов и выложил в открытый доступ. Один из этих плагинов - deb-maven-plugin. Он позволяет собирать из java проекта .deb пакет. Этот формат пакетов имеет достаточно сложную структуру и большое историческое наследие. Я очень тщательно разобрался с тем, как собирать такой пакет для java проектов и создал плагин, который сильно облегчает сборку.</description>
    </item>
    
    <item>
      <title>В поисках хорошего кода</title>
      <link>https://dernasherbrezon.com/posts/code-smells/</link>
      <pubDate>Thu, 14 Nov 2019 18:22:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/code-smells/</guid>
      <description>В январе 2019 года я поставил себе задачу добавить поддержку спутников из gr-satellites в свой проект r2cloud. На тот момент их было около 70. Это достаточно большое количество, добавление которых, по моим оценкам, может занять до конца года. Однако, как показал опыт, я справился где-то за месяц. Некоторые спутники уже сгорели в атмосфере, поэтому их нет смысла добавлять. Некоторые спутники не предоставляют формат своей телеметрии, поэтому полученные биты данных, так и остаются битами данных.</description>
    </item>
    
    <item>
      <title>Я слежу за спутниками</title>
      <link>https://dernasherbrezon.com/posts/satellite-telemetry/</link>
      <pubDate>Thu, 24 Oct 2019 21:40:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/satellite-telemetry/</guid>
      <description>Вступление Иногда в разговоре с разными людьми речь заходит о моём хобби. В таком случае я говорю, что слежу за спутниками. Для большинства это объяснение не слишком-то информативно, поэтому оно идеально подходит для того, чтобы продолжить разговор и одновременно возбудить любопытство. Однако, не все могут лично со мной пообщаться, поэтому в этом посте я хотел бы рассказать о том, что такое - следить за спутниками.
Телеметрия Первое, что приходит людям на ум, когда говоришь &amp;ldquo;следить за спутниками&amp;rdquo; - это шпионские страсти.</description>
    </item>
    
    <item>
      <title>Синхронизация кадров в Метеор-М №2</title>
      <link>https://dernasherbrezon.com/posts/meteor-mn2-frame-synchronization/</link>
      <pubDate>Fri, 13 Sep 2019 22:30:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/meteor-mn2-frame-synchronization/</guid>
      <description>Введение Спутник Метеор-М №2 передаёт информацию согласно протоколу LRPT. Этот протокол определяет физический, канальный и сетевой уровни модели OSI. На физическом уровне используется QPSK модуляция. На канальном уровне LRPT подразумевает использование кадров фиксированного размера с интерливингом и несколькими методами коррекции ошибок. Однако, на практике Метеор-М №2 не использует часть алгоритмов из стандарта. В этой статье я хотел бы описать как необходимо синхронизировать и получать кадры Метеор-М №2.
Генерация кадров Прежде, чем делать получение кадров, необходимо понять как они создаются на спутнике.</description>
    </item>
    
    <item>
      <title>Логирование из Java в Journald</title>
      <link>https://dernasherbrezon.com/posts/journald-java/</link>
      <pubDate>Tue, 03 Sep 2019 21:22:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/journald-java/</guid>
      <description>Недавно обнаружил одну интересную особенность journald, которую сразу же решил использовать в r2cloud.
Для начала немного о том, как вообще работает логирование. Большинство Linux дистрибутивов перешли на systemd. Эта система имеет множество различных фич, в том числе поддержку логирования - journald. Чем же это логирование лучше syslog:
 Структурированные логи. Каждая запись в логе имеет некоторую мета информацию. Например, уровень (INFO, DEBUG, ERROR), дату, сообщение и пр. В syslog же, запись в логе это строка текста, которую нужно правильно парсить.</description>
    </item>
    
    <item>
      <title>История одной картинки</title>
      <link>https://dernasherbrezon.com/posts/decoding-meteor-m/</link>
      <pubDate>Mon, 26 Aug 2019 08:31:17 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/decoding-meteor-m/</guid>
      <description>Введение В ноябре 2018 года команда конференции JPoint объявила о конкурсе докладов для будущей конференции. Я очень воодушевился и решил подать свою заявку. В своём докладе я хотел рассказать о том, как я декодировал сигнал со спутника Meteor-M 2. В декабре мне позвонили организаторы и мы немножко поговорили про меня и мой доклад. Он им показался интересным и они попросили меня набросать презентацию и текст.
На январских праздниках я засел за презентацию и сделал, как мне кажется, неплохой доклад.</description>
    </item>
    
    <item>
      <title>Декодирование телеметрии Aistechsat-3</title>
      <link>https://dernasherbrezon.com/posts/aistechsat-3/</link>
      <pubDate>Wed, 21 Aug 2019 14:40:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/aistechsat-3/</guid>
      <description>Вступление Наступило лето, а это значит начался отпускной сезон. Самое время немного расслабиться и добавить декодирование телеметрии для новых спутников. С января Daniel добавил десяток новых спутников. Я начал с Aistechsat-3.
Декодирование Как и в других случаях я взял готовый демодулятор и реализовал его на Java. Daniel написал, что формат телеметрии задокументирован, но он не успел задекодировать телеметрию.
Казалось бы, что может пойти не так? Документация есть, данные есть. Надо просто написать код.</description>
    </item>
    
    <item>
      <title>Расчёт вероятности ошибки для BPSK демодулятора</title>
      <link>https://dernasherbrezon.com/posts/jradio-ber-bpsk/</link>
      <pubDate>Fri, 16 Aug 2019 10:22:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/jradio-ber-bpsk/</guid>
      <description>Введение Спустя несколько недель я наконец-то закончил одну очень важную задачу - расчёт вероятности ошибки в BSPK демодуляторе. Почему это важно? Демодулятор работает с сигналом, который проходит через физическую среду. В этой среде возможны сильные или слабые возмущения, которые непосредственно влияют на сигнал. И принимаемый сигнал может меняться со временем от хорошего до плохого и обратно. Из-за этого нельзя однозначно сказать демодулятор &amp;ldquo;работает&amp;rdquo; или &amp;ldquo;не работает&amp;rdquo;. Чтобы оценить его эффективность, необходимо симулировать среду передачи данных и сказать сколько ошибок он выдаёт при разных возмущениях среды.</description>
    </item>
    
    <item>
      <title>Тестирование SDR Filter v1.1</title>
      <link>https://dernasherbrezon.com/posts/test-sdr-filter/</link>
      <pubDate>Thu, 08 Aug 2019 19:20:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/test-sdr-filter/</guid>
      <description>Одна из моих базовых станций принимает очень много помех. Из-за низкой чувствительности rtl-sdr, полезный сигнал почти нельзя получить. У меня возникла идея о том, что часть помех может приходить от USB разъёма RPi. Чтобы проверить эту идею, я недавно приобрёл SDR Filter v1.1 от компании ExpElectroLab и решил сделать на него небольшое видео ревью.
  Процесс тестирования Самое интересное началось сразу же после распаковки устройства. Дело в том, что входящий USB порт формата Type B.</description>
    </item>
    
    <item>
      <title>Тестирование FM фильтров с помощью RTL-SDR</title>
      <link>https://dernasherbrezon.com/posts/test-fm-filter/</link>
      <pubDate>Sun, 14 Jul 2019 14:20:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/test-fm-filter/</guid>
      <description>TL;TR; Фильтры тестировать можно, но выводы нужно делать аккуратно.
Постановка задачи Архитектура rtl sdr требует специального фильтра на входе. Поскольку сильнешими источниками сигнала являются фм станции, то я решил поставить фм фильтры на входе приёмника. Но прежде, чем устанавливать их, мне хотелось измерить частотные характеристики фильтров и пощупать их в деле. Для этого я купил несколько фм фильтров и собрал стэнд для их тестирования.
Описание стэнда Тестирование заключается в том, что генератор сигнала создаёт широкополосный шум по всей ширине спектра.</description>
    </item>
    
    <item>
      <title>Работа с bash pipe из java</title>
      <link>https://dernasherbrezon.com/posts/bash-pipe-in-java/</link>
      <pubDate>Tue, 09 Jul 2019 20:50:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/bash-pipe-in-java/</guid>
      <description>Постановка задачи Не так давно передо мной встала задача работать с нативным приложением из java. Это приложение - rtl_sdr. Суть его работы достаточно простая: оно подключается к USB, читает данные и пишет их в файл или в stdout.
А дальше Обычно нативные приложения не рекомендуется запускать из JVM. Дело в том, что как только управление передаётся из JVM вовне, то все предоставленные гарантии JVM теряются. Но если хочется, то вызвать приложение можно так:</description>
    </item>
    
    <item>
      <title>Динамический диапазон rtl-sdr</title>
      <link>https://dernasherbrezon.com/posts/dynamic-range/</link>
      <pubDate>Sun, 30 Jun 2019 22:22:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/dynamic-range/</guid>
      <description>Ниже я сделал перевод одной замечательной заметки Mile Kokotov о динамическом диапазоне rtl-sdr. Это очень важный показатель, которым я заинтересовался и решил разобраться. Возможно кому-нибудь это тоже будет полезно.
 Большинство людей думает, что наиболее важной характеристикой радиоприёмника является чувствительность, но это не совсем так. Вообще, спроектировать и произвести приёмник с высокой чувствительностью не проблема. Гораздо сложнее для инженеров спроектировать приёмник с большим динамическим диапазоном, который смог бы принимать как очень слабые сигналы, так и очень сильные одновременно.</description>
    </item>
    
    <item>
      <title>Расчёт SQNR</title>
      <link>https://dernasherbrezon.com/posts/sqnr/</link>
      <pubDate>Thu, 27 Jun 2019 21:22:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/sqnr/</guid>
      <description>Введение Если открыть спецификацию на любой rtl-sdr приемник, то можно увидеть следующую характеристику: АЦП - 8 бит. Почему эта характеристика важна? Почему о ней пишут и что она значит? Я решил разобраться и провёл небольшое расследование.
SQNR АЦП преоразует сигнал из аналогового вида в цифровой. Это преобразование по своей сути всегда неточное. Дело в том, что аналоговый сигнал непрерывный, а цифровой - набор отсчетов. Процесс преобразования сигнала называется квантированием. При этом часть информации теряется, а значит, в терминах обработки сигнала появляется шум.</description>
    </item>
    
    <item>
      <title>JavaFX в 2019</title>
      <link>https://dernasherbrezon.com/posts/javafx-in-2019/</link>
      <pubDate>Sun, 16 Jun 2019 10:20:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/javafx-in-2019/</guid>
      <description>Зачем? Зачем вообще кому-то писать толстый клиент в 2019 году? Web и atom уже победили. Можно поставить браузер или еще 8Гб оперативной памяти и получить переливающееся приложение. К сожалению, не все задачи можно решать через web. Для измерения АЧХ фильтров, мне необходимо было достаточно простое приложение:
 запуск rtl_power и вывод результатов в виде графика чтение .csv файла и вывод в виде графика график должен реагировать на мышь и показывать текущее значение по X и Y  Понятно, что для такого простого приложения использовать web + web server или atom - это слишком.</description>
    </item>
    
    <item>
      <title>Время в Raspberrypi</title>
      <link>https://dernasherbrezon.com/posts/time-raspberrypi/</link>
      <pubDate>Sat, 08 Jun 2019 14:22:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/time-raspberrypi/</guid>
      <description>Разобраться со временем в Raspberrypi (RPi) меня сподвиг один достаточно неприятный баг. В какой то момент моя базовая станция r2cloud просто переставала отправлять данные на сервер. В логах приложения при этом появляется следующая ошибка:
Jun 07 09:17:51 raspberrypi java[472]: java.lang.IllegalArgumentException: Bad sample time: 1559899071. Last update time was 1559902330, at least one second step is required Jun 07 09:17:51 raspberrypi java[472]: at com.aerse.core.RrdDb.store(RrdDb.java:799) Jun 07 09:17:51 raspberrypi java[472]: at com.aerse.core.Sample.update(Sample.java:194)  Что же это означает?</description>
    </item>
    
    <item>
      <title>Расчёт мощности радиосигнала</title>
      <link>https://dernasherbrezon.com/posts/power-in-radio-channel/</link>
      <pubDate>Wed, 29 May 2019 07:48:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/power-in-radio-channel/</guid>
      <description>Нашёл в Интернете совершенно потрясающую визуализацию изменения мощности при передаче радио сигнала:

Это картинка описывает как изменяется мощность от передатчика к приёмнику. Формула следующая:
$$ P_r = P_t - L_{tc} + G_{ta} - L_{all} + G_{ra} - L_{rc} $$
Где,
 \( P_r \) - результирующая мощность полученного сигнала \( P_t \) - мощность передачи сигнала \(L_{tc}\) - потери в кабеле при передаче сигнала от передатчика на его антенну \(G_{ta}\) - усиление антенны \(L_{all}\) - потери в среде \(G_{ra}\) - усиление принимающей антенны \(L_{rc}\) - потери в кабеле приёмника  Большинство параметров достаточно очевидны, но собранные все вместе они дают хорошую картину изменения мощности.</description>
    </item>
    
    <item>
      <title>Расчёт вероятности ошибки для BPSK</title>
      <link>https://dernasherbrezon.com/posts/ber-bpsk/</link>
      <pubDate>Sun, 05 May 2019 18:22:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/ber-bpsk/</guid>
      <description>Введение Моя сеть приёма сигналов со спутников r2cloud постепенно растёт. Однако уровень приёма оставляет желать лучшего. Несмотря на то, что на спектограмме виден сигнал, демодулятор не может восстановить его. В попытках найти проблему, я понял, что мне не хватает фундаментальных знаний по теории обработки сигналов и некоторой математики. Дело в том, что в интернете зачастую выкладываются демодуляторы без обоснования их работы. Меня это не устраивает, потому что нужны метрики по которым я буду понимать насколько один алгоритм эффективнее другого.</description>
    </item>
    
    <item>
      <title>Подписанные ссылки</title>
      <link>https://dernasherbrezon.com/posts/signed-urls/</link>
      <pubDate>Wed, 01 May 2019 18:22:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/signed-urls/</guid>
      <description>Почти все REST сервисы имеют аутентификацию. Есть несколько способов её сделать:
 basic. В каждый запрос добавляется заголовок &amp;ldquo;Authorization&amp;rdquo; с логином и паролем.  GET / HTTP/1.1 Host: example.org Authorization: Basic Zm9vOmJhcg==  token. REST сервис обменивает логин и пароль на специальный токен аутентификации. Клиент должен все последующие запросы делать с этим токеном.  GET / HTTP/1.1 Host: example.org Authorization: Bearer 9yro9yueihfw497y33497y3oeiruhfvskdgjhfaowidayuh Аутентификация на основе токенов наиболее безопасная и гибкая. Токены можно отзывать и обновлять, в них можно класть дополнительную информацию.</description>
    </item>
    
    <item>
      <title>Тестирование ошибок файловой системы</title>
      <link>https://dernasherbrezon.com/posts/test-fs-failures/</link>
      <pubDate>Sat, 20 Apr 2019 21:50:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/test-fs-failures/</guid>
      <description>Большинство статей в моём блоге посвящены интересным вещам, с которыми я периодически сталкиваюсь. Эта статья не исключение. В одном из моих проектов - r2cloud я столкнулся с одной интересной ошибкой.
Вот, что мне удалось восстановить глядя на логи и исходный код:
 Диск полностью заполнился В какой-то момент времени обновилась конфигурация. Например, обновилось текущее значение PPM При попытке записать в файл, происходит ошибка IOException &amp;ldquo;no disk space&amp;rdquo; Файл пользовательских настроек полностью портится.</description>
    </item>
    
    <item>
      <title>Сжимание I/Q потока на raspberrypi</title>
      <link>https://dernasherbrezon.com/posts/rtlsdr-gzip/</link>
      <pubDate>Mon, 04 Mar 2019 17:22:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/rtlsdr-gzip/</guid>
      <description>Недавно я добавил поддержку более 20 спутников в r2cloud. Из-за этого принимаемых данных стало значительно больше и диск переполнился. Чтобы как-то решить эту проблему, я уменьшил количество сохраняемых наблюдений. Теперь сохраняются последние 3 наблюдения для каждого спутника. Это не сильно помогло:
Дело в том, что при пролёте спутника, я сохраняю данные в raw I/Q с частотой пример 240 000 сэмплов в секунду. Это создаёт файл:
240 000 байт/сек * 2 (канала) * 12 минут = 288000000 байт = ~288мб Почему такая большая частота?</description>
    </item>
    
    <item>
      <title>Производительность rtl_sdr на raspberrypi</title>
      <link>https://dernasherbrezon.com/posts/rtlsdr-perf/</link>
      <pubDate>Sat, 02 Mar 2019 18:22:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/rtlsdr-perf/</guid>
      <description>Очень часто в сети можно встретить гиды по быстрой сборке на коленке анализатора радио с помощью rtl_sdr и raspberrypi. Большинство таких гидов ограничивается достаточно простым описанием: &amp;ldquo;возьмите одно вставьте другое, потом немного питоновских скриптов и у вас всё получится&amp;rdquo;. Для новичков и просто любителей DIY - это прекрасный подход. Можно достаточно быстро познакомится с технологией и увидеть результат. Но что делать если нужно собрать что-то более продвинутое? Что если важна производительность?</description>
    </item>
    
    <item>
      <title>Тестирование JSP тэгов</title>
      <link>https://dernasherbrezon.com/posts/jsp-tag-testing/</link>
      <pubDate>Sat, 02 Mar 2019 12:48:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/jsp-tag-testing/</guid>
      <description>Недавно для себя открыл совершенно бесплатный для open source проектов sonarcloud. Я верю, что статичный анализ кода - это очень полезная штука, поэтому сразу же решил перевести свои наиболее популярные проекты туда.
Среди них был достаточно маленький проект jtimeago. Это небольшая библиотека jsp тэгов для вывода дат.
После добавления проекта через travis, я увидел, что jtimeago полностью зеленый.
Если зайти на страницу проекта в sonarcloud, то видно что все показатели хорошие за исключением нескольких мелких code smells.</description>
    </item>
    
    <item>
      <title>Приватный репозиторий в Ubuntu</title>
      <link>https://dernasherbrezon.com/posts/ubuntu-private-repo/</link>
      <pubDate>Thu, 07 Jun 2018 10:07:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/ubuntu-private-repo/</guid>
      <description>В Ubuntu репозитории – это специальные сервера-хранилища для приложений. Если Вы разрабатываете коммерческое приложение и запускаете его в Ubuntu, то логично положить его в репозиторий. А потом управлять этим приложением так же, как и обычными системными приложениями. Для этого нужно поднять в локальной сети или облаке apache, настроить логин и пароль, не забывать его обновлять&amp;hellip;Но что если есть другой способ?
Облачные хранилища С помощью apt-transport-s3 можно превратить bucket в приватный apt репозиторий.</description>
    </item>
    
    <item>
      <title>DSP на Java</title>
      <link>https://dernasherbrezon.com/posts/dsp-java/</link>
      <pubDate>Thu, 08 Mar 2018 17:22:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/dsp-java/</guid>
      <description>Java - язык программирования общего назначения. Общего назначения - значит можно писать почти любые программы. Вот я и попытался написать программу, которую обычно пишут на С или C++. Под катом я попытаюсь рассказать, как я декодировал спутниковые снимки с Метеор-М №2.
Предисловие Когда я впервые заинтересовался декодированием спутниковых сигналов, то был, прямо говоря, удивлён. Сейчас софт для декодирования сигналов выглядит так же, как и библиотеки общего назначения лет 20 назад. Каждый пишет, что хочет, в каком хочет формате и совершенно не заботится о результатах.</description>
    </item>
    
    <item>
      <title>Тестирование debian пакетов в Travis-CI</title>
      <link>https://dernasherbrezon.com/posts/test-deb-travis/</link>
      <pubDate>Sat, 04 Nov 2017 13:51:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/test-deb-travis/</guid>
      <description>Возникла передо мной такая задача: тестирование debian пакета. И требования:
 пакет устанавливает и стартует systemd сервис. используются native armhf библиотеки  Тестирование должно включать в себя:
 установка пакета на чистую систему: проверка наличия зависимостей запуск: проверка зависимостей в рантайме тестирование запущенного приложения: проверка prod конфигурации  Введение Как обычно, первым делом необходимо оглядеться по сторонам и поискать уже существующие решения и подходы. Системе Debian уже 20+ лет и я не должен быть первым, кому пришло в голову тестирование пакетов.</description>
    </item>
    
    <item>
      <title>Управление сертификатами с помощью протокола ACME</title>
      <link>https://dernasherbrezon.com/posts/java-acme/</link>
      <pubDate>Sun, 10 Sep 2017 16:45:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/java-acme/</guid>
      <description>Возникла передо мной такая задача: автоматический выпуск сертификатов для Web приложения. И требования:
 CA должны доверять все браузеры т.е. самоподписанные сертификаты не подходят; желательно бесплатно; Выпуск надо делать программно с помощью Java Embedded compact1 profile. Это всё по следам Java и без 16Gb памяти?.  Наверное многие уже слышали про бесплатные сертификаты от LetsEncrypt и certbot. А можно ли certbot заменить Java?
ACME Многие, конечно, любят LetsEncrypt за бесплатные сертификаты, которые, фактически, позволят перевести весь вэб на https.</description>
    </item>
    
    <item>
      <title>Мониторинг Raspberry PI</title>
      <link>https://dernasherbrezon.com/posts/raspberrypi-monitoring/</link>
      <pubDate>Mon, 31 Jul 2017 12:45:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/raspberrypi-monitoring/</guid>
      <description>Возникла передо мной такая задача: сделать мониторинг Raspberry PI. И требования:
 самодостаточность. Возможность показывать статус и исторические данные без доступа в интернет; работа в Java Embedded compact1 profile. Это всё по следам Java и без 16Gb памяти?.  Анализ требований Здесь и далее под мониторингом системы я буду понимать сбор time series данных. Например, JVM heap size или количество обработанных сообщений за интервал.
Самодостаточность автоматически означает, что данные надо хранить локально.</description>
    </item>
    
    <item>
      <title>Java и без 16Gb памяти?</title>
      <link>https://dernasherbrezon.com/posts/java-small-heap/</link>
      <pubDate>Sun, 16 Jul 2017 15:11:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/java-small-heap/</guid>
      <description>Однажды меня посетила мысль о том, что надо закодить что-нибудь на Java для RaspberryPI. Предыстория того, как я дошёл до жизни такой, сама по себе потянет на отдельный пост. Но вот сочные технические подробности, трудности и счастливый конец ниже под катом.
Постановка задачи Немного разочаровавшись в движении проекта satnogs, я решил попробовать сам написать базовую станцию для приёма радио сигналов на raspberry pi. Проанализировав текущую функциональность satnogs и сложив с собственным заскорузлым enterprise пониманием того, что такое стабильная платформа, я придумал следующие требования:</description>
    </item>
    
    <item>
      <title>Enterprise Java на страже космоса</title>
      <link>https://dernasherbrezon.com/posts/enterprise-java-space/</link>
      <pubDate>Sat, 08 Apr 2017 12:48:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/enterprise-java-space/</guid>
      <description>Научно технический прогресс постепенный по своей природе. Никто не берет горсть песка с пляжа и делает из нее компьютер. Мы берем грубые инструменты и создаем с помощью них более качественные. Затем с помощью последних еще более точные и так далее. Каждое малое усовершенствование - это ступенька прогресса и все они должны быть пройдены.
Председатель Шенчжи Ян.
 В сознании каждого человека есть одна простая мысль: космические технологии - это сложно.</description>
    </item>
    
    <item>
      <title>Дистрибьюция Java приложений</title>
      <link>https://dernasherbrezon.com/posts/java-dist/</link>
      <pubDate>Tue, 18 Aug 2015 13:55:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/java-dist/</guid>
      <description>Удивительно, но факт - дистрибьюция Java приложений в 21 веке по прежнему огромный костыль. Разработчики до сих пор придумывают способы вроде rsync/copy-paste/wget для установки java приложений на сервер. И только монструозные enterprise production ready платформы иногда позволяют сделать чуть больше - откатить приложение на предыдущую версию. В этой статье я хотел бы рассказать о доступном и простом способе организации дистрибьюции.
deb и apt В мире существует множество действительно гигантских репозиториев приложений и инструментов по их дистрибьюции.</description>
    </item>
    
    <item>
      <title>Спецификация конструкции CubeSat</title>
      <link>https://dernasherbrezon.com/posts/cubespec/</link>
      <pubDate>Tue, 24 Sep 2013 13:14:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/cubespec/</guid>
      <description>1. Введение. CubeSat (Cube Satellite - кубический спутник, КубСат) - это малые спутники (пикоспутники) модульной кубической формы. Самый маленький имеет длину ребра 10 см и массу до 1.33кг. Более крупные спутники имеют форму и массу, кратные 1.5x, 2x, 3x одиночных модулей, состыкованным друг с другом по одной линии.
1.1 История создания Проект CubeSat был начат в 1999 году совместными усилиями профессора Джорди Пьюг-Суари (Prof. Jordi Puig-Suari) из Калифорнийского Политехнического Университета (California Polytechnic State University), Сан Луис Обиспо (San Luis Obispo), профессором Бобом Твиггсом (Prof.</description>
    </item>
    
    <item>
      <title>Оптимизация web приложения с помощью YourKit и JMeter</title>
      <link>https://dernasherbrezon.com/posts/webapp-perf/</link>
      <pubDate>Fri, 28 Dec 2012 14:58:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/webapp-perf/</guid>
      <description>Постановка задачи  web server - Jetty. Запускается в embedded режиме с помощью spring. Общая настройка очень похожа на http://wiki.eclipse.org/Jetty/Howto/Spring IoC - spring 3.0.5 Servlet - собственный сервлет для роутинга запросов к обработчикам. Mysql 5.5, jdbc driver 5.1.21 view - JSP + JSTL YourKit 11 JMeter 2.8  Приложение:
 две страницы требующие локализации. первая - статичная страница (главная). Собирается из разных кусочков jsp вторая - динамичная. Отображает некоторую сущность. Например товар и его свойства.</description>
    </item>
    
    <item>
      <title>Log4j DOMConfigurator</title>
      <link>https://dernasherbrezon.com/posts/dom4jconfigurator/</link>
      <pubDate>Thu, 11 Oct 2012 15:14:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/dom4jconfigurator/</guid>
      <description>DOMConfigurator не поддерживает подстановку свойств при реконфигурации. Будьте бдительны!
Use case:
 Конфигурация по умолчанию с использованием log4j.configuration параметра Получение свойств и проставление через System.setProperty() DOMConfigurator.configure(System.getProperty(&amp;quot;log4j.configuration&amp;quot;))  </description>
    </item>
    
    <item>
      <title>Производительность функции split</title>
      <link>https://dernasherbrezon.com/posts/splitperf/</link>
      <pubDate>Sat, 11 Aug 2012 15:14:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/splitperf/</guid>
      <description>В одном из проектов в очередной раз пришлось писать собственную реализацию split строки, в связи с этим заинтересовался о производительности различных решений.
Для тестирования выбраны следующие кандидаты:
 JDK Guava Apache commons-lang Custom  Проводилось тестирование следующих параметров в различных комбинациях: короткая строка большое количество итераций, длинная строка малое количество итераций.
Поскольку Guava поддерживает lazy вычисление, то была добавлена ещё одна комбинация: отложенная итерация по результатам и непосредственная итерация.
В результате получились следующие значения:</description>
    </item>
    
    <item>
      <title>Сборка пакета с помощью debconf</title>
      <link>https://dernasherbrezon.com/posts/debconf/</link>
      <pubDate>Sat, 11 Aug 2012 13:14:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/debconf/</guid>
      <description>Недавно столкнулся с задачей создания .deb пакета. Поскольку информация в сети разбросана и само описание команд debhelper несколько сумбурно, ниже привожу список действий помогающих собрать архив с нуля:
Создание исходников.
#: mkdir package-1.0 #: echo &amp;quot;Sample file in package&amp;quot; &amp;gt; package-1.0/file  Создание специального архива с исходниками
#: tar czf package-1.0.tar.gz package-1.0/ #: dh_make -c apache -f ../package-1.0.tar.gz  Редактирование параметров пакета.
#: nano debian/control  Создание конфигураций:
#: nano debain/package.</description>
    </item>
    
    <item>
      <title>Выбор быстрого алгоритма поиска подстроки</title>
      <link>https://dernasherbrezon.com/posts/substring/</link>
      <pubDate>Mon, 11 Jun 2012 13:14:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/substring/</guid>
      <description>Есть такая задача: отфильтровать строки в множестве файлов. Вариантов решения я вижу несколько:
 ReplaceAll. String.replaceAll(&amp;ldquo;pattern&amp;rdquo;,&amp;quot;$1&amp;quot; + 1); Pattern. Pattern p = Pattern.compile(&amp;ldquo;pattern&amp;rdquo;); and etc. Ручной способ через indexOf и substring  Первый способ можно сразу отбросить так как он медленный: на каждый файл будет компилироваться pattern. На следующих двух можно остановиться поподробнее.
У меня было чувство что ручной способ всегда быстрее, хоть и немного дольше в реализации. Я написал небольшой тест, чтобы проверить насколько быстрее.</description>
    </item>
    
    <item>
      <title>Производительность Hibernate Validator</title>
      <link>https://dernasherbrezon.com/posts/hibernate-perf/</link>
      <pubDate>Wed, 11 Apr 2012 13:14:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/hibernate-perf/</guid>
      <description>Недавно столкнулся с библиотекой Hibernate Validator и jsr 303 в частности. Ниже привожу небольшой микро-бенчмарк тестирования производительности. Тестовый POJO:
public class BusinessObject { @NotBlank private String name; @CustomNotNull(groups = { APIValidationGroup.class }) private String uuid; public String getName() { return name; } public void setName(String name) { this.name = name; } public String getUuid() { return uuid; } public void setUuid(String uuid) { this.uuid = uuid; } }  Для чистоты эксперимента и приближения к реальному сценарию я сделал кастомную валидацию, которая просто проверяет на null:</description>
    </item>
    
    <item>
      <title>Оптимизация spring jmx</title>
      <link>https://dernasherbrezon.com/posts/spring-jmx-tuning/</link>
      <pubDate>Sun, 11 Dec 2011 13:14:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/spring-jmx-tuning/</guid>
      <description>Spring по умолчанию позволяет настроить экспорт бинов в jmx. Сделано это через удобные аннотации @ManagedResource. Однако существует сценарий при котором поведение по умолчанию не совсем подходит. Рассмотрим этот случай:
 spring context лениво инициализируется. Очень удобно если есть некоторый db-context.xml в котором описаны все Datasource. Соответственно инициализируются только те которые используются. Также очень удобно при ограниченных ресурсах. fail-fast + старт только необходимого. org.springframework.jmx.export.MBeanExporter умеет инициализировать JMX бины для ленивых spring бинов.</description>
    </item>
    
    <item>
      <title>Оптимизация spring-mvc</title>
      <link>https://dernasherbrezon.com/posts/spring-mvc-tuning/</link>
      <pubDate>Fri, 11 Nov 2011 13:14:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/spring-mvc-tuning/</guid>
      <description>Общие решения всегда медленнее частных. Ниже я собираюсь немного оптимизировать spring-mvc. Оптимизация прежде всего рассчитана на уменьшение генерируемого мусора. Прежде чем начать оптимизировать надо определиться какие функции фреймворка можно выкинуть и какими фичами пренебречь:
 ISO-8859-1-encoded URLs. Человеко-понятные-урл (ЧПУ) используются SEO продвижения в поисковых движках. Но что если это не нужно? Зачем на каждый запрос тратить процессорное время и память? Всегда абсолютные пути для сервлетов-контроллёров. По умолчанию spring-mvc позволяет использовать относительные пути для include запросов.</description>
    </item>
    
    <item>
      <title>Запуск Jetty Embedded через spring</title>
      <link>https://dernasherbrezon.com/posts/jetty-embedded-maven/</link>
      <pubDate>Thu, 11 Nov 2010 13:14:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/jetty-embedded-maven/</guid>
      <description>Для начала необходимо добавить зависимости в pom.xml:
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.eclipse.jetty&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;jetty-server&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;7.2.0.RC0&amp;lt;/version&amp;gt; &amp;lt;exclusions&amp;gt; &amp;lt;exclusion&amp;gt; &amp;lt;groupId&amp;gt;org.mortbay.jetty&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;test-jndi-webapp&amp;lt;/artifactId&amp;gt; &amp;lt;/exclusion&amp;gt; &amp;lt;exclusion&amp;gt; &amp;lt;groupId&amp;gt;org.mortbay.jetty&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;test-annotation-webapp&amp;lt;/artifactId&amp;gt; &amp;lt;/exclusion&amp;gt; &amp;lt;exclusion&amp;gt; &amp;lt;groupId&amp;gt;org.mortbay.jetty&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;test-jaas-webapp&amp;lt;/artifactId&amp;gt; &amp;lt;/exclusion&amp;gt; &amp;lt;exclusion&amp;gt; &amp;lt;groupId&amp;gt;org.mortbay.jetty&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;example-async-rest-webapp&amp;lt;/artifactId&amp;gt; &amp;lt;/exclusion&amp;gt; &amp;lt;/exclusions&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.eclipse.jetty&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;jetty-servlet&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;7.2.0.RC0&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.eclipse.jetty&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;jetty-jsp-2.1&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;7.2.0.RC0&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.eclipse.jetty&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;jetty-webapp&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;7.2.0.RC0&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-core&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;3.0.1.RELEASE&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-context&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;3.0.1.RELEASE&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-web&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;3.0.1.RELEASE&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-webmvc&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;3.0.1.RELEASE&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; Затем в main-class указать:
Server server = new Server(9090); ServletHolder holder = new ServletHolder(new DispatcherServlet()); holder.</description>
    </item>
    
    <item>
      <title>Рефакторинг старых систем</title>
      <link>https://dernasherbrezon.com/posts/refactoring-legacy/</link>
      <pubDate>Mon, 11 May 2009 13:14:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/refactoring-legacy/</guid>
      <description>Навеяно http://www.amazon.com/Working-Effectively-Legacy-Robert-Martin/dp/0131177052
Мне достаточно часто приходилось работать с наследными системами. Поэтому выработал некоторые свои собственные интересные практики при работе с такими системами.
 Зачастую имена классов, методов и переменных не отражают сути. В таких случаях обычно переименовывают их. Однако в наследных системах такого делать не рекомендуется. Даже при использовании мощных инструментов в современных IDE. Это связано с тем что в конечном итоге подобные системы собираются своими скриптами сборки, зачастую такими же запутанными и очень confuse&amp;rsquo;ными как и сам код.</description>
    </item>
    
    <item>
      <title>Glassfish Async JMS JCA</title>
      <link>https://dernasherbrezon.com/posts/glassfish-async-jms-jca/</link>
      <pubDate>Sat, 11 Apr 2009 13:14:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/glassfish-async-jms-jca/</guid>
      <description>Достаточно интересное и недокументированное поведение Glassfish v.2.0.
Если в потоке вызова endpointActivation(...) в реализации Resource Adapter&amp;rsquo;a вызвать метод consumer.setMessageListener(...) то потоки асинхронного получения сообщения не создадутся. С чем это связано - неизвестно. Исходные коды не смотрел. Возможно с требованиями спецификации о создании потоков через WorkManager. Но разработчик не контролирует создания потоков в JMS клиенте!
Решение:
 Создать инициализацию message listener&amp;rsquo;a в отдельном потоке через WorkManager.  </description>
    </item>
    
    <item>
      <title>IMQ Connection Concurrent Glassfish</title>
      <link>https://dernasherbrezon.com/posts/imq-connection-glassfish/</link>
      <pubDate>Sun, 11 Jan 2009 13:14:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/imq-connection-glassfish/</guid>
      <description>Наблюдается следующая проблема:
thread1:
javax.jms.Connection conn = connFactory.createConnection(); Work connectionHandler = new MyWorker(conn); WorkManager.scheduleWork(connectionHandler);  thread2 (MyWorker):
Session s = conn.createSession(...); Consumer c = s.createConsumer(someDestination); Message m = c.receive();  При receive JMSException и пишет что consumer closed. Однако если:
thread1:
Work connectionHandler = new MyWorker(connFactory); WorkManager.scheduleWork(connectionHandler);  thread2 (MyWorker):
javax.jms.Connection conn = connFactory.createConnection(); Session s = conn.createSession(...); Consumer c = s.createConsumer(someDestination); Message m = c.receive();  То всё работает. Happy holidays</description>
    </item>
    
    <item>
      <title>Интеграция Eclipse и Maven</title>
      <link>https://dernasherbrezon.com/posts/eclipse-maven/</link>
      <pubDate>Sat, 10 Jan 2009 13:14:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/eclipse-maven/</guid>
      <description>Maven в Eclipse - это очень удобно.
Однако при всех достоинствах каждого есть некоторые неудобства интеграции. Например следующий вариант: Есть проект. В нём есть основные исходные коды и для тестов. Соответственно они находятся в разных папках. Есть два builder&amp;rsquo;а. Стандартный JDT и Maven Builder. Я не сильно вдавался в детали их работы, но в первом приближении они компилируют. JDT&amp;rsquo;шный стандартно в output folder для Eclipse&amp;rsquo;a, а maven&amp;rsquo;овский я так понимаю выполняет target compile и помещает скомпилированные классы в target/classes &amp;amp; target/test-classes (по дефолту).</description>
    </item>
    
  </channel>
</rss>
