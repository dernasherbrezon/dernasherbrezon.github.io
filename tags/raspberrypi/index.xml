<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>raspberrypi on dernasherbrezon</title>
    <link>https://dernasherbrezon.com/tags/raspberrypi/</link>
    <description>Recent content in raspberrypi on dernasherbrezon</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 15 Jan 2023 12:59:18 +0000</lastBuildDate><atom:link href="https://dernasherbrezon.com/tags/raspberrypi/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>sx127x для RaspberryPI</title>
      <link>https://dernasherbrezon.com/posts/lora-raspberrypi/</link>
      <pubDate>Sun, 15 Jan 2023 12:59:18 +0000</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/lora-raspberrypi/</guid>
      <description>Продолжая работать над новой библиотекой sx127x, я решил добавить поддержку Linux и RaspberryPI в частности. Помимо чисто практической надобности, мне хотелось понять насколько отличается программирование под микроконтроллеры от обычных операционных систем.
Я с самого начала спроектировал библиотеку достаточно хорошо, поэтому для миграции под Linux потребовалось совсем немного изменений:
 отказаться от esp_err.h и сделать возвращаемые коды типа int вынести работут с SPI в отдельный заголовок и переопределить для разных платформ  Если первый пункт достаточно простой, то со вторым пришлось повозиться.</description>
    </item>
    
    <item>
      <title>Датчик BH1750</title>
      <link>https://dernasherbrezon.com/posts/bh1750/</link>
      <pubDate>Fri, 05 Aug 2022 23:25:18 +0000</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/bh1750/</guid>
      <description>Введение Анализируя графики моей солнечной панели, я обнаружил, что мощность иногда падает практически до нуля. В попытках разобраться в чём же дело, я придумал несколько гипотез. Одна из гипотез заключалась в том, что облако пролетает над солнечной панелью и вызывает резкие изменения в показаниях. Для того, чтобы доказать эту гипотезу, я решил поставить датчик освещённости и в течении дня собирать данные. Если это действительно облако, то освещённость будет падать.
В качестве датчика освещённости я выбрал крайне распространённый BH1750.</description>
    </item>
    
    <item>
      <title>Привязка systemd сервиса к устройству</title>
      <link>https://dernasherbrezon.com/posts/systemd-udev/</link>
      <pubDate>Sat, 21 May 2022 21:54:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/systemd-udev/</guid>
      <description>В одном из постов про поворотное устройство я вскользь упомянул настройку rotctrld. rotctrld - это небольшой демон, который открывает TCP порт и позволяет отправлять команды в tty-устройство. Я написал небольшой systemd конфиг, чтобы демон стартовал и рестартовал во время загрузки raspberrypi.
[Unit] Description=rotctrld Service [Service] WorkingDirectory=/home/pi/r2cloud/ ExecStart=rotctld --model=1401 --port=4533 --listen-addr=127.0.0.1 --rot-file=/dev/ttyUSB0 Restart=always User=pi Group=pi [Install] WantedBy=multi-user.target Однако, со временем стали всплывать достаточно неприятные моменты в обслуживании. Например, поворотное устройство иногда определялось как /dev/ttyUSB1.</description>
    </item>
    
    <item>
      <title>Оптимизация OpenCL на RaspberryPI</title>
      <link>https://dernasherbrezon.com/posts/tune-opencl-raspberrypi/</link>
      <pubDate>Sat, 06 Nov 2021 14:11:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/tune-opencl-raspberrypi/</guid>
      <description>Это третья статья в цикле про мои похождения в области распределённых вычислений. Первая статья была про то, зачем вообще нужен OpenCL и распределённые вычисления. Вторая статья про то, как настроить OpenCL для Raspberrypi, чем отличаются различные режимы работы и драйвера. Эта статья будет про оптимизацию OpenCL кода. Самое важное, что нужно понять: сможет ли GPU заменить или хотя бы приблизиться по производительности к CPU при выполнении Frequency Xlating FIR фильтра.</description>
    </item>
    
    <item>
      <title>Установка OpenCL на RaspberryPI</title>
      <link>https://dernasherbrezon.com/posts/install-opencl-raspberrypi/</link>
      <pubDate>Fri, 05 Nov 2021 18:13:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/install-opencl-raspberrypi/</guid>
      <description>В предыдущей статье я описал основные причины, почему OpenCL вообще нужен, как выглядит типичная программа и какие классы задач стоит считать на GPU. В этой же статье я постараюсь описать установку и настройку OpenCL для RaspberryPI.
VC4CL Проект VC4CL реализует OpenCL 1.2 API для Raspberrypi. Так как OpenCL компилирует kernel во время инициализации основной (host) программы, то нам понадобится компилятор!
Компилятор называется VC4C. Этот компилятор основан на LLVM. Он компилирует kernel в промежуточное представление SPIR-V, которое уже стандартными средствами LLVM проверяется и переводится в ассемблерный код для конкретного GPU.</description>
    </item>
    
    <item>
      <title>OpenCL для RaspberryPI</title>
      <link>https://dernasherbrezon.com/posts/opencl-raspberrypi/</link>
      <pubDate>Mon, 01 Nov 2021 18:13:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/opencl-raspberrypi/</guid>
      <description>Изначально у меня не было планов писать код под GPU. Обработка сигналов спутников на Java вполне возможна. И я продолжаю развивать это направление. Код на Java позволяет достаточно быстро написать обработчик сигнала и внедрить в работающую систему. Также с помощью Java гораздо удобнее обрабатывать неструктурированные или слабо структурированные данные. К таким данным обычно относятся различные высокоуровневые протоколы. Однако, есть и недостатки - скорость. Java не очень подходит для быстрой обработки однотипных данных.</description>
    </item>
    
    <item>
      <title>FMA в Raspberrypi</title>
      <link>https://dernasherbrezon.com/posts/fma-raspberrypi/</link>
      <pubDate>Sat, 16 Oct 2021 15:22:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/fma-raspberrypi/</guid>
      <description>Разбираясь с одним интересным багом в коде DSP фильтра, я с удивлением обнаружил целую область неизведанного в области чисел с плавающий точкой. Есть замечательная статья о том, что каждый программист должен знать об операциях с плавающей точкой. В ней очень подробно описывается проблема и её решение в стандарте IEEE 754. Однако, там нет явного упоминания такой вещи, как FMA (Fused multiply-add). Мне показалось интересным разобраться, как эта технология работает.
FMA FMA - это оптимизация на уровне процессора следующей операции:</description>
    </item>
    
    <item>
      <title>Индивидуальные APT репозитории для CPU</title>
      <link>https://dernasherbrezon.com/posts/apt-for-cpu/</link>
      <pubDate>Sat, 25 Sep 2021 13:17:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/apt-for-cpu/</guid>
      <description>Интересный факт - все приложения, находящиеся в стандартных репозиториях Debian или Ubuntu, скомпилированы с опциями по-умолчанию. Это приводит к интересным последствиям. Например, программисты не используют SIMD инструкции и полагаются на компилятор. Компилятор не всегда может оптимизировать код под конкретный процессор. Из-за этого все супер-быстрые возможности процессоров и невероятные SIMD операции простаивают без дела.
Разработчики Debian объясняют эту особенность тем, что включение поддержки расширенных регистров не даёт существенного ускорения. И, зачастую, это верно.</description>
    </item>
    
    <item>
      <title>Сравнение различных флагов компиляции для Raspberrypi</title>
      <link>https://dernasherbrezon.com/posts/compare-compile-flags-raspberrypi/</link>
      <pubDate>Thu, 23 Sep 2021 21:20:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/compare-compile-flags-raspberrypi/</guid>
      <description>Недавно мне на глаза попалась самая первая версия Raspberry pi и я решил немного поэкспериментировать со старым железом.
Мне было интересно насколько отличается производительность библиотеки volk в зависимости от различных флагов компиляции.
arm1176jzf-s Для начала необходимо определиться с процессором. Как известно, Raspberrypi использует system-on-the-chip (SoC) от broadcom. Это даже написано на самом процессоре: Broadcom BCM2835. Внутри этого чипа находится несколько логических компонентов:
 ядро CPU - ARM arm1176jzf-s ядро GPU - VideoCore 4  К сожалению, стандартные linux инструменты выдают совершенно неправильную информацию о процессоре, поэтому приходится смотреть маркировку прямо на плате и искать информацию в Интернете.</description>
    </item>
    
    <item>
      <title>SIMD для цифровой обработки сигналов</title>
      <link>https://dernasherbrezon.com/posts/simd-for-dsp/</link>
      <pubDate>Mon, 25 Jan 2021 01:10:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/simd-for-dsp/</guid>
      <description>Несмотря на то, что мой блог о разработке на Java, мне иногда приходится расчехлять старые знания и писать на Си. Вообще, программирование на Си - это целый мир со своими заморочками, инструментами и подходами. И он совсем не пересекается с тем, что творится в Java. Это, с одной стороны, немного досадно, так как все накопленные знания не имеют никакого смысла, а с другой стороны немного волнительно, как открытие Америки.
Совсем недавно я придумал одну идею - сделать небольшой TCP сервер, который бы раздавал некоторый диапазон радио частот клиентам.</description>
    </item>
    
    <item>
      <title>Странный Wi-Fi</title>
      <link>https://dernasherbrezon.com/posts/wifi-country-codes/</link>
      <pubDate>Sat, 19 Sep 2020 14:40:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/wifi-country-codes/</guid>
      <description>В процессе исследования странного поведения WiFi в RPi, я наткнулся на довольно интересную информацию. Немногие знают, но WiFi работает в разных странах на разных частотах. Исторически, частоты современного Wifi 2.4Ггц и 5Ггц использовались военными, метеорологическими станциями и радарами. В разных странах они работали немножко на разных частотах, поэтому когда пришёл WiFi, инженеры начали выкручиваться.
Они придумали довольно простой способ - это конфигурация WiFi в зависимости от страны. Несмотря на то, что железо в принципе может работать в широком диапазоне частот, его ограничивают на уровне прошивки в зависимости от страны.</description>
    </item>
    
    <item>
      <title>Питание Raspberrypi</title>
      <link>https://dernasherbrezon.com/posts/power-supply-for-raspberrypi/</link>
      <pubDate>Sat, 29 Aug 2020 00:04:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/power-supply-for-raspberrypi/</guid>
      <description>Если поискать в интернете словосочетание &amp;ldquo;питание для raspberrypi&amp;rdquo;, то можно найти массу статей о том, что нужно использовать официальный блок питания на 5В и 2.5А. Но что, если RPi питается от солнечных панелей и в логах постоянно проскальзывает &amp;ldquo;Under-voltage detected!&amp;rdquo;? Для решения этой проблемы мне немного пришлось повозиться с теорией и корзиной для покупок.
Предыстория Прежде, чем пытаться найти решение, нужно понять начальные условия. Для одной из своих станций слежения за спутниками я решил использовать солнечную панель.</description>
    </item>
    
    <item>
      <title>Время в Raspberrypi - 3</title>
      <link>https://dernasherbrezon.com/posts/time-raspberrypi-3/</link>
      <pubDate>Wed, 19 Aug 2020 18:30:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/time-raspberrypi-3/</guid>
      <description>&amp;ldquo;Да сколько уже можно про время в Raspberrypi?!&amp;rdquo; - скажут некоторые. Однако, несмотря на две предыдущие статьи, мне есть о чём написать. Опять.
Как я уже неоднократно писал, время можно получить двумя способами:
 подключившись к интернету используя RTC модуль  На некоторых станциях у меня стоит RTC модуль, на некоторых нет. Но я не особо переживал по этому поводу, так как станции имели постоянное подключение к интернету.
Запах приключений Всё работало очень хорошо и стабильно, до тех пор пока я не обратил на странное поведения в логах.</description>
    </item>
    
    <item>
      <title>Время в Raspberrypi - 2</title>
      <link>https://dernasherbrezon.com/posts/time-raspberrypi-2/</link>
      <pubDate>Thu, 11 Jun 2020 21:35:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/time-raspberrypi-2/</guid>
      <description>Прошёл почти год с момента написания оригинальной статьи про время в Raspberrypi, и вот я уже снова столкнулся с этой проблемой. На этот раз мне захотелось сделать мобильную станцию слежения за спутниками вместе с поворотным устройством. Мобильность в данном случае означает то, что я могу принести станцию в поле, поймать несколько сигналов во время чтения книги, отнести домой и залить результаты в https://r2server.ru. Проблема оказалась там, где её никто не ждал.</description>
    </item>
    
    <item>
      <title>Время в Raspberrypi</title>
      <link>https://dernasherbrezon.com/posts/time-raspberrypi/</link>
      <pubDate>Sat, 08 Jun 2019 14:22:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/time-raspberrypi/</guid>
      <description>Разобраться со временем в Raspberrypi (RPi) меня сподвиг один достаточно неприятный баг. В какой-то момент моя базовая станция r2cloud просто переставала отправлять данные на сервер. В логах приложения при этом появляется следующая ошибка:
Jun 07 09:17:51 raspberrypi java[472]: java.lang.IllegalArgumentException: Bad sample time: 1559899071. Last update time was 1559902330, at least one second step is required Jun 07 09:17:51 raspberrypi java[472]: at com.aerse.core.RrdDb.store(RrdDb.java:799) Jun 07 09:17:51 raspberrypi java[472]: at com.aerse.core.Sample.update(Sample.java:194)  Что же это означает?</description>
    </item>
    
    <item>
      <title>Сжимание I/Q потока на Raspberrypi</title>
      <link>https://dernasherbrezon.com/posts/rtlsdr-gzip/</link>
      <pubDate>Mon, 04 Mar 2019 17:22:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/rtlsdr-gzip/</guid>
      <description>Недавно я добавил поддержку более 20 спутников в r2cloud. Из-за этого принимаемых данных стало значительно больше и диск переполнился. Чтобы как-то решить эту проблему, я уменьшил количество сохраняемых наблюдений. Теперь сохраняются последние 3 наблюдения для каждого спутника. Это не сильно помогло:
Дело в том, что при пролёте спутника, я сохраняю данные в raw I/Q с частотой пример 240 000 сэмплов в секунду. Это создаёт файл:
240 000 байт/сек * 2 (канала) * 12 минут = 288000000 байт = ~288мб Почему такая большая частота?</description>
    </item>
    
    <item>
      <title>Производительность rtl_sdr на Raspberrypi</title>
      <link>https://dernasherbrezon.com/posts/rtlsdr-perf/</link>
      <pubDate>Sat, 02 Mar 2019 18:22:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/rtlsdr-perf/</guid>
      <description>Очень часто в сети можно встретить гиды по быстрой сборке на коленке анализатора радио с помощью rtl_sdr и raspberrypi. Большинство таких гидов ограничивается достаточно простым описанием: &amp;ldquo;возьмите одно, вставьте другое, потом немного питоновских скриптов и у вас всё получится&amp;rdquo;. Для новичков и просто любителей DIY - это прекрасный подход. Можно достаточно быстро познакомится с технологией и увидеть результат. Но что делать если нужно собрать что-то более продвинутое? Что если важна производительность?</description>
    </item>
    
    <item>
      <title>Мониторинг Raspberrypi</title>
      <link>https://dernasherbrezon.com/posts/raspberrypi-monitoring/</link>
      <pubDate>Mon, 31 Jul 2017 12:45:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/raspberrypi-monitoring/</guid>
      <description>Возникла передо мной такая задача: сделать мониторинг Raspberry PI. И требования:
 самодостаточность. Возможность показывать статус и исторические данные без доступа в интернет; работа в Java Embedded compact1 profile. Это всё по следам Java и без 16Gb памяти?.  Анализ требований Здесь и далее под мониторингом системы я буду понимать сбор time series данных. Например, JVM heap size или количество обработанных сообщений за интервал.
Самодостаточность автоматически означает, что данные надо хранить локально.</description>
    </item>
    
    <item>
      <title>Java и без 16Gb памяти?</title>
      <link>https://dernasherbrezon.com/posts/java-small-heap/</link>
      <pubDate>Sun, 16 Jul 2017 15:11:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/java-small-heap/</guid>
      <description>Однажды меня посетила мысль о том, что надо закодить что-нибудь на Java для RaspberryPI. Предыстория того, как я дошёл до жизни такой, сама по себе потянет на отдельный пост. Но вот сочные технические подробности, трудности и счастливый конец ниже под катом.
Постановка задачи Немного разочаровавшись в движении проекта satnogs, я решил попробовать сам написать базовую станцию для приёма радио сигналов на raspberry pi. Проанализировав текущую функциональность satnogs и сложив с собственным заскорузлым enterprise пониманием того, что такое стабильная платформа, я придумал следующие требования:</description>
    </item>
    
  </channel>
</rss>
