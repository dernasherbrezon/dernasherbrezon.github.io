<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Тестирование on dernasherbrezon</title>
    <link>https://dernasherbrezon.com/tags/%D1%82%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5/</link>
    <description>Recent content in Тестирование on dernasherbrezon</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ru</language>
    <lastBuildDate>Fri, 10 Nov 2023 21:58:18 +0100</lastBuildDate>
    <atom:link href="https://dernasherbrezon.com/tags/%D1%82%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Тестирование в ESP-IDF</title>
      <link>https://dernasherbrezon.com/posts/testing-in-esp-idf/</link>
      <pubDate>Fri, 10 Nov 2023 21:58:18 +0100</pubDate>
      <guid>https://dernasherbrezon.com/posts/testing-in-esp-idf/</guid>
      <description>Неотъемлемой частью любого современного проекта является тестирование. Мой старый-новый проект lora-at - не исключение. После того, как я смигрировал его с PlatformIO на ESP-IDF, мне пришлось переписать все тесты.&#xA;Изначально тесты мокировали работу с чипом sx127x, компилировались под Linux/MacOS и проверяли вход-выход at_handler. В текущий версии такой подход не сработает:&#xA;Во-первых, at_handler стал зависить от множества других компонент. Появилась поддержка экрана, режима глубокого сна и тд. Старые тесты это не учитывали.</description>
    </item>
    <item>
      <title>Тестирование дисков для Raspberrypi - Часть 2</title>
      <link>https://dernasherbrezon.com/posts/test-disks-raspberrypi2/</link>
      <pubDate>Tue, 20 Jun 2023 22:01:18 +0100</pubDate>
      <guid>https://dernasherbrezon.com/posts/test-disks-raspberrypi2/</guid>
      <description>В первой части я так и не понял какой диск мне ставить в Raspberrypi. С одной стороны обычные флэшки очень энергоэффективны, но медленные, а с другой, диски очень быстрые, но потребляют слишком много энергии. Во второй части (и, надеюсь, последней) я решил не выдумывать, а пошёл на The PiHut и купил WD Green SSD 240Gb.&#xA;Тестирование Методология тестирования совсем не изменилась со времён первой части:&#xA;Подключал диск Выполнял измерение fio --name=write --ioengine=posixaio --rw=write --bs=4k --size=1g --numjobs=1 --runtime=30 --time_based --status-interval=1 --output-format=terse --output=file.</description>
    </item>
    <item>
      <title>Тестирование дисков для Raspberrypi</title>
      <link>https://dernasherbrezon.com/posts/test-disks-raspberrypi/</link>
      <pubDate>Wed, 14 Jun 2023 21:19:18 +0100</pubDate>
      <guid>https://dernasherbrezon.com/posts/test-disks-raspberrypi/</guid>
      <description>Порой сидишь себе программируешь никого не трогаешь, а потом внезапно хочется встать и громко возмутиться &amp;ldquo;Да сколько уже можно это терпеть!&amp;rdquo;. Такое случилось и со мной, во время невероятно длинной распаковки ядра линукса в Raspberrypi. Всё началось с того, что мне нужно было померить производительность драйвера для airspy mini, который по-умолчанию устанавливается в Debian buster. Делается это двумя командами. Первая нужна, чтобы найти PID процесса для мониторинга:&#xA;ps aux|grep sdr_server Вторая нужна, чтобы записать статистику вызовов функций в файл для анализа:</description>
    </item>
    <item>
      <title>Тестирование sx127x</title>
      <link>https://dernasherbrezon.com/posts/testing-sx127x/</link>
      <pubDate>Sun, 23 Apr 2023 18:15:18 +0100</pubDate>
      <guid>https://dernasherbrezon.com/posts/testing-sx127x/</guid>
      <description>Я продолжаю разрабатывать библиотеку для работы с чипом sx127x, и в этом посте речь пойдёт о тестировании. Но для начала небольшая предыстория. Изначально библиотека поддерживала только LoRa модуляцию и была достаточно небольшой. По сути это была небольшая обёртка над регистрами sx127x, которая позволяла из Си вызывать нужные функции. Основная ценность скорее была в том, чтобы перевести магические числа и SPI протокол в понятные слова из даташита. После того как я решил добавить поддержку FSK модуляции, библиотека разрослась.</description>
    </item>
    <item>
      <title>Настройка проекта в PlatformIO</title>
      <link>https://dernasherbrezon.com/posts/configuring-platformio/</link>
      <pubDate>Sat, 01 Jan 2022 20:30:18 +0000</pubDate>
      <guid>https://dernasherbrezon.com/posts/configuring-platformio/</guid>
      <description>В предыдущей статье я описал общий дизайн r2lora и выбрал инструменты для разработки. Теперь можно остановится на конфигурировании проекта и разбиении его на отдельные модули. PlatformIO отлично интегрирован с множеством различных инструментов и позволяет делать сложные вещи почти так же просто, как и в Java.&#xA;Управление зависимостями Бич любой разработки на C/C++ - это управление зависимостями. В языке и экосистеме просто нет стандартного способа для этого. Каждый делает это по-своему. Есть широко известный в узких кругах Conan.</description>
    </item>
    <item>
      <title>Тестирование 70см фильтра с помощью RTL-SDR</title>
      <link>https://dernasherbrezon.com/posts/test-70cm-filter/</link>
      <pubDate>Sat, 20 Jun 2020 17:30:18 +0100</pubDate>
      <guid>https://dernasherbrezon.com/posts/test-70cm-filter/</guid>
      <description>Последние наблюдения показали, что у меня очень высокий уровень шума, если антенна направлена в центр города. У меня возникло предположение, что это связано со слишком сильными сигналами на соседних частотах. Если это так, то это значит, что GSM, FM и DVB перегрузили вход rtl-sdr, полностью заглушив слабые сигналы. Такое возможно, так как у rtl-sdr достаточно низкий динамический диапазон.&#xA;Для того чтобы проверить теорию, я решил купить вот такой фильтр на 70см и протестировать его.</description>
    </item>
    <item>
      <title>Юнит-тесты</title>
      <link>https://dernasherbrezon.com/posts/unit-tests/</link>
      <pubDate>Mon, 25 May 2020 17:27:18 +0100</pubDate>
      <guid>https://dernasherbrezon.com/posts/unit-tests/</guid>
      <description>15 лет назад никто не слышал про юнит-тесты. Код писался один раз, потом проверялся вручную QA и методами пристального вглядывания. Все жили в гармонии и мире. Но тут пришли юнит-тесты и мир разделился на два враждующих лагеря: на тех, кто пишет тесты и тех, кто нет.&#xA;Спойлер: я за авто-тесты.&#xA;В интернете очень много аргументов как за, так и против. Я решил собрать свой собственный список аргументов за юнит-тесты.&#xA;1 Тесты пишутся не для того, чтобы протестировать каждое логическое условие и всевозможные комбинации входных и выходных данных.</description>
    </item>
    <item>
      <title>Тестирование REST клиентов</title>
      <link>https://dernasherbrezon.com/posts/mock-server/</link>
      <pubDate>Wed, 18 Mar 2020 19:37:18 +0100</pubDate>
      <guid>https://dernasherbrezon.com/posts/mock-server/</guid>
      <description>Последние несколько дней я работал над декодированием сигналов со спутника SMOG-P. Помимо декодирования самого протокола я решил заморочиться и написать полноценную интеграцию между leosatdata.com и gnd.bme.hu.&#xA;Gnd bme - это сайт, на котором отображаются последние пакеты, принятые со спутника, общая информация о том, как декодировать сигнал.&#xA;Но самое интересное заключается в том, что этот сайт предоставляет небольшой API, чтобы можно было программно отправлять им данные. На самом сайте нет описания этого API, но я внимательно посмотрел исходники и нашёл в них всё необходимое.</description>
    </item>
    <item>
      <title>Тестирование maven плагинов</title>
      <link>https://dernasherbrezon.com/posts/testing-maven-plugins/</link>
      <pubDate>Fri, 15 Nov 2019 19:49:18 +0100</pubDate>
      <guid>https://dernasherbrezon.com/posts/testing-maven-plugins/</guid>
      <description>Часть моей хобби инфраструктуры завязана на .deb пакеты и apt репозитории. Чтобы со всем этим работать из java, я написал несколько maven плагинов и выложил в открытый доступ. Один из этих плагинов - deb-maven-plugin. Он позволяет собирать из java проекта .deb пакет. Этот формат пакетов имеет достаточно сложную структуру и большое историческое наследие. Я очень тщательно разобрался с тем, как собирать такой пакет для java проектов и создал плагин, который сильно облегчает сборку.</description>
    </item>
    <item>
      <title>Тестирование SDR Filter v1.1</title>
      <link>https://dernasherbrezon.com/posts/test-sdr-filter/</link>
      <pubDate>Thu, 08 Aug 2019 19:20:18 +0100</pubDate>
      <guid>https://dernasherbrezon.com/posts/test-sdr-filter/</guid>
      <description>Одна из моих базовых станций принимает очень много помех. Из-за низкой чувствительности rtl-sdr, полезный сигнал почти нельзя получить. У меня возникла идея о том, что часть помех может приходить от USB разъёма RPi. Чтобы проверить эту идею, я недавно приобрёл SDR Filter v1.1 от компании ExpElectroLab и решил сделать на него небольшое видео ревью.&#xA;Процесс тестирования Самое интересное началось сразу же после распаковки устройства. Дело в том, что входящий USB порт формата Type B.</description>
    </item>
    <item>
      <title>Тестирование FM фильтров с помощью RTL-SDR</title>
      <link>https://dernasherbrezon.com/posts/test-fm-filter/</link>
      <pubDate>Sun, 14 Jul 2019 14:20:18 +0100</pubDate>
      <guid>https://dernasherbrezon.com/posts/test-fm-filter/</guid>
      <description>TL;TR; Фильтры тестировать можно, но выводы нужно делать аккуратно.&#xA;Постановка задачи Архитектура rtl sdr требует специального фильтра на входе. Поскольку сильнейшими источниками сигнала являются фм станции, то я решил поставить фм фильтры на входе приёмника. Но прежде, чем устанавливать их, мне хотелось измерить частотные характеристики фильтров и пощупать их в деле. Для этого я купил несколько фм фильтров и собрал стенд для их тестирования.&#xA;Описание стенда Тестирование заключается в том, что генератор сигнала создаёт широкополосный шум по всей ширине спектра.</description>
    </item>
    <item>
      <title>Тестирование ошибок файловой системы</title>
      <link>https://dernasherbrezon.com/posts/test-fs-failures/</link>
      <pubDate>Sat, 20 Apr 2019 21:50:18 +0100</pubDate>
      <guid>https://dernasherbrezon.com/posts/test-fs-failures/</guid>
      <description>Большинство статей в моём блоге посвящены интересным вещам, с которыми я периодически сталкиваюсь. Эта статья не исключение. В одном из моих проектов - r2cloud я столкнулся с одной интересной ошибкой.&#xA;Вот, что мне удалось восстановить глядя на логи и исходный код:&#xA;Диск полностью заполнился В какой-то момент времени обновилась конфигурация. Например, обновилось текущее значение PPM При попытке записать в файл, происходит ошибка IOException &amp;ldquo;no disk space&amp;rdquo; Файл пользовательских настроек полностью портится.</description>
    </item>
    <item>
      <title>Тестирование JSP тэгов</title>
      <link>https://dernasherbrezon.com/posts/jsp-tag-testing/</link>
      <pubDate>Sat, 02 Mar 2019 12:48:18 +0100</pubDate>
      <guid>https://dernasherbrezon.com/posts/jsp-tag-testing/</guid>
      <description>Недавно для себя открыл совершенно бесплатный для open source проектов sonarcloud. Я верю, что статичный анализ кода - это очень полезная штука, поэтому сразу же решил перевести свои наиболее популярные проекты туда.&#xA;Среди них был достаточно маленький проект jtimeago. Это небольшая библиотека jsp тэгов для вывода дат.&#xA;После добавления проекта через travis, я увидел, что jtimeago полностью зеленый.&#xA;Если зайти на страницу проекта в sonarcloud, то видно, что все показатели хорошие за исключением нескольких мелких code smells.</description>
    </item>
    <item>
      <title>Тестирование debian пакетов в Travis-CI</title>
      <link>https://dernasherbrezon.com/posts/test-deb-travis/</link>
      <pubDate>Sat, 04 Nov 2017 13:51:18 +0100</pubDate>
      <guid>https://dernasherbrezon.com/posts/test-deb-travis/</guid>
      <description>Возникла передо мной такая задача: тестирование debian пакета. И требования:&#xA;пакет устанавливает и стартует systemd сервис. используются native armhf библиотеки Тестирование должно включать в себя:&#xA;установка пакета на чистую систему: проверка наличия зависимостей запуск: проверка зависимостей в рантайме тестирование запущенного приложения: проверка prod конфигурации Введение Как обычно, первым делом необходимо оглядеться по сторонам и поискать уже существующие решения и подходы. Системе Debian уже 20+ лет и я не должен быть первым, кому пришло в голову тестирование пакетов.</description>
    </item>
  </channel>
</rss>
