<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C on dernasherbrezon</title>
    <link>https://dernasherbrezon.com/tags/c/</link>
    <description>Recent content in C on dernasherbrezon</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ru</language>
    <lastBuildDate>Wed, 13 Dec 2023 17:50:18 +0100</lastBuildDate>
    <atom:link href="https://dernasherbrezon.com/tags/c/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Оптимизация энергопотребления LoRa - Часть 2</title>
      <link>https://dernasherbrezon.com/posts/troubleshoot-deep-sleep/</link>
      <pubDate>Wed, 13 Dec 2023 17:50:18 +0100</pubDate>
      <guid>https://dernasherbrezon.com/posts/troubleshoot-deep-sleep/</guid>
      <description>Тестируя энергопотребление lora-at, я обнаружил, что плата в режиме глубокого сна потребляет около 1.7мА. Это примерно в миллион раз больше, чем теоретический минимум ESP32. Такое поведение совершенно нельзя оставлять без внимания, поэтому я потратил около трёх недель, чтобы разобраться в причинах.&#xA;Симптомы С помощью PPK2 я установил, что после перехода в спящий режим, потребление энергии около 1.7мА:&#xA;При этом очевидно, что переход в спящий режим происходит: потребление уменьшается с ~30мА до 1.</description>
    </item>
    <item>
      <title>Power Profiler Kit 2</title>
      <link>https://dernasherbrezon.com/posts/power-profiler-kit2/</link>
      <pubDate>Fri, 24 Nov 2023 09:08:18 +0000</pubDate>
      <guid>https://dernasherbrezon.com/posts/power-profiler-kit2/</guid>
      <description>Переписав LoRa At на С я уменьшил размер прошивки в два раза! Однако, это хоть и выглядит впечатляюще, но на самом деле не так важно. Если старая и новая версии помещаются на чипе, то какая разница сколько места они занимают? Поэтому показатель хоть и хороший, но мало применим на практике. А вот энергопотребление - это другое. Низкое энергопотребление важно при работе от солнечных батарей. Именно поэтому я решил исследовать эту тему по-подробнее.</description>
    </item>
    <item>
      <title>Ускорение работы FIR фильтра с помощью SIMD NEON - Часть 2</title>
      <link>https://dernasherbrezon.com/posts/fir-filter-optimization-simd2/</link>
      <pubDate>Sat, 15 Jul 2023 17:39:18 +0100</pubDate>
      <guid>https://dernasherbrezon.com/posts/fir-filter-optimization-simd2/</guid>
      <description>Несмотря на то, что в моей предыдущей статье я улучшил производительность FIR фильтра в несколько раз, мне показалось это недостаточным. Я проанализировал несколько статей, заметок и различных подходов, найденных в Интернет и попробовал добавить для каждой идеи тест в arm-tests.&#xA;Флаги компиляции Первое, что мне бросилось в глаза - это дополнительные флаги оптимизации для компилятора. Сразу несколько статей упоминают флаги -ftree-vectorize -ffast-math -funroll-loops. Я не стал делать отдельный тест, а просто обновил TEST_GENERIC.</description>
    </item>
    <item>
      <title>Ускорение работы FIR фильтра с помощью SIMD NEON</title>
      <link>https://dernasherbrezon.com/posts/fir-filter-optimization-simd/</link>
      <pubDate>Sun, 25 Jun 2023 21:20:18 +0100</pubDate>
      <guid>https://dernasherbrezon.com/posts/fir-filter-optimization-simd/</guid>
      <description>Уже которую неделю я пытаюсь добавить поддержку airspy mini в sdr-server. На этот раз я упёрся в производительность Raspberrypi. При получении сигнала один клиент загружал одно ядро на 80%. Это значит, что sdr-server способен обработать только ~4 параллельных наблюдения. Я скомпилировал и запустил утилиту perf, которая показала интересное - большинство времени тратится внутри драйвера к airspy. На самом деле, там происходит много сложных DSP операций:&#xA;static void remove_dc(iqconverter_float_t *cnv, float *samples, int len) { int i; ALIGNED float avg = cnv-&amp;gt;avg; for (i = 0; i &amp;lt; len; i++) { samples[i] -= avg; avg += SCALE * samples[i]; } cnv-&amp;gt;avg = avg; } Из-за больших скоростей сэмплирования, процессор должен обрабатывать очень много данных перед тем, как выдать пользователю.</description>
    </item>
    <item>
      <title>Тестирование sx127x</title>
      <link>https://dernasherbrezon.com/posts/testing-sx127x/</link>
      <pubDate>Sun, 23 Apr 2023 18:15:18 +0100</pubDate>
      <guid>https://dernasherbrezon.com/posts/testing-sx127x/</guid>
      <description>Я продолжаю разрабатывать библиотеку для работы с чипом sx127x, и в этом посте речь пойдёт о тестировании. Но для начала небольшая предыстория. Изначально библиотека поддерживала только LoRa модуляцию и была достаточно небольшой. По сути это была небольшая обёртка над регистрами sx127x, которая позволяла из Си вызывать нужные функции. Основная ценность скорее была в том, чтобы перевести магические числа и SPI протокол в понятные слова из даташита. После того как я решил добавить поддержку FSK модуляции, библиотека разрослась.</description>
    </item>
    <item>
      <title>sx127x для RaspberryPI</title>
      <link>https://dernasherbrezon.com/posts/lora-raspberrypi/</link>
      <pubDate>Sun, 15 Jan 2023 12:59:18 +0000</pubDate>
      <guid>https://dernasherbrezon.com/posts/lora-raspberrypi/</guid>
      <description>Продолжая работать над новой библиотекой sx127x, я решил добавить поддержку Linux и RaspberryPI в частности. Помимо чисто практической надобности, мне хотелось понять насколько отличается программирование под микроконтроллеры от обычных операционных систем.&#xA;Я с самого начала спроектировал библиотеку достаточно хорошо, поэтому для миграции под Linux потребовалось совсем немного изменений:&#xA;отказаться от esp_err.h и сделать возвращаемые коды типа int вынести работут с SPI в отдельный заголовок и переопределить для разных платформ Если первый пункт достаточно простой, то со вторым пришлось повозиться.</description>
    </item>
    <item>
      <title>sx127x</title>
      <link>https://dernasherbrezon.com/posts/sx127x/</link>
      <pubDate>Sat, 07 Jan 2023 16:33:18 +0100</pubDate>
      <guid>https://dernasherbrezon.com/posts/sx127x/</guid>
      <description>Один из фундаментальных вопросов, на который каждый программист должен периодически отвечать - &amp;ldquo;стоит ли взять готовую библиотеку или написать свою?&amp;rdquo;. Однозначно ответить на этот вопрос раз и навсегда не получится. Надо каждый раз садится и разбираться в каждом конкретном случае. Вот и мне недавно выпал этот случай.&#xA;В прошлом посте я писал как уменьшил потребление тока LoRa до 16мА. Однако, для этого мне пришлось модифицировать уже существующую библиотеку arduino-LoRa. Для того, чтобы провести эксперимент и проверить теорию, этого вполне достаточно, но для полноценного инженерного решения нужно что-то более основательное.</description>
    </item>
    <item>
      <title>Оптимизация энергопотребления LoRa</title>
      <link>https://dernasherbrezon.com/posts/lora-deep-sleep/</link>
      <pubDate>Sat, 10 Dec 2022 21:17:18 +0100</pubDate>
      <guid>https://dernasherbrezon.com/posts/lora-deep-sleep/</guid>
      <description>Последние несколько месяцев я работаю над уменьшением энергопотребления в проекте lora-at. Идея заключается в том, чтобы сделать энергонезависимый приёмник, положить его на балконе и 24/7 принимать сигналы со спутников. Легче сказать, чем сделать. Особенно для того, кто никогда не оптимизировал код по низкое энергопотребление и не проектировал электрические цепи. Конечно, можно поставить самую большую солнечную панель, принимать сигналы только днём и не заморачиваться. Но мне такой подход показался недостойным звания инженера, поэтому я принял вызов и принялся проектировать.</description>
    </item>
    <item>
      <title>Датчик BH1750</title>
      <link>https://dernasherbrezon.com/posts/bh1750/</link>
      <pubDate>Fri, 05 Aug 2022 23:25:18 +0000</pubDate>
      <guid>https://dernasherbrezon.com/posts/bh1750/</guid>
      <description>Введение Анализируя графики моей солнечной панели, я обнаружил, что мощность иногда падает практически до нуля. В попытках разобраться в чём же дело, я придумал несколько гипотез. Одна из гипотез заключалась в том, что облако пролетает над солнечной панелью и вызывает резкие изменения в показаниях. Для того, чтобы доказать эту гипотезу, я решил поставить датчик освещённости и в течении дня собирать данные. Если это действительно облако, то освещённость будет падать.&#xA;В качестве датчика освещённости я выбрал крайне распространённый BH1750.</description>
    </item>
    <item>
      <title>Отладка приложений в Debian</title>
      <link>https://dernasherbrezon.com/posts/debian-debug/</link>
      <pubDate>Fri, 01 Jul 2022 22:19:18 +0100</pubDate>
      <guid>https://dernasherbrezon.com/posts/debian-debug/</guid>
      <description>Последние несколько месяцев я вожусь с sdr-modem и пытаюсь запустить его в связке с r2cloud. И вот, когда я уже думал, что все тесты прошли, билд на github actions собирается, оно падает с segmentation fault. Но я не стал падать духом и решил воспользоваться случаем, чтобы изучить отладку приложений в Debian.&#xA;Основы Итак, для того, чтобы отладка показала хоть что-то полезное, необходимо скомпилировать приложение с отладочной информацией. В противном случае будет что-то вроде этого:</description>
    </item>
    <item>
      <title>Оптимизация OpenCL на RaspberryPI</title>
      <link>https://dernasherbrezon.com/posts/tune-opencl-raspberrypi/</link>
      <pubDate>Sat, 06 Nov 2021 14:11:18 +0100</pubDate>
      <guid>https://dernasherbrezon.com/posts/tune-opencl-raspberrypi/</guid>
      <description>Это третья статья в цикле про мои похождения в области распределённых вычислений. Первая статья была про то, зачем вообще нужен OpenCL и распределённые вычисления. Вторая статья про то, как настроить OpenCL для Raspberrypi, чем отличаются различные режимы работы и драйвера. Эта статья будет про оптимизацию OpenCL кода. Самое важное, что нужно понять: сможет ли GPU заменить или хотя бы приблизиться по производительности к CPU при выполнении Frequency Xlating FIR фильтра.</description>
    </item>
    <item>
      <title>Установка OpenCL на RaspberryPI</title>
      <link>https://dernasherbrezon.com/posts/install-opencl-raspberrypi/</link>
      <pubDate>Fri, 05 Nov 2021 18:13:18 +0100</pubDate>
      <guid>https://dernasherbrezon.com/posts/install-opencl-raspberrypi/</guid>
      <description>В предыдущей статье я описал основные причины, почему OpenCL вообще нужен, как выглядит типичная программа и какие классы задач стоит считать на GPU. В этой же статье я постараюсь описать установку и настройку OpenCL для RaspberryPI.&#xA;VC4CL Проект VC4CL реализует OpenCL 1.2 API для Raspberrypi. Так как OpenCL компилирует kernel во время инициализации основной (host) программы, то нам понадобится компилятор!&#xA;Компилятор называется VC4C. Этот компилятор основан на LLVM. Он компилирует kernel в промежуточное представление SPIR-V, которое уже стандартными средствами LLVM проверяется и переводится в ассемблерный код для конкретного GPU.</description>
    </item>
    <item>
      <title>OpenCL для RaspberryPI</title>
      <link>https://dernasherbrezon.com/posts/opencl-raspberrypi/</link>
      <pubDate>Mon, 01 Nov 2021 18:13:18 +0100</pubDate>
      <guid>https://dernasherbrezon.com/posts/opencl-raspberrypi/</guid>
      <description>Изначально у меня не было планов писать код под GPU. Обработка сигналов спутников на Java вполне возможна. И я продолжаю развивать это направление. Код на Java позволяет достаточно быстро написать обработчик сигнала и внедрить в работающую систему. Также с помощью Java гораздо удобнее обрабатывать неструктурированные или слабо структурированные данные. К таким данным обычно относятся различные высокоуровневые протоколы. Однако, есть и недостатки - скорость. Java не очень подходит для быстрой обработки однотипных данных.</description>
    </item>
    <item>
      <title>FMA в Raspberrypi</title>
      <link>https://dernasherbrezon.com/posts/fma-raspberrypi/</link>
      <pubDate>Sat, 16 Oct 2021 15:22:18 +0100</pubDate>
      <guid>https://dernasherbrezon.com/posts/fma-raspberrypi/</guid>
      <description>Разбираясь с одним интересным багом в коде DSP фильтра, я с удивлением обнаружил целую область неизведанного в области чисел с плавающий точкой. Есть замечательная статья о том, что каждый программист должен знать об операциях с плавающей точкой. В ней очень подробно описывается проблема и её решение в стандарте IEEE 754. Однако, там нет явного упоминания такой вещи, как FMA (Fused multiply-add). Мне показалось интересным разобраться, как эта технология работает.&#xA;FMA FMA - это оптимизация на уровне процессора следующей операции:</description>
    </item>
    <item>
      <title>Оптимизация sincos функции</title>
      <link>https://dernasherbrezon.com/posts/sincos-tuning/</link>
      <pubDate>Tue, 25 May 2021 17:05:18 +0100</pubDate>
      <guid>https://dernasherbrezon.com/posts/sincos-tuning/</guid>
      <description>Давненько я ничего не писал в свой блог и на это было несколько причин. Во-первых, я полностью погрузился в написание своего нового проекта - sdr-modem. Не сказать, что он простой, но он гармонично развивает идеи sdr-server и не содержит того, о чём хотелось бы написать. Во-вторых, ничего особенного не происходит.&#xA;Тем не менее хочется написать небольшую заметку о том, как я измерял производительность функции sincos, и что из этого получилось.</description>
    </item>
    <item>
      <title>Создание и поддержка своего собственного APT репозитория</title>
      <link>https://dernasherbrezon.com/posts/r2cloud-apt/</link>
      <pubDate>Sun, 07 Mar 2021 20:45:18 +0000</pubDate>
      <guid>https://dernasherbrezon.com/posts/r2cloud-apt/</guid>
      <description>С появлением нового проекта - sdr-server, у меня стало слишком много приложений, которые нужно как-то устанавливать. И всё бы ничего, но каждое приложение в свою очередь требует разных системных библиотек. А эти системные библиотеки не всегда нужных версий. А если сюда добавить разные версии дистрибутивов и разные архитектуры процессоров, то начинается комбинаторный взрыв, и всё становится очень запутанным.&#xA;Для решения этой проблемы можно было бы сделать докер образа и на этом успокоится.</description>
    </item>
    <item>
      <title>Динамические библиотеки, RPATH и Conan</title>
      <link>https://dernasherbrezon.com/posts/dynamic-libraries-rpath/</link>
      <pubDate>Thu, 18 Feb 2021 23:11:18 +0000</pubDate>
      <guid>https://dernasherbrezon.com/posts/dynamic-libraries-rpath/</guid>
      <description>Эта статья - скорее конспект того, что я узнал за последнюю неделю о динамических библиотеках, RPATH и Conan.&#xA;Введение Никто в здравом уме не начнёт изучать то, как линкуются библиотеки в MacOS. Поэтому для начала я попытаюсь обрисовать проблему, которую пытался решить.&#xA;Итак, на заре времён, когда жёсткие диски компьютеров были маленькие, память компьютеров была маленькая, люди придумали переиспользование библиотек. Как всё это работает? Допустим у нас есть 2 приложения:</description>
    </item>
    <item>
      <title>Оптимизация SIMD кода</title>
      <link>https://dernasherbrezon.com/posts/simd-optimization/</link>
      <pubDate>Fri, 12 Feb 2021 22:30:18 +0000</pubDate>
      <guid>https://dernasherbrezon.com/posts/simd-optimization/</guid>
      <description>Остапа понесло.&#xA;&amp;ldquo;12 стульев&amp;rdquo;&#xA;Почувствовав прилив сил и некоторую уверенность после оптимизации программ на Си, я решил погрузиться ещё глубже. И поводом для этого стало странное поведение функции volk_8i_s32f_convert_32f под RaspberryPI.&#xA;В предыдущей статье я смог с помощью этой функции существенно ускорить работу своей программы sdr-server. На скриншоте ниже видно, что конкретная реализация этой функции под MacOS была volk_8i_s32f_convert_32f_u_sse4_1.&#xA;Это значит, что все метод реализован с помощью инструкций и регистров SSE4.</description>
    </item>
    <item>
      <title>Оптимизация производительности приложения на Си</title>
      <link>https://dernasherbrezon.com/posts/tune-c-application/</link>
      <pubDate>Sun, 07 Feb 2021 13:20:17 +0100</pubDate>
      <guid>https://dernasherbrezon.com/posts/tune-c-application/</guid>
      <description>Введение По следам разработки моего нового проекта sdr-server я решил написать очередную статью. И опять про производительность. Прошлая статья закончилась удивительным результатом: использование SIMD ускоряет операцию более, чем в 2 раза. Я даже написал небольшую программу для того, чтобы это проверить.&#xA;Однако, в реальной жизни тормозить может совершенно безобидный участок кода. И для того, чтобы увидеть как работает программа под реальной нагрузкой, нужно использовать профайлеры.&#xA;Выбор профайлера Оказывается, в мире Си с этим обстоит всё достаточно неплохо.</description>
    </item>
    <item>
      <title>SIMD для цифровой обработки сигналов</title>
      <link>https://dernasherbrezon.com/posts/simd-for-dsp/</link>
      <pubDate>Mon, 25 Jan 2021 01:10:18 +0100</pubDate>
      <guid>https://dernasherbrezon.com/posts/simd-for-dsp/</guid>
      <description>Несмотря на то, что мой блог о разработке на Java, мне иногда приходится расчехлять старые знания и писать на Си. Вообще, программирование на Си - это целый мир со своими заморочками, инструментами и подходами. И он совсем не пересекается с тем, что творится в Java. Это, с одной стороны, немного досадно, так как все накопленные знания не имеют никакого смысла, а с другой стороны немного волнительно, как открытие Америки.&#xA;Совсем недавно я придумал одну идею - сделать небольшой TCP сервер, который бы раздавал некоторый диапазон радио частот клиентам.</description>
    </item>
    <item>
      <title>Создание и публикация приложения в Launchpad</title>
      <link>https://dernasherbrezon.com/posts/publishing-to-launchpad/</link>
      <pubDate>Tue, 24 Mar 2020 18:40:18 +0100</pubDate>
      <guid>https://dernasherbrezon.com/posts/publishing-to-launchpad/</guid>
      <description>Последнюю неделю я активно стал разрабатывать небольшое приложение epever-tracer-influxdb. Оно позволяет читать параметры солнечного контроллера и отправлять данные в InfluxDB. Само приложение написано на C и предполагается, что оно будет работать на Raspberry PI. После того как я написал это приложение передо мной в очередной раз встала задача дистрибуции. Самый простой способ - попытаться добавить его в основной репозиторий Debian. Но тут есть несколько проблем:&#xA;непонятно в какой момент пакет окажется в основном репозитории.</description>
    </item>
    <item>
      <title>Настройка проекта на Си</title>
      <link>https://dernasherbrezon.com/posts/setting-up-c/</link>
      <pubDate>Tue, 24 Dec 2019 18:29:18 +0100</pubDate>
      <guid>https://dernasherbrezon.com/posts/setting-up-c/</guid>
      <description>У меня есть небольшой проект на Си, который позволяет сделать приватный apt репозиторий в облачном хранилище Selectel - apt-transport-swift. Почему именно на Си? Во-первых, я думал, что знаю Си. Во-вторых, в моём представлении все системные утилиты для массового пользования должны быть написаны на низкоуровневом языке. Это значит, что для запуска приложения у меня должны быть минимальное количество зависимостей и минимальное потребление памяти. Ведь я не знаю на каком железе будет запущена моя программа.</description>
    </item>
    <item>
      <title>Приватный репозиторий в Ubuntu</title>
      <link>https://dernasherbrezon.com/posts/ubuntu-private-repo/</link>
      <pubDate>Thu, 07 Jun 2018 10:07:18 +0100</pubDate>
      <guid>https://dernasherbrezon.com/posts/ubuntu-private-repo/</guid>
      <description>В Ubuntu репозитории – это специальные сервера-хранилища для приложений. Если Вы разрабатываете коммерческое приложение и запускаете его в Ubuntu, то логично положить его в репозиторий. А потом управлять этим приложением так же, как и обычными системными приложениями. Для этого нужно поднять в локальной сети или облаке apache, настроить логин и пароль, не забывать его обновлять&amp;hellip; Но что если есть другой способ?&#xA;Облачные хранилища С помощью apt-transport-s3 можно превратить bucket в приватный apt репозиторий.</description>
    </item>
  </channel>
</rss>
