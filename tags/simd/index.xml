<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>SIMD on dernasherbrezon</title>
    <link>https://dernasherbrezon.com/tags/simd/</link>
    <description>Recent content in SIMD on dernasherbrezon</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sat, 15 Jul 2023 17:39:18 +0100</lastBuildDate><atom:link href="https://dernasherbrezon.com/tags/simd/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Ускорение работы FIR фильтра с помощью SIMD NEON - Часть 2</title>
      <link>https://dernasherbrezon.com/posts/fir-filter-optimization-simd2/</link>
      <pubDate>Sat, 15 Jul 2023 17:39:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/fir-filter-optimization-simd2/</guid>
      <description>Несмотря на то, что в моей предыдущей статье я улучшил производительность FIR фильтра в несколько раз, мне показалось это недостаточным. Я проанализировал несколько статей, заметок и различных подходов, найденных в Интернет и попробовал добавить для каждой идеи тест в arm-tests.
Флаги компиляции Первое, что мне бросилось в глаза - это дополнительные флаги оптимизации для компилятора. Сразу несколько статей упоминают флаги -ftree-vectorize -ffast-math -funroll-loops. Я не стал делать отдельный тест, а просто обновил TEST_GENERIC.</description>
    </item>
    
    <item>
      <title>Ускорение работы FIR фильтра с помощью SIMD NEON</title>
      <link>https://dernasherbrezon.com/posts/fir-filter-optimization-simd/</link>
      <pubDate>Sun, 25 Jun 2023 21:20:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/fir-filter-optimization-simd/</guid>
      <description>Уже которую неделю я пытаюсь добавить поддержку airspy mini в sdr-server. На этот раз я упёрся в производительность Raspberrypi. При получении сигнала один клиент загружал одно ядро на 80%. Это значит, что sdr-server способен обработать только ~4 параллельных наблюдения. Я скомпилировал и запустил утилиту perf, которая показала интересное - большинство времени тратится внутри драйвера к airspy. На самом деле, там происходит много сложных DSP операций:
static void remove_dc(iqconverter_float_t *cnv, float *samples, int len) { int i; ALIGNED float avg = cnv-&amp;gt;avg; for (i = 0; i &amp;lt; len; i++) { samples[i] -= avg; avg += SCALE * samples[i]; } cnv-&amp;gt;avg = avg; } Из-за больших скоростей сэмплирования, процессор должен обрабатывать очень много данных перед тем, как выдать пользователю.</description>
    </item>
    
    <item>
      <title>FMA в Raspberrypi</title>
      <link>https://dernasherbrezon.com/posts/fma-raspberrypi/</link>
      <pubDate>Sat, 16 Oct 2021 15:22:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/fma-raspberrypi/</guid>
      <description>Разбираясь с одним интересным багом в коде DSP фильтра, я с удивлением обнаружил целую область неизведанного в области чисел с плавающий точкой. Есть замечательная статья о том, что каждый программист должен знать об операциях с плавающей точкой. В ней очень подробно описывается проблема и её решение в стандарте IEEE 754. Однако, там нет явного упоминания такой вещи, как FMA (Fused multiply-add). Мне показалось интересным разобраться, как эта технология работает.
FMA FMA - это оптимизация на уровне процессора следующей операции:</description>
    </item>
    
    <item>
      <title>Оптимизация sincos функции</title>
      <link>https://dernasherbrezon.com/posts/sincos-tuning/</link>
      <pubDate>Tue, 25 May 2021 17:05:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/sincos-tuning/</guid>
      <description>Давненько я ничего не писал в свой блог и на это было несколько причин. Во-первых, я полностью погрузился в написание своего нового проекта - sdr-modem. Не сказать, что он простой, но он гармонично развивает идеи sdr-server и не содержит того, о чём хотелось бы написать. Во-вторых, ничего особенного не происходит.
Тем не менее хочется написать небольшую заметку о том, как я измерял производительность функции sincos, и что из этого получилось.</description>
    </item>
    
    <item>
      <title>Оптимизация SIMD кода</title>
      <link>https://dernasherbrezon.com/posts/simd-optimization/</link>
      <pubDate>Fri, 12 Feb 2021 22:30:18 +0000</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/simd-optimization/</guid>
      <description>Остапа понесло.
&amp;ldquo;12 стульев&amp;rdquo;
 Почувствовав прилив сил и некоторую уверенность после оптимизации программ на Си, я решил погрузиться ещё глубже. И поводом для этого стало странное поведение функции volk_8i_s32f_convert_32f под RaspberryPI.
В предыдущей статье я смог с помощью этой функции существенно ускорить работу своей программы sdr-server. На скриншоте ниже видно, что конкретная реализация этой функции под MacOS была volk_8i_s32f_convert_32f_u_sse4_1.
Это значит, что все метод реализован с помощью инструкций и регистров SSE4.</description>
    </item>
    
    <item>
      <title>SIMD для цифровой обработки сигналов</title>
      <link>https://dernasherbrezon.com/posts/simd-for-dsp/</link>
      <pubDate>Mon, 25 Jan 2021 01:10:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/simd-for-dsp/</guid>
      <description>Несмотря на то, что мой блог о разработке на Java, мне иногда приходится расчехлять старые знания и писать на Си. Вообще, программирование на Си - это целый мир со своими заморочками, инструментами и подходами. И он совсем не пересекается с тем, что творится в Java. Это, с одной стороны, немного досадно, так как все накопленные знания не имеют никакого смысла, а с другой стороны немного волнительно, как открытие Америки.
Совсем недавно я придумал одну идею - сделать небольшой TCP сервер, который бы раздавал некоторый диапазон радио частот клиентам.</description>
    </item>
    
  </channel>
</rss>
