<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>lora on dernasherbrezon</title>
    <link>https://dernasherbrezon.com/tags/lora/</link>
    <description>Recent content in lora on dernasherbrezon</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 02 Jan 2022 21:04:18 +0000</lastBuildDate><atom:link href="https://dernasherbrezon.com/tags/lora/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Создание FOTA компонента</title>
      <link>https://dernasherbrezon.com/posts/fota-for-r2lora/</link>
      <pubDate>Sun, 02 Jan 2022 21:04:18 +0000</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/fota-for-r2lora/</guid>
      <description>Эта статья продолжает цикл разработки проекта r2lora. Предыдущие статьи:
 Создание проекта на основе ESP32 Настройка проекта в PlatformIO  FOTA - это сокращение от Firmware-Over-The-Air (обновление по воздуху). Это специальный компонент, который обновляет приложение, если доступна новая версия.
Дизайн Автообновление можно сделать несколькими способами:
 Специальный компонент начинает слушать TCP/UDP порт. Для обновления нужно отправить прошивку на этот порт с любого другого устройства работающего в сети. По сути push-обновление. Специальный компонент периодически проверяет центральный сервер на наличие новой версии.</description>
    </item>
    
    <item>
      <title>Настройка проекта в PlatformIO</title>
      <link>https://dernasherbrezon.com/posts/configuring-platformio/</link>
      <pubDate>Sat, 01 Jan 2022 20:30:18 +0000</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/configuring-platformio/</guid>
      <description>В предыдущей статье я описал общий дизайн r2lora и выбрал инструменты для разработки. Теперь можно остановится на конфигурировании проекта и разбиении его на отдельные модули. PlatformIO отлично интегрирован с множеством различных инструментов и позволяет делать сложные вещи почти так же просто, как и в Java.
Управление зависимостями Бич любой разработки на C/C++ - это управление зависимостями. В языке и экосистеме просто нет стандартного способа для этого. Каждый делает это по-своему. Есть широко известный в узких кругах Conan.</description>
    </item>
    
    <item>
      <title>Создание проекта на основе ESP32</title>
      <link>https://dernasherbrezon.com/posts/programming-esp32/</link>
      <pubDate>Fri, 31 Dec 2021 01:30:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/programming-esp32/</guid>
      <description>В последнее время всё популярнее становится протокол передачи данных LoRa. Уже несколько спутников вовсю его используют и существует целая сеть приёма сигналов - tinyGS. Конечно же, пропустить такое я не мог и начал исследовать как подключить протокол LoRa к r2cloud. К сожалению, это закрытый протокол, поэтому демодулировать его стандартным rtl-sdr не получится. Для получения сигнала нужно использовать специальный чип, который на выходе уже выдаст готовый пакет. Эти чипы достаточно дешёвые, но напрямую к Raspberrypi не подключаются, а используются в основном в связке с ESP32.</description>
    </item>
    
  </channel>
</rss>
