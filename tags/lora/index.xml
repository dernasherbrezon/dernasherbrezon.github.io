<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>lora on dernasherbrezon</title>
    <link>https://dernasherbrezon.com/tags/lora/</link>
    <description>Recent content in lora on dernasherbrezon</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 13 Dec 2023 17:50:18 +0100</lastBuildDate><atom:link href="https://dernasherbrezon.com/tags/lora/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Оптимизация энергопотребления LoRa - Часть 2</title>
      <link>https://dernasherbrezon.com/posts/troubleshoot-deep-sleep/</link>
      <pubDate>Wed, 13 Dec 2023 17:50:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/troubleshoot-deep-sleep/</guid>
      <description>Тестируя энергопотребление lora-at, я обнаружил, что плата в режиме глубокого сна потребляет около 1.7мА. Это примерно в миллион раз больше, чем теоретический минимум ESP32. Такое поведение совершенно нельзя оставлять без внимания, поэтому я потратил около трёх недель, чтобы разобраться в причинах.
Симптомы С помощью PPK2 я установил, что после перехода в спящий режим, потребление энергии около 1.7мА:
При этом очевидно, что переход в спящий режим происходит: потребление уменьшается с ~30мА до 1.</description>
    </item>
    
    <item>
      <title>Тестирование потребления энергии в lora-at</title>
      <link>https://dernasherbrezon.com/posts/lora-at-power-profiling/</link>
      <pubDate>Sat, 25 Nov 2023 23:28:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/lora-at-power-profiling/</guid>
      <description>Как следует разобравшись с тем, как работает Power Profiler Kit 2 (PPK2), я решил протестировать разные режимы работы. На самом деле lora-at - не такое уж и простое приложение. В нём есть работа с bluetooth и чипом sx127x, обработка команд с UART шины и режим глубокого сна. Есть, где развернуться.
Методология измерений Перед тем как начинать что-то измерять, необходимо определиться с тем, как это будет измеряться.
Во-первых, я собираюсь использовать PPK2 по-максимуму.</description>
    </item>
    
    <item>
      <title>lora-at</title>
      <link>https://dernasherbrezon.com/posts/lora-at/</link>
      <pubDate>Sun, 05 Nov 2023 22:25:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/lora-at/</guid>
      <description>История С момента моей последней статьи про LoRa прошло слишком много времени. За это время у меня появился проект lora-at, про который я бы хотел написать в этой статье. И начну я, пожалуй, с истории о том, как он появился.
Изначально я планировал создать небольшую прошивку для приёма сигналов со спутников по протоколу LoRa. За основу я взял tinyGS, которая делала почти всё, что мне было нужно. tinyGS позволял составлять расписание пролётов спутников, принимать пакеты со спутников и пересылать их на центральный сервер.</description>
    </item>
    
    <item>
      <title>sx127x для RaspberryPI</title>
      <link>https://dernasherbrezon.com/posts/lora-raspberrypi/</link>
      <pubDate>Sun, 15 Jan 2023 12:59:18 +0000</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/lora-raspberrypi/</guid>
      <description>Продолжая работать над новой библиотекой sx127x, я решил добавить поддержку Linux и RaspberryPI в частности. Помимо чисто практической надобности, мне хотелось понять насколько отличается программирование под микроконтроллеры от обычных операционных систем.
Я с самого начала спроектировал библиотеку достаточно хорошо, поэтому для миграции под Linux потребовалось совсем немного изменений:
 отказаться от esp_err.h и сделать возвращаемые коды типа int вынести работут с SPI в отдельный заголовок и переопределить для разных платформ  Если первый пункт достаточно простой, то со вторым пришлось повозиться.</description>
    </item>
    
    <item>
      <title>sx127x</title>
      <link>https://dernasherbrezon.com/posts/sx127x/</link>
      <pubDate>Sat, 07 Jan 2023 16:33:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/sx127x/</guid>
      <description>Один из фундаментальных вопросов, на который каждый программист должен периодически отвечать - &amp;ldquo;стоит ли взять готовую библиотеку или написать свою?&amp;rdquo;. Однозначно ответить на этот вопрос раз и навсегда не получится. Надо каждый раз садится и разбираться в каждом конкретном случае. Вот и мне недавно выпал этот случай.
В прошлом посте я писал как уменьшил потребление тока LoRa до 16мА. Однако, для этого мне пришлось модифицировать уже существующую библиотеку arduino-LoRa. Для того, чтобы провести эксперимент и проверить теорию, этого вполне достаточно, но для полноценного инженерного решения нужно что-то более основательное.</description>
    </item>
    
    <item>
      <title>Оптимизация энергопотребления LoRa</title>
      <link>https://dernasherbrezon.com/posts/lora-deep-sleep/</link>
      <pubDate>Sat, 10 Dec 2022 21:17:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/lora-deep-sleep/</guid>
      <description>Последние несколько месяцев я работаю над уменьшением энергопотребления в проекте lora-at. Идея заключается в том, чтобы сделать энергонезависимый приёмник, положить его на балконе и 24/7 принимать сигналы со спутников. Легче сказать, чем сделать. Особенно для того, кто никогда не оптимизировал код по низкое энергопотребление и не проектировал электрические цепи. Конечно, можно поставить самую большую солнечную панель, принимать сигналы только днём и не заморачиваться. Но мне такой подход показался недостойным звания инженера, поэтому я принял вызов и принялся проектировать.</description>
    </item>
    
    <item>
      <title>Настройка проекта в PlatformIO</title>
      <link>https://dernasherbrezon.com/posts/configuring-platformio/</link>
      <pubDate>Sat, 01 Jan 2022 20:30:18 +0000</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/configuring-platformio/</guid>
      <description>В предыдущей статье я описал общий дизайн r2lora и выбрал инструменты для разработки. Теперь можно остановится на конфигурировании проекта и разбиении его на отдельные модули. PlatformIO отлично интегрирован с множеством различных инструментов и позволяет делать сложные вещи почти так же просто, как и в Java.
Управление зависимостями Бич любой разработки на C/C++ - это управление зависимостями. В языке и экосистеме просто нет стандартного способа для этого. Каждый делает это по-своему. Есть широко известный в узких кругах Conan.</description>
    </item>
    
    <item>
      <title>Создание проекта на основе ESP32</title>
      <link>https://dernasherbrezon.com/posts/programming-esp32/</link>
      <pubDate>Fri, 31 Dec 2021 01:30:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/posts/programming-esp32/</guid>
      <description>В последнее время всё популярнее становится протокол передачи данных LoRa. Уже несколько спутников вовсю его используют и существует целая сеть приёма сигналов - tinyGS. Конечно же, пропустить такое я не мог и начал исследовать как подключить протокол LoRa к r2cloud. К сожалению, это закрытый протокол, поэтому демодулировать его стандартным rtl-sdr не получится. Для получения сигнала нужно использовать специальный чип, который на выходе уже выдаст готовый пакет. Этот чип можно подключить напрямую к Raspberrypi, но обычно его используют в связке с ESP32.</description>
    </item>
    
  </channel>
</rss>
