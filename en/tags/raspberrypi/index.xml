<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>raspberrypi on dernasherbrezon</title>
    <link>https://dernasherbrezon.com/en/tags/raspberrypi/</link>
    <description>Recent content in raspberrypi on dernasherbrezon</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 15 Jan 2023 12:59:18 +0000</lastBuildDate><atom:link href="https://dernasherbrezon.com/en/tags/raspberrypi/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>sx127x for RaspberryPI</title>
      <link>https://dernasherbrezon.com/en/posts/lora-raspberrypi/</link>
      <pubDate>Sun, 15 Jan 2023 12:59:18 +0000</pubDate>
      
      <guid>https://dernasherbrezon.com/en/posts/lora-raspberrypi/</guid>
      <description>Continuing work on the new sx127x library, I decided to add Linux support, specifically for Raspberry Pi. Besides the practical need, I wanted to understand how programming for microcontrollers differs from regular operating systems.
I designed the library quite well from the beginning, so migrating to Linux required only a few changes:
 Abandoning esp_err.h and using return codes of type int Separating SPI operations into a separate header and redefining for different platforms.</description>
    </item>
    
    <item>
      <title>CPU-specific APT repositories</title>
      <link>https://dernasherbrezon.com/en/posts/apt-for-cpu/</link>
      <pubDate>Sat, 25 Sep 2021 13:17:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/en/posts/apt-for-cpu/</guid>
      <description>Interesting fact - all applications located in the standard Debian or Ubuntu repositories are compiled with default options. This leads to interesting consequences. For example, programmers do not use SIMD instructions and rely on the compiler. The compiler cannot always optimize the code for a specific processor. As a result, all the super-fast capabilities of processors and incredible SIMD operations are not used.
Debian developers explain this feature by stating that enabling support for extended registers does not provide significant acceleration.</description>
    </item>
    
    <item>
      <title>Compare different compilation flags for RaspberryPi</title>
      <link>https://dernasherbrezon.com/en/posts/compare-compile-flags-raspberrypi/</link>
      <pubDate>Thu, 23 Sep 2021 21:20:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/en/posts/compare-compile-flags-raspberrypi/</guid>
      <description>Recently, I came across the very first version of the RaspberryPi, and I decided to experiment a bit with this old hardware.
I was curious about how the performance of the volk library would differ depending on various compilation flags.
arm1176jzf-s Firstly, it is necessary to determine the processor. As known, RaspberryPi uses a system-on-the-chip (SoC) from Broadcom. It is even written on the processor itself: Broadcom BCM2835. Inside this chip, there are several logical components:</description>
    </item>
    
  </channel>
</rss>
