<rss version="2.0" xmlns:yandex="http://news.yandex.ru"
  xmlns:media="http://search.yahoo.com/mrss/"
  xmlns:turbo="http://turbo.yandex.ru" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>dernasherbrezon</title>
    <link>https://dernasherbrezon.com/en/posts/</link>
    <description>Blog about software development</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ru</language>
    <lastBuildDate>Sat, 25 Nov 2023 23:28:18 +0100</lastBuildDate>
    
        <atom:link href="https://dernasherbrezon.com/en/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item turbo="true">
      <title>Power consumption in lora-at</title>
      <link>https://dernasherbrezon.com/en/posts/lora-at-power-profiling/</link>
      <pubDate>Sat, 25 Nov 2023 23:28:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/en/posts/lora-at-power-profiling/</guid>
      <description>Having thoroughly understood how Power Profiler Kit 2 (PPK2) works, I decided to test power consumption under different conditions. In fact, lora-at is not such a simple application. It works with bluetooth and the sx127x chip, processes commands from the UART bus and has a deep sleep mode. So there is a plenty of things to look for.
Measurement methodology Before you start measuring something, you need to decide how it will be measured.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Power consumption in lora-at</h1></header>
      		<div class='container entry-content'>
  <p>Having thoroughly understood how <a href="https://dernasherbrezon.com/en/posts/power-profiler-kit2/">Power Profiler Kit 2 (PPK2)</a> works, I decided to test power consumption under different conditions. In fact, lora-at is not such a simple application. It works with bluetooth and the sx127x chip, processes commands from the UART bus and has a deep sleep mode. So there is a plenty of things to look for.</p>
<h2 id="measurement-methodology">Measurement methodology</h2>
<p>Before you start measuring something, you need to decide how it will be measured.</p>
<p><strong>First</strong>, I&rsquo;m going to <a href="https://dernasherbrezon.com/en/posts/power-profiler-kit2/">utilize PPK2</a> as much as possible. Some tests require dozens of measurements and doing them manually does not make sense. I wrote a small script that allowed me to send various AT commands to the device, and then select data from a .CSV file and group it as needed. I used the built-in logic analyzer to find when the measurement started and when it ended.</p>
<p><strong>Secondly</strong>, some processes are fast and consume a lot of energy, and some are slow and consume little energy. In this case, it is incorrect to compare the average current consumption. Where it makes sense to compare such processes, I compared the magnitude of the charge. It is measured in coulombs. A coulomb (C) is the amount of charge passed through a cross-section of a conductor at a current of 1 A in 1 s. PPK2 integrates current over time and can very quickly display the spent charge over a selected interval. You can really feel the atmosphere of a physics lab.</p>
<p><strong>Thirdly</strong>, there are a lot of parameters that can affect energy consumption. To do this, I fixed some and changed others. This approach allowed me to somehow compare and analyze the results. For example, for all tests I used <a href="https://heltec.org/project/wifi-lora-32/">Heltec LoRa 32 v2</a>, which operated at a frequency of 80 MHz.</p>
<p><strong>Fourth</strong>, PPK2 samples at a speed of 100KHz, which generates a fairly large amount of data. It is impossible to display all these points on a graph, so I took the average over a certain interval. This does not affect the resulting value of the spent charge, but slightly smoothes the graph itself.</p>
<p><strong>Fifthly</strong>, the energy consumption of the entire board is measured, not specific components.</p>
<h2 id="sx127x">sx127x</h2>
<p>It&rsquo;s probably best to start with the most basic one - the sx127x chip. It supports different types of modulation, data reception and transmission, their speed, power amplifiers and much more. I decided to measure only those that could theoretically affect energy consumption. And even after that, there were a decent number of tests.</p>
<h4 id="receiving-data">Receiving data</h4>
<p>To test the receiver, I configured a second board that sends a short message:</p>
<pre><code>AT+LORATX=CAFE,433200012,125000,9,5,18,10,8,4,0,0,1,0
</code></pre><p>And the board under test receives it using the command:</p>
<pre><code>AT+LORARX=433200012,125000,9,5,18,10,8,4,0,0,1,0
</code></pre><p>And the same for FSK modulation:</p>
<pre><code>AT+FSKTX=CAFE,433200012,4800,5000,4,12AD,0,2,1,4,0,0
</code></pre><p>And reception:</p>
<pre><code>AT+FSKRX=433200012,4800,5000,4,12AD,0,2,1,4,5000,20000
</code></pre><p>The result was the following graph:</p>














<img src="/static/img/lora-at-power-profiling/fskVsLora.png">

<p>It shows that:</p>
<ul>
<li>LoRa processes the message much faster: <strong>13.6</strong>ms versus <strong>19</strong>ms</li>
<li>More energy efficient. Due to the processing speed, the total consumption is <strong>511</strong>µC versus <strong>775</strong>µC</li>
<li>Peak consumption is slightly lower</li>
</ul>
<p>In fact, such a comparison is incorrect. Energy consumption directly depends on the data transfer rate. The higher the speed, the faster the message is processed and the less energy is wasted.</p>
<h4 id="cad-mode">CAD mode</h4>
<p>The sx127x has a special mode called CAD (Channel Activity Detection). It is used to optimize the power consumption of the receiver. The idea is this:</p>
<ul>
<li>the receiver turns on at full power for a certain time</li>
<li>after which it goes into low-power mode and tries to analyze the received signal</li>
<li>if preamble is detected, the chip generates an interrupt and you can switch to normal receiving mode</li>
<li>if preamble is not detected, then the chip waits for some time in low power mode and returns to step 1</li>
</ul>
<p>The diagram looks like this:</p>
<div>
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" viewBox="-0.5 -0.5 460 202"><defs/><g><path d="M 40 40 L 80 40 L 80 0 L 400 0" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 40 120 L 360 120 L 360 80 L 400 80" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 40 200 L 80 200 L 80 160 L 200 160 L 200 180 L 360 180 L 360 200 L 400 200" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 360 180 L 400 180" fill="none" stroke="rgb(0, 0, 0)" stroke-width="2" stroke-miterlimit="10" stroke-dasharray="2 6" pointer-events="stroke"/><path d="M 200 160 L 400 160" fill="none" stroke="rgb(0, 0, 0)" stroke-width="2" stroke-miterlimit="10" stroke-dasharray="2 6" pointer-events="stroke"/><rect x="0" y="160" width="80" height="40" fill="none" stroke="none" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 78px; height: 1px; padding-top: 180px; margin-left: 1px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;"><font style="font-size: 10px;">Consumption</font></div></div></div></foreignObject><text x="40" y="184" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">Consumption</text></switch></g><rect x="0" y="80" width="80" height="40" fill="none" stroke="none" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 78px; height: 1px; padding-top: 100px; margin-left: 1px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;"><font style="font-size: 10px;">CadDone</font></div></div></div></foreignObject><text x="40" y="104" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">CadDone</text></switch></g><rect x="0" y="0" width="80" height="40" fill="none" stroke="none" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 78px; height: 1px; padding-top: 20px; margin-left: 1px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;"><font style="font-size: 10px;">NSS</font></div></div></div></foreignObject><text x="40" y="24" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">NSS</text></switch></g><path d="M 86.37 80 L 353.63 80" fill="none" stroke="#6c8ebf" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 81.12 80 L 88.12 76.5 L 86.37 80 L 88.12 83.5 Z" fill="#6c8ebf" stroke="#6c8ebf" stroke-miterlimit="10" pointer-events="all"/><path d="M 358.88 80 L 351.88 83.5 L 353.63 80 L 351.88 76.5 Z" fill="#6c8ebf" stroke="#6c8ebf" stroke-miterlimit="10" pointer-events="all"/><rect x="80" y="60" width="280" height="20" fill="none" stroke="none" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 278px; height: 1px; padding-top: 70px; margin-left: 81px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 10px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">CAD duration</div></div></div></foreignObject><text x="220" y="73" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="10px" text-anchor="middle">CAD duration</text></switch></g><path d="M 86.37 180 L 193.63 180" fill="none" stroke="#6c8ebf" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 81.12 180 L 88.12 176.5 L 86.37 180 L 88.12 183.5 Z" fill="#6c8ebf" stroke="#6c8ebf" stroke-miterlimit="10" pointer-events="all"/><path d="M 198.88 180 L 191.88 183.5 L 193.63 180 L 191.88 176.5 Z" fill="#6c8ebf" stroke="#6c8ebf" stroke-miterlimit="10" pointer-events="all"/><rect x="90" y="166" width="100" height="10" fill="none" stroke="none" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 98px; height: 1px; padding-top: 171px; margin-left: 91px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 10px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">Time in RX mode</div></div></div></foreignObject><text x="140" y="174" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="10px" text-anchor="middle">Time in RX mode</text></switch></g><rect x="400" y="172.5" width="60" height="15" fill="none" stroke="none" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 58px; height: 1px; padding-top: 180px; margin-left: 401px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;"><font style="font-size: 10px;">IDDC_L</font></div></div></div></foreignObject><text x="430" y="184" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">IDDC_L</text></switch></g><rect x="400" y="151" width="60" height="15" fill="none" stroke="none" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 58px; height: 1px; padding-top: 159px; margin-left: 401px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;"><font style="font-size: 10px;">IDDR_L</font></div></div></div></foreignObject><text x="430" y="162" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">IDDR_L</text></switch></g></g><switch><g requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"/><a transform="translate(0,-5)" xlink:href="https://www.drawio.com/doc/faq/svg-export-text-problems" target="_blank"><text text-anchor="middle" font-size="10px" x="50%" y="100%">Text is not SVG - cannot display</text></a></switch></svg>
</div>
<p>According to the specification, consumption can be reduced by almost half:</p>
<table>
<thead>
  <tr>
    <th>Bandwidth (kHz)</th>
    <th>Full Rx, IDDR_L (mA)</th>
    <th>Processing, IDDC_L (mA)</th>
  </tr>	
</thead>
<tbody>
  <tr>
    <td>7.8 to 41.7</td>
    <td>11</td>
    <td>5.2</td>
  </tr>	
  <tr>
    <td>62.5</td>
    <td>11</td>
    <td>5.6</td>
  </tr>	
  <tr>
    <td>125</td>
    <td>11.5</td>
    <td>6</td>
  </tr>	
  <tr>
    <td>250</td>
    <td>12.4</td>
    <td>6.8</td>
  </tr>	
  <tr>
    <td>500</td>
    <td>13.8</td>
    <td>8.3</td>
  </tr>	
</tbody>
</table>
<p>CAD mode can be started using the command below:</p>
<pre><code>AT+LORACADRX=433200012,125000,9,5,18,10,8,4,0,0,1,0
</code></pre><p>In the end I managed to get:</p>














<img src="/img/lora-at-power-profiling/cad.png">

<p>Here you can immediately see several interesting things:</p>
<ul>
<li>For some reason, the current consumption in the preamble search mode is slightly higher than in RX mode</li>
<li>The difference between active and passive mode is <strong>~6</strong>mA, which does seem to be true at <strong>125</strong>kHz</li>
<li><strong>~2</strong> ms elapses after exiting CAD mode and before switching back. The ESP32 needs this time to process the interrupt and switch back to CAD mode. Since CAD mode ends up going into STANDBY mode, power consumption is significantly lower. 2ms for interrupt processing is a lot. If the transmission of a message begins at this time, the receiver may miss its beginning. The checksum will not match and the entire message will not be accepted. On the other hand, in practice everything works fine.</li>
</ul>
<p>If we compare power consumption, the CAD mode is still more efficient:</p>
<ul>
<li>Charge spent <strong>1.41</strong>mC versus <strong>1.52</strong>mC in <strong>40</strong>ms</li>
<li>Average current <strong>35.27</strong>mA versus <strong>37.85</strong>mA</li>
</ul>
<h4 id="sending-data">Sending data</h4>
<p>Current consumption during transmit depends on:</p>
<ul>
<li>transmission speed</li>
<li>modulation type</li>
<li>transmitter power</li>
<li>message length</li>
</ul>
<p>To make testing easier, I sent a 255 byte message with a power of 4dbm. At the same time, I changed the transmission speed and modulation type. Here is an example command for testing FSK:</p>
<pre><code>AT+FSKTX=000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6d7d8d9dadbdcdddedfe0e1e2e3e4e5e6e7e8e9eaebecedeeeff0f1f2f3f4f5f6f7f8f9fafbfcfdfe,433200012,1200,5000,4,12AD,0,2,1,4,240,0
</code></pre>













<img src="/img/lora-at-power-profiling/fskBaud.png">

<p>The graph shows a clear correlation. The higher the transmission speed, the less energy is wasted. By the way, the graph around 76800 baud was not always like this. When I first measured the speed, it turned out to be half that of 38400 baud. And its increase had no effect on consumption at all. After fiddling around a bit, I found a bug in the code. When reading from the UART, uint16_t overflowed and a much lower speed was set. Oops!</p>
<p>When sending data in LoRa mode, everything is much more complicated. The speed can be affected by: bandwidth, spreading factor and coding rate. For example, the latter controls how many bits are used for error correction codes. The larger the number, the more reliable the transmission, but the longer it takes for the data to be transmitted.</p>
<p>I fixed <code>coding rate=4</code> and changed only the bandwidth and spreading factor:</p>
<pre><code>AT+LORATX=000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6d7d8d9dadbdcdddedfe0e1e2e3e4e5e6e7e8e9eaebecedeeeff0f1f2f3f4f5f6f7f8f9fafbfcfdfe,433200012,500000,6,5,18,8,0,1,0,255,4,240,0
</code></pre>













<img src="/img/lora-at-power-profiling/loraBandwidthSf.png">

<p>Quick analysis shows:</p>
<ul>
<li>The greater the spreading factor, the longer the message is transmitted and the more energy is wasted</li>
<li>The fastest LoRa data transmission (factor 6 and 500KHz channel width) consumes more energy than the fastest FSK transmission (300Kbaud rate)</li>
</ul>
<p>In the next test I did the opposite: I fixed the data transfer rate and changed the output power from -4 to 20.</p>
<pre><code>AT+LORATX=CA,433200012,125000,9,5,18,8,0,1,1,0,-4,240,0
AT+LORATX=CA,433200012,125000,9,5,18,8,0,1,1,0,-3,240,0
...
AT+LORATX=CA,433200012,125000,9,5,18,8,0,1,1,0,17,240,1
AT+LORATX=CA,433200012,125000,9,5,18,8,0,1,1,0,20,240,1
</code></pre>













<img src="/img/lora-at-power-profiling/loraPower.png">

<p>I wonder why at higher power levels the graphs begin to intersect? I transmitted absolutely the same message with the same parameters. The transmission time was the same. This means that the spent charge should depend linearly on the current. But instead the relationship is nonlinear.</p>
<p>By the way, at 7dbm the current consumption is quite even. But at 10dbm it’s not the case. Is the internal power amplifier noisy?</p>














<img src="/img/lora-at-power-profiling/txNoise.png">

<p>In addition to the different power levels, the chip has three different physical pins that the antenna can connect to: RFO_LF, RFO_HF and PA_BOOST. +20dbm can only be transmitted via PA_BOOST. But if you transmit +7dbm, then does it make a difference which pin to use?</p>
<pre><code>AT+LORATX=CA,168000012,125000,9,5,18,8,0,1,1,0,7,240,0
AT+LORATX=CA,433200012,125000,9,5,18,8,0,1,1,0,7,240,0
AT+LORATX=CA,433200012,125000,9,5,18,8,0,1,1,0,7,240,1
</code></pre>













<img src="/img/lora-at-power-profiling/txpin.png">

<p>Yes, there is a difference.</p>
<ul>
<li>If we compare RFO_LF and RFO_HF, we can see that the current consumption at 168 MHz is higher. Apparently, at these frequencies the antenna is <a href="https://en.wikipedia.org/wiki/Standing_wave_ratio">no longer matched</a>.</li>
<li>The current consumption when transmitted through a separate power amplifier and PA_BOOST pin is greater than when transmitted through RFO_HF. Probably the difference goes to powering that same amplifier.</li>
</ul>
<h4 id="over-current-protection">Over current protection</h4>
<p>The chip has over current protection. Datasheet has some references to the battery, chemical components and peak current consumption. At first I didn&rsquo;t understand anything. After reading the theory a little, it became a little more clear. The amplifier is designed for an antenna impedance of <strong>50</strong> Ohms. If the impedance does not match, or has ceased to match (the antenna is rusty), then more and more current will be spent to generate a given power level. This may cause the amplifier to burn out. I compared sending a message: without protection (240mA), with a slight limitation (140mA), with a maximum limitation (45mA).</p>
<pre><code>AT+LORATX=CA,140200012,125000,9,5,18,8,0,1,1,0,17,240,1
AT+LORATX=CA,140200012,125000,9,5,18,8,0,1,1,0,17,140,1
AT+LORATX=CA,140200012,125000,9,5,18,8,0,1,1,0,17,45,1
</code></pre>













<img src="/img/lora-at-power-profiling/ocp2.png">

<p>The board consumes a constant amount of current regardless of the installed protection. But this does not mean that the protection does not work. It may be necessary to measure the actual transmitted power at the antenna. Unfortunately, I don&rsquo;t have the necessary equipment to test this.</p>
<h2 id="comparison-with-c-version">Comparison with C++ version</h2>
<p>As I already wrote, <a href="https://github.com/dernasherbrezon/lora-at">lora-at</a> was originally implemented in C++ using libraries of different quality levels. My theory was that by rewriting the project in C, I could achieve greater efficiency and simplicity. One of the goals was achieved - assembling the project began to take less time and the size of the firmware was halved. But what about power consumption?</p>
<p>The operation of the sx127x chip does not depend on the selected language, but everything else may theoretically differ.</p>
<h3 id="bluetooth-connection">Bluetooth connection</h3>
<p>One of the main differences between the first version and the second is the work with bluetooth. If the first version used a C++ library on top of Bluedroid, then in the second version I used Nimble. The documentation says that Nimble is a more lightweight implementation of the BLE protocol. But is this really so? And is there a difference in speed? This is very easy to check. To do this I used the command:</p>
<pre><code>AT+BLUETOOTH=B8:27:EB:6C:7C:F8
</code></pre><p>This command will do the following:</p>
<ul>
<li>will start connecting to the bluetooth server at <code>B8:27:EB:6C:7C:F8</code></li>
<li>will search for the desired GATT service and characteristics</li>
</ul>














<img src="/img/lora-at-power-profiling/bluetooth2.png">

<p>It’s worth noting here that I wasn’t always able to connect to the server! At some point I had to move the board closer to the RaspberryPI. It was then that it was discovered that the closer to the bluetooth server, the faster the connection. Even if I used different versions of the application, the connection time was very different. Which gave a strong scatter in the results. For example, from 3 meters C-code could spend <strong>386.8</strong> mC, and C++ would not connect at all. Or from one meter C++ spent <strong>308.3</strong> mC, and C-code - <strong>150.2</strong> mC. In general, the test turned out so-so.</p>
<h3 id="deep-sleep">Deep sleep</h3>
<p>Deep sleep is a special operating mode in which all peripherals are turned off and the ESP32 operates consuming a minimum amount of energy. In this mode, it is impossible to do anything useful, so deep sleep usually alternates with an active phase. In the active phase, the device performs useful operations, after which it goes back to sleep. The smaller the active phase, the less energy the device will ultimately consume. In lora-at you can configure the deep sleep interval. For example, the command below will set the configuration: after 15 seconds of inactivity, go into deep sleep mode for 15 seconds.</p>
<pre><code>AT+DSCONFIG=15000,15000
</code></pre><p>During the active phase, lora-at connects to bluetooth server, receives the next power-up schedule and goes to sleep again.</p>














<img src="/img/lora-at-power-profiling/dsCycle.png">

<ul>
<li>Energy consumption strongly depends on the speed of connection to the bluetooth server. Moreover, sometimes it takes 2 seconds, and sometimes 7. Because of such instability, it is difficult to draw any conclusions</li>
<li>nergy consumption varies quite a lot: from <strong>474.6</strong>мКл mC (C++ version) to <strong>179.2</strong>mC (C version)</li>
<li>C++ startup time is slightly less. <strong>~500</strong>ms vs  <strong>~664</strong>ms. However, I have never been able to get less than 7 seconds to connect using the C++ version. Perhaps it missed some bluetooth event and had to wait for a retransmission from the server.</li>
</ul>
<p>Energy consumption in deep sleep mode is <strong>1.7</strong>mA. This is about a million times more than the theoretical minimum of the ESP32. I spent about 2 weeks trying to figure out what the problem was. After all the tricks, I managed to reduce the consumption to <strong>10</strong>µA.</p>
<h3 id="operation-at-low-frequencies">Operation at low frequencies</h3>
<p>ESP32 can operate at both 240MHz and 80MHz. Obviously, this reduces energy consumption by running slower. But does it matter if SPI bus works at 3Mhz?</p>
<table>
<thead>
	<tr>
		<th>Operating mode</th>
		<th>Average current consumption (C)</th>
		<th>Average current consumption (C++)</th>		
	</tr>
</thead>
<tbody>
	<tr>
		<td>240Мгц</td>
		<td>48.27</td>
		<td>73.36</td>
	</tr>
	<tr>
		<td>160Мгц</td>
		<td>35.81</td>
		<td>50.64</td>
	</tr>
	<tr>
		<td>80Мгц</td>
		<td><strong>26.38</strong></td>
		<td>39.44</td>
	</tr>
</tbody>
</table>
<ul>
<li>As expected, the lower the microcontroller frequency, the lower the power consumption</li>
<li>Sometimes I was able to get even lower values, but I couldn&rsquo;t figure out how to reproduce them</li>
</ul>
<p>By the way, the difference between the C and C++ versions is related to how events are processed. In the C version, all processing occurs in separate FreeRTOS tasks. I&rsquo;m not even using the main task:</p>
<pre><code>I (595) main_task: Returned from app_main()
</code></pre><p>But the C++ version checks events in an infinite loop. If I add a similar cycle to the C version, the energy consumption will be the same:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">uint64_t counter <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
uint64_t active <span style="color:#f92672">=</span> <span style="color:#ae81ff">1000000</span>;
<span style="color:#66d9ef">while</span> (true) {
  counter<span style="color:#f92672">++</span>;
  <span style="color:#66d9ef">if</span> (counter <span style="color:#f92672">==</span> active) {
    counter <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
    vTaskDelay(pdMS_TO_TICKS(<span style="color:#ae81ff">5000</span>));
  }
}
</code></pre></div><h4 id="uart-interrupt-handling">UART interrupt handling</h4>
<p>I enjoyed fiddling with energy consumption so much that I decided to measure completely strange things. For example, I became interested in how much energy is spent processing the received symbol via UART. The greatly enlarged graph looks like this:</p>














<img src="/img/lora-at-power-profiling/uartSymbol2.png">

<ul>
<li>Each press causes a jump in current consumption of approximately <strong>10</strong>mA and lasts approximately <strong>1.4</strong>ms</li>
<li>It’s not very clear why there are two jumps</li>
<li>If you put several characters into the buffer at once using CMD+V, this will generate one interrupt and a very similar graph</li>
</ul>
<p>If <strong>37.32</strong> µC are spent in <strong>1.4</strong> ms, and <strong>35.11</strong> µC are spent in idle mode during the same time, then pressing the button costs <strong>2.21</strong> µC.</p>
<h2 id="conclusions">Conclusions</h2>
<ul>
<li>C code is on average more energy efficient by using FreeRTOS tasks rather than an infinite loop</li>
<li>Using the energy consumption graph, you can find bugs in the code</li>
<li>Bluetooth Low Energy is not the most predictable protocol in terms of energy consumption</li>
<li>Even if the deep sleep code is called correctly, this does not guarantee that the device actually consumes little power. We need to measure!</li>
</ul>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Power Profiler Kit 2</title>
      <link>https://dernasherbrezon.com/en/posts/power-profiler-kit2/</link>
      <pubDate>Fri, 24 Nov 2023 09:08:18 +0000</pubDate>
      
      <guid>https://dernasherbrezon.com/en/posts/power-profiler-kit2/</guid>
      <description>After I re-wrote lora-at in C, I reduced the size of the firmware by half! However, although this looks impressive, it is actually not that important. If both versions fit on a chip, then size doesn&amp;rsquo;t make too much difference. Energy consumption is another matter. Low power consumption is important when operating from solar panels. That is why I decided to explore this topic in more detail.
Previously, I used the A3-B USB tester, but it is not suitable for measuring current consumption in microcontrollers.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Power Profiler Kit 2</h1></header>
      		<div class='container entry-content'>
  <p>After I re-wrote <a href="https://dernasherbrezon.com/en/posts/lora-at/">lora-at in C</a>, I reduced the size of the firmware by half! However, although this looks impressive, it is actually not that important. If both versions fit on a chip, then size doesn&rsquo;t make too much difference. Energy consumption is another matter. Low power consumption is important when operating from solar panels. That is why I decided to explore this topic in more detail.</p>
<p>Previously, I used the <a href="https://dernasherbrezon.com/en/posts/smart-usb-meter-a3-b/">A3-B USB tester</a>, but it is not suitable for measuring current consumption in microcontrollers. Firstly, because currents vary from milliamps to nanoamps. This is quite big dynamic range. Here&rsquo;s a <a href="https://www.youtube.com/watch?v=LUB8RWzzLWc">great video</a> that explains why measuring such wide range is difficult and how to do it. Secondly, events occurring in microcontrollers can be from microseconds to milliseconds. The A3-B simply cannot sample and deliver data as quickly. Something else is needed. After watching <a href="https://www.youtube.com/watch?v=LUB8RWzzLWc">this video</a>, I decided to buy <a href="https://www.nordicsemi.com/Products/Development-hardware/Power-Profiler-Kit-2">Power Profiler Kit 2 (PPK2)</a>.</p>
<h2 id="power-profiler-kit-2">Power Profiler Kit 2</h2>
<p>Power Profiler Kit 2 (PPK2) is a special device that allows you to measure current in a fairly wide range: from milliamps to nanoamps. It was created to help optimize the power consumption of various low-power devices.</p>
<p><img src="/img/power-profiler-kit2/PPK2.jpg" alt=""></p>
<p>The idea is quite simple: connect device to PPK2. It will measure the current and send the data to the computer. There, with the help of a special program, the data can be visualized and analyzed.</p>
<p><img src="/img/power-profiler-kit2/1.jpg" alt=""></p>
<p>At the top of the PPK2 there are two micro-USB ports: one for power and data, the other for additional power. It can used if the device consumes more than 500mA. I used <a href="https://resource.heltec.cn/download/WiFi_LoRa_32/WIFI_LoRa_32_V2.pdf">Heltec LoRa 32 v2</a> for testing. It consumes about ~100-150 mA, so one connection was enough.</p>
<p>There are two rows of pins at the bottom. The first is used to measure current, the second is used as a <a href="https://en.wikipedia.org/wiki/Logic_analyzer">logic analyzer</a>. To get started, just connect two pins <strong>Vout</strong> and <strong>GND</strong> as a power source. I used PPK2 as a power source and connected it through a special JST connector. Firstly, it was more convenient - there was no need to solder the USB cable. And secondly, power supply via the JST connector is optimized for low consumption. An external 3.3~3.7V battery is connected through this connector, and additional elements such as LEDs, a voltage converter and CP2104 are not used.</p>
<h2 id="nrf-connect-for-desktop">nRF Connect for Desktop</h2>
<p>But perhaps the coolest thing is the device management program - <a href="https://www.nordicsemi.com/Products/Development-tools/nrf-connect-for-desktop">nRF Connect for Desktop</a>. I was able to launch on MacOS without any issues. It works fast, and allows you to analyze large amounts of data.</p>
<p><img src="/img/power-profiler-kit2/2.png" alt=""></p>
<p>On the left you can select the operating mode and, if it is the “power supply” mode (Source meter), then select the voltage. You can adjust the sampling speed and observation time. In the very center there is a graph that can be updated in real time. You can zoom in and out of the desired areas on the graph. If you select the most interesting areas, the average energy consumption and time will be automatically calculated for them.</p>
<h2 id="settings">Settings</h2>
<p>Once all the wires are connected and barely holding in place, its time to move on to setting up the application. Different applications can be measured differently. The easiest way to measure an application is to write a separate small application that just uses the function under the test. For example, connect via bluetooth. The measurement algorithm can be as follows:</p>
<ul>
<li>start PPK2</li>
<li>enable power output</li>
<li>the firmware will start automatically</li>
<li>will try to connect to the server via bluetooth</li>
<li>next you need to stop PPK2 and</li>
<li>analyze the results</li>
</ul>
<p>Looks very tedious and time-consuming. But, probably, the only way is if some parts of the program are difficult to reproduce and run. I was lucky - lora-at can receive commands via the UART bus, so it’s enough to send commands and look at the result.</p>
<p>To do this, I connected the RX (3) and TX (1) pins via a special cable to the computer and configured the output as follows:</p>
<pre><code>idf.py menuconfig
</code></pre><p><img src="/img/power-profiler-kit2/4.png" alt=""></p>
<p>After everything is configured, a device will appear somewhere under <code>/dev/</code> directory. Then it is possible to connect to it and send AT commands:</p>
<pre><code>screen /dev/cu.usbserial-A10KBZX1 115200
</code></pre><h2 id="testing">Testing</h2>
<p>My initial goal was to see what PPK2 could do. After everything was connected together I ran several basic tests. Here is what happen when you type character and send via the UART bus.</p>
<p><img src="/img/power-profiler-kit2/5.png" alt=""></p>
<p>Each press consumes 12mA and is processed in 1.4ms.</p>
<p>And here is an example of what happens when a device connects via bluetooth to the server:</p>
<p><img src="/img/power-profiler-kit2/6.png" alt=""></p>
<p>By the way, the small graph below is the output of the logic analyzer.</p>
<h2 id="logic-analyzer">Logic analyzer</h2>
<p>Sometimes you need to align function under the test to the energy consumption. To do this, you can use the pins of a logic analyzer. First connect a pin from analyzer to the device pin. In the program set pin to value 1 on enter, and reset to 0 upon leaving. Then run the program.</p>
<p>With such cool feature it is possible to do really interesting things. For exampple, it is possible to analyze <a href="https://en.wikipedia.org/wiki/Serial_Peripheral_Interface">SPI protocol</a>. To do this, you need to connect the wires as follows:</p>
<p><img src="/img/power-profiler-kit2/7.jpg" alt=""></p>
<p>In reality it doesn&rsquo;t look so neat:</p>
<p><img src="/img/power-profiler-kit2/IMG_4045.jpg" alt=""></p>
<p>After all the wires are mixed up, barely holding on and trying to fly out, its time to configure the program. By default, lora-at initializes the SPI bus at a frequency of 3 MHz. According to the <a href="https://en.wikipedia.org/wiki/Nyquist%E2%80%93Shannon_sampling_theorem">Nyquist-Shannon-Kotelnikov theorem</a>, to see this signal you need to sample at a frequency of 6 MHz. PPK2 can only sample at 100KHz. Therefore, in order to see the operation of the SPI protocol on the graph, you need to reduce its frequency to 50 KHz. This is done when the device is initialized:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">spi_device_interface_config_t dev_cfg <span style="color:#f92672">=</span> {
    .clock_speed_hz <span style="color:#f92672">=</span> <span style="color:#ae81ff">50000</span>,
    .spics_io_num <span style="color:#f92672">=</span> CONFIG_PIN_CS,
    .queue_size <span style="color:#f92672">=</span> <span style="color:#ae81ff">16</span>,
    .command_bits <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>,
    .address_bits <span style="color:#f92672">=</span> <span style="color:#ae81ff">8</span>,
    .dummy_bits <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>,
    .mode <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>};
</code></pre></div><p>After updating the firmware you can see the result:</p>
<p><img src="/img/power-profiler-kit2/logic-analyzer.png" alt=""></p>
<p>Its clear that pin 2 is SCLK, where the master device generates operating frequency. Pin 1 is CS(SS), which goes to 0 when the master is about to transmit data. Pin 3 is MOSI. The line through which the master transmits commands. By the way, the graph clearly shows the protocol with sx127x, when my library requests the value of register 0x42 to get the chip version, and the response comes via pin 0. Next comes the transition to sleep mode, and after that a fairly long communication, during which I receive states of all registers for debugging.</p>
<h2 id="conclusion">Conclusion</h2>
<p>PPK2 is a very powerful tool for analyzing microcontrollers. The next step will be more detailed measurement of various modes and optimization of energy consumption. It would also be a good idea to convert the output to JSON in order to display graphs on the blog.</p>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>lora-at</title>
      <link>https://dernasherbrezon.com/en/posts/lora-at/</link>
      <pubDate>Sun, 05 Nov 2023 22:25:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/en/posts/lora-at/</guid>
      <description>Background It&amp;rsquo;s been too long since my last post about LoRa. During this time, I created a project lora-at, which I would like to write about in this post. But before I deep dive into the meety details, I little background on how it started.
Initially, I planned to create a small firmware for receiving signals from satellites using LoRa protocol. I used tinyGS as a basis, which did almost everything I needed.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>lora-at</h1></header>
      		<div class='container entry-content'>
  <h2 id="background">Background</h2>
<p>It&rsquo;s been too long since my last post about LoRa. During this time, I created a project <a href="https://github.com/dernasherbrezon/lora-at">lora-at</a>, which I would like to write about in this post. But before I deep dive into the meety details, I little background on how it started.</p>
<p>Initially, I planned to create a small firmware for receiving signals from satellites using LoRa protocol. I used <a href="https://github.com/G4lile0/tinyGS">tinyGS</a> as a basis, which did almost everything I needed. tinyGS support scheduling satellite observations, receive packets from satellites and send them to a central server. I needed something more lightweight and not integrated with any servers. It was enough to have a simple REST API service, that can be controlled via HTTP. As a result, I created <a href="https://github.com/dernasherbrezon/r2lora">r2lora</a> project. It proved to be more <a href="https://dernasherbrezon.com/en/posts/smart-usb-meter-a3-b/">energy efficient</a> than tinyGS and supported <a href="https://dernasherbrezon.com/en/posts/fota-for-r2lora/">over-the-air updates</a>.</p>
<p>However, after several field tests, it became clear that using a REST API and a web server is not the best idea. First, you need to set up Wi-Fi access point. And for this you need either a router or a Raspberry PI in access point mode. The router cannot be started in the field without a 12V battery. Raspberry PI cannot always operate in access point mode. Sometimes you want to bring it home, connect it to your home network and send all the received data to <a href="https://leosatdata.com">leosatdata.com</a>. All these problems can be solved, but in my opinion, the result will look cumbersome for such a simple task as transferring several bytes from one device to another.</p>
<p>It was then that the idea came to me to control the LoRa transceiver via the UART interface. It is used to upload new firmware to the device and view the logs. So why not use it to send commands as well?</p>
<h2 id="design">Design</h2>
<p>I am finishing second version of lora-at. The first one was written in C++, used many of r2lora&rsquo;s ideas and worked. However, there were also several rather unpleasant moments. First, it used the RadioLib library, which <a href="https://dernasherbrezon.com/en/posts/sx127x/">did not support</a> waking up from sleep mode correctly. Secondly, the code was written using the <a href="https://github.com/espressif/arduino-esp32">Arduino framework ported to the ESP32</a>. This framework is quite simple and designed for beginners. With its help, you can make a working prototype relatively quickly, but I wanted to use the full power of the ESP32. For example, a typical Arduino handler looks like this:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">loop</span>() {
  <span style="color:#66d9ef">if</span> (lora<span style="color:#f92672">-&gt;</span>isReceivingData()) {
    LoRaFrame <span style="color:#f92672">*</span>frame <span style="color:#f92672">=</span> lora<span style="color:#f92672">-&gt;</span>loop();
    <span style="color:#66d9ef">if</span> (frame <span style="color:#f92672">!=</span> NULL) {
      client<span style="color:#f92672">-&gt;</span>sendData(frame);
      handler<span style="color:#f92672">-&gt;</span>addFrame(frame);
    }
  }
  <span style="color:#75715e">// ...
</span><span style="color:#75715e"></span>}
</code></pre></div><p>It’s not clear why make an endless loop if the ESP32 has FreeRTOS, which allows you to process asynchronous events using interrupts and tasks. Thirdly, C++. Long compilation, a mishmash of concepts, interfaces, system and auxiliary libraries - all this does not give confidence in the written code.</p>
<p>I wanted:</p>
<ul>
<li>C</li>
<li>Use ESP32 API and abstractions as low as possible</li>
<li>Own <a href="https://github.com/dernasherbrezon/sx127x">sx127x</a></li>
<li>Interrupts and handlers in separate FreeRTOS tasks</li>
</ul>
<p>The remaining functional requirements are:</p>
<ul>
<li>Support AT commands via UART interface. They must control every aspect of the system</li>
<li>Storing configuration in flash memory</li>
<li>Deep sleep support and <a href="https://dernasherbrezon.com/en/posts/ble-server-java/">Bluetooth integration</a></li>
<li>Support for LoRa and FSK modulations</li>
<li>Sending and receiving data in batch mode. Maximum packet size 255 bytes</li>
</ul>
<p>The design is not fundamentally different from r2lora:</p>
<div>
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" viewBox="-0.5 -0.5 441 441"><defs/><g><path d="M 200 20 L 220 20 L 220 140 L 353.63 140" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 358.88 140 L 351.88 143.5 L 353.63 140 L 351.88 136.5 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><rect x="120" y="0" width="80" height="40" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 78px; height: 1px; padding-top: 20px; margin-left: 121px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">at_config</div></div></div></foreignObject><text x="160" y="24" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">at_config</text></switch></g><rect x="360" y="120" width="80" height="40" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 78px; height: 1px; padding-top: 140px; margin-left: 361px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">at_handler</div></div></div></foreignObject><text x="400" y="144" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">at_handler</text></switch></g><path d="M 200 100 L 220 100 L 220 140 L 353.63 140" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 358.88 140 L 351.88 143.5 L 353.63 140 L 351.88 136.5 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><rect x="120" y="80" width="80" height="40" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 78px; height: 1px; padding-top: 100px; margin-left: 121px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">at_timer</div></div></div></foreignObject><text x="160" y="104" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">at_timer</text></switch></g><path d="M 200 180 L 220 180 L 220 140 L 353.63 140" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 358.88 140 L 351.88 143.5 L 353.63 140 L 351.88 136.5 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><rect x="120" y="160" width="80" height="40" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 78px; height: 1px; padding-top: 180px; margin-left: 121px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">at_util</div></div></div></foreignObject><text x="160" y="184" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">at_util</text></switch></g><path d="M 320 260 L 340 260 L 340 140 L 353.63 140" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 358.88 140 L 351.88 143.5 L 353.63 140 L 351.88 136.5 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><rect x="240" y="240" width="80" height="40" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 78px; height: 1px; padding-top: 260px; margin-left: 241px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">ble_client</div></div></div></foreignObject><text x="280" y="264" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">ble_client</text></switch></g><rect x="120" y="400" width="80" height="40" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 78px; height: 1px; padding-top: 420px; margin-left: 121px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">deep_sleep</div></div></div></foreignObject><text x="160" y="424" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">deep_sleep</text></switch></g><path d="M 200 340 L 340 340 L 340 140 L 353.63 140" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 358.88 140 L 351.88 143.5 L 353.63 140 L 351.88 136.5 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><rect x="120" y="320" width="80" height="40" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 78px; height: 1px; padding-top: 340px; margin-left: 121px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">display</div></div></div></foreignObject><text x="160" y="344" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">display</text></switch></g><path d="M 200 260 L 233.63 260" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 238.88 260 L 231.88 263.5 L 233.63 260 L 231.88 256.5 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><path d="M 200 250 L 220 250 L 220 140 L 353.63 140" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 358.88 140 L 351.88 143.5 L 353.63 140 L 351.88 136.5 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><rect x="120" y="240" width="80" height="40" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 78px; height: 1px; padding-top: 260px; margin-left: 121px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">sx127x_util</div></div></div></foreignObject><text x="160" y="264" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">sx127x_util</text></switch></g><path d="M 80 260 L 113.63 260" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 118.88 260 L 111.88 263.5 L 113.63 260 L 111.88 256.5 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><rect x="0" y="240" width="80" height="40" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 78px; height: 1px; padding-top: 260px; margin-left: 1px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">sx127x</div></div></div></foreignObject><text x="40" y="264" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">sx127x</text></switch></g><path d="M 80 340 L 113.63 340" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 118.88 340 L 111.88 343.5 L 113.63 340 L 111.88 336.5 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><rect x="0" y="320" width="80" height="40" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 78px; height: 1px; padding-top: 340px; margin-left: 1px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">ssd1306</div></div></div></foreignObject><text x="40" y="344" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">ssd1306</text></switch></g></g><switch><g requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"/><a transform="translate(0,-5)" xlink:href="https://www.drawio.com/doc/faq/svg-export-text-problems" target="_blank"><text text-anchor="middle" font-size="10px" x="50%" y="100%">Text is not SVG - cannot display</text></a></switch></svg>
</div>
<p>Each subsystem must be in a separate component and together they must be controlled by <code>at_handler</code> - an AT command handler.</p>
<p>I changed the language, why stopping now? I decided to switch to <a href="https://docs.espressif.com/projects/esp-idf/en/latest/esp32/get-started/">ESP-IDF</a>. After all, this is an officially supported development environment for the ESP32. This means that all other libraries and frameworks are based on it. And it is quite low-level.</p>
<h2 id="esp-idf">ESP-IDF</h2>
<p>My main complaint with PlatformIO and <a href="https://github.com/espressif/arduino-esp32">arduino-esp32</a> is that they add layers of abstraction that are not always good. This helps with quick assemble the prototype, but often at the expense of the overall project structure and maintainability. For example, a LoRa chip is connected via an SPI bus. It probably needs to be initialized, some function to send a command to the chip, receive a response and process it. If a problem occurs somewhere, then it is very important to understand where and when. And, reading fairly low-level code, this is easy to understand. However, a typical code example for arduino-esp32:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++"><span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span>LoRa.begin(<span style="color:#ae81ff">915E6</span>)) {
  Serial.println(<span style="color:#e6db74">&#34;Starting LoRa failed!&#34;</span>);
  <span style="color:#66d9ef">while</span> (<span style="color:#ae81ff">1</span>);
}
</code></pre></div><p>What is this? Constructor? Singleton? Where is the SPI bus initialization? What pins are used? But looks how cool it is to initialize everything on a single line.</p>
<p>As it turned out, despite the fact that ESP-IDF is quite low-level, it has quite easy to understand abstractions and very familiar working tools. This framework determines how the project should be assembled, how it should be tested, the API for internal ESP32 components, where and how to get dependencies - in general, everything that is needed for development. The official website has <a href="https://docs.espressif.com/projects/esp-idf/en/latest/esp32/get-started/index.html#ide">integrations with Eclipse and VSCode</a>, but I decided to try <a href="https://www.jetbrains.com/clion/">CLion</a>. Fortunately, I already bought it and used to develop other projects. At some point, CLion started to support initialization from an environment file. This is quite handy when working with ESP-IDF. Once everythying is configured CLion will run the standard <code>export.sh</code> script and receive all the information about which compiler is used, where to get different sources and header files, etc.</p>
<p><img src="/img/lora-at/1.png" alt=""></p>
<p>Among the unobvious advantages: CLion allows you to upload a project to a remote host and compile it there. VSCode can do it too, but it requires the latest version of Python and NodeJS. Both are terribly slow on RaspberryPI. CLion doesn&rsquo;t have this problem. Apparently it has a very lightweight way of working with remote hosts.</p>
<p><img src="/img/lora-at/3.png" alt=""></p>
<h3 id="dependency-management">Dependency management</h3>
<p>Dependency management in ESP-IDF is very similar to NodeJS. They are downloaded as source code to a special folder and compiled when building the project. Dependencies can be added using the command:</p>
<pre><code>idf.py add-dependency dernasherbrezon/sx127x
</code></pre><p>After this <del>node_modules</del> managed_components folder appears with the necessary dependencies.</p>
<p>lora-at uses only two external dependencies:</p>
<ul>
<li><a href="https://github.com/dernasherbrezon/sx127x/tree/main">dernasherbrezon/sx127x</a> - to work with sx127x chip</li>
<li><a href="https://github.com/espressif/esp-bsp/tree/master/components/ssd1306">espressif/ssd1306</a> - to work with OLED screen</li>
</ul>
<p>In addition to external ones, it is possible to connect components of the framework itself or own. This is done using CMakeLists.txt:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-cmake" data-lang="cmake">idf_component_register(<span style="color:#e6db74">SRCS</span> <span style="color:#e6db74">&#34;ble_client.c&#34;</span>
        <span style="color:#e6db74">INCLUDE_DIRS</span> <span style="color:#e6db74">&#34;.&#34;</span>
        <span style="color:#e6db74">REQUIRES</span> <span style="color:#e6db74">bt</span> <span style="color:#e6db74">nvs_flash</span> <span style="color:#e6db74">sx127x_util</span>)<span style="color:#960050;background-color:#1e0010">
</span></code></pre></div><p>Once the dependencies are declared, they can be used in the project:</p>
<pre><code>#include &lt;nvs_flash.h&gt;
</code></pre><p>This is slightly different from the PlatformIO approach, where you can immediately include the header file, and the IDE itself will find the necessary dependencies and connect it. I am a supporter of everything explicit, so the ESP-IDF approach appeals to me more.</p>
<p>The framework components I used:</p>
<ul>
<li>bt - to work with Bluetooth</li>
<li>nvs_flash - for working with flash memory. lora-at uses it to store the configuration and load from it after a reboot</li>
<li>driver - for working with the SPI bus, which controls the sx127x chip. There is also a driver for working with GPIO</li>
</ul>
<h3 id="project-structure">Project structure</h3>
<p>The project structure is very similar to PlatformIO, where each module is separated into a separate component. Each of them is separately compiled and configured.</p>
<p><img src="/img/lora-at/4.png" alt=""></p>
<p>They are all added as dependencies to the central <code>main</code> component, which contains the entry point:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">app_main</span>(<span style="color:#66d9ef">void</span>) {
	<span style="color:#75715e">// do the stuff
</span><span style="color:#75715e"></span>}
</code></pre></div><h3 id="configuration">Configuration</h3>
<p>There are two ways to configure a project:</p>
<ul>
<li>using AT commands. Suitable for options that may change from time to time</li>
<li>using KConfig. Static configuration at compile time</li>
</ul>
<p>Couple words about KConfig. It is a fairly powerful system that PlatformIO do not have. In order to add own configuration, create a KConfig file in a special format. I will not dwell on its structure, especially since everything is described in great detail in the <a href="https://docs.espressif.com/projects/esp-idf/en/latest/esp32/api-reference/kconfig.html">official documentation</a>. After the file is created, launch the configurator itself using the command:</p>
<pre><code>idf.py menuconfig
</code></pre><p>The result will be an interface very similar to the Linux kernel configurator:</p>
<p><img src="/img/lora-at/5.png" alt=""></p>
<p>When I launched it for the first time, I was extremely surprised. If you examine the available options, it becomes clear that absolutely everything can be configured: from the size of the partitions to the Bluetooth stack. This configurator picks up not only the application configuration, but also the framework itself. And in general, this is logical - after all, the application is compiled together with the framework and then uploaded to the device in one binary.</p>
<p>Another thing that pleasantly surprised me was the very good documentation! If you select an option and press <code>?</code>, an option documentation will appear: what this option is about, what choices exist, and so on. Such a thorough approach is extremely contagious, so for lora-at I also added the most detailed description of each parameter.</p>
<p><img src="/img/lora-at/6.png" alt=""></p>
<p>After the configurator runs, an sdkconfig file containing the configuration will appear in the project root.</p>
<pre><code>...
CONFIG_MIN_FREQUENCY=25000000
CONFIG_MAX_FREQUENCY=1700000000
...
</code></pre><p>When compiled, it becomes sdkconfig.h, which can be used in any component.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#75715e">#define CONFIG_MIN_FREQUENCY 25000000
</span><span style="color:#75715e">#define CONFIG_MAX_FREQUENCY 1700000000
</span></code></pre></div><p>PlatformIO has quite convenient functionality for configuring various <a href="https://docs.platformio.org/en/latest/projectconf/sections/env/index.html">environments</a>. In r2lora it was used for quickstart a specific board. ESP32 and sx127x can be soldered differently on different boards. This results in the GPIO pin numbers slightly mismatching. I created a pin configuration in advance for the most commonly used boards and assigned each board its own &ldquo;environment&rdquo;. When compiling, it was enough to indicate the required environment for which the firmware was built.</p>
<p>I did something similar in ESP-IDF. The framework allows you to create various default settings in advance in the form of sdkconfig files. For example, I created: <code>sdkconfig.ttgo-lora32-v2</code>, <code>sdkconfig.ttgo-lora32-v1</code> &amp;etc. In them I redefined the pins for the corresponding boards. They can be used during the build using the command:</p>
<pre><code>SDKCONFIG_DEFAULTS=&quot;sdkconfig.ttgo-lora32-v2&quot; idf.py build
</code></pre><p>If a more complex configuration is required, then it is possible to use multiple files. But for lora-at this turned out to be quite enough.</p>
<h2 id="implementation">Implementation</h2>
<p>Most of the components that were in r2cloud had to be significantly rewritten. Because of the low-level API I was using, most of components now contain a little bit more code. If previously I was using the following code to get the data from flash disk:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++">Preferences preferences;
preferences.begin(<span style="color:#e6db74">&#34;lora-at&#34;</span>, true);
size_t chip_index <span style="color:#f92672">=</span> preferences.getUChar(<span style="color:#e6db74">&#34;chip_index&#34;</span>);
preferences.end();
</code></pre></div><p>But now it looks like this:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">nvs_handle_t out_handle;
esp_err_t err <span style="color:#f92672">=</span> nvs_open(<span style="color:#e6db74">&#34;lora-at&#34;</span>, NVS_READONLY, <span style="color:#f92672">&amp;</span>out_handle);
<span style="color:#66d9ef">if</span>( err <span style="color:#f92672">==</span> ESP_ERR_NVS_NOT_FOUND ) {
  <span style="color:#66d9ef">return</span> EPS_OK;
} 
<span style="color:#66d9ef">if</span>( err <span style="color:#f92672">!=</span> ESP_OK ) {
  <span style="color:#66d9ef">return</span> err;
} 
err <span style="color:#f92672">=</span> nvs_get_u64(out_handle, <span style="color:#e6db74">&#34;period&#34;</span>, <span style="color:#f92672">&amp;</span>result<span style="color:#f92672">-&gt;</span>deep_sleep_period_micros);
<span style="color:#66d9ef">if</span>( err <span style="color:#f92672">!=</span> ESP_OK <span style="color:#f92672">&amp;&amp;</span> err <span style="color:#f92672">!=</span> ESP_ERR_NVS_NOT_FOUND ) {
  <span style="color:#66d9ef">return</span> err;
} 
nvs_close(out_handle);
</code></pre></div><p>Code looks more complex, but only at the first glance. It just has error handling and explicit calls to nvs functions. In the C++ example, it is not clear what <code>Preferences</code> is. Why did they renamed <code>nvs</code>? Why couldn&rsquo;t the class names be made closer to the C API? Why did they somehow decide to rename fixed-length types like uint32_t to UInt?</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-C++" data-lang="C++"><span style="color:#66d9ef">uint32_t</span> <span style="color:#a6e22e">getUInt</span>(<span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span><span style="color:#f92672">*</span> key, <span style="color:#66d9ef">uint32_t</span> defaultValue <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>);
</code></pre></div><p>While the original API was much cleaner:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-C" data-lang="C">esp_err_t <span style="color:#a6e22e">nvs_get_u32</span>(nvs_handle_t handle, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span><span style="color:#f92672">*</span> key, uint32_t<span style="color:#f92672">*</span> out_value);
</code></pre></div><p>So many questions, and so few answers.</p>
<p>Despite the fact that the C API is more concise, I had to tinker with some components. Mainly due to the fact that I did not understand how this or that technology works, and the C++ API hid it from me.</p>
<h3 id="bluetooth">Bluetooth</h3>
<p>Probably the most difficult component I had to write. Initially, I opened the ESP32 Bluetooth tutorial and started implementing the necessary functions. However, at some point I came across a comment in the <a href="https://docs.espressif.com/projects/esp-idf/en/latest/esp32/api-guides/bluetooth.html">documentation</a>: &ldquo;If you only need interaction via the BLE protocol, then it is better to take NimBLE. It is more lightweight and requires less code compared to Bluedroid&rdquo;. Well. I had to figure out what NimBLE is and how it differs from Bluedroid.</p>
<p>It turns out that Bluedroid is a full-fledged implementation of both &ldquo;classic&rdquo; Bluetooth and Bluetooth Low Energy (BLE). And, since it supports both modes, its API is more complex. NimBLE only implements BLE and is therefore more lightweight. ESP-IDF supports both implementations and you can select the one you need at the configuration stage. This is done using sdkconfig:</p>
<pre><code>CONFIG_BT_ENABLED=y
CONFIG_BT_NIMBLE_ENABLED=y
CONFIG_BT_CONTROLLER_ENABLED=y
</code></pre><p>The API itself didn&rsquo;t seem easier to me. Both are built on callbacks, where a handler function is passed for each operation, which is then asynchronously called in a separate FreeRTOS task. Ironically, for lora-at, asynchrony is not particularly necessary, since all commands must be guaranteed to complete before the device goes into sleep mode. Typical code looks like this:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">ble_client_disc_svc_fn</span>(<span style="color:#75715e">/* some arguments */</span>) {
  <span style="color:#66d9ef">if</span>( error<span style="color:#f92672">-&gt;</span>status <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span> ) {
      client<span style="color:#f92672">-&gt;</span>semaphore_result <span style="color:#f92672">=</span> ESP_OK;
  } <span style="color:#66d9ef">else</span> {
  	 <span style="color:#75715e">// handle error properly
</span><span style="color:#75715e"></span>      client<span style="color:#f92672">-&gt;</span>semaphore_result <span style="color:#f92672">=</span> ESP_ERR_TIMEOUT;
  }
  xSemaphoreGive(client<span style="color:#f92672">-&gt;</span>semaphore);
  <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
}

esp_err_t <span style="color:#a6e22e">ble_client_find_service</span>(<span style="color:#75715e">/* some arguments */</span>) {
  client<span style="color:#f92672">-&gt;</span>semaphore_result <span style="color:#f92672">=</span> ESP_FAIL;
  esp_err_t code <span style="color:#f92672">=</span> ble_gattc_disc_svc_by_uuid(conn_handle, remote_svc_uuid, ble_client_disc_svc_fn, client);
  <span style="color:#66d9ef">if</span>( code <span style="color:#f92672">!=</span> ESP_OK ) {
  	<span style="color:#66d9ef">return</span> code;
  }
  WAIT_FOR_SEMAPHORE(<span style="color:#e6db74">&#34;...&#34;</span>);
  <span style="color:#66d9ef">return</span> client<span style="color:#f92672">-&gt;</span>semaphore_result;
}
</code></pre></div><h3 id="uart">UART</h3>
<p>The second most difficult component was reading commands from the UART. If previously it was possible to read one character at a time in a loop:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++">size_t AtHandler<span style="color:#f92672">::</span>read_line(Stream <span style="color:#f92672">*</span>in) {
  size_t result <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
  <span style="color:#66d9ef">while</span> (in<span style="color:#f92672">-&gt;</span>available() <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">0</span>) {
    <span style="color:#66d9ef">char</span> inByte <span style="color:#f92672">=</span> in<span style="color:#f92672">-&gt;</span>read();
    result<span style="color:#f92672">++</span>;
    <span style="color:#75715e">// if char is \n, then return result
</span><span style="color:#75715e"></span>  }
  <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
}
</code></pre></div><p>Working through interrupts requires a little more complex code. First, you need to initialize one of the four UART buses:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">uart_config_t uart_config <span style="color:#f92672">=</span> {
    .baud_rate <span style="color:#f92672">=</span> CONFIG_AT_UART_BAUD_RATE,
    .data_bits <span style="color:#f92672">=</span> UART_DATA_8_BITS,
    .parity <span style="color:#f92672">=</span> UART_PARITY_DISABLE,
    .stop_bits <span style="color:#f92672">=</span> UART_STOP_BITS_1,
    .flow_ctrl <span style="color:#f92672">=</span> UART_HW_FLOWCTRL_DISABLE,
    .source_clk <span style="color:#f92672">=</span> UART_SCLK_DEFAULT,
};
uart_driver_install(result<span style="color:#f92672">-&gt;</span>uart_port_num, CONFIG_AT_UART_BUFFER_LENGTH <span style="color:#f92672">*</span> <span style="color:#ae81ff">2</span>, CONFIG_AT_UART_BUFFER_LENGTH <span style="color:#f92672">*</span> <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">20</span>, <span style="color:#f92672">&amp;</span>result<span style="color:#f92672">-&gt;</span>uart_queue, <span style="color:#ae81ff">0</span>);
uart_param_config(result<span style="color:#f92672">-&gt;</span>uart_port_num, <span style="color:#f92672">&amp;</span>uart_config);
uart_set_pin(result<span style="color:#f92672">-&gt;</span>uart_port_num, CONFIG_AT_UART_TX_PIN, CONFIG_AT_UART_RX_PIN, UART_PIN_NO_CHANGE, UART_PIN_NO_CHANGE);
uart_enable_pattern_det_baud_intr(result<span style="color:#f92672">-&gt;</span>uart_port_num, <span style="color:#e6db74">&#39;\n&#39;</span>, <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">9</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>);
uart_pattern_queue_reset(result<span style="color:#f92672">-&gt;</span>uart_port_num, <span style="color:#ae81ff">20</span>);
</code></pre></div><p>Secondly, you need to initialize the FreeRTOS task and start reading data from <code>uart_queue</code>:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">uart_at_handler_process</span>(uart_at_handler_t <span style="color:#f92672">*</span>handler) {
  <span style="color:#66d9ef">while</span> (<span style="color:#ae81ff">1</span>) {
    <span style="color:#66d9ef">if</span> (xQueueReceive(handler<span style="color:#f92672">-&gt;</span>uart_queue, (<span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>) <span style="color:#f92672">&amp;</span>event, (TickType_t) portMAX_DELAY)) {
      <span style="color:#66d9ef">switch</span> (event.type) {
        <span style="color:#66d9ef">case</span> UART_DATA:
        	<span style="color:#75715e">// handle using uart_read_bytes
</span><span style="color:#75715e"></span>        <span style="color:#66d9ef">case</span> UART_PATTERN_DET:
         <span style="color:#75715e">// handle using uart_read_bytes
</span><span style="color:#75715e"></span>        <span style="color:#66d9ef">case</span> UART_FIFO_OVF:
         <span style="color:#75715e">// handle
</span><span style="color:#75715e"></span>        <span style="color:#66d9ef">case</span> UART_BUFFER_FULL:
         <span style="color:#75715e">// handle
</span><span style="color:#75715e"></span>	}
	<span style="color:#75715e">// determine if data contains new line
</span><span style="color:#75715e"></span>	<span style="color:#66d9ef">if</span> (found) {
	  <span style="color:#75715e">// call at handler
</span><span style="color:#75715e"></span>	}
  }
}

xTaskCreate(uart_at_handler_process, <span style="color:#e6db74">&#34;uart_rx_task&#34;</span>, <span style="color:#ae81ff">1024</span> <span style="color:#f92672">*</span> <span style="color:#ae81ff">4</span>, handler, configMAX_PRIORITIES, NULL);
</code></pre></div><p>Manual control made me think about how UART works at a low level, learn that there are as many as 4 buses and write more efficient code. As a side bonus, I was able to reconfigure the UART to different GPIOs, and power the device itself from the <a href="https://en.wikipedia.org/wiki/JST_connector">JST connector</a>. This made it possible to connect the <a href="https://www.nordicsemi.com/Products/Development-hardware/Power-Profiler-Kit-2">Power Profiler Kit II</a> and measure energy consumption. The whole process took about 10 minutes. Of these, I spent 5 minutes looking for a USB-to-UART cable and 3 minutes choosing which pins were best to use.</p>
<h2 id="results">Results</h2>
<p>The second version works just great! Comparing the performance of C and C++ code is probably pointless, most likely because it is not so important in the world of microcontrollers. But the energy consumption will be very interesting to see. But more on that in the next article. For now, just a comparison of firmware sizes:</p>
<pre><code>$ ls -lh ./build/lora-at.bin 
-rw-r--r-- 1 pi pi 665K Nov  5 22:09 ./build/lora-at.bin
</code></pre><p>And C++ version:</p>
<pre><code>$ ls -lh .pio/build/ttgo-lora32-v2/firmware.bin
-rw-r--r-- 1 pi pi 1.1M Nov  9 20:39 .pio/build/ttgo-lora32-v2/firmware.bin
</code></pre><p>The C version is almost 2 times smaller!</p>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>BLE server using Java</title>
      <link>https://dernasherbrezon.com/en/posts/ble-server-java/</link>
      <pubDate>Tue, 17 Jan 2023 08:22:17 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/en/posts/ble-server-java/</guid>
      <description>In one of my previous posts, I began optimizing the power consumption of ESP32 and LoRa. The idea was to put the microcontroller to sleep and wake it up only when data received. But how to know when to wake up? It all depends on the specific application. If you need to transmit data at regular intervals, you can hardcode it in the firmware. But what if data needs to be received at unpredictable intervals?</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>BLE server using Java</h1></header>
      		<div class='container entry-content'>
  <p>In one of my <a href="https://dernasherbrezon.com/en/posts/lora-deep-sleep/">previous posts</a>, I began optimizing the power consumption of ESP32 and LoRa. The idea was to put the microcontroller to sleep and wake it up only when data received. But how to know when to wake up? It all depends on the specific application. If you need to transmit data at regular intervals, you can hardcode it in the firmware. But what if data needs to be received at unpredictable intervals? In my project <a href="https://github.com/dernasherbrezon/r2cloud">r2cloud</a>, that&rsquo;s precisely the case.</p>
<h2 id="workflow">Workflow</h2>
<p>r2cloud creates a schedule for satellite passes based on various parameters. As soon as a satellite is in the field of view, data reception begins. Once the satellite goes below the horizon, the signal is processed and sent to the server.</p>
<p>ESP32 needs to receive the start time of the next observation from the server and then go to sleep. Upon waking up, it needs to fetch the parameters again and start receiving the signal. The workflow can be described with a sequence diagram:</p>
<div>
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" viewBox="-0.5 -0.5 422 762"><defs/><g><rect x="140" y="0" width="100" height="40" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="all"/><path d="M 190 40 L 190 760" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="all"/><g fill="rgb(0, 0, 0)" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="189.5" y="24.5">ESP32</text></g><rect x="185" y="70" width="10" height="120" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="all"/><path d="M 195 140 L 250 140 L 250 170 L 201.37 170" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 196.12 170 L 203.12 166.5 L 201.37 170 L 203.12 173.5 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><path d="M 195 320 L 250 320 L 250 350 L 201.37 350" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 196.12 350 L 203.12 346.5 L 201.37 350 L 203.12 353.5 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><rect x="185" y="390" width="10" height="160" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="all"/><path d="M 185 440 L 63.12 440.16" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 56.12 440.17 L 63.11 436.66 L 63.12 443.66 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><rect x="185" y="600" width="10" height="120" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="all"/><path d="M 185 610 L 63.12 610.16" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 56.12 610.17 L 63.11 606.66 L 63.12 613.66 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><g fill="rgb(0, 0, 0)" font-family="Helvetica" text-anchor="middle" font-size="11px"><rect fill="rgb(255, 255, 255)" stroke="none" x="74" y="595" width="94" height="14" stroke-width="0"/><text x="119.5" y="604.58">Stop RX and sleep</text></g><rect x="60" y="280" width="120" height="30" fill="none" stroke="none" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 295px; margin-left: 61px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">Wake up <span style="font-size: 11px; background-color: rgb(255, 255, 255);">and start RX</span></div></div></div></foreignObject><text x="120" y="299" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">Wake up and start RX</text></switch></g><rect x="320" y="0" width="100" height="40" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="all"/><path d="M 370 40 L 370 760" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="all"/><g fill="rgb(0, 0, 0)" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="369.5" y="24.5">r2cloud</text></g><path d="M 190 260 L 356.88 260" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 363.88 260 L 356.88 263.5 L 356.88 256.5 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><rect x="365" y="70" width="10" height="690" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="all"/><path d="M 195 90 L 340 90 Q 350 90 352.89 90 L 355.77 90" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 362.77 90.01 L 355.77 93.5 L 355.77 86.5 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><path d="M 365 120.04 L 203.12 120.04" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 196.12 120.04 L 203.12 116.54 L 203.12 123.54 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><rect x="0" y="0" width="100" height="40" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="all"/><path d="M 50 40 L 50 760" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="all"/><g fill="rgb(0, 0, 0)" font-family="Helvetica" text-anchor="middle" font-size="12px"><text x="49.5" y="24.5">sx127x</text></g><rect x="45" y="290" width="10" height="340" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="all"/><rect x="185" y="250" width="10" height="110" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="all"/><rect x="60" y="370" width="120" height="30" fill="none" stroke="none" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 385px; margin-left: 61px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">New packet interrupt</div></div></div></foreignObject><text x="120" y="389" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">New packet interrupt</text></switch></g><path d="M 55 400 L 176.88 400" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 183.88 400 L 176.88 403.5 L 176.88 396.5 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><path d="M 55 480 L 176.88 480" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 183.88 480 L 176.88 483.5 L 176.88 476.5 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><rect x="60" y="450" width="120" height="30" fill="none" stroke="none" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 465px; margin-left: 61px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">Packet data</div></div></div></foreignObject><text x="120" y="469" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">Packet data</text></switch></g><path d="M 195.28 490 L 290 490 Q 300 490 310 490 L 356.88 490" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 363.88 490 L 356.88 493.5 L 356.88 486.5 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><rect x="220" y="460" width="120" height="30" fill="none" stroke="none" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 475px; margin-left: 221px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">Packet data</div></div></div></foreignObject><text x="280" y="479" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">Packet data</text></switch></g><path d="M 195 510 L 250 510 L 250 540 L 201.37 540" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 196.12 540 L 203.12 536.5 L 201.37 540 L 203.12 543.5 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><path d="M 195 630 L 356.88 630" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 363.88 630 L 356.88 633.5 L 356.88 626.5 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><rect x="215" y="600" width="130" height="30" fill="none" stroke="none" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 615px; margin-left: 280px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: nowrap;">Get next observation</div></div></div></foreignObject><text x="280" y="619" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">Get next observation</text></switch></g><path d="M 195 680 L 250 680 L 250 710 L 201.37 710" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 196.12 710 L 203.12 706.5 L 201.37 710 L 203.12 713.5 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><path d="M 360 660 L 203.12 660" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 196.12 660 L 203.12 656.5 L 203.12 663.5 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><g fill="rgb(0, 0, 0)" font-family="Helvetica" text-anchor="middle" font-size="11px"><rect fill="rgb(255, 255, 255)" stroke="none" x="253" y="645" width="50" height="14" stroke-width="0"/><text x="277" y="654.5">in 2 hours</text></g><rect x="220" y="90" width="120" height="30" fill="none" stroke="none" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 105px; margin-left: 221px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">In 10 minutes</div></div></div></foreignObject><text x="280" y="109" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">In 10 minutes</text></switch></g><rect x="220" y="60" width="120" height="30" fill="none" stroke="none" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 75px; margin-left: 221px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">Get next observation</div></div></div></foreignObject><text x="280" y="79" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">Get next observation</text></switch></g><rect x="260" y="140" width="70" height="30" fill="none" stroke="none" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 68px; height: 1px; padding-top: 155px; margin-left: 261px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">Sleep for<br style="border-color: var(--border-color);" /><span style="">10 minutes</span></div></div></div></foreignObject><text x="295" y="159" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">Sleep for...</text></switch></g><rect x="220" y="230" width="120" height="30" fill="none" stroke="none" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 245px; margin-left: 221px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">Get next observation</div></div></div></foreignObject><text x="280" y="249" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">Get next observation</text></switch></g><path d="M 365 289.42 L 203.12 289.42" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 196.12 289.42 L 203.12 285.92 L 203.12 292.92 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><rect x="220" y="260" width="120" height="30" fill="none" stroke="none" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 275px; margin-left: 221px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">Now</div></div></div></foreignObject><text x="280" y="279" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">Now</text></switch></g><rect x="250" y="310" width="110" height="50" fill="none" stroke="none" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 108px; height: 1px; padding-top: 335px; margin-left: 251px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">Sleep until <br style="border-color: var(--border-color);" /><span style="">end of observation </span><br style="border-color: var(--border-color);" /><span style="">or interrupt</span></div></div></div></foreignObject><text x="305" y="339" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">Sleep until...</text></switch></g><path d="M 183.93 310.06 L 150 310 L 62.34 309.74" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 57.09 309.72 L 64.1 306.24 L 62.34 309.74 L 64.08 313.24 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><rect x="60" y="410" width="120" height="30" fill="none" stroke="none" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 425px; margin-left: 61px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">Read packet</div></div></div></foreignObject><text x="120" y="429" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">Read packet</text></switch></g><rect x="250" y="500" width="110" height="50" fill="none" stroke="none" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 108px; height: 1px; padding-top: 525px; margin-left: 251px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">Sleep until <br style="border-color: var(--border-color);" /><span style="">end of observation </span><br style="border-color: var(--border-color);" /><span style="">or interrupt</span></div></div></div></foreignObject><text x="305" y="529" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">Sleep until...</text></switch></g><rect x="250" y="680" width="70" height="30" fill="none" stroke="none" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 68px; height: 1px; padding-top: 695px; margin-left: 251px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">Sleep for <br style="border-color: var(--border-color);" /><span style="">2 hours</span></div></div></div></foreignObject><text x="285" y="699" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">Sleep for...</text></switch></g></g><switch><g requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"/><a transform="translate(0,-5)" xlink:href="https://www.diagrams.net/doc/faq/svg-export-text-problems" target="_blank"><text text-anchor="middle" font-size="10px" x="50%" y="100%">Text is not SVG - cannot display</text></a></switch></svg>
</div>
<p>In this diagram, communication between ESP32 and r2cloud is minimized to save energy. Additionally, the microcontroller acts as an active component that initiates all interactions, solving the problem of polling data, timeouts, and more.</p>
<p>Now, the next step is to determine how ESP32 should receive data from the server. There are several options:</p>
<ul>
<li>Wired connection through a serial interface. However, this defeats the purpose of deep sleep and energy savings, as a wired connection can also provide power.</li>
<li>LoRa. This seems enticing. ESP32 receives data from the satellite and retransmits it. A <a href="https://dernasherbrezon.com/en/posts/lora-raspberrypi/">LoRa module on RaspberryPI</a> receives the data and sends it to r2cloud. But this requires purchasing a separate LoRa module, soldering, and configuration, making the system more complex.</li>
<li>Bluetooth. Available on both ESP32 and RaspberryPI.</li>
<li>Wi-Fi. To send a small message, one needs to connect to an access point, encrypt the data, and send it. Not only does this consume a lot of energy, but it also requires a separate access point.</li>
</ul>
<p>I decided to explore Bluetooth and see what can be achieved.</p>
<h2 id="ble">BLE</h2>
<p>BLE (Bluetooth Low Energy) is a wireless technology with low power consumption. Its main idea is that two devices do not have to keep the connection constantly active, thereby saving energy. Instead, there are special &ldquo;profiles&rdquo; - GAP and GATT, which provide a software model for sending short messages between two devices. From a programmer&rsquo;s perspective, it looks as if the two devices are connected and active.</p>
<p>Every device that wants to provide access to its capabilities via BLE must create a tree-like structure of properties, methods, and services in memory. This structure is defined in the GATT (Generic Attribute Profile) specification.</p>
<div>
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" viewBox="-0.5 -0.5 617 291" style="background-color: rgb(255, 255, 255);"><defs/><g><rect x="45" y="255" width="560" height="30" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 558px; height: 1px; padding-top: 270px; margin-left: 46px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">Bluetooth radio</div></div></div></foreignObject><text x="325" y="274" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">Bluetooth radio</text></switch></g><rect x="45" y="215" width="560" height="30" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 558px; height: 1px; padding-top: 230px; margin-left: 46px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">Baseband</div></div></div></foreignObject><text x="325" y="234" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">Baseband</text></switch></g><rect x="45" y="175" width="560" height="30" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 558px; height: 1px; padding-top: 190px; margin-left: 46px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">Low Energy Link Layer (LE LL)</div></div></div></foreignObject><text x="325" y="194" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">Low Energy Link Layer (LE LL)</text></switch></g><rect x="45" y="135" width="560" height="30" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 558px; height: 1px; padding-top: 150px; margin-left: 46px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">Host Controller Interface (HCI)</div></div></div></foreignObject><text x="325" y="154" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">Host Controller Interface (HCI)</text></switch></g><path d="M 25 125 L 615 125" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="stroke"/><rect x="45" y="85" width="560" height="30" fill="#dae8fc" stroke="#6c8ebf" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 558px; height: 1px; padding-top: 100px; margin-left: 46px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">Logical Link Control and Adaptation Protocol (L2CAP)</div></div></div></foreignObject><text x="325" y="104" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">Logical Link Control and Adaptation Protocol (L2CAP)</text></switch></g><rect x="45" y="45" width="270" height="30" fill="#dae8fc" stroke="#6c8ebf" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 268px; height: 1px; padding-top: 60px; margin-left: 46px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">Low Energy Attribute Protocol (ATT)</div></div></div></foreignObject><text x="180" y="64" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">Low Energy Attribute Protocol (ATT)</text></switch></g><rect x="325" y="45" width="280" height="30" fill="#dae8fc" stroke="#6c8ebf" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 278px; height: 1px; padding-top: 60px; margin-left: 326px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">Low Energy Security Manager Protocol (SMP)</div></div></div></foreignObject><text x="465" y="64" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">Low Energy Security Manager Protocol (SMP)</text></switch></g><rect x="45" y="5" width="270" height="30" fill="#dae8fc" stroke="#6c8ebf" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 268px; height: 1px; padding-top: 20px; margin-left: 46px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">Generic Attribute Profile (GATT)</div></div></div></foreignObject><text x="180" y="24" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">Generic Attribute Profile (GATT)</text></switch></g><rect x="325" y="5" width="280" height="30" fill="#dae8fc" stroke="#6c8ebf" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 278px; height: 1px; padding-top: 20px; margin-left: 326px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">Generic Access Profile (GAP)</div></div></div></foreignObject><text x="465" y="24" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">Generic Access Profile (GAP)</text></switch></g><rect x="-65" y="195" width="160" height="30" fill="none" stroke="none" transform="rotate(-90,15,210)" pointer-events="all"/><g transform="translate(-0.5 -0.5)rotate(-90 15 210)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 158px; height: 1px; padding-top: 210px; margin-left: -64px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;"><font style="font-size: 18px;">Controller</font></div></div></div></foreignObject><text x="15" y="214" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">Controller</text></switch></g><rect x="-45" y="45" width="120" height="30" fill="none" stroke="none" transform="rotate(-90,15,60)" pointer-events="all"/><g transform="translate(-0.5 -0.5)rotate(-90 15 60)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 60px; margin-left: -44px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;"><font style="font-size: 18px;">Host</font></div></div></div></foreignObject><text x="15" y="64" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">Host</text></switch></g><path d="M 185 168.63 L 185 121.37" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 185 173.88 L 181.5 166.88 L 185 168.63 L 188.5 166.88 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><path d="M 185 116.12 L 188.5 123.12 L 185 121.37 L 181.5 123.12 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/></g><switch><g requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"/><a transform="translate(0,-5)" xlink:href="https://www.diagrams.net/doc/faq/svg-export-text-problems" target="_blank"><text text-anchor="middle" font-size="10px" x="50%" y="100%">Text is not SVG - cannot display</text></a></switch></svg>
</div>
<p>As an example, I connected to my watch using the program <a href="https://www.nordicsemi.com/Products/Development-tools/nrf-connect-for-desktop">nRF Connect</a>:</p>
<p><img src="/img/ble-server-java/1.png" alt=""></p>
<p>On the right, you can see part of the public information that the device publishes:</p>
<ul>
<li>Service &ldquo;Device information&rdquo;
<ul>
<li>Characteristic &ldquo;Model Number String&rdquo;</li>
<li>Characteristic &ldquo;Manufacturer Name String&rdquo;</li>
</ul>
</li>
</ul>
<p>I need to create very similar structure on RaspberryPI and expose it for ESP32. However here come some difficulties due to different operating systems and APIs.</p>
<h2 id="bluez">Bluez</h2>
<p>To work with Bluetooth in Linux, a complete stack called <a href="https://github.com/bluez/bluez">bluez</a> is used. In this context, the stack implies a set of drivers for Linux and implementations of various Bluetooth profiles that can operate at different levels of the OSI model. This also includes various programs for managing Bluetooth, such as hcitool or gatttool.</p>
<p>In my case, the most interesting bluez profiles are GAP and GATT. The first is a lightweight device discovery protocol, and the second is a way to organize objects and fields in a tree.</p>
<p>bluez allows you to control the device using D-Bus interfaces and objects.</p>
<h2 id="d-bus">D-Bus</h2>
<p>D-Bus is a system for interprocess communication in Linux. It serves as a kind of central bus through which applications can send signals, invoke methods, and retrieve properties from one another.</p>
<p><img src="/img/ble-server-java/4.png" alt=""></p>
<p>bluez creates a tree of objects and properties in D-Bus for each connected device. By working with these objects, you can receive or send data to the devices. It&rsquo;s a bit intricate, but this approach allows you to connect several different Bluetooth devices to one physical Bluetooth chip and work with each of them independently.</p>
<p>In the screenshot above, you can see that bluez created a D-Bus object <code>org.bluez.Device1</code> for the connected device <code>78:DD:08:A3:A7:52</code>. This device provides access to several services and their properties:</p>
<ul>
<li>service0001
<ul>
<li>characteristic0006</li>
</ul>
</li>
<li>service0010
<ul>
<li>characteristic0012</li>
</ul>
</li>
<li>service0100</li>
<li>service0200
<ul>
<li>characteristic0204</li>
<li>characteristic0212</li>
</ul>
</li>
<li>service0680</li>
</ul>
<p>In this example, the remote device provides access to its services. But what if you need to do the opposite: expose access to RaspberryPI? For this, you need to write an application that registers the necessary services in bluez.</p>
<h2 id="gatt-server">GATT Server</h2>
<p>In general, the scheme looks like this:</p>
<div>
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" viewBox="-0.5 -0.5 522 422"><defs/><g><path d="M 140 350 L 140 370 L 40 370 L 40 260" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><rect x="120" y="41" width="40" height="309" fill="#dae8fc" stroke="#6c8ebf" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 38px; height: 1px; padding-top: 196px; margin-left: 121px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">bluez</div></div></div></foreignObject><text x="140" y="199" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">bluez</text></switch></g><rect x="200" y="0" width="200" height="420" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="all"/><rect x="340" y="0" width="60" height="30" fill="none" stroke="none" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 58px; height: 1px; padding-top: 15px; margin-left: 341px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">D-Bus</div></div></div></foreignObject><text x="370" y="19" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">D-Bus</text></switch></g><path d="M 440 180 L 386.37 180" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 381.12 180 L 388.12 176.5 L 386.37 180 L 388.12 183.5 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><path d="M 480 200 L 480 300 L 386.37 300" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 381.12 300 L 388.12 296.5 L 386.37 300 L 388.12 303.5 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><path d="M 480 160 L 480 60 L 386.37 60" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 381.12 60 L 388.12 56.5 L 386.37 60 L 388.12 63.5 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><path d="M 480 200 L 480 370 L 386.37 370" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 381.12 370 L 388.12 366.5 L 386.37 370 L 388.12 373.5 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><rect x="440" y="160" width="80" height="40" fill="#d5e8d4" stroke="#82b366" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 78px; height: 1px; padding-top: 180px; margin-left: 441px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">Application</div></div></div></foreignObject><text x="480" y="184" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">Application</text></switch></g><path d="M 220 60 L 190 60 L 166.37 60.37" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 161.12 60.45 L 168.06 56.84 L 166.37 60.37 L 168.17 63.84 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><rect x="220" y="40" width="160" height="40" fill="#dae8fc" stroke="#6c8ebf" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 158px; height: 1px; padding-top: 60px; margin-left: 221px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">Service Manager</div></div></div></foreignObject><text x="300" y="64" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">Service Manager</text></switch></g><path d="M 220 300 L 190 300 L 165.53 300.2" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 160.28 300.24 L 167.25 296.69 L 165.53 300.2 L 167.31 303.68 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><rect x="220" y="280" width="160" height="40" fill="#dae8fc" stroke="#6c8ebf" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 158px; height: 1px; padding-top: 300px; margin-left: 221px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">Advertising Manager</div></div></div></foreignObject><text x="300" y="304" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">Advertising Manager</text></switch></g><rect x="220" y="90" width="160" height="180" fill="#d5e8d4" stroke="#82b366" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 158px; height: 1px; padding-top: 180px; margin-left: 221px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;"><div style="border-color: var(--border-color); text-align: left;">Service1:</div><div style="border-color: var(--border-color); text-align: left;"><ul style="border-color: var(--border-color);"><li style="border-color: var(--border-color);">Characteristic1</li><ul style="border-color: var(--border-color);"><li style="border-color: var(--border-color);">Description1</li></ul><li style="border-color: var(--border-color);">Characretistic2</li><ul style="border-color: var(--border-color);"><li style="border-color: var(--border-color);">Description1</li></ul></ul></div><div style="border-color: var(--border-color); text-align: left;">Service2:</div><div style="border-color: var(--border-color); text-align: left;"><ul style="border-color: var(--border-color);"><li style="border-color: var(--border-color);">Characteristic1</li></ul></div><div style="border-color: var(--border-color); text-align: left;">ServiceN:</div></div></div></div></foreignObject><text x="300" y="184" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">Service1:...</text></switch></g><path d="M 0 160 L 40 200 L 80 160 M 40 160 L 40 260" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><rect x="220" y="340" width="160" height="60" fill="#d5e8d4" stroke="#82b366" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 158px; height: 1px; padding-top: 370px; margin-left: 221px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;"><div style=""><div style="text-align: left;"><br /></div></div></div></div></div></foreignObject><text x="300" y="374" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">&#xa;</text></switch></g><rect x="220" y="340" width="160" height="60" fill="none" stroke="none" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe flex-start; justify-content: unsafe flex-start; width: 158px; height: 1px; padding-top: 347px; margin-left: 222px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;"><div style="border-color: var(--border-color); caret-color: rgb(0, 0, 0); color: rgb(0, 0, 0); font-family: Helvetica; font-size: 12px; font-style: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; text-indent: 0px; text-transform: none; word-spacing: 0px; -webkit-text-stroke-width: 0px; text-decoration: none; text-align: left;"> Advertisement:</div><div style="border-color: var(--border-color); caret-color: rgb(0, 0, 0); color: rgb(0, 0, 0); font-family: Helvetica; font-size: 12px; font-style: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; text-align: center; text-indent: 0px; text-transform: none; word-spacing: 0px; -webkit-text-stroke-width: 0px; text-decoration: none;"><ul style="border-color: var(--border-color);"><li style="border-color: var(--border-color); text-align: left;">Service1</li></ul></div></div></div></div></foreignObject><text x="222" y="359" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px">Advertisement:...</text></switch></g></g><switch><g requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"/><a transform="translate(0,-5)" xlink:href="https://www.diagrams.net/doc/faq/svg-export-text-problems" target="_blank"><text text-anchor="middle" font-size="10px" x="50%" y="100%">Text is not SVG - cannot display</text></a></switch></svg>
</div>
<p>The application must create a structure of services and their properties in D-Bus:</p>
<ul>
<li>Services must implement the interface <code>org.bluez.GattService1</code></li>
<li>Properties must implement the interface <code>org.bluez.GattCharacteristic1</code></li>
</ul>
<p>Despite the fact that the interface names look very similar to regular Java objects, they have nothing in common with Java. They are simply strings from the bluez specification.</p>
<p>Once the objects are created, you need to find the Service Manager object in D-Bus and register the application with it. The Service Manager is a D-Bus object that implements the interface <code>org.bluez.GattManager1</code>.</p>
<p>Next, somehow inform all devices in the vicinity about the services supported by RaspberryPI. To do this:</p>
<ul>
<li>Create a D-Bus object of type <code>org.bluez.LEAdvertisement1</code>, which includes a list of services available to external devices</li>
<li>Register this object in the Advertising Manager</li>
</ul>
<h2 id="integration-with-java">Integration with Java</h2>
<p>So, the task boils down to connecting to D-Bus and registering the necessary services. By default, you can only connect to D-Bus through <a href="https://en.wikipedia.org/wiki/Unix_domain_socket">unix domain socket (UDS)</a>: <code>/var/run/dbus/system_bus_socket</code>. In Java, UDS support appeared only in version 16. Working with them is very similar to regular sockets:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">ServerSocketChannel serverChannel <span style="color:#f92672">=</span> ServerSocketChannel
  <span style="color:#f92672">.</span><span style="color:#a6e22e">open</span><span style="color:#f92672">(</span>StandardProtocolFamily<span style="color:#f92672">.</span><span style="color:#a6e22e">UNIX</span><span style="color:#f92672">);</span>
serverChannel<span style="color:#f92672">.</span><span style="color:#a6e22e">bind</span><span style="color:#f92672">(</span>socketAddress<span style="color:#f92672">);</span>
SocketChannel channel <span style="color:#f92672">=</span> serverChannel<span style="color:#f92672">.</span><span style="color:#a6e22e">accept</span><span style="color:#f92672">();</span>
<span style="color:#66d9ef">while</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">true</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
    readSocketMessage<span style="color:#f92672">(</span>channel<span style="color:#f92672">)</span>
      <span style="color:#f92672">.</span><span style="color:#a6e22e">ifPresent</span><span style="color:#f92672">(</span>message <span style="color:#f92672">-&gt;</span> System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">printf</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;[Client message] %s&#34;</span><span style="color:#f92672">,</span> message<span style="color:#f92672">));</span>
    Thread<span style="color:#f92672">.</span><span style="color:#a6e22e">sleep</span><span style="color:#f92672">(</span>100<span style="color:#f92672">);</span>
<span style="color:#f92672">}</span>
</code></pre></div><p>But better use existing library like <a href="https://github.com/hypfvieh">hypfvieh</a>. It will provide a nice dbus abstraction and expose all required APIs:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-xml" data-lang="xml"><span style="color:#f92672">&lt;dependency&gt;</span>
	<span style="color:#f92672">&lt;groupId&gt;</span>com.github.hypfvieh<span style="color:#f92672">&lt;/groupId&gt;</span>
	<span style="color:#f92672">&lt;artifactId&gt;</span>bluez-dbus<span style="color:#f92672">&lt;/artifactId&gt;</span>
	<span style="color:#f92672">&lt;version&gt;</span>0.1.4<span style="color:#f92672">&lt;/version&gt;</span>
	<span style="color:#f92672">&lt;exclusions&gt;</span>
		<span style="color:#f92672">&lt;exclusion&gt;</span>
			<span style="color:#f92672">&lt;groupId&gt;</span>com.github.hypfvieh<span style="color:#f92672">&lt;/groupId&gt;</span>
			<span style="color:#f92672">&lt;artifactId&gt;</span>dbus-java<span style="color:#f92672">&lt;/artifactId&gt;</span>
		<span style="color:#f92672">&lt;/exclusion&gt;</span>
	<span style="color:#f92672">&lt;/exclusions&gt;</span>
<span style="color:#f92672">&lt;/dependency&gt;</span>
<span style="color:#f92672">&lt;dependency&gt;</span>
	<span style="color:#f92672">&lt;groupId&gt;</span>com.github.hypfvieh<span style="color:#f92672">&lt;/groupId&gt;</span>
	<span style="color:#f92672">&lt;artifactId&gt;</span>dbus-java-core<span style="color:#f92672">&lt;/artifactId&gt;</span>
	<span style="color:#f92672">&lt;version&gt;</span>4.2.1<span style="color:#f92672">&lt;/version&gt;</span>
<span style="color:#f92672">&lt;/dependency&gt;</span>
<span style="color:#f92672">&lt;dependency&gt;</span>
	<span style="color:#f92672">&lt;groupId&gt;</span>com.github.hypfvieh<span style="color:#f92672">&lt;/groupId&gt;</span>
	<span style="color:#f92672">&lt;artifactId&gt;</span>dbus-java-transport-native-unixsocket<span style="color:#f92672">&lt;/artifactId&gt;</span>
	<span style="color:#f92672">&lt;version&gt;</span>4.2.1<span style="color:#f92672">&lt;/version&gt;</span>
<span style="color:#f92672">&lt;/dependency&gt;</span>
</code></pre></div><p>The final code might look like this:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#75715e">// connect to dbus
</span><span style="color:#75715e"></span>dbusConn <span style="color:#f92672">=</span> DBusConnectionBuilder<span style="color:#f92672">.</span><span style="color:#a6e22e">forAddress</span><span style="color:#f92672">(</span>address<span style="color:#f92672">).</span><span style="color:#a6e22e">withShared</span><span style="color:#f92672">(</span><span style="color:#66d9ef">false</span><span style="color:#f92672">).</span><span style="color:#a6e22e">build</span><span style="color:#f92672">();</span>
<span style="color:#75715e">// find bluez
</span><span style="color:#75715e"></span>ObjectManager adapter <span style="color:#f92672">=</span> dbusConn<span style="color:#f92672">.</span><span style="color:#a6e22e">getRemoteObject</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;org.bluez&#34;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;/&#34;</span><span style="color:#f92672">,</span> ObjectManager<span style="color:#f92672">.</span><span style="color:#a6e22e">class</span><span style="color:#f92672">);</span>
<span style="color:#75715e">// find service manager from all registered services
</span><span style="color:#75715e"></span>DBusPath serviceManagerPath <span style="color:#f92672">=</span> getServiceManagerPath<span style="color:#f92672">(</span>adapter<span style="color:#f92672">);</span>
<span style="color:#75715e">// find service manager and advertising manager
</span><span style="color:#75715e"></span>serviceManager <span style="color:#f92672">=</span> dbusConn<span style="color:#f92672">.</span><span style="color:#a6e22e">getRemoteObject</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;org.bluez&#34;</span><span style="color:#f92672">,</span> serviceManagerPath<span style="color:#f92672">.</span><span style="color:#a6e22e">getPath</span><span style="color:#f92672">(),</span> GattManager1<span style="color:#f92672">.</span><span style="color:#a6e22e">class</span><span style="color:#f92672">);</span>
advertisingManager <span style="color:#f92672">=</span> dbusConn<span style="color:#f92672">.</span><span style="color:#a6e22e">getRemoteObject</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;org.bluez&#34;</span><span style="color:#f92672">,</span> serviceManagerPath<span style="color:#f92672">.</span><span style="color:#a6e22e">getPath</span><span style="color:#f92672">(),</span> LEAdvertisingManager1<span style="color:#f92672">.</span><span style="color:#a6e22e">class</span><span style="color:#f92672">);</span>
<span style="color:#75715e">// create hierarchy of characteristics and services
</span><span style="color:#75715e"></span>application <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> BleApplication<span style="color:#f92672">(</span>allServices<span style="color:#f92672">);</span>
<span style="color:#75715e">// export them into D-Bus
</span><span style="color:#75715e"></span>exportAll<span style="color:#f92672">(</span>dbusConn<span style="color:#f92672">,</span> application<span style="color:#f92672">);</span>
<span style="color:#75715e">// register application in bluez
</span><span style="color:#75715e"></span>serviceManager<span style="color:#f92672">.</span><span style="color:#a6e22e">RegisterApplication</span><span style="color:#f92672">(</span><span style="color:#66d9ef">new</span> DBusPath<span style="color:#f92672">(</span>application<span style="color:#f92672">.</span><span style="color:#a6e22e">getObjectPath</span><span style="color:#f92672">()),</span> <span style="color:#66d9ef">new</span> HashMap<span style="color:#f92672">&lt;&gt;());</span>
<span style="color:#75715e">// create advertisement object
</span><span style="color:#75715e"></span>advertisement <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> BleAdvertisement<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;/org/bluez/r2cloud/advertisement0&#34;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;r2cloud&#34;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;peripheral&#34;</span><span style="color:#f92672">,</span> LORA_SERVICE_UUID<span style="color:#f92672">);</span>
<span style="color:#75715e">// and export it to D-Bus
</span><span style="color:#75715e"></span>dbusConn<span style="color:#f92672">.</span><span style="color:#a6e22e">exportObject</span><span style="color:#f92672">(</span>advertisement<span style="color:#f92672">);</span>
<span style="color:#75715e">// register advertisement in bluez
</span><span style="color:#75715e"></span>advertisingManager<span style="color:#f92672">.</span><span style="color:#a6e22e">RegisterAdvertisement</span><span style="color:#f92672">(</span><span style="color:#66d9ef">new</span> DBusPath<span style="color:#f92672">(</span>advertisement<span style="color:#f92672">.</span><span style="color:#a6e22e">getObjectPath</span><span style="color:#f92672">()),</span> <span style="color:#66d9ef">new</span> HashMap<span style="color:#f92672">&lt;&gt;());</span>
</code></pre></div><h2 id="integration-with-r2cloud">Integration with r2cloud</h2>
<p>The final step will be the direct implementation of the protocol between ESP32 and r2cloud. I decided to create one service with two properties:</p>
<ul>
<li>Schedule. When read, it returns the parameters of the next observation. Writing to this property signifies the receipt of a packet. It might seem a bit strange, but it greatly simplifies the code on the ESP32 side.</li>
<li>Status. Used to obtain the battery level and Bluetooth signal strength.</li>
</ul>
<p>These parameters can be added to monitoring or simply displayed in the UI:</p>
<p><img src="/img/ble-server-java/6.png" alt=""></p>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>sx127x for RaspberryPI</title>
      <link>https://dernasherbrezon.com/en/posts/lora-raspberrypi/</link>
      <pubDate>Sun, 15 Jan 2023 12:59:18 +0000</pubDate>
      
      <guid>https://dernasherbrezon.com/en/posts/lora-raspberrypi/</guid>
      <description>Continuing work on the new sx127x library, I decided to add Linux support, specifically for Raspberry Pi. Besides the practical need, I wanted to understand how programming for microcontrollers differs from regular operating systems.
I designed the library quite well from the beginning, so migrating to Linux required only a few changes:
 Abandoning esp_err.h and using return codes of type int Separating SPI operations into a separate header and redefining for different platforms.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>sx127x for RaspberryPI</h1></header>
      		<div class='container entry-content'>
  <p>Continuing work on the new <a href="https://github.com/dernasherbrezon/sx127x">sx127x library</a>, I decided to add Linux support, specifically for Raspberry Pi. Besides the practical need, I wanted to understand how programming for microcontrollers differs from regular operating systems.</p>
<p>I designed the library quite well from the beginning, so migrating to Linux required only a few changes:</p>
<ul>
<li>Abandoning esp_err.h and using return codes of type <code>int</code></li>
<li>Separating SPI operations into a separate header and redefining for different platforms.</li>
</ul>
<p>While the first point is relatively simple, the second required some effort.</p>
<h2 id="spi-in-linux">SPI in Linux</h2>
<p>Modern Linux kernel versions (4.x+) have SPI support. On the operating system side, there is a driver that creates devices like <code>/dev/spidevX.X</code>  for user-mode interaction. Each master device can have one or more SPI buses. Each bus consists of several wires: MOSI, MISO, SCLK, SS. Multiple slave devices can be connected to each bus.</p>
<div>
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" viewBox="-0.5 -0.5 311 281"><defs/><g><rect x="0" y="0" width="100" height="110" fill="#ffe6cc" stroke="#d79b00" pointer-events="all"/><rect x="0" y="45" width="60" height="30" fill="none" stroke="none" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 58px; height: 1px; padding-top: 60px; margin-left: 1px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">SPI<br />master</div></div></div></foreignObject><text x="30" y="64" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">SPI...</text></switch></g><rect x="220" y="0" width="90" height="80" fill="#d5e8d4" stroke="#82b366" pointer-events="all"/><path d="M 99.8 9.35 L 213.63 9.97" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 218.88 9.99 L 211.86 13.46 L 213.63 9.97 L 211.9 6.46 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><path d="M 100 30.2 L 213.95 30.01" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 219.2 30 L 212.21 33.51 L 213.95 30.01 L 212.2 26.51 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><path d="M 99.68 70.2 L 213.63 70.01" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 218.88 70 L 211.89 73.51 L 213.63 70.01 L 211.88 66.51 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><path d="M 219.64 50.56 L 106.37 50.03" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 101.12 50.01 L 108.13 46.54 L 106.37 50.03 L 108.1 53.54 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><rect x="60" y="5" width="40" height="10" fill="none" stroke="none" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 38px; height: 1px; padding-top: 10px; margin-left: 61px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">SCLK</div></div></div></foreignObject><text x="80" y="14" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">SCLK</text></switch></g><rect x="60" y="25" width="40" height="10" fill="none" stroke="none" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 38px; height: 1px; padding-top: 30px; margin-left: 61px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">MOSI</div></div></div></foreignObject><text x="80" y="34" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">MOSI</text></switch></g><rect x="60" y="45" width="40" height="10" fill="none" stroke="none" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 38px; height: 1px; padding-top: 50px; margin-left: 61px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">MISO</div></div></div></foreignObject><text x="80" y="54" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">MISO</text></switch></g><rect x="60" y="65" width="40" height="10" fill="none" stroke="none" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 38px; height: 1px; padding-top: 70px; margin-left: 61px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">SS1</div></div></div></foreignObject><text x="80" y="74" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">SS1</text></switch></g><rect x="220" y="5" width="40" height="10" fill="none" stroke="none" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 38px; height: 1px; padding-top: 10px; margin-left: 221px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">SCLK</div></div></div></foreignObject><text x="240" y="14" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">SCLK</text></switch></g><rect x="220" y="25" width="40" height="10" fill="none" stroke="none" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 38px; height: 1px; padding-top: 30px; margin-left: 221px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">MOSI</div></div></div></foreignObject><text x="240" y="34" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">MOSI</text></switch></g><rect x="220" y="45" width="40" height="10" fill="none" stroke="none" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 38px; height: 1px; padding-top: 50px; margin-left: 221px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">MISO</div></div></div></foreignObject><text x="240" y="54" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">MISO</text></switch></g><rect x="220" y="65" width="40" height="10" fill="none" stroke="none" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 38px; height: 1px; padding-top: 70px; margin-left: 221px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">SS</div></div></div></foreignObject><text x="240" y="74" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">SS</text></switch></g><rect x="260" y="25" width="50" height="30" fill="none" stroke="none" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 48px; height: 1px; padding-top: 40px; margin-left: 261px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">SPI<br />Slave</div></div></div></foreignObject><text x="285" y="44" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">SPI...</text></switch></g><rect x="220" y="100" width="90" height="80" fill="#dae8fc" stroke="#6c8ebf" pointer-events="all"/><rect x="220" y="105" width="40" height="10" fill="none" stroke="none" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 38px; height: 1px; padding-top: 110px; margin-left: 221px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">SCLK</div></div></div></foreignObject><text x="240" y="114" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">SCLK</text></switch></g><rect x="220" y="125" width="40" height="10" fill="none" stroke="none" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 38px; height: 1px; padding-top: 130px; margin-left: 221px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">MOSI</div></div></div></foreignObject><text x="240" y="134" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">MOSI</text></switch></g><rect x="220" y="145" width="40" height="10" fill="none" stroke="none" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 38px; height: 1px; padding-top: 150px; margin-left: 221px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">MISO</div></div></div></foreignObject><text x="240" y="154" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">MISO</text></switch></g><rect x="220" y="165" width="40" height="10" fill="none" stroke="none" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 38px; height: 1px; padding-top: 170px; margin-left: 221px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">SS</div></div></div></foreignObject><text x="240" y="174" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">SS</text></switch></g><rect x="260" y="125" width="50" height="30" fill="none" stroke="none" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 48px; height: 1px; padding-top: 140px; margin-left: 261px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">SPI<br />Slave</div></div></div></foreignObject><text x="285" y="144" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">SPI...</text></switch></g><rect x="220" y="200" width="90" height="80" fill="#e1d5e7" stroke="#9673a6" pointer-events="all"/><rect x="220" y="205" width="40" height="10" fill="none" stroke="none" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 38px; height: 1px; padding-top: 210px; margin-left: 221px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">SCLK</div></div></div></foreignObject><text x="240" y="214" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">SCLK</text></switch></g><rect x="220" y="225" width="40" height="10" fill="none" stroke="none" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 38px; height: 1px; padding-top: 230px; margin-left: 221px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">MOSI</div></div></div></foreignObject><text x="240" y="234" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">MOSI</text></switch></g><rect x="220" y="245" width="40" height="10" fill="none" stroke="none" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 38px; height: 1px; padding-top: 250px; margin-left: 221px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">MISO</div></div></div></foreignObject><text x="240" y="254" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">MISO</text></switch></g><rect x="220" y="265" width="40" height="10" fill="none" stroke="none" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 38px; height: 1px; padding-top: 270px; margin-left: 221px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">SS</div></div></div></foreignObject><text x="240" y="274" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">SS</text></switch></g><rect x="260" y="225" width="50" height="30" fill="none" stroke="none" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 48px; height: 1px; padding-top: 240px; margin-left: 261px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">SPI<br />Slave</div></div></div></foreignObject><text x="285" y="244" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">SPI...</text></switch></g><path d="M 200 10 L 200 27.03 C 203.9 27.03 203.9 33.03 200 33.03 L 200 33.03 L 200 47.47 C 203.9 47.47 203.9 53.47 200 53.47 L 200 53.47 L 200 67.03 C 203.9 67.03 203.9 73.03 200 73.03 L 200 73.03 L 200 110 L 213.63 110" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 218.88 110 L 211.88 113.5 L 213.63 110 L 211.88 106.5 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><path d="M 180 30 L 180 47.37 C 183.9 47.37 183.9 53.37 180 53.37 L 180 53.37 L 180 67.07 C 183.9 67.07 183.9 73.07 180 73.07 L 180 73.07 L 180 130 L 213.63 130" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 218.88 130 L 211.88 133.5 L 213.63 130 L 211.88 126.5 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><path d="M 100 86 L 140 86 L 140 170 L 213.63 170" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 218.88 170 L 211.88 173.5 L 213.63 170 L 211.88 166.5 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><rect x="60" y="81" width="40" height="10" fill="none" stroke="none" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 38px; height: 1px; padding-top: 86px; margin-left: 61px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">SS2</div></div></div></foreignObject><text x="80" y="90" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">SS2</text></switch></g><path d="M 160 50 L 160 67.1 C 163.9 67.1 163.9 73.1 160 73.1 L 160 73.1 L 160 150 L 220 150" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 200 110 L 200 127 C 203.9 127 203.9 133 200 133 L 200 133 L 200 147 C 203.9 147 203.9 153 200 153 L 200 153 L 200 167 C 203.9 167 203.9 173 200 173 L 200 173 L 200 210 L 213.63 210" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 218.88 210 L 211.88 213.5 L 213.63 210 L 211.88 206.5 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><path d="M 180 130 L 180 147 C 183.9 147 183.9 153 180 153 L 180 153 L 180 167 C 183.9 167 183.9 173 180 173 L 180 173 L 180 230 L 213.63 230" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 218.88 230 L 211.88 233.5 L 213.63 230 L 211.88 226.5 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><path d="M 160 150 L 160 167 C 163.9 167 163.9 173 160 173 L 160 173 L 160 250 L 220 250" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 100 100 L 120 100 L 120 270 L 213.63 270" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 218.88 270 L 211.88 273.5 L 213.63 270 L 211.88 266.5 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><rect x="60" y="95" width="40" height="10" fill="none" stroke="none" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 38px; height: 1px; padding-top: 100px; margin-left: 61px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">SS3</div></div></div></foreignObject><text x="80" y="104" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">SS3</text></switch></g></g><switch><g requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"/><a transform="translate(0,-5)" xlink:href="https://www.diagrams.net/doc/faq/svg-export-text-problems" target="_blank"><text text-anchor="middle" font-size="10px" x="50%" y="100%">Text is not SVG - cannot display</text></a></switch></svg>
</div>
<p>Raspberry Pi, by default, has only one enabled SPI bus, SPI0, with the address <code>/dev/spidev0.X</code>. If needed, a second bus can be enabled in the  <code>/boot/config.txt</code> file:</p>
<pre><code>dtoverlay=spi1-3cs
</code></pre><p>Up to two slave devices can be connected to each Raspberry Pi bus.</p>
<p><img src="/img/lora-raspberrypi/1.png" alt=""></p>
<p>In this way, the SPI driver creates four files:</p>
<ul>
<li>/dev/spidev0.0</li>
<li>/dev/spidev0.1</li>
<li>/dev/spidev1.0</li>
<li>/dev/spidev1.1</li>
</ul>
<p>In ESP32, when initializing SPI, it was necessary to explicitly specify which pin corresponds to which signal. In Raspberry Pi, you just need to open the required device for operation:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">int</span> spi_device_fd <span style="color:#f92672">=</span> open(<span style="color:#e6db74">&#34;/dev/spidev0.0&#34;</span>, O_RDWR);
<span style="color:#66d9ef">if</span> (spi_device_fd <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0</span>) {
    perror(<span style="color:#e6db74">&#34;unable to open device&#34;</span>);
    <span style="color:#66d9ef">return</span> EXIT_FAILURE;
}
</code></pre></div><p>Then configure it using ioctl:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">int</span> mode <span style="color:#f92672">=</span> SPI_MODE_0; <span style="color:#75715e">// CPOL=0, CPHA=0
</span><span style="color:#75715e"></span>LINUX_ERROR_CHECK(ioctl(spi_device_fd, SPI_IOC_WR_MODE, <span style="color:#f92672">&amp;</span>mode));
</code></pre></div><p>The API for sending and receiving data looks very similar to ESP32:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">struct</span> spi_ioc_transfer tr[<span style="color:#ae81ff">2</span>];
memset(<span style="color:#f92672">&amp;</span>tr, <span style="color:#ae81ff">0</span>, <span style="color:#66d9ef">sizeof</span>(tr));
tr[<span style="color:#ae81ff">0</span>].tx_buf <span style="color:#f92672">=</span> (<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">long</span>)<span style="color:#f92672">&amp;</span>reg;
tr[<span style="color:#ae81ff">0</span>].len <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
tr[<span style="color:#ae81ff">1</span>].rx_buf <span style="color:#f92672">=</span> (<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">long</span>)result;
tr[<span style="color:#ae81ff">1</span>].len <span style="color:#f92672">=</span> data_length;
<span style="color:#66d9ef">int</span> code <span style="color:#f92672">=</span> ioctl(<span style="color:#f92672">*</span>(<span style="color:#66d9ef">int</span> <span style="color:#f92672">*</span>)spi_device, SPI_IOC_MESSAGE(<span style="color:#ae81ff">2</span>), <span style="color:#f92672">&amp;</span>tr);
</code></pre></div><p>This uses the <code>spi_ioc_transfer</code> structure and the familiar ioctl. The example above shows a half-duplex mode of operation: first, a command with the register type is sent, and then the response is read into the <code>result</code> variable with a length of <code>data_length</code>. For full-duplex mode, only one message would be needed, with both <code>tx_buf</code> and <code>rx_buf</code> filled. However, half-duplex mode is sufficient for controlling sx127x.</p>
<h2 id="gpio-in-linux">GPIO in Linux</h2>
<p>In principle, one SPI is enough to work with sx127x. To receive a message, you would periodically call the <code>sx127x_handle_interrupt</code> function. It checks if the message flag is set and calls the necessary handler. However, if messages arrive frequently or at unpredictable intervals, this method may miss a packet. Each new packet would overwrite the previous one in the chip&rsquo;s internal memory. To avoid this, interrupts should be used. sx127x has six pins that generate various types of interrupts. For sending and receiving, only one needs to be connected - DIO0.</p>
<p>But how to handle it in Linux?</p>
<p>To achieve this, the GPIO driver needs to be used. It is a standard driver that controls user access to the device&rsquo;s pins and allows multiple programs to work independently.</p>
<p>On Raspberry Pi, it creates the device <code>/dev/gpiochip0</code>. It needs to be opened to start working:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">int</span> fd <span style="color:#f92672">=</span> open(<span style="color:#e6db74">&#34;/dev/gpiochip0&#34;</span>, O_RDONLY);
<span style="color:#66d9ef">if</span> (fd <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0</span>) {
    perror(<span style="color:#e6db74">&#34;unable to open device&#34;</span>);
    <span style="color:#66d9ef">return</span> EXIT_FAILURE;
}
</code></pre></div><p>Next, reserve one of the pins or &ldquo;lines&rdquo; in Linux terminology:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">struct</span> gpioevent_request rq;
rq.lineoffset <span style="color:#f92672">=</span> <span style="color:#ae81ff">27</span>;
rq.eventflags <span style="color:#f92672">=</span> GPIOEVENT_EVENT_RISING_EDGE;
<span style="color:#66d9ef">char</span> label[] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;lora_raspberry&#34;</span>;
memcpy(rq.consumer_label, label, <span style="color:#66d9ef">sizeof</span>(label));
rq.handleflags <span style="color:#f92672">=</span> GPIOHANDLE_REQUEST_INPUT;
<span style="color:#66d9ef">int</span> code <span style="color:#f92672">=</span> ioctl(fd, GPIO_GET_LINEEVENT_IOCTL, <span style="color:#f92672">&amp;</span>rq);
</code></pre></div><p>In the example above, I reserve pin 27 to receive events. In this case, the event is a change from &ldquo;low level&rdquo; to &ldquo;high level.&rdquo; This is precisely what the chip will do when generating an interrupt.</p>
<p>After that, wait for the event using the poll API:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">struct</span> pollfd pfd;
pfd.fd <span style="color:#f92672">=</span> rq.fd;
pfd.events <span style="color:#f92672">=</span> POLLIN;
fprintf(stdout, <span style="color:#e6db74">&#34;waiting for packets...</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
<span style="color:#66d9ef">while</span> (<span style="color:#ae81ff">1</span>) {
    code <span style="color:#f92672">=</span> poll(<span style="color:#f92672">&amp;</span>pfd, <span style="color:#ae81ff">1</span>, GPIO_POLL_TIMEOUT);
    <span style="color:#66d9ef">if</span> (code <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">0</span>) {
        perror(<span style="color:#e6db74">&#34;unable to receive gpio interrupt&#34;</span>);
        <span style="color:#66d9ef">break</span>;
    } <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> (pfd.events <span style="color:#f92672">&amp;</span> POLLIN) {
        sx127x_handle_interrupt(device);
    }
}
close(rq.fd);
</code></pre></div><p>If the event is received, call the interrupt handler function <code>sx127x_handle_interrupt</code>.</p>
<h2 id="build">Build</h2>
<p>A few words need to be said about project build. Because the SPI API differs between ESP32 and Linux, I had to move all the code working with SPI into a separate file <code>sx127x_spi.h</code>. It contains four methods of the following kind, which are implemented differently for different platforms:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#75715e">/**
</span><span style="color:#75715e"> * @brief Read up to 4 bytes from device via SPI
</span><span style="color:#75715e"> * 
</span><span style="color:#75715e"> * @param reg Register
</span><span style="color:#75715e"> * @param spi_device Pointer to variable to hold the device handle. Can be different on different platforms
</span><span style="color:#75715e"> * @param data_length Number of bytes to read into result
</span><span style="color:#75715e"> * @param result Where the data will be written to
</span><span style="color:#75715e"> * @return 
</span><span style="color:#75715e"> *         - SX127X_ERR_INVALID_ARG   if parameter is invalid
</span><span style="color:#75715e"> *         - SX127X_OK                on success
</span><span style="color:#75715e"> */</span>
<span style="color:#66d9ef">int</span> <span style="color:#a6e22e">sx127x_spi_read_registers</span>(<span style="color:#66d9ef">int</span> reg, <span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>spi_device, size_t data_length, uint32_t <span style="color:#f92672">*</span>result);
</code></pre></div><p>During the build for Raspberry Pi, I compile <code>sx127x_linux_spi.c</code>, and for ESP32 - <code>sx127x_esp_spi.c</code>.</p>
<h2 id="testing">Testing</h2>
<p>For testing, I bought an RA-02 module. It contains the sx1278 chip. I had to do a little soldering to get something like this:</p>
<p><img src="/img/lora-raspberrypi/2.png" alt=""></p>
<p>In my test, I transmitted a signal from one ESP32 to another ESP32 and Raspberry Pi. Everything worked perfectly, except for frequency error calculation. The sx127x chip can calculate the difference between the frequency at which the message was received and the frequency to which the receiver was tuned. In the case of ESP32, it was about -473 Hz, and for Raspberry Pi, it was around 4024 Hz. Most likely, this is because the crystal oscillators for the two modules are slightly different.</p>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>sx127x</title>
      <link>https://dernasherbrezon.com/en/posts/sx127x/</link>
      <pubDate>Sat, 07 Jan 2023 16:33:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/en/posts/sx127x/</guid>
      <description>One of the fundamental questions that every programmer must periodically answer is &amp;ldquo;whether to use existing library or write your own.&amp;rdquo; It&amp;rsquo;s impossible to give a definitive answer to this question once and for all. You have to sit down and analyze each specific case. Recently, I faced such a situation, as I described in my previous post, where I explained how I reduced the LoRa current consumption to 16mA. If the goal is just to experiment and test some theory about the hardware, it was enough to modify the source code of existing arduino-LoRa.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>sx127x</h1></header>
      		<div class='container entry-content'>
  <p>One of the fundamental questions that every programmer must periodically answer is &ldquo;whether to use existing library or write your own.&rdquo; It&rsquo;s impossible to give a definitive answer to this question once and for all. You have to sit down and analyze each specific case. Recently, I faced such a situation, as I described in my <a href="https://dernasherbrezon.com/en/posts/lora-deep-sleep/">previous post</a>, where I explained how I reduced the LoRa current consumption to 16mA. If the goal is just to experiment and test some theory about the hardware, it was enough to modify the source code of existing <a href="https://github.com/sandeepmistry/arduino-LoRa">arduino-LoRa</a>. But to make such solution robust and production-ready, something more substantial is needed.</p>
<p>And here comes the question: should you take a ready-made library or write your own?</p>
<h2 id="existing-libraries">Existing Libraries</h2>
<p>I checked several libraries: <a href="https://github.com/sandeepmistry/arduino-LoRa">arduino-LoRa</a>, <a href="https://github.com/jgromes/RadioLib">RadioLib</a>, <a href="https://github.com/fifteenhex/sx127x">sx127x by fifteenhex</a>, <a href="https://github.com/morransmith/sx127x">sx127x by morransmith</a>, <a href="https://github.com/Inteform/esp32-lora-library">esp32-lora-library</a>, <a href="https://github.com/nopnop2002/esp-idf-sx127x">esp-idf-sx127x</a>, and it turned out that none of them satisfies my requirements! All of them assume that the chip should be put into sleep mode and back to idle. Essentially resetting everything that was in the FIFO buffer. But after returning from deep sleep this buffer will contain received message! Before rushing to write my own library, I could make a pull request with what I need. But even then, I&rsquo;m not sure about the result: my change is too low-level and contradicts the concept of many libraries.</p>
<p>In general, after reviewing existing libraries for Arduino and ESP32, it seemed to me that they were written by enthusiasts who poorly understand programming. Take, for example, <a href="https://github.com/sandeepmistry/arduino-LoRa">arduino-LoRa</a>. A library with not a single line of comments has over 1300 stars on Github and is de facto the standard library for working with LoRa. In addition, it combines SPI initialization, working with individual pins, and the logic of controlling the sx127x chip. Surprisingly, only one method out of more than 30 returns an error code. The rest return void.</p>
<p>In this regard, <a href="https://github.com/jgromes/RadioLib">RadioLib</a> is written slightly better. It has a separate entity called Module, which abstracts the work with SPI. However, it doesn&rsquo;t do it completely.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++"><span style="color:#66d9ef">int16_t</span> SX127x<span style="color:#f92672">::</span>begin(<span style="color:#66d9ef">uint8_t</span> chipVersion, <span style="color:#66d9ef">uint8_t</span> syncWord, <span style="color:#66d9ef">uint16_t</span> preambleLength) {
  <span style="color:#75715e">// set module properties
</span><span style="color:#75715e"></span>  _mod<span style="color:#f92672">-&gt;</span>init(RADIOLIB_USE_SPI);
  Module<span style="color:#f92672">::</span>pinMode(_mod<span style="color:#f92672">-&gt;</span>getIrq(), INPUT);
  Module<span style="color:#f92672">::</span>pinMode(_mod<span style="color:#f92672">-&gt;</span>getGpio(), INPUT);
  ...
}
</code></pre></div><p>The <code>pinMode</code> method is not part of the SPI protocol, and why it was added to <code>Module</code> remains a mystery. In general, pin control is not part of the sx127x chip specification and should not be part of the library.</p>
<p>Moreover, RadioLib is an extremely convoluted library. Despite having a physical abstraction of the SPI interface called <code>Module</code>, there is also a separate entity called <code>PhysicalLayer</code> in it. The class hierarchy in RadioLib is clearly overcomplicated. For example, here is how the inheritance looks:</p>
<pre><code>PhysicalLayer -&gt; SX127x -&gt; SX1278 -&gt; SX1276
</code></pre><p>This implies that during initialization, you need to know the chip model and create either the SX1278 or SX1276 class depending on it.</p>
<p>All of this turned out to be enough to start developing my own library. And it was not in vain because many blatantly strange things were revealed in many implementations.</p>
<h2 id="sx127x">sx127x</h2>
<p>To be honest, I didn&rsquo;t come up with the library&rsquo;s name right away, but from the very beginning, I knew how it should work:</p>
<ul>
<li>The library should translate the chip documentation into C code. It should not make any assumptions about how it will be used or in what order its methods will be called. With this approach, working with it will be a bit more verbose, but functions can be combined as needed and called from separate threads or tasks. In my case, I can initialize access to the chip without overwriting data when coming out of deep sleep.</li>
<li>The library should be written in C and be well-documented, preferably with references to the chip documentation. Calling C from C++ is not a problem, but calling C++ from C is very difficult. Besides, I prefer C.</li>
<li>The library should not depend on other libraries. The SPI interface is available in the standard ESP library, and that&rsquo;s the only thing that should be needed.</li>
</ul>
<p>As a result, I succeeded:</p>
<p><a href="https://github.com/dernasherbrezon/sx127x">https://github.com/dernasherbrezon/sx127x</a></p>
<h2 id="implementation-details">Implementation Details</h2>
<p>When I started working on the library, I only had a general idea of how the chip works. In short, you need to initialize the SPI device and set the necessary registers via SPI. There are many registers, and depending on the operating mode (LoRa or FSK), the same registers mean different things. However, as I worked on the library and read the documentation, I learned more and more and was increasingly amazed at how poorly designed standard libraries are.</p>
<h3 id="header-mode">Header mode</h3>
<p>It turns out that in the LoRa protocol, there is a concept of &ldquo;explicit header&rdquo; and &ldquo;implicit header.&rdquo; &ldquo;Explicit header&rdquo; is a mode where a header is added to each message sent to the network. The receiver, in turn, receives such a header and understands the message parameters:</p>
<ul>
<li>message length</li>
<li>whether checksum is used or not</li>
<li>parameters for FEC decoding</li>
</ul>
<div>
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" width="100%" height="100%" viewBox="-0.5 -0.5 618 141"><defs/><g><rect x="8" y="40" width="120" height="40" fill="#000000" stroke="#000000" pointer-events="all" transform="translate(2,3)" opacity="0.25"/><rect x="8" y="40" width="120" height="40" fill="#fff2cc" stroke="#d6b656" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 60px; margin-left: 9px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">Preamble</div></div></div></foreignObject><text x="68" y="64" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">Preamble</text></switch></g><rect x="128" y="40" width="120" height="20" fill="#000000" stroke="#000000" pointer-events="all" transform="translate(2,3)" opacity="0.25"/><rect x="128" y="40" width="120" height="20" fill="#fff2cc" stroke="#d6b656" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 50px; margin-left: 129px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">Header</div></div></div></foreignObject><text x="188" y="54" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">Header</text></switch></g><rect x="248" y="40" width="40" height="20" fill="#000000" stroke="#000000" pointer-events="all" transform="translate(2,3)" opacity="0.25"/><rect x="248" y="40" width="40" height="20" fill="#fff2cc" stroke="#d6b656" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 38px; height: 1px; padding-top: 50px; margin-left: 249px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">CRC</div></div></div></foreignObject><text x="268" y="54" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">CRC</text></switch></g><rect x="128" y="60" width="160" height="20" fill="#000000" stroke="#000000" pointer-events="all" transform="translate(2,3)" opacity="0.25"/><rect x="128" y="60" width="160" height="20" fill="#fff2cc" stroke="#d6b656" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 158px; height: 1px; padding-top: 70px; margin-left: 129px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">(explicit mode only)</div></div></div></foreignObject><text x="208" y="74" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">(explicit mode only)</text></switch></g><rect x="288" y="40" width="240" height="40" fill="#000000" stroke="#000000" pointer-events="all" transform="translate(2,3)" opacity="0.25"/><rect x="288" y="40" width="240" height="40" fill="#fff2cc" stroke="#d6b656" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 238px; height: 1px; padding-top: 60px; margin-left: 289px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">Payload</div></div></div></foreignObject><text x="408" y="64" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">Payload</text></switch></g><rect x="528" y="40" width="80" height="40" fill="#000000" stroke="#000000" pointer-events="all" transform="translate(2,3)" opacity="0.25"/><rect x="528" y="40" width="80" height="40" fill="#fff2cc" stroke="#d6b656" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 78px; height: 1px; padding-top: 60px; margin-left: 529px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">Payload<br />CRC</div></div></div></foreignObject><text x="568" y="64" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">Payload...</text></switch></g><path d="M 14.37 20 L 121.63 20" fill="none" stroke="#6c8ebf" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 9.12 20 L 16.12 16.5 L 14.37 20 L 16.12 23.5 Z" fill="#6c8ebf" stroke="#6c8ebf" stroke-miterlimit="10" pointer-events="all"/><path d="M 126.88 20 L 119.88 23.5 L 121.63 20 L 119.88 16.5 Z" fill="#6c8ebf" stroke="#6c8ebf" stroke-miterlimit="10" pointer-events="all"/><rect x="8" y="0" width="120" height="20" fill="none" stroke="none" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 10px; margin-left: 9px;"><div data-drawio-colors="color: #6C8EBF; " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(108, 142, 191); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">nPreamble Symbols</div></div></div></foreignObject><text x="68" y="14" fill="#6C8EBF" font-family="Helvetica" font-size="12px" text-anchor="middle">nPreamble Symbols</text></switch></g><path d="M 134.37 20 L 281.63 20" fill="none" stroke="#6c8ebf" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 129.12 20 L 136.12 16.5 L 134.37 20 L 136.12 23.5 Z" fill="#6c8ebf" stroke="#6c8ebf" stroke-miterlimit="10" pointer-events="all"/><path d="M 286.88 20 L 279.88 23.5 L 281.63 20 L 279.88 16.5 Z" fill="#6c8ebf" stroke="#6c8ebf" stroke-miterlimit="10" pointer-events="all"/><rect x="128" y="0" width="160" height="20" fill="none" stroke="none" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 158px; height: 1px; padding-top: 10px; margin-left: 129px;"><div data-drawio-colors="color: #6C8EBF; " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(108, 142, 191); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">nHeader Symbols</div></div></div></foreignObject><text x="208" y="14" fill="#6C8EBF" font-family="Helvetica" font-size="12px" text-anchor="middle">nHeader Symbols</text></switch></g><path d="M 134.37 100 L 281.63 100" fill="none" stroke="#d79b00" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 129.12 100 L 136.12 96.5 L 134.37 100 L 136.12 103.5 Z" fill="#d79b00" stroke="#d79b00" stroke-miterlimit="10" pointer-events="all"/><path d="M 286.88 100 L 279.88 103.5 L 281.63 100 L 279.88 96.5 Z" fill="#d79b00" stroke="#d79b00" stroke-miterlimit="10" pointer-events="all"/><rect x="128" y="100" width="160" height="20" fill="none" stroke="none" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 158px; height: 1px; padding-top: 110px; margin-left: 129px;"><div data-drawio-colors="color: #D79B00; " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(215, 155, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">CR = 4/8</div></div></div></foreignObject><text x="208" y="114" fill="#D79B00" font-family="Helvetica" font-size="12px" text-anchor="middle">CR = 4/8</text></switch></g><path d="M 294.37 100 L 601.63 100" fill="none" stroke="#d79b00" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 289.12 100 L 296.12 96.5 L 294.37 100 L 296.12 103.5 Z" fill="#d79b00" stroke="#d79b00" stroke-miterlimit="10" pointer-events="all"/><path d="M 606.88 100 L 599.88 103.5 L 601.63 100 L 599.88 96.5 Z" fill="#d79b00" stroke="#d79b00" stroke-miterlimit="10" pointer-events="all"/><rect x="288" y="100" width="320" height="20" fill="none" stroke="none" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 318px; height: 1px; padding-top: 110px; margin-left: 289px;"><div data-drawio-colors="color: #D79B00; " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(215, 155, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">CR = Coding Rate</div></div></div></foreignObject><text x="448" y="114" fill="#D79B00" font-family="Helvetica" font-size="12px" text-anchor="middle">CR = Coding Rate</text></switch></g><path d="M 14.37 120 L 601.63 120" fill="none" stroke="#82b366" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 9.12 120 L 16.12 116.5 L 14.37 120 L 16.12 123.5 Z" fill="#82b366" stroke="#82b366" stroke-miterlimit="10" pointer-events="all"/><path d="M 606.88 120 L 599.88 123.5 L 601.63 120 L 599.88 116.5 Z" fill="#82b366" stroke="#82b366" stroke-miterlimit="10" pointer-events="all"/><rect x="8" y="120" width="600" height="20" fill="none" stroke="none" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 598px; height: 1px; padding-top: 130px; margin-left: 9px;"><div data-drawio-colors="color: #82B366; " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(130, 179, 102); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">SF = Spreading Factor</div></div></div></foreignObject><text x="308" y="134" fill="#82B366" font-family="Helvetica" font-size="12px" text-anchor="middle">SF = Spreading Factor</text></switch></g></g><switch><g requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"/><a transform="translate(0,-5)" xlink:href="https://www.diagrams.net/doc/faq/svg-export-text-problems" target="_blank"><text text-anchor="middle" font-size="10px" x="50%" y="100%">Text is not SVG - cannot display</text></a></switch></svg>
</div>
<p>It turns out that these parameters do not need to be configured on the receiver!</p>
<p>In implicit header mode, it is not transmitted, and it is assumed that the transmitter and receiver have agreed on the parameters in advance, and there is no need to transmit them. Why is such a mode needed? Well, firstly, to transmit messages faster. In some countries, there is a restriction on the time during which a signal can be transmitted in the ISM band (frequencies typically used by LoRa). The faster the message is transmitted, the more data can be transmitted in a unit of time. Secondly, by transmitting messages quickly, you can save energy.</p>
<p>sx127x explicitly supports both modes:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#75715e">/**
</span><span style="color:#75715e"> * @brief Set implicit header.
</span><span style="color:#75715e"> *
</span><span style="color:#75715e"> * sx127x can send packets for explicit header or without it (implicit). In implicit mode receiver should be configured with pre-defined values using this function.
</span><span style="color:#75715e"> * In explicit mode, all information is sent in the header. Thus no configuration needed.
</span><span style="color:#75715e"> *
</span><span style="color:#75715e"> * @param header Pre-defined packet information. If NULL, then assume explicit header in RX mode. For TX explicit mode please use sx127x_set_tx_explcit_header function.
</span><span style="color:#75715e"> * @param device Pointer to variable to hold the device handle
</span><span style="color:#75715e"> * @return
</span><span style="color:#75715e"> *         - ESP_ERR_INVALID_ARG   if parameter is invalid
</span><span style="color:#75715e"> *         - ESP_OK                on success
</span><span style="color:#75715e"> */</span>
esp_err_t <span style="color:#a6e22e">sx127x_set_implicit_header</span>(sx127x_implicit_header_t <span style="color:#f92672">*</span>header, sx127x <span style="color:#f92672">*</span>device);
</code></pre></div><h3 id="tx-power">TX power</h3>
<p>TX power configuration in sx127x chip is quite tricky. The chip has two pins to which an antenna can be connected:</p>
<ul>
<li>RFO</li>
<li>PA_BOOST</li>
</ul>
<div>
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" viewBox="-0.5 -0.5 611 581"><defs/><g><rect x="90" y="95" width="395" height="390" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="all"/><ellipse cx="120" cy="125" rx="10" ry="10" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="all"/><rect x="160" y="95" width="20" height="50" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-dasharray="3 3" pointer-events="all"/><rect x="200" y="95" width="20" height="50" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-dasharray="3 3" pointer-events="all"/><rect x="240" y="95" width="20" height="50" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-dasharray="3 3" pointer-events="all"/><rect x="280" y="95" width="20" height="50" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-dasharray="3 3" pointer-events="all"/><rect x="320" y="95" width="20" height="50" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-dasharray="3 3" pointer-events="all"/><rect x="360" y="95" width="20" height="50" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-dasharray="3 3" pointer-events="all"/><rect x="400" y="95" width="20" height="50" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-dasharray="3 3" pointer-events="all"/><rect x="105" y="150" width="20" height="50" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-dasharray="3 3" transform="rotate(90,115,175)" pointer-events="all"/><rect x="105" y="190" width="20" height="50" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-dasharray="3 3" transform="rotate(90,115,215)" pointer-events="all"/><rect x="105" y="230" width="20" height="50" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-dasharray="3 3" transform="rotate(90,115,255)" pointer-events="all"/><rect x="105" y="270" width="20" height="50" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-dasharray="3 3" transform="rotate(90,115,295)" pointer-events="all"/><rect x="105" y="309" width="20" height="50" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-dasharray="3 3" transform="rotate(90,115,334)" pointer-events="all"/><rect x="105" y="349" width="20" height="50" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-dasharray="3 3" transform="rotate(90,115,374)" pointer-events="all"/><rect x="105" y="389" width="20" height="50" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-dasharray="3 3" transform="rotate(90,115,414)" pointer-events="all"/><rect x="160" y="435" width="20" height="50" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-dasharray="3 3" transform="rotate(180,170,460)" pointer-events="all"/><rect x="200" y="435" width="20" height="50" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-dasharray="3 3" transform="rotate(180,210,460)" pointer-events="all"/><rect x="240" y="435" width="20" height="50" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-dasharray="3 3" transform="rotate(180,250,460)" pointer-events="all"/><rect x="280" y="435" width="20" height="50" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-dasharray="3 3" transform="rotate(180,290,460)" pointer-events="all"/><rect x="320" y="435" width="20" height="50" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-dasharray="3 3" transform="rotate(180,330,460)" pointer-events="all"/><rect x="360" y="435" width="20" height="50" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-dasharray="3 3" transform="rotate(180,370,460)" pointer-events="all"/><rect x="450" y="150.5" width="20" height="50" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-dasharray="3 3" transform="rotate(90,460,175.5)" pointer-events="all"/><rect x="450" y="190.5" width="20" height="50" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-dasharray="3 3" transform="rotate(90,460,215.5)" pointer-events="all"/><rect x="450" y="230.5" width="20" height="50" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-dasharray="3 3" transform="rotate(90,460,255.5)" pointer-events="all"/><rect x="450" y="270.5" width="20" height="50" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-dasharray="3 3" transform="rotate(90,460,295.5)" pointer-events="all"/><rect x="450" y="309.5" width="20" height="50" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-dasharray="3 3" transform="rotate(90,460,334.5)" pointer-events="all"/><rect x="450" y="349.5" width="20" height="50" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-dasharray="3 3" transform="rotate(90,460,374.5)" pointer-events="all"/><rect x="450" y="389.5" width="20" height="50" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-dasharray="3 3" transform="rotate(90,460,414.5)" pointer-events="all"/><rect x="400" y="435" width="20" height="50" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-dasharray="3 3" transform="rotate(180,410,460)" pointer-events="all"/><path d="M 190 165 L 420 165 L 420 425 L 160 425 L 160 195 Z" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 258px; height: 1px; padding-top: 295px; margin-left: 161px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">0 GND</div></div></div></foreignObject><text x="290" y="299" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">0 GND</text></switch></g><rect x="125" y="40" width="90" height="20" fill="none" stroke="none" transform="rotate(-90,170,50)" pointer-events="all"/><g transform="translate(-0.5 -0.5)rotate(-90 170 93.00000000000011)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 88px; height: 1px; padding-top: 93px; margin-left: 170px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">  28 RFO_LF</div></div></div></foreignObject><text x="170" y="97" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px">  28 RFO_LF</text></switch></g><rect x="162.5" y="37.5" width="95" height="20" fill="none" stroke="none" transform="rotate(-90,210,47.5)" pointer-events="all"/><g transform="translate(-0.5 -0.5)rotate(-90 210 93.00000000000011)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 93px; height: 1px; padding-top: 93px; margin-left: 210px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">  27 PA_BOOST</div></div></div></foreignObject><text x="210" y="97" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px">  27 PA_BOOST</text></switch></g><rect x="202.5" y="37" width="95" height="20" fill="none" stroke="none" transform="rotate(-90,250,47)" pointer-events="all"/><g transform="translate(-0.5 -0.5)rotate(-90 250 92.50000000000011)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 93px; height: 1px; padding-top: 93px; margin-left: 250px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">  26 GND</div></div></div></foreignObject><text x="250" y="96" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px">  26 GND</text></switch></g><rect x="243" y="37" width="95" height="20" fill="none" stroke="none" transform="rotate(-90,290.5,47)" pointer-events="all"/><g transform="translate(-0.5 -0.5)rotate(-90 290.5 92.50000000000011)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 93px; height: 1px; padding-top: 93px; margin-left: 291px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">  25 VR_PA</div></div></div></foreignObject><text x="291" y="96" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px">  25 VR_PA</text></switch></g><rect x="282" y="37" width="95" height="20" fill="none" stroke="none" transform="rotate(-90,329.5,47)" pointer-events="all"/><g transform="translate(-0.5 -0.5)rotate(-90 329.5 92.50000000000011)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 93px; height: 1px; padding-top: 93px; margin-left: 330px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">  24 VBAT_RF</div></div></div></foreignObject><text x="330" y="96" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px">  24 VBAT_RF</text></switch></g><rect x="322.5" y="37" width="95" height="20" fill="none" stroke="none" transform="rotate(-90,370,47)" pointer-events="all"/><g transform="translate(-0.5 -0.5)rotate(-90 370 92.50000000000011)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 93px; height: 1px; padding-top: 93px; margin-left: 370px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">  23 GND</div></div></div></foreignObject><text x="370" y="96" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px">  23 GND</text></switch></g><rect x="362.5" y="37" width="95" height="20" fill="none" stroke="none" transform="rotate(-90,410,47)" pointer-events="all"/><g transform="translate(-0.5 -0.5)rotate(-90 410 92.50000000000011)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 93px; height: 1px; padding-top: 93px; margin-left: 410px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">  22 RFO_HF</div></div></div></foreignObject><text x="410" y="96" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px">  22 RFO_HF</text></switch></g><rect x="485" y="165" width="90" height="20" fill="none" stroke="none" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 88px; height: 1px; padding-top: 175px; margin-left: 487px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">  21 RFI_HF</div></div></div></foreignObject><text x="487" y="179" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px">  21 RFI_HF</text></switch></g><rect x="0" y="205" width="90" height="20" fill="none" stroke="none" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 88px; height: 1px; padding-top: 215px; margin-left: 2px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">2 VR_ANA</div></div></div></foreignObject><text x="2" y="219" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px">2 VR_ANA</text></switch></g><rect x="0" y="245" width="90" height="20" fill="none" stroke="none" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 88px; height: 1px; padding-top: 255px; margin-left: 2px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">3 VBAT_ANA</div></div></div></foreignObject><text x="2" y="259" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px">3 VBAT_ANA</text></switch></g><rect x="0" y="285" width="90" height="20" fill="none" stroke="none" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 88px; height: 1px; padding-top: 295px; margin-left: 2px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">4 VR_DIG</div></div></div></foreignObject><text x="2" y="299" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px">4 VR_DIG</text></switch></g><rect x="0" y="324.5" width="90" height="20" fill="none" stroke="none" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 88px; height: 1px; padding-top: 335px; margin-left: 2px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">5 XTA</div></div></div></foreignObject><text x="2" y="338" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px">5 XTA</text></switch></g><rect x="0" y="364.5" width="90" height="20" fill="none" stroke="none" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 88px; height: 1px; padding-top: 375px; margin-left: 2px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">6 XTB</div></div></div></foreignObject><text x="2" y="378" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px">6 XTB</text></switch></g><rect x="0" y="404.5" width="90" height="20" fill="none" stroke="none" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 88px; height: 1px; padding-top: 415px; margin-left: 2px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">7 NRESET</div></div></div></foreignObject><text x="2" y="418" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px">7 NRESET</text></switch></g><rect x="485" y="205.5" width="125" height="20" fill="none" stroke="none" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 123px; height: 1px; padding-top: 216px; margin-left: 487px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">  20 RXTX / RFMOD</div></div></div></foreignObject><text x="487" y="219" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px">  20 RXTX / RFMOD</text></switch></g><rect x="485" y="245.5" width="125" height="20" fill="none" stroke="none" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 123px; height: 1px; padding-top: 256px; margin-left: 487px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">  19 NSS</div></div></div></foreignObject><text x="487" y="259" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px">  19 NSS</text></switch></g><rect x="485" y="285.5" width="125" height="20" fill="none" stroke="none" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 123px; height: 1px; padding-top: 296px; margin-left: 487px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">  18 MOSI</div></div></div></foreignObject><text x="487" y="299" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px">  18 MOSI</text></switch></g><rect x="485" y="324.5" width="125" height="20" fill="none" stroke="none" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 123px; height: 1px; padding-top: 335px; margin-left: 487px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">  17 MISO</div></div></div></foreignObject><text x="487" y="338" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px">  17 MISO</text></switch></g><rect x="485" y="364.5" width="125" height="20" fill="none" stroke="none" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 123px; height: 1px; padding-top: 375px; margin-left: 487px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">  16 CLK</div></div></div></foreignObject><text x="487" y="378" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px">  16 CLK</text></switch></g><rect x="485" y="404.5" width="125" height="20" fill="none" stroke="none" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 123px; height: 1px; padding-top: 415px; margin-left: 487px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">  15 GND</div></div></div></foreignObject><text x="487" y="418" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px">  15 GND</text></switch></g><rect x="125" y="485" width="90" height="20" fill="none" stroke="none" transform="rotate(-90,170,495)" pointer-events="all"/><g transform="translate(-0.5 -0.5)rotate(-90 170 538.0000000000002)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 88px; height: 1px; padding-top: 538px; margin-left: 170px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">8 DIO0</div></div></div></foreignObject><text x="170" y="542" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px">8 DIO0</text></switch></g><rect x="162.5" y="483" width="95" height="20" fill="none" stroke="none" transform="rotate(-90,210,493)" pointer-events="all"/><g transform="translate(-0.5 -0.5)rotate(-90 210 538.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 93px; height: 1px; padding-top: 539px; margin-left: 210px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">9 DIO1</div></div></div></foreignObject><text x="210" y="542" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px">9 DIO1</text></switch></g><rect x="202.5" y="485" width="95" height="20" fill="none" stroke="none" transform="rotate(-90,250,495)" pointer-events="all"/><g transform="translate(-0.5 -0.5)rotate(-90 250 540.5000000000002)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 93px; height: 1px; padding-top: 541px; margin-left: 250px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">10 DIO2</div></div></div></foreignObject><text x="250" y="544" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px">10 DIO2</text></switch></g><rect x="243" y="485" width="95" height="20" fill="none" stroke="none" transform="rotate(-90,290.5,495)" pointer-events="all"/><g transform="translate(-0.5 -0.5)rotate(-90 290.5 540.5000000000002)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 93px; height: 1px; padding-top: 541px; margin-left: 291px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">11 DIO3</div></div></div></foreignObject><text x="291" y="544" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px">11 DIO3</text></switch></g><rect x="282.5" y="485" width="95" height="20" fill="none" stroke="none" transform="rotate(-90,330,495)" pointer-events="all"/><g transform="translate(-0.5 -0.5)rotate(-90 330 540.5000000000002)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 93px; height: 1px; padding-top: 541px; margin-left: 330px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">12 DIO4</div></div></div></foreignObject><text x="330" y="544" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px">12 DIO4</text></switch></g><rect x="322.5" y="485" width="95" height="20" fill="none" stroke="none" transform="rotate(-90,370,495)" pointer-events="all"/><g transform="translate(-0.5 -0.5)rotate(-90 370 540.5000000000002)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 93px; height: 1px; padding-top: 541px; margin-left: 370px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">13 DIO5</div></div></div></foreignObject><text x="370" y="544" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px">13 DIO5</text></switch></g><rect x="362.5" y="522" width="95" height="20" fill="none" stroke="none" transform="rotate(-90,410,532)" pointer-events="all"/><g transform="translate(-0.5 -0.5)rotate(-90 410 577.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 93px; height: 1px; padding-top: 578px; margin-left: 410px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">14 VBAT_DIAG</div></div></div></foreignObject><text x="410" y="581" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px">14 VBAT_DIAG</text></switch></g></g><switch><g requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"/><a transform="translate(0,-5)" xlink:href="https://www.diagrams.net/doc/faq/svg-export-text-problems" target="_blank"><text text-anchor="middle" font-size="10px" x="50%" y="100%">Text is not SVG - cannot display</text></a></switch></svg>
</div>
<p>Through RFO, it is possible to achieve a power gain of 15dBm, while through PA_BOOST, it can go up to 20dBm. In the official documentation, there is a recommendation to limit the maximum current consumption for different power gain levels. I struggled for a long time to understand why this is necessary and came up with the following explanation. The power amplifier consumes current to increase the incoming signal by a factor of X. The power of the outgoing signal depends not only on the current and voltage but also on the resistance. Now imagine a situation where the antenna, with an impedance of 50 ohms, malfunctions. Or there is corrosion on the contact between the antenna and the chip. Or someone connected an antenna with 75 ohms impedance. In such cases, to achieve the same 20dBm with the same 3.3V voltage, a much higher current needs to be supplied. If the current consumption is not limited, the entire system will consume more energy at best. At worst, the chip or contacts may burn out. In the sx127x library, when configuring the power amplifier, the maximum current consumption is simultaneously limited. However, the current consumption can be overridden using a special method:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#75715e">/**
</span><span style="color:#75715e"> * @brief Configure overload current protection (OCP) for PA.
</span><span style="color:#75715e"> *
</span><span style="color:#75715e"> * @param onoff Enable or disable OCP
</span><span style="color:#75715e"> * @param milliamps Maximum current in milliamps
</span><span style="color:#75715e"> * @param device Pointer to variable to hold the device handle
</span><span style="color:#75715e"> * @return
</span><span style="color:#75715e"> *         - ESP_ERR_INVALID_ARG   if parameter is invalid
</span><span style="color:#75715e"> *         - ESP_OK                on success
</span><span style="color:#75715e"> */</span>
esp_err_t <span style="color:#a6e22e">sx127x_set_ocp</span>(sx127x_ocp_t onoff, uint8_t milliamps, sx127x <span style="color:#f92672">*</span>device);
</code></pre></div><h3 id="working-with-interrupts">Working with interrupts</h3>
<p>Interrupt handling, as it turns out, is one of the most complex concepts poorly implemented in almost all libraries except sx127x. The LoRa chip actively utilizes interrupts. When the chip receives a message, an interrupt is generated. When the message is sent, another interrupt is generated. When frequency hopping requires a frequency switch, yet another interrupt is generated. In LoRa chips, there are about 12 types of interrupts in total. To receive these interrupts, specific chip pins must be connected to the processor.</p>
<p>In most libraries, the interrupt mechanism is hidden within the library. This is extremely poor design for several reasons:</p>
<ul>
<li>There is no way to handle interrupts asynchronously using FreeRTOS tasks. Typically, the implementation looks like this:</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++">start <span style="color:#f92672">=</span> Module<span style="color:#f92672">::</span>micros();
<span style="color:#66d9ef">while</span>(<span style="color:#f92672">!</span>Module<span style="color:#f92672">::</span>digitalRead(_mod<span style="color:#f92672">-&gt;</span>getIrq())) {
  Module<span style="color:#f92672">::</span>yield();
  <span style="color:#66d9ef">if</span>(Module<span style="color:#f92672">::</span>micros() <span style="color:#f92672">-</span> start <span style="color:#f92672">&gt;</span> timeout) {
    clearIRQFlags();
    <span style="color:#66d9ef">return</span>(ERR_TX_TIMEOUT);
  }
}
</code></pre></div><p>The SPI bus is constantly loaded with polling, the processor runs at maximum speed and consumes energy, and all other tasks are blocked. In the code above, the interrupt is not effectively handled; instead, a register is simply read to determine if the data transmission has completed.</p>
<ul>
<li>The code becomes tightly coupled between the chip&rsquo;s logic and interrupt handling in a specific framework. In arduino-LoRa, for example, the callback function is called within the ISR. If the function takes a long time to execute or outputs to UART, the application will crash.</li>
</ul>
<p>In sx127x, I decided to remove any mention of interrupts, ISRs, and FreeRTOS tasks. To configure the interrupt from the chip, the library is not needed. It is enough to write:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">ESP_ERROR_CHECK(gpio_isr_handler_add((gpio_num_t)DIO0, handle_interrupt_fromisr, (<span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>)device));
</code></pre></div><p>How the interrupt handler will be implemented should be decided by the application. It could be the same endless loop, a separate task in FreeRTOS, or something else. The main thing is that the <code>sx127x_handle_interrupt</code> function is called in this loop - it will process the interrupt register, understand which interrupt occurred, and call the corresponding callback.</p>
<h3 id="error-handling">Error Handling</h3>
<p>Sending or receiving data through SPI can result in an error, be it a timeout, an incorrect argument when forming a message, or something else. When working with the LoRa chip, almost every method involves sending and receiving small messages through SPI. Thus, theoretically, each method can return an error.</p>
<p>Since my library is written in C, I decided not to invent anything new and adopted the universally accepted error handling through return codes. That&rsquo;s why almost every function returns the value <code>esp_err_t</code>. If a function is expected to return a value, it is returned through a pointer parameter.</p>
<p>As much as one might want to deny it, error handling always increases code size and decreases readability. The only thing that can be done is to try to ease the pain, for example, by making error handling consistent.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">esp_err_t code <span style="color:#f92672">=</span> sx127x_set_bandwidth(bw, device);
<span style="color:#66d9ef">if</span> (code <span style="color:#f92672">!=</span> ESP_OK) {
  <span style="color:#66d9ef">return</span> code;
}
code <span style="color:#f92672">=</span> sx127x_set_implicit_header(NULL, device);
<span style="color:#66d9ef">if</span> (code <span style="color:#f92672">!=</span> ESP_OK) {
  <span style="color:#66d9ef">return</span> code;
}
</code></pre></div><h3 id="documentation">Documentation</h3>
<p>I noticed a peculiar feature: writing documentation contributes to writing better code. It is during the documentation process for each function that I began to understand where a function is unnecessary, where parameters need to be added, where there is no consistency, and where a complete overhaul is needed. This exercise turned out to be helpful in taking a step back and understanding what could be improved in the project.</p>
<p>I have read a lot of code from the standard ESP library and believe that it has very good documentation. Since my library is supported only on ESP, it made sense to format the documentation in the same style.</p>
<p><img src="/img/sx127x/3.png" alt=""></p>
<h3 id="distribution">Distribution</h3>
<p>A library that is difficult to use is of no use to anyone. That&rsquo;s why it is worth considering how other developers will embed it.</p>
<p>I faced certain difficulties with this. The thing is, before this, I only dealt with PlatformIO. In PlatformIO, a library for ESP could easily depend on the Arduino API. In theory, there is no problem with this since Espressif has released compatibility layers between ESP and Arduino, but it doesn&rsquo;t look neat.</p>
<p>In the end, I rewrote the library as follows:</p>
<ul>
<li>It does not depend on the Arduino API.</li>
<li>Usage examples depend only on the ESP API.</li>
<li>The code structure corresponds to the <a href="https://docs.espressif.com/projects/esp-idf/en/latest/esp32/api-guides/build-system.html#example-project">ESP component</a></li>
</ul>
<p>As a result, it can be used either as a component in esp-idf or as a regular library from the PlatformIO registry:</p>
<p><a href="https://registry.platformio.org/libraries/dernasherbrezon/sx127x">https://registry.platformio.org/libraries/dernasherbrezon/sx127x</a></p>
<h2 id="future-plans">Future plans</h2>
<p>Surprisingly, but true: after all the work I&rsquo;ve done, there is still room for improvement in the library.</p>
<p><strong>Firstly</strong>, support for FSK and OOK modulations can be added. They significantly complicate the API and I haven&rsquo;t figured out yet how to make it simple.</p>
<p><strong>Secondly</strong>, support for other types of interrupts can be added. I only have TTGO and Heltec boards, so I can only test interrupts on the DIO0 pin. Still, if you buy a separate module, you can use all pins and all types of interrupts. That would be fun.</p>
<p><strong>Thirdly</strong>, abstracting the SPI operation into a separate file is possible. This would allow using the library with Raspberry PI, Arduino, or any other chip. To achieve this, it would be necessary to implement the SPI for a specific platform.</p>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Optimizing LoRa power consumption</title>
      <link>https://dernasherbrezon.com/en/posts/lora-deep-sleep/</link>
      <pubDate>Sat, 10 Dec 2022 21:17:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/en/posts/lora-deep-sleep/</guid>
      <description>In recent months, I have been working on reducing power consumption in the lora-at project. The idea is to create a self-sufficient receiver, place it on the balcony, and receive signals from satellites 24/7. Easier said than done, especially for those who have never optimized code for low power consumption or designed electrical circuits. Of course, you could install the largest solar panel, receive signals only during the day, and not worry about it.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Optimizing LoRa power consumption</h1></header>
      		<div class='container entry-content'>
  <p>In recent months, I have been working on reducing power consumption in the <a href="https://github.com/dernasherbrezon/lora-at">lora-at</a> project. The idea is to create a self-sufficient receiver, place it on the balcony, and receive signals from satellites 24/7. Easier said than done, especially for those who have never optimized code for low power consumption or designed electrical circuits. Of course, you could install the largest solar panel, receive signals only during the day, and not worry about it. However, I found this approach unworthy of an engineer, so I took on the challenge and started designing.</p>
<h2 id="general-design">General design</h2>
<p>Before optimizing power consumption, it is necessary to understand the electrical circuitry and program algorithm.</p>
<div>
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg xmlns="http://www.w3.org/2000/svg"
	xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1"
	preserveAspectRatio="xMinYMin meet" viewBox="-0.5 -0.5 421 211">
<defs />
<g>
<path d="M 80 70 L 113.63 70" fill="none" stroke="rgb(0, 0, 0)"
	stroke-miterlimit="10" pointer-events="stroke" />
<path d="M 118.88 70 L 111.88 73.5 L 113.63 70 L 111.88 66.5 Z"
	fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10"
	pointer-events="all" />
<rect x="0" y="40" width="80" height="60" fill="rgb(255, 255, 255)"
	stroke="rgb(0, 0, 0)" pointer-events="all" />
<g transform="translate(-0.5 -0.5)">
<switch>
<foreignObject pointer-events="none" width="100%" height="100%"
	requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"
	style="overflow: visible; text-align: left;">
<div xmlns="http://www.w3.org/1999/xhtml"
	style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 78px; height: 1px; padding-top: 70px; margin-left: 1px;">
	<div data-drawio-colors="color: rgb(0, 0, 0); "
		style="box-sizing: border-box; font-size: 0px; text-align: center;">
		<div
			style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">
			Solar<br />panel 6v
		</div>
	</div>
</div>
</foreignObject>
<text x="40" y="74" fill="rgb(0, 0, 0)" font-family="Helvetica"
	font-size="12px" text-anchor="middle">Solar&#xa;panel 6v</text></switch></g>
<path d="M 206.37 70 L 220 70 L 220 20 L 233.63 20" fill="none"
	stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke" />
<path d="M 201.12 70 L 208.12 66.5 L 206.37 70 L 208.12 73.5 Z"
	fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10"
	pointer-events="all" />
<path d="M 238.88 20 L 231.88 23.5 L 233.63 20 L 231.88 16.5 Z"
	fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10"
	pointer-events="all" />
<path d="M 200 85 L 340 85 L 340 113.63" fill="none"
	stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke" />
<path d="M 340 118.88 L 336.5 111.88 L 340 113.63 L 343.5 111.88 Z"
	fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10"
	pointer-events="all" />
<path d="M 160 100 L 160 113.63" fill="none" stroke="rgb(0, 0, 0)"
	stroke-miterlimit="10" pointer-events="stroke" />
<path d="M 160 118.88 L 156.5 111.88 L 160 113.63 L 163.5 111.88 Z"
	fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10"
	pointer-events="all" />
<rect x="120" y="40" width="80" height="60" fill="rgb(255, 255, 255)"
	stroke="rgb(0, 0, 0)" pointer-events="all" />
<g transform="translate(-0.5 -0.5)">
<switch>
<foreignObject pointer-events="none" width="100%" height="100%"
	requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"
	style="overflow: visible; text-align: left;">
<div xmlns="http://www.w3.org/1999/xhtml"
	style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 78px; height: 1px; padding-top: 70px; margin-left: 121px;">
	<div data-drawio-colors="color: rgb(0, 0, 0); "
		style="box-sizing: border-box; font-size: 0px; text-align: center;">
		<div
			style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">Controller</div>
	</div>
</div>
</foreignObject>
<text x="160" y="74" fill="rgb(0, 0, 0)" font-family="Helvetica"
	font-size="12px" text-anchor="middle">Controller</text></switch></g>
<rect x="240" y="0" width="120" height="40" fill="rgb(255, 255, 255)"
	stroke="rgb(0, 0, 0)" pointer-events="all" />
<g transform="translate(-0.5 -0.5)">
<switch>
<foreignObject pointer-events="none" width="100%" height="100%"
	requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"
	style="overflow: visible; text-align: left;">
<div xmlns="http://www.w3.org/1999/xhtml"
	style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 20px; margin-left: 241px;">
	<div data-drawio-colors="color: rgb(0, 0, 0); "
		style="box-sizing: border-box; font-size: 0px; text-align: center;">
		<div
			style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">Battery
			3.7v</div>
	</div>
</div>
</foreignObject>
<text x="300" y="24" fill="rgb(0, 0, 0)" font-family="Helvetica"
	font-size="12px" text-anchor="middle">Battery 3.7v</text></switch></g>
<rect x="280" y="120" width="120" height="40" fill="rgb(255, 255, 255)"
	stroke="rgb(0, 0, 0)" pointer-events="all" />
<g transform="translate(-0.5 -0.5)">
<switch>
<foreignObject pointer-events="none" width="100%" height="100%"
	requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"
	style="overflow: visible; text-align: left;">
<div xmlns="http://www.w3.org/1999/xhtml"
	style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 140px; margin-left: 281px;">
	<div data-drawio-colors="color: rgb(0, 0, 0); "
		style="box-sizing: border-box; font-size: 0px; text-align: center;">
		<div
			style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">ESP32</div>
	</div>
</div>
</foreignObject>
<text x="340" y="144" fill="rgb(0, 0, 0)" font-family="Helvetica"
	font-size="12px" text-anchor="middle">ESP32</text></switch></g>
<rect x="360" y="80" width="60" height="30" fill="none" stroke="none"
	pointer-events="all" />
<g transform="translate(-0.5 -0.5)">
<switch>
<foreignObject pointer-events="none" width="100%" height="100%"
	requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"
	style="overflow: visible; text-align: left;">
<div xmlns="http://www.w3.org/1999/xhtml"
	style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 58px; height: 1px; padding-top: 95px; margin-left: 361px;">
	<div data-drawio-colors="color: rgb(0, 0, 0); "
		style="box-sizing: border-box; font-size: 0px; text-align: center;">
		<div
			style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">JST
			connector</div>
	</div>
</div>
</foreignObject>
<text x="390" y="99" fill="rgb(0, 0, 0)" font-family="Helvetica"
	font-size="12px" text-anchor="middle">JST connector</text></switch></g>
<path d="M 220 140 L 273.63 140" fill="none" stroke="rgb(0, 0, 0)"
	stroke-miterlimit="10" pointer-events="stroke" />
<path d="M 278.88 140 L 271.88 143.5 L 273.63 140 L 271.88 136.5 Z"
	fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10"
	pointer-events="all" />
<rect x="100" y="120" width="120" height="40" fill="rgb(255, 255, 255)"
	stroke="rgb(0, 0, 0)" pointer-events="all" />
<g transform="translate(-0.5 -0.5)">
<switch>
<foreignObject pointer-events="none" width="100%" height="100%"
	requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"
	style="overflow: visible; text-align: left;">
<div xmlns="http://www.w3.org/1999/xhtml"
	style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 140px; margin-left: 101px;">
	<div data-drawio-colors="color: rgb(0, 0, 0); "
		style="box-sizing: border-box; font-size: 0px; text-align: center;">
		<div
			style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">
			Voltage<br />divider
		</div>
	</div>
</div>
</foreignObject>
<text x="160" y="144" fill="rgb(0, 0, 0)" font-family="Helvetica"
	font-size="12px" text-anchor="middle">Voltage&#xa;divider</text></switch></g>
<rect x="200" y="160" width="80" height="50" fill="none" stroke="none"
	pointer-events="all" />
<g transform="translate(-0.5 -0.5)">
<switch>
<foreignObject pointer-events="none" width="100%" height="100%"
	requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"
	style="overflow: visible; text-align: left;">
<div xmlns="http://www.w3.org/1999/xhtml"
	style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 78px; height: 1px; padding-top: 185px; margin-left: 201px;">
	<div data-drawio-colors="color: rgb(0, 0, 0); "
		style="box-sizing: border-box; font-size: 0px; text-align: center;">
		<div
			style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">
			Battery<br />charge<br />level
		</div>
	</div>
</div>
</foreignObject>
<text x="240" y="189" fill="rgb(0, 0, 0)" font-family="Helvetica"
	font-size="12px" text-anchor="middle">Batterychargelevel...</text></switch></g></g>
<switch>
<g requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" />
<a transform="translate(0,-5)"
	xlink:href="https://www.diagrams.net/doc/faq/svg-export-text-problems"
	target="_blank"><text text-anchor="middle" font-size="10px" x="50%"
		y="100%">Text is not SVG - cannot display</text></a></switch></svg>
</div>
<p>The idea is quite simple:</p>
<ul>
<li>A 6V solar panel is connected to a special controller.</li>
<li>This controller should do the following:
<ul>
<li>Charge the battery.</li>
<li>Monitor the charging voltage and battery discharge level.</li>
<li>Disconnect the battery from the load during heavy discharge.</li>
<li>Monitor the current consumption from the solar panel (MPTT).</li>
</ul>
</li>
<li>A Li-ion battery should operate at night when there is no sun, and the panel does not generate enough energy.</li>
<li>ESP32 board with LoRa receiver.</li>
<li>(Optional) Voltage divider for monitoring battery charge.</li>
</ul>
<p>Since the scheme is quite standard, you can find <a href="https://www.youtube.com/watch?v=WdP4nVQX-j0">many different guides</a> and descriptions online.</p>
<h2 id="algorithm">Algorithm</h2>
<p>The software part is not as colorful as &ldquo;hello world&rdquo; and is more complex to find. The primary and only way to reduce power consumption is to put the processor into deep sleep mode. In this mode, most processor modules are turned off, and power consumption is minimal — 10 microamps.</p>
<p><img src="/img/lora-deep-sleep/4.png" alt=""></p>
<p>The ordinary linear program changes completely in this mode. I came up with the following algorithm:</p>
<div>
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg xmlns="http://www.w3.org/2000/svg"
	xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1"
	viewBox="-0.5 -0.5 486 721">
<defs />
<g>
<path d="M 195 190 L 195 223.63" fill="none" stroke="rgb(0, 0, 0)"
	stroke-miterlimit="10" pointer-events="stroke" />
<path d="M 195 228.88 L 191.5 221.88 L 195 223.63 L 198.5 221.88 Z"
	fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10"
	pointer-events="all" />
<rect x="135" y="150" width="120" height="40" fill="rgb(255, 255, 255)"
	stroke="rgb(0, 0, 0)" pointer-events="all" />
<g transform="translate(-0.5 -0.5)">
<switch>
<foreignObject pointer-events="none" width="100%" height="100%"
	requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"
	style="overflow: visible; text-align: left;">
<div xmlns="http://www.w3.org/1999/xhtml"
	style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 170px; margin-left: 136px;">
	<div data-drawio-colors="color: rgb(0, 0, 0); "
		style="box-sizing: border-box; font-size: 0px; text-align: center;">
		<div
			style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">
			Get<br />observation time<br />
		</div>
	</div>
</div>
</foreignObject>
<text x="195" y="174" fill="rgb(0, 0, 0)" font-family="Helvetica"
	font-size="12px" text-anchor="middle">Получитьвремя
наблюдения...</text></switch></g>
<path d="M 195 110 L 195 143.63" fill="none" stroke="rgb(0, 0, 0)"
	stroke-miterlimit="10" pointer-events="stroke" />
<path d="M 195 148.88 L 191.5 141.88 L 195 143.63 L 198.5 141.88 Z"
	fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10"
	pointer-events="all" />
<path d="M 255 75 L 355 75 L 355 103.63" fill="none"
	stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke" />
<path d="M 355 108.88 L 351.5 101.88 L 355 103.63 L 358.5 101.88 Z"
	fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10"
	pointer-events="all" />
<path d="M 195 40 L 255 75 L 195 110 L 135 75 Z"
	fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10"
	pointer-events="all" />
<g transform="translate(-0.5 -0.5)">
<switch>
<foreignObject pointer-events="none" width="100%" height="100%"
	requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"
	style="overflow: visible; text-align: left;">
<div xmlns="http://www.w3.org/1999/xhtml"
	style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 75px; margin-left: 136px;">
	<div data-drawio-colors="color: rgb(0, 0, 0); "
		style="box-sizing: border-box; font-size: 0px; text-align: center;">
		<div
			style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">
			<span
				style="caret-color: rgb(0, 0, 0); color: rgb(0, 0, 0); font-family: Helvetica; font-size: 12px; font-style: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; text-align: center; text-indent: 0px; text-transform: none; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(248, 249, 250); text-decoration: none; float: none; display: inline !important;">Exit
				from</span><br
				style="caret-color: rgb(0, 0, 0); color: rgb(0, 0, 0); font-family: Helvetica; font-size: 12px; font-style: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; text-align: center; text-indent: 0px; text-transform: none; word-spacing: 0px; -webkit-text-stroke-width: 0px; text-decoration: none;" />
			<span
				style="caret-color: rgb(0, 0, 0); color: rgb(0, 0, 0); font-family: Helvetica; font-size: 12px; font-style: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; text-align: center; text-indent: 0px; text-transform: none; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(248, 249, 250); text-decoration: none; float: none; display: inline !important;">sleep?</span>
		</div>
	</div>
</div>
</foreignObject>
<text x="195" y="79" fill="rgb(0, 0, 0)" font-family="Helvetica"
	font-size="12px" text-anchor="middle">Выход из...</text></switch></g>
<path d="M 255 275 L 355 275 L 355 673.63" fill="none"
	stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke" />
<path d="M 355 678.88 L 351.5 671.88 L 355 673.63 L 358.5 671.88 Z"
	fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10"
	pointer-events="all" />
<path d="M 195 320 L 195 340 L 195 330 L 195 343.63" fill="none"
	stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke" />
<path d="M 195 348.88 L 191.5 341.88 L 195 343.63 L 198.5 341.88 Z"
	fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10"
	pointer-events="all" />
<path d="M 195 230 L 255 275 L 195 320 L 135 275 Z"
	fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10"
	pointer-events="all" />
<g transform="translate(-0.5 -0.5)">
<switch>
<foreignObject pointer-events="none" width="100%" height="100%"
	requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"
	style="overflow: visible; text-align: left;">
<div xmlns="http://www.w3.org/1999/xhtml"
	style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 275px; margin-left: 136px;">
	<div data-drawio-colors="color: rgb(0, 0, 0); "
		style="box-sizing: border-box; font-size: 0px; text-align: center;">
		<div
			style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">
			Start<br />observation?
		</div>
	</div>
</div>
</foreignObject>
<text x="195" y="279" fill="rgb(0, 0, 0)" font-family="Helvetica"
	font-size="12px" text-anchor="middle">Настало время...</text></switch></g>
<path d="M 355 150 L 355 183.63" fill="none" stroke="rgb(0, 0, 0)"
	stroke-miterlimit="10" pointer-events="stroke" />
<path d="M 355 188.88 L 351.5 181.88 L 355 183.63 L 358.5 181.88 Z"
	fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10"
	pointer-events="all" />
<rect x="295" y="110" width="120" height="40" fill="rgb(255, 255, 255)"
	stroke="rgb(0, 0, 0)" pointer-events="all" />
<g transform="translate(-0.5 -0.5)">
<switch>
<foreignObject pointer-events="none" width="100%" height="100%"
	requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"
	style="overflow: visible; text-align: left;">
<div xmlns="http://www.w3.org/1999/xhtml"
	style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 130px; margin-left: 296px;">
	<div data-drawio-colors="color: rgb(0, 0, 0); "
		style="box-sizing: border-box; font-size: 0px; text-align: center;">
		<div
			style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">Await
			command</div>
	</div>
</div>
</foreignObject>
<text x="355" y="134" fill="rgb(0, 0, 0)" font-family="Helvetica"
	font-size="12px" text-anchor="middle">Ожидать команду</text></switch></g>
<rect x="295" y="680" width="120" height="40" fill="rgb(255, 255, 255)"
	stroke="rgb(0, 0, 0)" pointer-events="all" />
<g transform="translate(-0.5 -0.5)">
<switch>
<foreignObject pointer-events="none" width="100%" height="100%"
	requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"
	style="overflow: visible; text-align: left;">
<div xmlns="http://www.w3.org/1999/xhtml"
	style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 700px; margin-left: 296px;">
	<div data-drawio-colors="color: rgb(0, 0, 0); "
		style="box-sizing: border-box; font-size: 0px; text-align: center;">
		<div
			style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">Enter
			deep sleep</div>
	</div>
</div>
</foreignObject>
<text x="355" y="704" fill="rgb(0, 0, 0)" font-family="Helvetica"
	font-size="12px" text-anchor="middle">Перейти в режим сна</text></switch></g>
<path d="M 355 260 L 355 673.63" fill="none" stroke="rgb(0, 0, 0)"
	stroke-miterlimit="10" pointer-events="stroke" />
<path d="M 355 678.88 L 351.5 671.88 L 355 673.63 L 358.5 671.88 Z"
	fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10"
	pointer-events="all" />
<path d="M 435 225 L 455 225 L 455 130 L 421.37 130" fill="none"
	stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke" />
<path d="M 416.12 130 L 423.12 126.5 L 421.37 130 L 423.12 133.5 Z"
	fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10"
	pointer-events="all" />
<path d="M 355 190 L 435 225 L 355 260 L 275 225 Z"
	fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10"
	pointer-events="all" />
<g transform="translate(-0.5 -0.5)">
<switch>
<foreignObject pointer-events="none" width="100%" height="100%"
	requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"
	style="overflow: visible; text-align: left;">
<div xmlns="http://www.w3.org/1999/xhtml"
	style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 158px; height: 1px; padding-top: 225px; margin-left: 276px;">
	<div data-drawio-colors="color: rgb(0, 0, 0); "
		style="box-sizing: border-box; font-size: 0px; text-align: center;">
		<div
			style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">
			Inactivity <br />timeout?
		</div>
	</div>
</div>
</foreignObject>
<text x="355" y="229" fill="rgb(0, 0, 0)" font-family="Helvetica"
	font-size="12px" text-anchor="middle">Таймер...</text></switch></g>
<path d="M 195 390 L 195 423.63" fill="none" stroke="rgb(0, 0, 0)"
	stroke-miterlimit="10" pointer-events="stroke" />
<path d="M 195 428.88 L 191.5 421.88 L 195 423.63 L 198.5 421.88 Z"
	fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10"
	pointer-events="all" />
<rect x="135" y="350" width="120" height="40" fill="rgb(255, 255, 255)"
	stroke="rgb(0, 0, 0)" pointer-events="all" />
<g transform="translate(-0.5 -0.5)">
<switch>
<foreignObject pointer-events="none" width="100%" height="100%"
	requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"
	style="overflow: visible; text-align: left;">
<div xmlns="http://www.w3.org/1999/xhtml"
	style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 370px; margin-left: 136px;">
	<div data-drawio-colors="color: rgb(0, 0, 0); "
		style="box-sizing: border-box; font-size: 0px; text-align: center;">
		<div
			style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">Start
			LoRa RX</div>
	</div>
</div>
</foreignObject>
<text x="195" y="374" fill="rgb(0, 0, 0)" font-family="Helvetica"
	font-size="12px" text-anchor="middle">Запустить приёмник LoRa</text></switch></g>
<path d="M 170 640 L 355 640 L 355 673.63" fill="none"
	stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke" />
<path d="M 355 678.88 L 351.5 671.88 L 355 673.63 L 358.5 671.88 Z"
	fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10"
	pointer-events="all" />
<path d="M 50 640 L 25 640 L 25 410 L 188.63 410" fill="none"
	stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke" />
<path d="M 193.88 410 L 186.88 413.5 L 188.63 410 L 186.88 406.5 Z"
	fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10"
	pointer-events="all" />
<path d="M 110 600 L 170 640 L 110 680 L 50 640 Z"
	fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10"
	pointer-events="all" />
<g transform="translate(-0.5 -0.5)">
<switch>
<foreignObject pointer-events="none" width="100%" height="100%"
	requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"
	style="overflow: visible; text-align: left;">
<div xmlns="http://www.w3.org/1999/xhtml"
	style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 640px; margin-left: 51px;">
	<div data-drawio-colors="color: rgb(0, 0, 0); "
		style="box-sizing: border-box; font-size: 0px; text-align: center;">
		<div
			style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">
			Observation<br />complete?
		</div>
	</div>
</div>
</foreignObject>
<text x="110" y="644" fill="rgb(0, 0, 0)" font-family="Helvetica"
	font-size="12px" text-anchor="middle">Наблюдение&#xa;завершено?</text></switch></g>
<rect x="255" y="50" width="50" height="20" fill="none" stroke="none"
	pointer-events="all" />
<g transform="translate(-0.5 -0.5)">
<switch>
<foreignObject pointer-events="none" width="100%" height="100%"
	requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"
	style="overflow: visible; text-align: left;">
<div xmlns="http://www.w3.org/1999/xhtml"
	style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 48px; height: 1px; padding-top: 60px; margin-left: 256px;">
	<div data-drawio-colors="color: rgb(0, 0, 0); "
		style="box-sizing: border-box; font-size: 0px; text-align: center;">
		<div
			style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">No</div>
	</div>
</div>
</foreignObject>
<text x="280" y="64" fill="rgb(0, 0, 0)" font-family="Helvetica"
	font-size="12px" text-anchor="middle">Нет</text></switch></g>
<rect x="435" y="230" width="50" height="20" fill="none" stroke="none"
	pointer-events="all" />
<g transform="translate(-0.5 -0.5)">
<switch>
<foreignObject pointer-events="none" width="100%" height="100%"
	requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"
	style="overflow: visible; text-align: left;">
<div xmlns="http://www.w3.org/1999/xhtml"
	style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 48px; height: 1px; padding-top: 240px; margin-left: 436px;">
	<div data-drawio-colors="color: rgb(0, 0, 0); "
		style="box-sizing: border-box; font-size: 0px; text-align: center;">
		<div
			style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">No</div>
	</div>
</div>
</foreignObject>
<text x="460" y="244" fill="rgb(0, 0, 0)" font-family="Helvetica"
	font-size="12px" text-anchor="middle">Нет</text></switch></g>
<rect x="255" y="250" width="50" height="20" fill="none" stroke="none"
	pointer-events="all" />
<g transform="translate(-0.5 -0.5)">
<switch>
<foreignObject pointer-events="none" width="100%" height="100%"
	requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"
	style="overflow: visible; text-align: left;">
<div xmlns="http://www.w3.org/1999/xhtml"
	style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 48px; height: 1px; padding-top: 260px; margin-left: 256px;">
	<div data-drawio-colors="color: rgb(0, 0, 0); "
		style="box-sizing: border-box; font-size: 0px; text-align: center;">
		<div
			style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">No</div>
	</div>
</div>
</foreignObject>
<text x="280" y="264" fill="rgb(0, 0, 0)" font-family="Helvetica"
	font-size="12px" text-anchor="middle">Нет</text></switch></g>
<rect x="85" y="440" width="50" height="20" fill="none" stroke="none"
	pointer-events="all" />
<g transform="translate(-0.5 -0.5)">
<switch>
<foreignObject pointer-events="none" width="100%" height="100%"
	requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"
	style="overflow: visible; text-align: left;">
<div xmlns="http://www.w3.org/1999/xhtml"
	style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 48px; height: 1px; padding-top: 450px; margin-left: 86px;">
	<div data-drawio-colors="color: rgb(0, 0, 0); "
		style="box-sizing: border-box; font-size: 0px; text-align: center;">
		<div
			style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">No</div>
	</div>
</div>
</foreignObject>
<text x="110" y="454" fill="rgb(0, 0, 0)" font-family="Helvetica"
	font-size="12px" text-anchor="middle">Нет</text></switch></g>
<rect x="155" y="110" width="45" height="20" fill="none" stroke="none"
	pointer-events="all" />
<g transform="translate(-0.5 -0.5)">
<switch>
<foreignObject pointer-events="none" width="100%" height="100%"
	requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"
	style="overflow: visible; text-align: left;">
<div xmlns="http://www.w3.org/1999/xhtml"
	style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 43px; height: 1px; padding-top: 120px; margin-left: 156px;">
	<div data-drawio-colors="color: rgb(0, 0, 0); "
		style="box-sizing: border-box; font-size: 0px; text-align: center;">
		<div
			style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">Yes</div>
	</div>
</div>
</foreignObject>
<text x="178" y="124" fill="rgb(0, 0, 0)" font-family="Helvetica"
	font-size="12px" text-anchor="middle">Да</text></switch></g>
<rect x="200" y="320" width="45" height="20" fill="none" stroke="none"
	pointer-events="all" />
<g transform="translate(-0.5 -0.5)">
<switch>
<foreignObject pointer-events="none" width="100%" height="100%"
	requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"
	style="overflow: visible; text-align: left;">
<div xmlns="http://www.w3.org/1999/xhtml"
	style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 43px; height: 1px; padding-top: 330px; margin-left: 201px;">
	<div data-drawio-colors="color: rgb(0, 0, 0); "
		style="box-sizing: border-box; font-size: 0px; text-align: center;">
		<div
			style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">Yes</div>
	</div>
</div>
</foreignObject>
<text x="223" y="334" fill="rgb(0, 0, 0)" font-family="Helvetica"
	font-size="12px" text-anchor="middle">Да</text></switch></g>
<rect x="355" y="265" width="45" height="20" fill="none" stroke="none"
	pointer-events="all" />
<g transform="translate(-0.5 -0.5)">
<switch>
<foreignObject pointer-events="none" width="100%" height="100%"
	requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"
	style="overflow: visible; text-align: left;">
<div xmlns="http://www.w3.org/1999/xhtml"
	style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 43px; height: 1px; padding-top: 275px; margin-left: 356px;">
	<div data-drawio-colors="color: rgb(0, 0, 0); "
		style="box-sizing: border-box; font-size: 0px; text-align: center;">
		<div
			style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">Yes</div>
	</div>
</div>
</foreignObject>
<text x="378" y="279" fill="rgb(0, 0, 0)" font-family="Helvetica"
	font-size="12px" text-anchor="middle">Да</text></switch></g>
<rect x="200" y="505" width="45" height="20" fill="none" stroke="none"
	pointer-events="all" />
<g transform="translate(-0.5 -0.5)">
<switch>
<foreignObject pointer-events="none" width="100%" height="100%"
	requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"
	style="overflow: visible; text-align: left;">
<div xmlns="http://www.w3.org/1999/xhtml"
	style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 43px; height: 1px; padding-top: 515px; margin-left: 201px;">
	<div data-drawio-colors="color: rgb(0, 0, 0); "
		style="box-sizing: border-box; font-size: 0px; text-align: center;">
		<div
			style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">Yes</div>
	</div>
</div>
</foreignObject>
<text x="223" y="519" fill="rgb(0, 0, 0)" font-family="Helvetica"
	font-size="12px" text-anchor="middle">Yes</text></switch></g>
<path d="M 195 500 L 195 533.63" fill="none" stroke="rgb(0, 0, 0)"
	stroke-miterlimit="10" pointer-events="stroke" />
<path d="M 195 538.88 L 191.5 531.88 L 195 533.63 L 198.5 531.88 Z"
	fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10"
	pointer-events="all" />
<path d="M 135 465 L 110 465 L 110 593.63" fill="none"
	stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke" />
<path d="M 110 598.88 L 106.5 591.88 L 110 593.63 L 113.5 591.88 Z"
	fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10"
	pointer-events="all" />
<path d="M 195 430 L 255 465 L 195 500 L 135 465 Z"
	fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10"
	pointer-events="all" />
<g transform="translate(-0.5 -0.5)">
<switch>
<foreignObject pointer-events="none" width="100%" height="100%"
	requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"
	style="overflow: visible; text-align: left;">
<div xmlns="http://www.w3.org/1999/xhtml"
	style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 465px; margin-left: 136px;">
	<div data-drawio-colors="color: rgb(0, 0, 0); "
		style="box-sizing: border-box; font-size: 0px; text-align: center;">
		<div
			style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">
			Message<br />received?
		</div>
	</div>
</div>
</foreignObject>
<text x="195" y="469" fill="rgb(0, 0, 0)" font-family="Helvetica"
	font-size="12px" text-anchor="middle">Сообщение&#xa;получено?</text></switch></g>
<path d="M 255 560 L 275 560 L 275 410 L 195 410 L 195 423.63"
	fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10"
	pointer-events="stroke" />
<path d="M 195 428.88 L 191.5 421.88 L 195 423.63 L 198.5 421.88 Z"
	fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10"
	pointer-events="all" />
<rect x="135" y="540" width="120" height="40" fill="rgb(255, 255, 255)"
	stroke="rgb(0, 0, 0)" pointer-events="all" />
<g transform="translate(-0.5 -0.5)">
<switch>
<foreignObject pointer-events="none" width="100%" height="100%"
	requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"
	style="overflow: visible; text-align: left;">
<div xmlns="http://www.w3.org/1999/xhtml"
	style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 560px; margin-left: 136px;">
	<div data-drawio-colors="color: rgb(0, 0, 0); "
		style="box-sizing: border-box; font-size: 0px; text-align: center;">
		<div
			style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">
			Send via <br />bluetooth
		</div>
	</div>
</div>
</foreignObject>
<text x="195" y="564" fill="rgb(0, 0, 0)" font-family="Helvetica"
	font-size="12px" text-anchor="middle">Отправить по...</text></switch></g>
<rect x="170" y="620" width="45" height="20" fill="none" stroke="none"
	pointer-events="all" />
<g transform="translate(-0.5 -0.5)">
<switch>
<foreignObject pointer-events="none" width="100%" height="100%"
	requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"
	style="overflow: visible; text-align: left;">
<div xmlns="http://www.w3.org/1999/xhtml"
	style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 43px; height: 1px; padding-top: 630px; margin-left: 171px;">
	<div data-drawio-colors="color: rgb(0, 0, 0); "
		style="box-sizing: border-box; font-size: 0px; text-align: center;">
		<div
			style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">Yes</div>
	</div>
</div>
</foreignObject>
<text x="193" y="634" fill="rgb(0, 0, 0)" font-family="Helvetica"
	font-size="12px" text-anchor="middle">Да</text></switch></g>
<rect x="0" y="640" width="50" height="20" fill="none" stroke="none"
	pointer-events="all" />
<g transform="translate(-0.5 -0.5)">
<switch>
<foreignObject pointer-events="none" width="100%" height="100%"
	requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"
	style="overflow: visible; text-align: left;">
<div xmlns="http://www.w3.org/1999/xhtml"
	style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 48px; height: 1px; padding-top: 650px; margin-left: 1px;">
	<div data-drawio-colors="color: rgb(0, 0, 0); "
		style="box-sizing: border-box; font-size: 0px; text-align: center;">
		<div
			style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">No</div>
	</div>
</div>
</foreignObject>
<text x="25" y="654" fill="rgb(0, 0, 0)" font-family="Helvetica"
	font-size="12px" text-anchor="middle">Нет</text></switch></g>
<path d="M 195 40 L 195 0" fill="none" stroke="rgb(0, 0, 0)"
	stroke-miterlimit="10" pointer-events="stroke" /></g>
<switch>
<g requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" />
<a transform="translate(0,-5)"
	xlink:href="https://www.diagrams.net/doc/faq/svg-export-text-problems"
	target="_blank"><text text-anchor="middle" font-size="10px" x="50%"
		y="100%">Text is not SVG - cannot display</text></a></switch></svg>
</div>
<p>Firstly, I need the firmware to support both deep sleep mode and AT commands. AT commands are extremely convenient for debugging. However, the serial bus is not available in deep sleep mode. To overcome this, I created a special inactivity timer. If there are no commands for a certain period, the processor goes into deep sleep mode. In this mode, it periodically wakes up, receives the time of the next observation via Bluetooth, and goes back to sleep. Since the wake-up cycle is quite short, it&rsquo;s practically impossible to send an AT command. To send an AT command to the device in deep sleep mode, you need to manually restart the ESP32. It&rsquo;s a bit inconvenient, but you can live with it during debugging or temporarily disable deep sleep mode.</p>
<p>Secondly, Bluetooth is used for communication with Raspberry Pi. This protocol is not the most energy-efficient, and it would be logical to use LoRa to send data. Unfortunately, Raspberry Pi does not have a LoRa module, and a separate one is <a href="https://thepihut.com/products/sx1262-lora-hat-for-raspberry-pi-868mhz-for-europe-asia-africa">quite expensive</a>. The good news is that both ESP32 and Raspberry Pi support the energy-efficient version of Bluetooth - Bluetooth Low Energy (BLE), which makes sense to use. Integration via Bluetooth deserves a separate article.</p>
<h2 id="power-consumption-measurement">Power Consumption Measurement</h2>
<p>At this point, I was hit by vibes from physics laboratory work at the university. With one exception - this time I&rsquo;m really interested in understanding the physics of the process. For measurements, I used the A3-B USB tester, which I reviewed in one of the <a href="https://dernasherbrezon.com/en/posts/smart-usb-meter-a3-b/">previous articles</a>. The results were as follows:</p>
<ul>
<li>In deep sleep mode: 6 mA</li>
<li>In signal reception mode: 86 mA</li>
</ul>
<p>On average, all satellites with LoRa transmitters pass by for 313 minutes a day. Then all the remaining deep sleep time will be 1127 minutes. Total:</p>
<pre><code>323 min * 86 mA + 1127 min * 6 mA = 575.66 mAh
</code></pre><p>Or in terms of power:</p>
<pre><code>575.66 mAh * 3.3 V = 1.8997 Wh
</code></pre><p>1.8997 Wh per day. It&rsquo;s not entirely clear whether this is a lot or a little. To understand this, we need to estimate the theoretical power that can be obtained from solar panels.</p>
<h2 id="theoretical-power">Theoretical Power</h2>
<p>In <a href="https://www.youtube.com/watch?v=WdP4nVQX-j0">this video</a>, it is explained very well how to calculate the theoretical power from solar panels. In my case, the input parameters are as follows:</p>
<ul>
<li>City: London</li>
<li>6V 1W solar panel with an area of 11 cm * 6 cm. Yes, I chose the smallest 6V solar panel. But I got three at a discount.</li>
<li>Average efficiency of such panels - 15%</li>
<li>Controller and voltage reduction efficiency are considered an additional 5%</li>
<li>Panel orientation - strictly upward</li>
<li>Month: December. The cloudiest month of the year with the shortest duration of daylight.</li>
</ul>
<p>Total:</p>
<pre><code>600 Wh/m2 * (15% - 5%) = 60 Wh/m2 = 0.006 Wh/cm2
</code></pre><p>Converted to my solar panel:</p>
<pre><code>0.006 Wh/cm2 * (11 cm * 6 cm) = 0.396 Wh
</code></pre><p>The calculations are very averaged, and energy may be twice as much on one sunny day and half as much on another day. Nevertheless, it turns out that my solar panel won&rsquo;t be enough (0.396 Wh &lt; 1.8997 Wh).</p>
<p>Since it won&rsquo;t be enough for a whole day, maybe it will be just enough for a bit? To find out, I opened <a href="https://en.tutiempo.net/solar-radiation/london.html">this website</a> to see how much energy I can theoretically get with an hourly breakdown.</p>
<p><img src="/img/lora-deep-sleep/3.png" alt=""></p>
<p>So, at 12 PM, I can get 221 Wh/m2.</p>
<pre><code>221 Wh/m2 * (15% - 5%) = 22.1 Wh/m2 = 0.00221 Wh/cm2 * (11 cm * 6 cm) = 0.14586 Wh
</code></pre><p>And the average consumption of ESP32:</p>
<pre><code>1.8997 Wh / 24 = 0.07915 Wh
</code></pre><p>It turns out that there will be enough energy. Thus, the entire station will start around 11-12, work for at most one or two hours, and turn off until the next day. The battery will constantly be in a discharged state and will only charge slightly at 0.06671 Wh, to then discharge again.</p>
<h2 id="power-consumption-optimization">Power Consumption Optimization</h2>
<p>The most obvious methods that come to mind without Google:</p>
<ul>
<li>Connect another small panel. 0.396 Wh * 2 = 0.792 Wh - still not great.</li>
<li>Move to Dubai.</li>
<li>Reduce the number of satellite observations.</li>
<li>Optimize the code.</li>
</ul>
<p>The third and fourth points look very enticing. So, if we leave only one observation per day:</p>
<pre><code>10 min * 86 mA + 1430 min * 6 mA = 860 mAmin + 8580 mAmin = 157.33 mAh * 3.3 V = 519.2 Wh
</code></pre><p>Even for one observation per day, one solar panel will be insufficient. At least two are needed.</p>
<p>It&rsquo;s time to optimize the code.</p>
<h2 id="code-optimization">Code Optimization</h2>
<p>In the table below, I&rsquo;ve compiled all the techniques I could find on the internet.</p>
<table>
	<thead>
		<tr>
			<th>Method</th>
			<th>Consumption</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td>Default empty project</td>
			<td>70mA</td>
		</tr>
		<tr>
			<td>Enabled LoRa receiver</td>
			<td>86mA</td>
		</tr>
		<tr>
			<td>Empty project with reduced frequency - 80 MHz<br/>Minimum frequency for Bluetooth operation</td>
			<td>30mA</td>
		</tr>
		<tr>
			<td>Enabled LoRa receiver with reduced ESP32 frequency</td>
			<td>46mA</td>
		</tr>
		<tr>
			<td>Deep sleep</td>
			<td>6mA</td>
		</tr>
		<tr>
			<td><a href="https://github.com/Heltec-Aaron-Lee/WiFi_Kit_series/issues/6#issuecomment-403254130">Using power through JST connector</a>, not 5V USB</td>
			<td>Apparently small currents, and  <a href="https://www.youtube.com/watch?v=LUB8RWzzLWc">measuring with a multimeter may not work</a></td>
		</tr>
		<tr>
			<td>Enabled LoRa receiver with ESP32 in deep sleep</td>
			<td>16mA</td>
		</tr>
	</tbody>
</table>
<p>So, the most interesting method is the last one. I accidentally stumbled upon it in <a href="https://learn.circuit.rocks/esp32-lora-gateway-battery-optimized">this article</a>. The point is that the ESP32 can wake up from deep sleep in several ways - by timer, by changing the voltage on an external pin, or by interrupt. Moreover, when the LoRa receiver receives a message, it also generates an interrupt! The working algorithm in this case is as follows:</p>
<div>
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg xmlns="http://www.w3.org/2000/svg"
	xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1"
	viewBox="-0.5 -0.5 486 791">
<defs />
<g>
<path d="M 195 260 L 195 293.63" fill="none" stroke="rgb(0, 0, 0)"
	stroke-miterlimit="10" pointer-events="stroke" />
<path d="M 195 298.88 L 191.5 291.88 L 195 293.63 L 198.5 291.88 Z"
	fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10"
	pointer-events="all" />
<rect x="135" y="220" width="120" height="40" fill="rgb(255, 255, 255)"
	stroke="rgb(0, 0, 0)" pointer-events="all" />
<g transform="translate(-0.5 -0.5)">
<switch>
<foreignObject pointer-events="none" width="100%" height="100%"
	requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"
	style="overflow: visible; text-align: left;">
<div xmlns="http://www.w3.org/1999/xhtml"
	style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 240px; margin-left: 136px;">
	<div data-drawio-colors="color: rgb(0, 0, 0); "
		style="box-sizing: border-box; font-size: 0px; text-align: center;">
		<div
			style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">
			Receive<br />observation time<br />
		</div>
	</div>
</div>
</foreignObject>
<text x="195" y="244" fill="rgb(0, 0, 0)" font-family="Helvetica"
	font-size="12px" text-anchor="middle">Получитьвремя
наблюдения...</text></switch></g>
<path d="M 255 65 L 355 65 L 355 173.63" fill="none"
	stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke" />
<path d="M 355 178.88 L 351.5 171.88 L 355 173.63 L 358.5 171.88 Z"
	fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10"
	pointer-events="all" />
<path d="M 195 100 L 195 120 L 195 100 L 195 113.63" fill="none"
	stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke" />
<path d="M 195 118.88 L 191.5 111.88 L 195 113.63 L 198.5 111.88 Z"
	fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10"
	pointer-events="all" />
<path d="M 195 30 L 255 65 L 195 100 L 135 65 Z"
	fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10"
	pointer-events="all" />
<g transform="translate(-0.5 -0.5)">
<switch>
<foreignObject pointer-events="none" width="100%" height="100%"
	requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"
	style="overflow: visible; text-align: left;">
<div xmlns="http://www.w3.org/1999/xhtml"
	style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 65px; margin-left: 136px;">
	<div data-drawio-colors="color: rgb(0, 0, 0); "
		style="box-sizing: border-box; font-size: 0px; text-align: center;">
		<div
			style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">
			<span
				style="caret-color: rgb(0, 0, 0); color: rgb(0, 0, 0); font-family: Helvetica; font-size: 12px; font-style: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; text-align: center; text-indent: 0px; text-transform: none; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(248, 249, 250); text-decoration: none; float: none; display: inline !important;">Exit
				from</span><br
				style="caret-color: rgb(0, 0, 0); color: rgb(0, 0, 0); font-family: Helvetica; font-size: 12px; font-style: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; text-align: center; text-indent: 0px; text-transform: none; word-spacing: 0px; -webkit-text-stroke-width: 0px; text-decoration: none;" />
			<span
				style="caret-color: rgb(0, 0, 0); color: rgb(0, 0, 0); font-family: Helvetica; font-size: 12px; font-style: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; text-align: center; text-indent: 0px; text-transform: none; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(248, 249, 250); text-decoration: none; float: none; display: inline !important;">sleep?</span>
		</div>
	</div>
</div>
</foreignObject>
<text x="195" y="69" fill="rgb(0, 0, 0)" font-family="Helvetica"
	font-size="12px" text-anchor="middle">Выход из...</text></switch></g>
<path d="M 255 345 L 355 345 L 355 743.63" fill="none"
	stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke" />
<path d="M 355 748.88 L 351.5 741.88 L 355 743.63 L 358.5 741.88 Z"
	fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10"
	pointer-events="all" />
<path d="M 195 390 L 195 410 L 195 400 L 195 413.63" fill="none"
	stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke" />
<path d="M 195 418.88 L 191.5 411.88 L 195 413.63 L 198.5 411.88 Z"
	fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10"
	pointer-events="all" />
<path d="M 195 300 L 255 345 L 195 390 L 135 345 Z"
	fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10"
	pointer-events="all" />
<g transform="translate(-0.5 -0.5)">
<switch>
<foreignObject pointer-events="none" width="100%" height="100%"
	requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"
	style="overflow: visible; text-align: left;">
<div xmlns="http://www.w3.org/1999/xhtml"
	style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 345px; margin-left: 136px;">
	<div data-drawio-colors="color: rgb(0, 0, 0); "
		style="box-sizing: border-box; font-size: 0px; text-align: center;">
		<div
			style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">
			Ready for<br />observation?
		</div>
	</div>
</div>
</foreignObject>
<text x="195" y="349" fill="rgb(0, 0, 0)" font-family="Helvetica"
	font-size="12px" text-anchor="middle">Настало время...</text></switch></g>
<path d="M 355 220 L 355 253.63" fill="none" stroke="rgb(0, 0, 0)"
	stroke-miterlimit="10" pointer-events="stroke" />
<path d="M 355 258.88 L 351.5 251.88 L 355 253.63 L 358.5 251.88 Z"
	fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10"
	pointer-events="all" />
<rect x="295" y="180" width="120" height="40" fill="rgb(255, 255, 255)"
	stroke="rgb(0, 0, 0)" pointer-events="all" />
<g transform="translate(-0.5 -0.5)">
<switch>
<foreignObject pointer-events="none" width="100%" height="100%"
	requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"
	style="overflow: visible; text-align: left;">
<div xmlns="http://www.w3.org/1999/xhtml"
	style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 200px; margin-left: 296px;">
	<div data-drawio-colors="color: rgb(0, 0, 0); "
		style="box-sizing: border-box; font-size: 0px; text-align: center;">
		<div
			style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">Await
			command</div>
	</div>
</div>
</foreignObject>
<text x="355" y="204" fill="rgb(0, 0, 0)" font-family="Helvetica"
	font-size="12px" text-anchor="middle">Ожидать команду</text></switch></g>
<rect x="295" y="750" width="120" height="40" fill="rgb(255, 255, 255)"
	stroke="rgb(0, 0, 0)" pointer-events="all" />
<g transform="translate(-0.5 -0.5)">
<switch>
<foreignObject pointer-events="none" width="100%" height="100%"
	requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"
	style="overflow: visible; text-align: left;">
<div xmlns="http://www.w3.org/1999/xhtml"
	style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 770px; margin-left: 296px;">
	<div data-drawio-colors="color: rgb(0, 0, 0); "
		style="box-sizing: border-box; font-size: 0px; text-align: center;">
		<div
			style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">Enter
			deep sleep</div>
	</div>
</div>
</foreignObject>
<text x="355" y="774" fill="rgb(0, 0, 0)" font-family="Helvetica"
	font-size="12px" text-anchor="middle">Перейти в режим сна</text></switch></g>
<path d="M 355 330 L 355 743.63" fill="none" stroke="rgb(0, 0, 0)"
	stroke-miterlimit="10" pointer-events="stroke" />
<path d="M 355 748.88 L 351.5 741.88 L 355 743.63 L 358.5 741.88 Z"
	fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10"
	pointer-events="all" />
<path d="M 435 295 L 455 295 L 455 200 L 421.37 200" fill="none"
	stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke" />
<path d="M 416.12 200 L 423.12 196.5 L 421.37 200 L 423.12 203.5 Z"
	fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10"
	pointer-events="all" />
<path d="M 355 260 L 435 295 L 355 330 L 275 295 Z"
	fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10"
	pointer-events="all" />
<g transform="translate(-0.5 -0.5)">
<switch>
<foreignObject pointer-events="none" width="100%" height="100%"
	requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"
	style="overflow: visible; text-align: left;">
<div xmlns="http://www.w3.org/1999/xhtml"
	style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 158px; height: 1px; padding-top: 295px; margin-left: 276px;">
	<div data-drawio-colors="color: rgb(0, 0, 0); "
		style="box-sizing: border-box; font-size: 0px; text-align: center;">
		<div
			style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">
			Inactivity <br />timeout?
		</div>
	</div>
</div>
</foreignObject>
<text x="355" y="299" fill="rgb(0, 0, 0)" font-family="Helvetica"
	font-size="12px" text-anchor="middle">Таймер...</text></switch></g>
<path d="M 195 460 L 195 493.63" fill="none" stroke="rgb(0, 0, 0)"
	stroke-miterlimit="10" pointer-events="stroke" />
<path d="M 195 498.88 L 191.5 491.88 L 195 493.63 L 198.5 491.88 Z"
	fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10"
	pointer-events="all" />
<rect x="135" y="420" width="120" height="40" fill="rgb(255, 255, 255)"
	stroke="rgb(0, 0, 0)" pointer-events="all" />
<g transform="translate(-0.5 -0.5)">
<switch>
<foreignObject pointer-events="none" width="100%" height="100%"
	requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"
	style="overflow: visible; text-align: left;">
<div xmlns="http://www.w3.org/1999/xhtml"
	style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 440px; margin-left: 136px;">
	<div data-drawio-colors="color: rgb(0, 0, 0); "
		style="box-sizing: border-box; font-size: 0px; text-align: center;">
		<div
			style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">Start
			LoRa RX</div>
	</div>
</div>
</foreignObject>
<text x="195" y="444" fill="rgb(0, 0, 0)" font-family="Helvetica"
	font-size="12px" text-anchor="middle">Запустить приёмник LoRa</text></switch></g>
<path d="M 170 710 L 355 710 L 355 743.63" fill="none"
	stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke" />
<path d="M 355 748.88 L 351.5 741.88 L 355 743.63 L 358.5 741.88 Z"
	fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10"
	pointer-events="all" />
<path d="M 50 710 L 25 710 L 25 480 L 188.63 480" fill="none"
	stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke" />
<path d="M 193.88 480 L 186.88 483.5 L 188.63 480 L 186.88 476.5 Z"
	fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10"
	pointer-events="all" />
<path d="M 110 670 L 170 710 L 110 750 L 50 710 Z"
	fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10"
	pointer-events="all" />
<g transform="translate(-0.5 -0.5)">
<switch>
<foreignObject pointer-events="none" width="100%" height="100%"
	requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"
	style="overflow: visible; text-align: left;">
<div xmlns="http://www.w3.org/1999/xhtml"
	style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 710px; margin-left: 51px;">
	<div data-drawio-colors="color: rgb(0, 0, 0); "
		style="box-sizing: border-box; font-size: 0px; text-align: center;">
		<div
			style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">
			Observation<br />complete?
		</div>
	</div>
</div>
</foreignObject>
<text x="110" y="714" fill="rgb(0, 0, 0)" font-family="Helvetica"
	font-size="12px" text-anchor="middle">Наблюдение&#xa;завершено?</text></switch></g>
<rect x="255" y="40" width="50" height="20" fill="none" stroke="none"
	pointer-events="all" />
<g transform="translate(-0.5 -0.5)">
<switch>
<foreignObject pointer-events="none" width="100%" height="100%"
	requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"
	style="overflow: visible; text-align: left;">
<div xmlns="http://www.w3.org/1999/xhtml"
	style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 48px; height: 1px; padding-top: 50px; margin-left: 256px;">
	<div data-drawio-colors="color: rgb(0, 0, 0); "
		style="box-sizing: border-box; font-size: 0px; text-align: center;">
		<div
			style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">No</div>
	</div>
</div>
</foreignObject>
<text x="280" y="54" fill="rgb(0, 0, 0)" font-family="Helvetica"
	font-size="12px" text-anchor="middle">Нет</text></switch></g>
<rect x="435" y="300" width="50" height="20" fill="none" stroke="none"
	pointer-events="all" />
<g transform="translate(-0.5 -0.5)">
<switch>
<foreignObject pointer-events="none" width="100%" height="100%"
	requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"
	style="overflow: visible; text-align: left;">
<div xmlns="http://www.w3.org/1999/xhtml"
	style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 48px; height: 1px; padding-top: 310px; margin-left: 436px;">
	<div data-drawio-colors="color: rgb(0, 0, 0); "
		style="box-sizing: border-box; font-size: 0px; text-align: center;">
		<div
			style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">No</div>
	</div>
</div>
</foreignObject>
<text x="460" y="314" fill="rgb(0, 0, 0)" font-family="Helvetica"
	font-size="12px" text-anchor="middle">Нет</text></switch></g>
<rect x="255" y="320" width="50" height="20" fill="none" stroke="none"
	pointer-events="all" />
<g transform="translate(-0.5 -0.5)">
<switch>
<foreignObject pointer-events="none" width="100%" height="100%"
	requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"
	style="overflow: visible; text-align: left;">
<div xmlns="http://www.w3.org/1999/xhtml"
	style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 48px; height: 1px; padding-top: 330px; margin-left: 256px;">
	<div data-drawio-colors="color: rgb(0, 0, 0); "
		style="box-sizing: border-box; font-size: 0px; text-align: center;">
		<div
			style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">No</div>
	</div>
</div>
</foreignObject>
<text x="280" y="334" fill="rgb(0, 0, 0)" font-family="Helvetica"
	font-size="12px" text-anchor="middle">Нет</text></switch></g>
<rect x="85" y="510" width="50" height="20" fill="none" stroke="none"
	pointer-events="all" />
<g transform="translate(-0.5 -0.5)">
<switch>
<foreignObject pointer-events="none" width="100%" height="100%"
	requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"
	style="overflow: visible; text-align: left;">
<div xmlns="http://www.w3.org/1999/xhtml"
	style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 48px; height: 1px; padding-top: 520px; margin-left: 86px;">
	<div data-drawio-colors="color: rgb(0, 0, 0); "
		style="box-sizing: border-box; font-size: 0px; text-align: center;">
		<div
			style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">No</div>
	</div>
</div>
</foreignObject>
<text x="110" y="524" fill="rgb(0, 0, 0)" font-family="Helvetica"
	font-size="12px" text-anchor="middle">Нет</text></switch></g>
<rect x="90" y="120" width="45" height="20" fill="none" stroke="none"
	pointer-events="all" />
<g transform="translate(-0.5 -0.5)">
<switch>
<foreignObject pointer-events="none" width="100%" height="100%"
	requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"
	style="overflow: visible; text-align: left;">
<div xmlns="http://www.w3.org/1999/xhtml"
	style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 43px; height: 1px; padding-top: 130px; margin-left: 91px;">
	<div data-drawio-colors="color: rgb(0, 0, 0); "
		style="box-sizing: border-box; font-size: 0px; text-align: center;">
		<div
			style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">Yes</div>
	</div>
</div>
</foreignObject>
<text x="113" y="134" fill="rgb(0, 0, 0)" font-family="Helvetica"
	font-size="12px" text-anchor="middle">Да</text></switch></g>
<rect x="200" y="390" width="45" height="20" fill="none" stroke="none"
	pointer-events="all" />
<g transform="translate(-0.5 -0.5)">
<switch>
<foreignObject pointer-events="none" width="100%" height="100%"
	requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"
	style="overflow: visible; text-align: left;">
<div xmlns="http://www.w3.org/1999/xhtml"
	style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 43px; height: 1px; padding-top: 400px; margin-left: 201px;">
	<div data-drawio-colors="color: rgb(0, 0, 0); "
		style="box-sizing: border-box; font-size: 0px; text-align: center;">
		<div
			style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">Yes</div>
	</div>
</div>
</foreignObject>
<text x="223" y="404" fill="rgb(0, 0, 0)" font-family="Helvetica"
	font-size="12px" text-anchor="middle">Да</text></switch></g>
<rect x="355" y="335" width="45" height="20" fill="none" stroke="none"
	pointer-events="all" />
<g transform="translate(-0.5 -0.5)">
<switch>
<foreignObject pointer-events="none" width="100%" height="100%"
	requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"
	style="overflow: visible; text-align: left;">
<div xmlns="http://www.w3.org/1999/xhtml"
	style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 43px; height: 1px; padding-top: 345px; margin-left: 356px;">
	<div data-drawio-colors="color: rgb(0, 0, 0); "
		style="box-sizing: border-box; font-size: 0px; text-align: center;">
		<div
			style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">Yes</div>
	</div>
</div>
</foreignObject>
<text x="378" y="349" fill="rgb(0, 0, 0)" font-family="Helvetica"
	font-size="12px" text-anchor="middle">Да</text></switch></g>
<rect x="200" y="575" width="45" height="20" fill="none" stroke="none"
	pointer-events="all" />
<g transform="translate(-0.5 -0.5)">
<switch>
<foreignObject pointer-events="none" width="100%" height="100%"
	requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"
	style="overflow: visible; text-align: left;">
<div xmlns="http://www.w3.org/1999/xhtml"
	style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 43px; height: 1px; padding-top: 585px; margin-left: 201px;">
	<div data-drawio-colors="color: rgb(0, 0, 0); "
		style="box-sizing: border-box; font-size: 0px; text-align: center;">
		<div
			style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">Yes</div>
	</div>
</div>
</foreignObject>
<text x="223" y="589" fill="rgb(0, 0, 0)" font-family="Helvetica"
	font-size="12px" text-anchor="middle">Да</text></switch></g>
<path d="M 195 570 L 195 603.63" fill="none" stroke="rgb(0, 0, 0)"
	stroke-miterlimit="10" pointer-events="stroke" />
<path d="M 195 608.88 L 191.5 601.88 L 195 603.63 L 198.5 601.88 Z"
	fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10"
	pointer-events="all" />
<path d="M 135 535 L 110 535 L 110 663.63" fill="none"
	stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke" />
<path d="M 110 668.88 L 106.5 661.88 L 110 663.63 L 113.5 661.88 Z"
	fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10"
	pointer-events="all" />
<path d="M 195 500 L 255 535 L 195 570 L 135 535 Z"
	fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10"
	pointer-events="all" />
<g transform="translate(-0.5 -0.5)">
<switch>
<foreignObject pointer-events="none" width="100%" height="100%"
	requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"
	style="overflow: visible; text-align: left;">
<div xmlns="http://www.w3.org/1999/xhtml"
	style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 535px; margin-left: 136px;">
	<div data-drawio-colors="color: rgb(0, 0, 0); "
		style="box-sizing: border-box; font-size: 0px; text-align: center;">
		<div
			style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">
			Message<br />received?
		</div>
	</div>
</div>
</foreignObject>
<text x="195" y="539" fill="rgb(0, 0, 0)" font-family="Helvetica"
	font-size="12px" text-anchor="middle">Сообщение&#xa;получено?</text></switch></g>
<path d="M 255 630 L 275 630 L 275 480 L 195 480 L 195 493.63"
	fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10"
	pointer-events="stroke" />
<path d="M 195 498.88 L 191.5 491.88 L 195 493.63 L 198.5 491.88 Z"
	fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10"
	pointer-events="all" />
<rect x="135" y="610" width="120" height="40" fill="rgb(255, 255, 255)"
	stroke="rgb(0, 0, 0)" pointer-events="all" />
<g transform="translate(-0.5 -0.5)">
<switch>
<foreignObject pointer-events="none" width="100%" height="100%"
	requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"
	style="overflow: visible; text-align: left;">
<div xmlns="http://www.w3.org/1999/xhtml"
	style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 630px; margin-left: 136px;">
	<div data-drawio-colors="color: rgb(0, 0, 0); "
		style="box-sizing: border-box; font-size: 0px; text-align: center;">
		<div
			style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">
			Send via <br />bluetooth
		</div>
	</div>
</div>
</foreignObject>
<text x="195" y="634" fill="rgb(0, 0, 0)" font-family="Helvetica"
	font-size="12px" text-anchor="middle">Отправить по...</text></switch></g>
<rect x="170" y="690" width="45" height="20" fill="none" stroke="none"
	pointer-events="all" />
<g transform="translate(-0.5 -0.5)">
<switch>
<foreignObject pointer-events="none" width="100%" height="100%"
	requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"
	style="overflow: visible; text-align: left;">
<div xmlns="http://www.w3.org/1999/xhtml"
	style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 43px; height: 1px; padding-top: 700px; margin-left: 171px;">
	<div data-drawio-colors="color: rgb(0, 0, 0); "
		style="box-sizing: border-box; font-size: 0px; text-align: center;">
		<div
			style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">Yes</div>
	</div>
</div>
</foreignObject>
<text x="193" y="704" fill="rgb(0, 0, 0)" font-family="Helvetica"
	font-size="12px" text-anchor="middle">Да</text></switch></g>
<rect x="0" y="710" width="50" height="20" fill="none" stroke="none"
	pointer-events="all" />
<g transform="translate(-0.5 -0.5)">
<switch>
<foreignObject pointer-events="none" width="100%" height="100%"
	requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"
	style="overflow: visible; text-align: left;">
<div xmlns="http://www.w3.org/1999/xhtml"
	style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 48px; height: 1px; padding-top: 720px; margin-left: 1px;">
	<div data-drawio-colors="color: rgb(0, 0, 0); "
		style="box-sizing: border-box; font-size: 0px; text-align: center;">
		<div
			style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">No</div>
	</div>
</div>
</foreignObject>
<text x="25" y="724" fill="rgb(0, 0, 0)" font-family="Helvetica"
	font-size="12px" text-anchor="middle">Нет</text></switch></g>
<path d="M 195 30 L 195 0" fill="none" stroke="rgb(0, 0, 0)"
	stroke-miterlimit="10" pointer-events="stroke" />
<path d="M 195 190 L 195 210 L 195 200 L 195 213.63" fill="none"
	stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke" />
<path d="M 195 218.88 L 191.5 211.88 L 195 213.63 L 198.5 211.88 Z"
	fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10"
	pointer-events="all" />
<path d="M 135 155 L 65 155 L 65 213.63" fill="none"
	stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke" />
<path d="M 65 218.88 L 61.5 211.88 L 65 213.63 L 68.5 211.88 Z"
	fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10"
	pointer-events="all" />
<path d="M 195 120 L 255 155 L 195 190 L 135 155 Z"
	fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10"
	pointer-events="all" />
<g transform="translate(-0.5 -0.5)">
<switch>
<foreignObject pointer-events="none" width="100%" height="100%"
	requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"
	style="overflow: visible; text-align: left;">
<div xmlns="http://www.w3.org/1999/xhtml"
	style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 155px; margin-left: 136px;">
	<div data-drawio-colors="color: rgb(0, 0, 0); "
		style="box-sizing: border-box; font-size: 0px; text-align: center;">
		<div
			style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">
			Wake up<br />from interrupt?
		</div>
	</div>
</div>
</foreignObject>
<text x="195" y="159" fill="rgb(0, 0, 0)" font-family="Helvetica"
	font-size="12px" text-anchor="middle">Выход по...</text></switch></g>
<rect x="145" y="190" width="50" height="20" fill="none" stroke="none"
	pointer-events="all" />
<g transform="translate(-0.5 -0.5)">
<switch>
<foreignObject pointer-events="none" width="100%" height="100%"
	requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"
	style="overflow: visible; text-align: left;">
<div xmlns="http://www.w3.org/1999/xhtml"
	style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 48px; height: 1px; padding-top: 200px; margin-left: 146px;">
	<div data-drawio-colors="color: rgb(0, 0, 0); "
		style="box-sizing: border-box; font-size: 0px; text-align: center;">
		<div
			style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">No</div>
	</div>
</div>
</foreignObject>
<text x="170" y="204" fill="rgb(0, 0, 0)" font-family="Helvetica"
	font-size="12px" text-anchor="middle">Нет</text></switch></g>
<path
	d="M 65 350 L 65 477 C 68.9 477 68.9 483 65 483 L 65 483 L 65 630 L 107 630 C 107 626.1 113 626.1 113 630 L 113 630 L 128.63 630"
	fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10"
	pointer-events="stroke" />
<path d="M 133.88 630 L 126.88 633.5 L 128.63 630 L 126.88 626.5 Z"
	fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10"
	pointer-events="all" />
<path d="M 65 260 L 65 293.63" fill="none" stroke="rgb(0, 0, 0)"
	stroke-miterlimit="10" pointer-events="stroke" />
<path d="M 65 298.88 L 61.5 291.88 L 65 293.63 L 68.5 291.88 Z"
	fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10"
	pointer-events="all" />
<rect x="25" y="220" width="80" height="40" fill="rgb(255, 255, 255)"
	stroke="rgb(0, 0, 0)" pointer-events="all" />
<g transform="translate(-0.5 -0.5)">
<switch>
<foreignObject pointer-events="none" width="100%" height="100%"
	requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"
	style="overflow: visible; text-align: left;">
<div xmlns="http://www.w3.org/1999/xhtml"
	style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 78px; height: 1px; padding-top: 240px; margin-left: 26px;">
	<div data-drawio-colors="color: rgb(0, 0, 0); "
		style="box-sizing: border-box; font-size: 0px; text-align: center;">
		<div
			style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">
			Handle<br />interrupt
		</div>
	</div>
</div>
</foreignObject>
<text x="65" y="244" fill="rgb(0, 0, 0)" font-family="Helvetica"
	font-size="12px" text-anchor="middle">Обработать&#xa;прерывание</text></switch></g>
<rect x="25" y="300" width="80" height="50" fill="rgb(255, 255, 255)"
	stroke="rgb(0, 0, 0)" pointer-events="all" />
<g transform="translate(-0.5 -0.5)">
<switch>
<foreignObject pointer-events="none" width="100%" height="100%"
	requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"
	style="overflow: visible; text-align: left;">
<div xmlns="http://www.w3.org/1999/xhtml"
	style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 78px; height: 1px; padding-top: 325px; margin-left: 26px;">
	<div data-drawio-colors="color: rgb(0, 0, 0); "
		style="box-sizing: border-box; font-size: 0px; text-align: center;">
		<div
			style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">
			Restore<br />received <br />status
		</div>
	</div>
</div>
</foreignObject>
<text x="65" y="329" fill="rgb(0, 0, 0)" font-family="Helvetica"
	font-size="12px" text-anchor="middle">Восстановитьстатус...</text></switch></g></g>
<switch>
<g requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" />
<a transform="translate(0,-5)"
	xlink:href="https://www.diagrams.net/doc/faq/svg-export-text-problems"
	target="_blank"><text text-anchor="middle" font-size="10px" x="50%"
		y="100%">Text is not SVG - cannot display</text></a></switch></svg>
</div>
<p>The corresponding configuration:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">pinMode(RST, INPUT_PULLUP);
esp_sleep_enable_ext0_wakeup((gpio_num_t)DIO0, RISING);
</code></pre></div><p>The LoRa receiver will continue to work even if the ESP32 goes into sleep mode. Power consumption in active mode will be reduced from 86 mA to 16 mA - more than 5 times!</p>
<pre><code>323 min * 16 mA + 1127 min * 6 mA = 5168 mAmin + 6762 mAmin =
= 198.83 mAh * 3.3 V = 656.15 Wh
</code></pre><p>Two small panels will be enough to receive all passing satellites.</p>
<p>Unfortunately, none of the existing libraries allow reading messages from LoRa after waking up from sleep. I had to take <a href="https://github.com/sandeepmistry/arduino-LoRa">arduino-LoRa</a> and modify it.</p>
<h2 id="conclusion">Conclusion</h2>
<p>And then I went out to the balcony and realized that it faces north&hellip;</p>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>USB-tester A3-B</title>
      <link>https://dernasherbrezon.com/en/posts/smart-usb-meter-a3-b/</link>
      <pubDate>Thu, 06 Jan 2022 18:30:18 +0000</pubDate>
      
      <guid>https://dernasherbrezon.com/en/posts/smart-usb-meter-a3-b/</guid>
      <description>Not long ago, I acquired a USB tester A3-B.
This device allows measuring the current and voltage flowing between the USB input and USB output. One end can be plugged into a charger, the other into a device, and the current consumption can be measured. There are numerous applications for this:
 Measure current consumption in different modes:  Sleep Active work Standby   Measure consumption over time. The display can switch to a graphing mode, showing how consumption changes over a period.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>USB-tester A3-B</h1></header>
      		<div class='container entry-content'>
  <p>Not long ago, I acquired a USB tester A3-B.</p>
<p>This device allows measuring the current and voltage flowing between the USB input and USB output. One end can be plugged into a charger, the other into a device, and the current consumption can be measured. There are numerous applications for this:</p>
<ul>
<li>Measure current consumption in different modes:
<ul>
<li>Sleep</li>
<li>Active work</li>
<li>Standby</li>
</ul>
</li>
<li>Measure consumption over time. The display can switch to a graphing mode, showing how consumption changes over a period.</li>
<li>Measure total consumption over a period.</li>
<li>Determine the type of charging: fast, slow.</li>
<li>Assess the quality of the charging device. Some devices may be labeled as 10 watts, but they actually deliver only 5 watts.</li>
</ul>
<p>I find this device particularly interesting because it can measure the current consumption of ESP32 and Raspberry Pi. Some of my stations operate on solar panels, and optimizing power consumption is important.</p>
<p>As a developer of r2lora and r2cloud, it&rsquo;s crucial for me to optimize my own code for low power consumption, and a device like this helps with that.</p>
<p>But reading the indicators directly from the screen can be challenging. This is where Bluetooth comes to the rescue.</p>
<blockquote>
<p>Everything becomes better at once if you add Bluetooth.</p>
<p>Leonard Hofstadter</p>
</blockquote>
<p>Through Bluetooth, you can obtain all the parameters displayed on the screen. Since they are in digital form, they can be processed programmatically to create beautiful graphs.</p>
<h2 id="bluetooth">Bluetooth</h2>
<p><a href="https://www.amazon.co.uk/dp/B07DCS11GM">On the product page</a>, it&rsquo;s stated that A3-B supports Bluetooth and can only be connected to it through an Android app. So data can be available for external applications. Now it remains to understand how.</p>
<p>Here GitHub comes to the rescue. It turns out that enthusiasts have long figured out the protocol and have written a bunch of programs. To start, you need to find the device and pair it:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">bluetoothctl scan on
</code></pre></div><p>This command will display all nearby Bluetooth devices:</p>
<p><img src="/img/smart-usb-meter-a3-b/discovery.png" alt=""></p>
<p>A3-B is identified as 2 devices: E-test BLE and E-test SPP. BLE is <a href="https://en.wikipedia.org/wiki/Bluetooth_Low_Energy">bluetooth low energy</a> and SPP is <a href="https://en.wikipedia.org/wiki/List_of_Bluetooth_profiles#Serial_Port_Profile_(SPP)">serial port profile</a>. All communication will go through the serial port, so you need to connect to the SPP device.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">sudo rfcomm bind <span style="color:#ae81ff">0</span> B3:BA:D5:A7:1F:E1 <span style="color:#ae81ff">2</span>
</code></pre></div><p>This command will create the device <code>/dev/rfcomm0</code>, bind the Bluetooth device to it, and select port number 2. The port number is crucial. The device provides several ports by default, but only port 2 can be used to receive data. It&rsquo;s possible that the other ports are used for device reprogramming.</p>
<p>You can check the connection using the <a href="https://github.com/rfinnie/rdserialtool">rdserialtool</a> project:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">./rdserialtool  --debug --device um24c --serial-device /dev/rfcomm0
</code></pre></div><p>If the connection is successful, the console will display the following:</p>
<pre><code>2022-01-06 14:29:21,918 INFO: rdserialtool 0.2.1
2022-01-06 14:29:21,918 INFO: Copyright (C) 2019 Ryan Finnie
2022-01-06 14:29:21,919 INFO: 
2022-01-06 14:29:21,919 INFO: Connecting to UM24C /dev/rfcomm0
2022-01-06 14:29:21,919 DEBUG: Serial: Connecting to /dev/rfcomm0
2022-01-06 14:29:21,920 INFO: Connection established
2022-01-06 14:29:21,921 INFO: 
2022-01-06 14:29:22,221 DEBUG: Serial: SEND begin (b'\xf0')
2022-01-06 14:29:22,222 DEBUG: Serial: SEND end (1 bytes)
2022-01-06 14:29:22,222 DEBUG: Serial: RECV begin
2022-01-06 14:29:26,688 DEBUG: Serial: RECV end (b'\tc\x01\xf6\x002\x00\x00\x00\xfb\x00\x18\x00K\x00\x00\x00\x00\x01\x93\x00\x00\x07\xe0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x012\x00\x00\x00\x00\x00\x00\x01\x93\x00\x00\x07\xe0\x00\x03\x00\x003\xb8\x00\x01\x00\x03\x00\x05\x00\x00\x03\xec\x00\x00\xff\xf1')
2022-01-06 14:29:26,690 DEBUG: Start: 0x0963, end: 0xfff1
2022-01-06 14:29:26,692 DEBUG: DUMP: b'\tc\x01\xf5\x002\x00\x00\x00\xfb\x00\x18\x00K\x00\x00\x00\x00\x01\x93\x00\x00\x07\xe0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x012\x00\x00\x00\x00\x00\x00\x01\x93\x00\x00\x07\xe0\x00\x03\x00\x003\xb8\x00\x01\x00\x03\x00\x05\x00\x00\x03\xec\x00\x00\xff\xf1'
USB:  5.02V,  0.050A,  0.251W,  100.4Ω
Data:  3.06V(+),  0.00V(-), charging mode: Unknown / Normal
Recording (on) :    0.403Ah,    2.016Wh,  13240 sec at &gt;= 0.03A
Data groups:
    *0:    0.403Ah,    2.016Wh       5:    0.000Ah,    0.000Wh
     1:    0.000Ah,    0.000Wh       6:    0.000Ah,    0.000Wh
     2:    0.000Ah,    0.000Wh       7:    0.000Ah,    0.000Wh
     3:    0.000Ah,    0.000Wh       8:    0.000Ah,    0.000Wh
     4:    0.000Ah,    0.000Wh       9:    0.000Ah,    0.000Wh
UM24C, temperature:  24C ( 75F)
Screen: 0/6, brightness: 5/5, timeout: 3 min
Collection time: 2022-01-06 14:29:26.689485
</code></pre><p>Indeed, this project outputs either too much data or data in JSON format. Therefore, I opted for another project - <a href="https://github.com/davatorium/um25c-client">um25c-client</a>. It connects to the device and outputs the current voltage and current value every second. These data can be conveniently imported into .csv and analyzed.</p>
<h2 id="analysis-of-everything-around">Analysis of Everything Around</h2>
<p>Most devices connect via USB, so you can measure literally everything! I started with fairly benign things. The <a href="https://www.razer.com/gaming-mice/razer-naga-x/RZ01-03590100-R3U1">Razer Naga X</a> mouse has an average consumption of about 110mA:</p>














<img src="/img/smart-usb-meter-a3-b/razernaga2.png">

<p>Raspberry Pi 3b has an average standby consumption of 300mA.</p>














<img src="/img/smart-usb-meter-a3-b/raspberrypi3b2.png">

<p>Next, a comparison of the power consumption of <a href="https://github.com/dernasherbrezon/r2lora">r2lora</a> and <a href="http://tinygs.com">tinyGS</a>. projects. Both run on the same <a href="http://www.lilygo.cn/prod_view.aspx?TypeId=50060&amp;Id=1326&amp;FId=t3:50060:3">TTGO LoRa32</a> board:</p>














<img src="/img/smart-usb-meter-a3-b/r2lora-tinygs2.png">

<p>The r2lora project is much simpler than tinyGS, hence lower energy consumption. I also opted for a simple UI with a single screen, no clock, etc. If you set the tinyGS screen brightness to 0, you get the following values:</p>














<img src="/img/smart-usb-meter-a3-b/tinygs-idle-black2.png">

<p>It helped, but not much. The average consumption is around 100mA.</p>














<img src="/img/smart-usb-meter-a3-b/firmware2.png">

<p>Loading new firmware consumes about 30mA. Funny.</p>














<img src="/img/smart-usb-meter-a3-b/wifi2.png">

<p>By the way, during the initial WiFi connection, the current consumption increases to ~150mA, for both r2lora and tinyGS. As soon as the IP address is obtained, the consumption sharply returns to normal.</p>
<p>I also measured the power consumption during LoRa signal reception. It either does not change or changes within the range of measurement error.</p>
<p>And here&rsquo;s an interesting energy consumption graph when connecting ESP32 to Raspberry Pi via USB:</p>














<img src="/img/smart-usb-meter-a3-b/full2.png">

<p>Immediately upon connection, the consumption jumps sharply to 500mA. Then there is the connection of ESP32 to the WiFi access point, and then normal operation. At the same time, the voltage from 5.140V jumps to 5.160V and normalizes at 5.140V.</p>
<h2 id="conclusions">Conclusions</h2>
<p>A3-B allows not only theorizing about power consumption but also capturing consumption over time and making various conclusions based on actual data.</p>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Creating FOTA component</title>
      <link>https://dernasherbrezon.com/en/posts/fota-for-r2lora/</link>
      <pubDate>Sun, 02 Jan 2022 21:04:18 +0000</pubDate>
      
      <guid>https://dernasherbrezon.com/en/posts/fota-for-r2lora/</guid>
      <description>This post continues the development cycle of the r2lora project. Previous articles:
 Creating a project for ESP32 Setting up a project in PlatformIO  FOTA is an abbreviation for Firmware-Over-The-Air. This is a special component that updates the application if a new version is available.
Design Auto-update can be done in several ways:
 The special component starts listening on TCP/UDP port. To update, you need to send the firmware to this port from any other device running on the network.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Creating FOTA component</h1></header>
      		<div class='container entry-content'>
  <p>This post continues the development cycle of the <a href="https://github.com/dernasherbrezon/r2lora">r2lora project</a>. Previous articles:</p>
<ul>
<li><a href="https://dernasherbrezon.com/en/posts/programming-esp32/">Creating a project for ESP32</a></li>
<li><a href="https://dernasherbrezon.com/en/posts/configuring-platformio/">Setting up a project in PlatformIO</a></li>
</ul>
<p>FOTA is an abbreviation for <a href="https://en.wikipedia.org/wiki/Over-the-air_update">Firmware-Over-The-Air</a>. This is a special component that updates the application if a new version is available.</p>
<h2 id="design">Design</h2>
<p>Auto-update can be done in several ways:</p>
<ul>
<li>The special component starts listening on TCP/UDP port. To update, you need to send the firmware to this port from any other device running on the network. Essentially a push update.</li>
<li>A special component periodically checks the central server for a new version. If there is one, then he downloads it.</li>
</ul>
<p>The first method is implemented in the <a href="https://github.com/jandrassy/ArduinoOTA">ArduinoOTA</a> standard library. It is used everywhere and has become the de facto standard in the microcontroller world. One of the advantages is the ease of operation: the device starts updating as soon as someone from outside sends a new version. There is no need to create a complex infrastructure for storing and delivering updates: just send the firmware from any device on the network.</p>
<p>But this approach has a serious drawback: another external server (for automation) or a user (manual) is needed in order to download the firmware.</p>
<p>I chose the second option. It is most similar to the classic way of updating packages in Debian, Ubuntu and other operating systems. APT or any other manager periodically checks the server for updates, downloads and installs them. This is how all security updates work in almost all operating systems. The disadvantages are that the firmware must be stored on a central server and the FOTA component must periodically check the availability of a new version. In my case, this is not such a big problem, since I already maintain my own APT repository. And adding a FOTA repository is not that difficult.</p>
<h2 id="fota-repository">FOTA repository</h2>
<p>I decided to go with the very basic repository structure. The FOTA repository consists of two logical files:</p>
<ul>
<li>r2lora.json - index file with current firmware versions for each board</li>
<li>firmware files</li>
</ul>
<p>The index file has the following structure:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">[
    {
        <span style="color:#f92672">&#34;board&#34;</span>: <span style="color:#e6db74">&#34;ttgo-lora32-v2&#34;</span>,
        <span style="color:#f92672">&#34;version&#34;</span>: <span style="color:#e6db74">&#34;1.1&#34;</span>,
        <span style="color:#f92672">&#34;filename&#34;</span>: <span style="color:#e6db74">&#34;/fotatest/ttgo-lora32-v2-1.1.bin.zz&#34;</span>,
        <span style="color:#f92672">&#34;size&#34;</span>: <span style="color:#ae81ff">203984</span>,
        <span style="color:#f92672">&#34;md5Checksum&#34;</span>: <span style="color:#e6db74">&#34;6c0931332848636087c599a1ad9c06a8&#34;</span>
    }
]
</code></pre></div><p>It contains an array of json objects that describe each board. Due to the fact that each board is different, the repository must store the same version of firmware for each of the boards. Each firmware is described by the following required fields:</p>
<table>
<thead>
<tr>
<th>
Name
</th>
<th>
Description
</th>
<th>
Example
</th>
</tr>
</thead>
<tbody>
<tr>
<td>
board
</td>
<td>
Board name. Must match the board name in PlatformIO
</td>
<td>
ttgo-lora32-v2
</td>
</tr>
<tr>
<td>
version
</td>
<td>
Application version. If the current version of the application does not match the version in the repository, then the version from the repository is downloaded.
</td>
<td>
1.1
</td>
</tr>
<tr>
<td>
filename
</td>
<td>
Path to the file inside the repository. All files must be compressed using zlib.
</td>
<td>
/fota/ttgo-lora32-v2-1.1.bin.zz
</td>
</tr>
<tr>
<td>
size
</td>
<td>
Firmware file size in bytes BEFORE compression. Allows you to correctly draw a progress bar when updating.
</td>
<td>
203984
</td>
</tr>
<tr>
<td>
md5Checksum
</td>
<td>
Checksum of the firmware file BEFORE compression. Algorithm: MD5
</td>
<td>
6c0931332848636087c599a1ad9c06a8
</td>
</tr>
</tbody>
</table>
<p>All firmware can be compressed by almost 2 times, so by default the repository can only contain compressed firmware. This saves not only space on my S3 and network, but also increases the speed of downloading new versions. This is especially important for low-power devices like the ESP32.</p>
<p>The FOTA repository is accessed using HTTP, so it can be deployed anywhere. In my case it is Amazon S3.</p>
<h2 id="algorithm">Algorithm</h2>
<p>First of all, the <a href="https://github.com/dernasherbrezon/r2lora/blob/main/lib/fota/Fota.cpp#L13">FOTA component</a> downloads the index file.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++"><span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span><span style="color:#66d9ef">this</span><span style="color:#f92672">-&gt;</span>client<span style="color:#f92672">-&gt;</span>begin(hostname, port, <span style="color:#66d9ef">this</span><span style="color:#f92672">-&gt;</span>indexFile)) {
  log_e(<span style="color:#e6db74">&#34;unable to begin&#34;</span>);
  <span style="color:#66d9ef">return</span> FOTA_UNKNOWN_ERROR;
}
<span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span><span style="color:#66d9ef">this</span><span style="color:#f92672">-&gt;</span>lastModified.isEmpty()) {
  <span style="color:#66d9ef">this</span><span style="color:#f92672">-&gt;</span>client<span style="color:#f92672">-&gt;</span>addHeader(<span style="color:#e6db74">&#34;If-Modified-Since&#34;</span>, <span style="color:#66d9ef">this</span><span style="color:#f92672">-&gt;</span>lastModified);
}
<span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>headers[] <span style="color:#f92672">=</span> {<span style="color:#e6db74">&#34;Last-Modified&#34;</span>};
<span style="color:#66d9ef">this</span><span style="color:#f92672">-&gt;</span>client<span style="color:#f92672">-&gt;</span>collectHeaders(headers, <span style="color:#ae81ff">1</span>);
<span style="color:#66d9ef">int</span> code <span style="color:#f92672">=</span> <span style="color:#66d9ef">this</span><span style="color:#f92672">-&gt;</span>client<span style="color:#f92672">-&gt;</span>GET();
</code></pre></div><p>At the same time, r2lora remember the time the file was last updated. If the file has not changed, then the server should return HTTP 304. That will help saving a little on traffic and parsing the json file. To access the repository, I use the standard <code>HTTPClient`` and </code>HTTPClient.h``` that comes with the Arduino framework.</p>
<p>Next, the component must find firmware information for the current board. PlatformIO passes the name of the board during compilation via the parameter <code>ARDUINO_VARIANT</code>.</p>
<p>If the information is found and the version does not match the current one, FOTA will download the firmware file from the server. The download algorithm is quite tricky. Firmware can&rsquo;t fully fit into memory, so it needs to be downloaded directly into the specific nvs partition using small buffer. I used special class <code>Update</code> from <code>Update.h</code>. It writes the new version to a special partition on flash memory, checks the checksum of the received file and sets the new partition as boot.</p>
<p>In addition, the FOTA component supports a special callback method. It can be used to update progress bar on the screen.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++"><span style="color:#66d9ef">if</span> (<span style="color:#66d9ef">this</span><span style="color:#f92672">-&gt;</span>onUpdateFunc) {
  Update.onProgress(<span style="color:#66d9ef">this</span><span style="color:#f92672">-&gt;</span>onUpdateFunc);
}
</code></pre></div><p>This lambda function receives the current number of downloaded bytes and the total number of bytes as input. The output to the screen is quite trivial:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++">updater<span style="color:#f92672">-&gt;</span>setOnUpdate([](size_t current, size_t total) {
  display<span style="color:#f92672">-&gt;</span>setStatus(<span style="color:#e6db74">&#34;UPDATING&#34;</span>);
  display<span style="color:#f92672">-&gt;</span>setProgress((<span style="color:#66d9ef">uint8_t</span>)((<span style="color:#66d9ef">float</span>)current <span style="color:#f92672">*</span> <span style="color:#ae81ff">100</span> <span style="color:#f92672">/</span> total));
  display<span style="color:#f92672">-&gt;</span>update();
});
</code></pre></div><p>Once the file is completely downloaded and the checksum is verified, its time to reboot the board:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++"><span style="color:#66d9ef">if</span> (reboot) {
  log_i(<span style="color:#e6db74">&#34;update completed. rebooting&#34;</span>);
  ESP.restart();
} <span style="color:#66d9ef">else</span> {
  log_i(<span style="color:#e6db74">&#34;update completed&#34;</span>);
}
</code></pre></div><h2 id="zlib">zlib</h2>
<p>I would also like to dwell on archiving/unarchiving. ESP32 does not support <a href="https://zlib.net">zlib</a>. Therefore, you need to either port zlib to the ESP32 yourself, or look for a more lightweight alternative. And there it is - <a href="https://github.com/richgel999/miniz">miniz</a>. The great thing about that the ROM already contains an implementation of the basic functions of miniz. So using miniz does not affect the size of the firmware.</p>
<p>Uncompression consists of several steps. First, you need to initialize the helper structures for miniz:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++">tinfl_init(<span style="color:#66d9ef">this</span><span style="color:#f92672">-&gt;</span>inflator);
</code></pre></div><p>Secondly, create two intermediate buffers.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++"><span style="color:#66d9ef">uint8_t</span> <span style="color:#f92672">*</span>nextCompressedBuffer <span style="color:#f92672">=</span> <span style="color:#66d9ef">this</span><span style="color:#f92672">-&gt;</span>compressedBuffer;
<span style="color:#66d9ef">uint8_t</span> <span style="color:#f92672">*</span>nextUncompressedBuffer <span style="color:#f92672">=</span> <span style="color:#66d9ef">this</span><span style="color:#f92672">-&gt;</span>uncompressedBuffer;
</code></pre></div><p>One buffer is where the compressed data needs to be written, and the other buffer is where miniz will put the decompressed data. It is important to allocate at least 32768 bytes for the output array. This is not described in the documentation, but for some reason miniz requires a buffer of this size. If you select less, then unzipping will fail with status -1.</p>
<p>Next is to make sure that there is enough data in the incoming buffer for work, and at the same time that there is room in the outgoing buffer for new data.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++">size_t inBytes <span style="color:#f92672">=</span> actuallyRead;
size_t outBytes <span style="color:#f92672">=</span> availableOut;
status <span style="color:#f92672">=</span> tinfl_decompress(inflator, (<span style="color:#66d9ef">const</span> mz_uint8 <span style="color:#f92672">*</span>)nextCompressedBuffer, <span style="color:#f92672">&amp;</span>inBytes,
                          <span style="color:#66d9ef">this</span><span style="color:#f92672">-&gt;</span>uncompressedBuffer, nextUncompressedBuffer, <span style="color:#f92672">&amp;</span>outBytes,
                          flags);
actuallyRead <span style="color:#f92672">-=</span> inBytes;
nextCompressedBuffer <span style="color:#f92672">=</span> nextCompressedBuffer <span style="color:#f92672">+</span> inBytes;

availableOut <span style="color:#f92672">-=</span> outBytes;
nextUncompressedBuffer <span style="color:#f92672">=</span> nextUncompressedBuffer <span style="color:#f92672">+</span> outBytes;
</code></pre></div><p>Once the outgoing buffer is completely full, it can written to flash:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++">size_t actuallyWrote <span style="color:#f92672">=</span> Update.write(<span style="color:#66d9ef">this</span><span style="color:#f92672">-&gt;</span>uncompressedBuffer, bytesInTheOutput);
</code></pre></div><p>However, when I ran the test, I received the following error:</p>
<pre><code>[I][Fota.cpp:191] downloadAndApplyFirmware(): downloading new firmware: 203984 bytes
***ERROR*** A stack overflow in task loopTask has been detected.
abort() was called at PC 0x40088a50 on core 1

ELF file SHA256: 0000000000000000

Backtrace: 0x400887bc:0x3ffaee10 0x40088a39:0x3ffaee30 0x40088a50:0x3ffaee50 0x4008a633:0x3ffaee70 0x4008c1fc:0x3ffaee90 0x4008c1b2:0x00a42700
  #0  0x400887bc:0x3ffaee10 in invoke_abort at /home/runner/work/esp32-arduino-lib-builder/esp32-arduino-lib-builder/esp-idf/components/esp32/panic.c:715
  #1  0x40088a39:0x3ffaee30 in abort at /home/runner/work/esp32-arduino-lib-builder/esp32-arduino-lib-builder/esp-idf/components/esp32/panic.c:715
  #2  0x40088a50:0x3ffaee50 in vApplicationStackOverflowHook at /home/runner/work/esp32-arduino-lib-builder/esp32-arduino-lib-builder/esp-idf/components/esp32/panic.c:715
  #3  0x4008a633:0x3ffaee70 in vTaskSwitchContext at /home/runner/work/esp32-arduino-lib-builder/esp32-arduino-lib-builder/esp-idf/components/freertos/tasks.c:3507
  #4  0x4008c1fc:0x3ffaee90 in _frxt_dispatch at /home/runner/work/esp32-arduino-lib-builder/esp32-arduino-lib-builder/esp-idf/components/freertos/portasm.S:406
  #5  0x4008c1b2:0x00a42700 in _frxt_int_exit at /home/runner/work/esp32-arduino-lib-builder/esp32-arduino-lib-builder/esp-idf/components/freertos/portasm.S:206
</code></pre><p>How is that possible to receive <code>stack overflow</code> here? I don&rsquo;t even have recursion. It turns out you can&rsquo;t initialize like this:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++">tinfl_decompressor inflator;
</code></pre></div><p>This will create a structure on the function call stack. And the size of this structure is larger than the available stack memory. Microcontrollers. For the same reason you cannot write:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++"><span style="color:#66d9ef">uint8_t</span> uncompressedBuffer[<span style="color:#ae81ff">32768</span>];
</code></pre></div><p>Otherwise it will be:</p>
<pre><code>[E][WiFiClient.cpp:62] fillBuffer(): Not enough memory to allocate buffer
[E][WiFiClient.cpp:439] read(): fail on fd 61, errno: 11, &quot;No more processes&quot;
Guru Meditation Error: Core  1 panic'ed (LoadProhibited). Exception was unhandled.
</code></pre><p>The solution is simple - you need to allocate objects in heap using malloc or new.</p>
<p>After I fixed all these exceptions, I discovered that zlib is not the same as gzip. They have different headers. Therefore, creating firmware with the following command simply will not work:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">gzip firmware.bin
</code></pre></div><p>miniz will not be able to unpack. The inside is still the same Deflate, but the file headers are different. You can use various hacks and replace the gzip header, but I found this unreliable. Instead I used a special program called <a href="https://zlib.net/pigz/">pigz</a> that can create zlib files:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">pigz --zlib firmware.bin
</code></pre></div><p>A little inconvenient, but it works.</p>
<h2 id="testing">Testing</h2>
<p>Code needs to be tested, and FOTA is no exception. But how can you test updating yourself? After all, after the update you need to restart the program and the test result will definitely disappear. Here I made some exceptions to the classic unit testing:</p>
<ul>
<li>I added special parameter <code>bool reboot</code> into the <code>loop</code> function. It will be used for testing</li>
<li><code>loop</code> function now return status code. Most of C functions return status code anyway. On the other hand this is redundant for C++ program.</li>
</ul>
<p>Another difficulty in testing FOTA is a strong dependency on infrastructure. You need to make sure that the HTTP client is properly initialized and actually downloads the firmware. You need to make sure that zlib unpacks the file and the checksum matches. &ldquo;If you need to test the infrastructure, then you need to create the infrastructure!&rdquo; - I thought and created:</p>
<ul>
<li>special firmware versions for each of the boards that do nothing.</li>
<li>uploaded them to S3</li>
<li>added many index files with various possible errors</li>
</ul>
<p>An example unit test is below:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++"><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">test_non_existing_file</span>() {
  Fota fota;
  fota.init(<span style="color:#e6db74">&#34;1.0&#34;</span>, <span style="color:#e6db74">&#34;apt.r2server.ru&#34;</span>, <span style="color:#ae81ff">80</span>, <span style="color:#e6db74">&#34;/fotatest/missingfile.json&#34;</span>, <span style="color:#ae81ff">24</span> <span style="color:#f92672">*</span> <span style="color:#ae81ff">60</span> <span style="color:#f92672">*</span> <span style="color:#ae81ff">60</span> <span style="color:#f92672">*</span> <span style="color:#ae81ff">1000</span>, ARDUINO_VARIANT);
  TEST_ASSERT_EQUAL(FOTA_INVALID_SERVER_RESPONSE, fota.loop(false));
}
</code></pre></div><p>FOTA initializes and attempts to check for an update. <code>missingfile.json</code> is a pre-generated file with an expected error that I uploaded to S3.</p>
<p>Another inconvenience was connecting to WiFi before performing the test. After all, in order to download from S3 you need a fully initialized Internet connection. PlatformIO allows you to pass environment variables to the build:</p>
<pre><code>build_flags = -DWIFI_SSID=\&quot;${sysenv.WIFI_SSID}\&quot; -DWIFI_PASSWORD=\&quot;${sysenv.WIFI_PASSWORD}\&quot;
</code></pre><p>They are used in the code as follows:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++"><span style="color:#75715e">#ifndef WIFI_SSID
</span><span style="color:#75715e">#define WIFI_SSID &#34;&#34;
</span><span style="color:#75715e">#endif
</span><span style="color:#75715e"></span>
<span style="color:#75715e">#ifndef WIFI_PASSWORD
</span><span style="color:#75715e">#define WIFI_PASSWORD &#34;&#34;
</span><span style="color:#75715e">#endif
</span><span style="color:#75715e"></span>
WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
<span style="color:#66d9ef">while</span> (WiFi.status() <span style="color:#f92672">!=</span> WL_CONNECTED) {
  delay(<span style="color:#ae81ff">500</span>);
}
</code></pre></div><p>If, when building the test, the environment variables contained the login and password for the local access point, then they will be compiled into the test firmware and used before executing all tests.</p>
<p>The final step will be to disable this test by default. I don&rsquo;t expect anyone who wants to build a project will test FOTA, and I don&rsquo;t really want to run a test every time I build. For this purpose, PlatformIO has support for disabling tests!</p>
<pre><code>test_ignore = fota, testfirmware
</code></pre><p><code>testfirmware</code> - this is another test that is not really a test, but the same program that does nothing and is used to test FOTA.</p>
<p>This all sounds very complicated, but the component itself is quite complex and does a lot of things that I would like to check automatically. I found so many bugs when I was writing these tests! But now the update works perfectly.</p>

<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube.com/embed/_DowEhVwboI" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>


</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Setting up a project in PlatformIO</title>
      <link>https://dernasherbrezon.com/en/posts/configuring-platformio/</link>
      <pubDate>Sat, 01 Jan 2022 20:30:18 +0000</pubDate>
      
      <guid>https://dernasherbrezon.com/en/posts/configuring-platformio/</guid>
      <description>In the previous post I described the general design of r2lora and selected tools for development. Now we can focus on configuring the project and breaking it down into individual modules. PlatformIO integrates well with a variety of different tools and allows you to do complex things almost as easily as in Java.
Dependency Management A challenge in every C/C++ project is dependency management. There is no standard way to handle this in the language and ecosystem.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Setting up a project in PlatformIO</h1></header>
      		<div class='container entry-content'>
  <p>In the <a href="https://dernasherbrezon.com/en/posts/programming-esp32/">previous post</a> I described the general design of r2lora and selected tools for development. Now we can focus on configuring the project and breaking it down into individual modules. <a href="https://platformio.org">PlatformIO</a> integrates well with a variety of different tools and allows you to do complex things almost as easily as in Java.</p>
<h2 id="dependency-management">Dependency Management</h2>
<p>A challenge in every C/C++ project is dependency management. There is no standard way to handle this in the language and ecosystem. Everyone does it in their own way. The well-known tool in certain circles is <a href="https://dernasherbrezon.com/en/posts/dynamic-libraries-rpath/">Conan</a>, but it lacks a wide range of libraries. Operating systems have libraries, but they are not suitable for microcontrollers, and their versions are determined by the operating systems, not the applications.</p>
<p>PlatformIO has its own library repository, which is conveniently integrated into the platform.</p>
<p><img src="/img/configuring-platformio/libs.png" alt=""></p>
<p>Here, you can filter libraries by microcontroller type, framework, purpose, and many other parameters. This is incredibly useful because there are a great variety of microcontrollers, all of which are different. Different architectures, different sets of registers, different memory sizes. The fact that PlatformIO takes this into account from the start allows you to somehow deal with the chaos.</p>
<p>To add a dependency to the project, you need to write the following:</p>
<pre><code>[env]
lib_deps = 
	jgromes/RadioLib@^4.6.0
	prampec/IotWebConf@^3.2.0
	bblanchon/ArduinoJson@^6.18.5
	thingpulse/ESP8266 and ESP32 OLED driver for SSD1306 displays@^4.2.1
</code></pre><p>This adds 4 libraries:</p>
<ul>
<li><a href="https://github.com/jgromes/RadioLib">jgromes/RadioLib</a> - a library for working with the LoRa chip. It provides a universal interface for sending and receiving data and hides some of the implementation details of the chips.</li>
<li><a href="https://github.com/prampec/IotWebConf">prampec/IotWebConf</a> - a library for configuration. It sets up an access point, stores system configuration in non-volatile memory, and handles the initial configuration of the system.</li>
<li><a href="https://github.com/bblanchon/ArduinoJson">bblanchon/ArduinoJson</a> - JSON serialization and deserialization.</li>
<li><a href="https://github.com/ThingPulse/esp8266-oled-ssd1306">thingpulse/ESP8266 and ESP32 OLED driver for SSD1306 displays</a> - a convenient library for working with the built-in display.</li>
</ul>
<p>All dependencies are simply downloaded from the git repository and placed in a special folder inside the project. Essentially, this is very similar to working with dependencies in npm. These dependencies are compiled as part of the project into a single binary - firmware.bin, which is then flashed to the microcontroller. If certain library functions are not used, they do not end up in the final distribution. This is especially relevant for microcontrollers, as their memory size is usually small. For example, the <a href="https://docs.platformio.org/en/latest/boards/espressif32/ttgo-lora32-v2.html">TTGO LoRa32-OLED V2</a> board has only 4MB of built-in flash memory and 320KB of RAM. And this is considered quite a lot.</p>
<h2 id="boards">Boards</h2>
<p>When it comes to boards, PlatformIO has a special entity - &ldquo;board.&rdquo; Each board is characterized by the type of processor, clock frequency, RAM size, and many other parameters. If the project plans to support different boards, you just need to declare them in the configuration, and PlatformIO will then build a separate firmware for each of them.</p>
<pre><code>[env:ttgo-lora32-v2]
platform = espressif32
board = ttgo-lora32-v2
build_flags = 
    ${env.build_flags}
	-DPIN_CS=18
	-DPIN_DI0=26
	-DPIN_RST=23
	-DPIN_OLED_SDA=21
	-DPIN_OLED_SCL=22
</code></pre><p>In the example above, I declared a configuration <code>ttgo-lora32-v2</code> that should be used to build the application for the ttgo-lora32-v2 board with additional compilation flags. <code>${env.build_flags}</code> inherits the common <code>build_flags</code> configuration from the <code>env</code> declaration. The other parameters are specific to the particular board. Because each board has fixed pin numbers, they can be declared directly in the configuration.</p>
<p>r2lora supports all boards that use the LoRa chip:</p>
<ul>
<li><a href="https://docs.platformio.org/en/latest/boards/espressif32/ttgo-lora32-v2.html">ttgo-lora32-v2</a></li>
<li><a href="https://docs.platformio.org/en/latest/boards/espressif32/ttgo-lora32-v1.html">ttgo-lora32-v1</a></li>
<li><a href="https://docs.platformio.org/en/latest/boards/espressif32/ttgo-lora32-v21.html">ttgo-lora32-v21</a></li>
<li><a href="https://docs.platformio.org/en/latest/boards/espressif32/heltec_wifi_lora_32.html">heltec_wifi_lora_32</a></li>
<li><a href="https://docs.platformio.org/en/latest/boards/espressif32/heltec_wifi_lora_32_V2.html">heltec_wifi_lora_32_V2</a></li>
<li><a href="https://docs.platformio.org/en/latest/boards/espressif32/ttgo-t-beam.html">ttgo-t-beam</a></li>
</ul>
<p>Nothing prevents you from manually attaching a <a href="https://www.amazon.co.uk/SX1278-DRF1278F-Arduino-wireless-module/dp/B079QZXP5D">LoRa chip</a> to the board. In this case, it is sufficient to declare a new environment and specify each of the pins.</p>
<p>Each board can have its own set of libraries and its own build folder:</p>
<p><img src="/img/configuring-platformio/envs.png" alt=""></p>
<h2 id="platform-and-framework">Platform and Framework</h2>
<p>In addition to boards, PlatformIO has the concepts of platform and framework. The platform usually corresponds to the type of microcontroller. In the case of ESP32, it is espressif32. Sometimes a microcontroller may support different architectures, in which case each of them has its own platform ID. The closest analogy is arm64 or armhf, except that the platform describes a specific chip. I attempted something similar when compiling applications <a href="https://dernasherbrezon.com/en/posts/apt-for-cpu/">for specific processors</a>.</p>
<p>All boards that contain LoRa chips are based on ESP32, so <code>platform = espressif32</code>.</p>
<p>The framework is something like an SDK, usually provided by the microcontroller manufacturer. Typically, with one SDK, you can develop for different models of microcontrollers. Sometimes there are universal SDKs. For ESP32, you can develop using <code>framework = espidf</code> or <code>framework = arduino</code>.I chose arduino because many libraries are written using the Arduino API. Despite the fact that ESP32 is not directly compatible with Arduino, there is an intermediate layer <code>framework-arduinoespressif32</code> that converts Arduino API calls into ESP32 calls. It&rsquo;s a bit suboptimal, but ESP32 is powerful enough, and not many people are concerned about it.</p>
<h2 id="project-structure">Project Structure</h2>
<p>When using <code>framework = arduino</code>, the project should be structured as follows:</p>
<p><img src="/img/configuring-platformio/project.png" alt=""></p>
<p>Inside the <code>src</code> folder are the source files and the entry point into the program. Usually, this is the <code>main</code> with the methods <code>void loop()</code> and <code>void setup()</code>. You can program in C or C++. However, if some libraries are written in C++ and do not support inclusion from C, you will have to write in C++ (sigh!).</p>
<p>There is also a <code>lib</code>. folder. It should contain small components of the application that need to be tested. It looks like this:</p>
<ul>
<li>PlatformIO will take each subfolder inside <code>lib</code> and compile it.</li>
<li>Link it with the tests.</li>
<li>Build firmware.bin.</li>
<li>Flash it to the board and get the test results.</li>
</ul>
<h2 id="project-testing">Project Testing</h2>
<p>PlatformIO allows you to run tests directly on the microcontroller! Tests can be divided into separate test suites, and within each, you can create several unit tests. Each test suite is a separate firmware with a single entry point and is uploaded to the microcontroller in the standard way.</p>
<p>In the screenshot above, I created several test suites:</p>
<ul>
<li>api - testing the REST API interface.</li>
<li>embedded (lora) - testing the LoRa module. It&rsquo;s sufficient to start reception and stop it. It checks for the correct pin configuration and chip usage.</li>
<li>fota - testing <a href="https://en.wikipedia.org/wiki/Over-the-air_update">Firmware-Over-The-Air (FOTA)</a>. A relatively complex test that is not launched by default. It downloads a new firmware from S3 and applies it.</li>
<li>util - testing a small utility class.</li>
</ul>
<p>I didn&rsquo;t bother achieving 80% code coverage with tests (it&rsquo;s not easy to calculate it just like that!), so I tried to test the code as much as possible. Whatever didn&rsquo;t work, well, it didn&rsquo;t work.</p>
<p>Each test suite contains several unit tests. To write unit tests, the <a href="https://github.com/ThrowTheSwitch/Unity">unity</a>. library is used. Since a unit test should run only once, the  <code>loop</code> method should not do anything useful. For example, it can blink an LED:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++"><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">loop</span>() {
  digitalWrite(<span style="color:#ae81ff">13</span>, HIGH);
  delay(<span style="color:#ae81ff">100</span>);
  digitalWrite(<span style="color:#ae81ff">13</span>, LOW);
  delay(<span style="color:#ae81ff">500</span>);
}
</code></pre></div><p>All the logic should be in the <code>setup</code> method:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++"><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">setup</span>() {
  <span style="color:#75715e">// NOTE!!! Wait for &gt;2 secs
</span><span style="color:#75715e"></span>  <span style="color:#75715e">// if board doesn&#39;t support software reset via Serial.DTR/RTS
</span><span style="color:#75715e"></span>  delay(<span style="color:#ae81ff">2000</span>);

  UNITY_BEGIN();
  RUN_TEST(test_success_start);
  RUN_TEST(test_no_request);
  RUN_TEST(test_invalid_json);
  RUN_TEST(test_begin_failed);
  RUN_TEST(test_success_stop_even_if_not_running);
  RUN_TEST(test_pull);
  RUN_TEST(test_frames_after_stop);
  RUN_TEST(test_cant_tx_during_receive);
  RUN_TEST(test_invalid_tx_request);
  RUN_TEST(test_empty_tx_request);
  RUN_TEST(test_invalid_lora_tx_code);
  RUN_TEST(test_invalid_tx_data_request);
  RUN_TEST(test_success_tx);
  UNITY_END();
}
</code></pre></div><p>In the example above, I added several unit tests to the test suite. Each unit test is a separate function:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++"><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">test_success_start</span>(<span style="color:#66d9ef">void</span>) {
  ApiHandler handler(<span style="color:#f92672">&amp;</span>web, <span style="color:#f92672">&amp;</span>mock, NULL, NULL);
  String output;
  <span style="color:#66d9ef">int</span> code <span style="color:#f92672">=</span> handler.handleStart(VALID_RX_REQUEST, <span style="color:#f92672">&amp;</span>output);
  TEST_ASSERT_EQUAL_INT(<span style="color:#ae81ff">200</span>, code);
  assertStatus(<span style="color:#f92672">&amp;</span>output, <span style="color:#e6db74">&#34;SUCCESS&#34;</span>);
}
</code></pre></div><p>There shouldn&rsquo;t be anything unexpected here. It&rsquo;s a standard test that you might encounter even in a Java project.</p>
<p>You can run either individual test suites or all of them together.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">pio test --test-port /dev/ttyACM0 -e ttgo-lora32-v2 -f fota
</code></pre></div><p>As a result, PlatformIO will display various statistics on the screen:</p>
<p><img src="/img/configuring-platformio/unittests.png" alt=""></p>
<p>More detailed documentation can be found on the project&rsquo;s website: <a href="https://docs.platformio.org/en/latest//plus/unit-testing.html">unit testing</a>.</p>
<h2 id="next-steps">Next Steps</h2>
<p>After understanding the project structure well enough, you can proceed directly to the implementation.</p>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Creating a project for ESP32</title>
      <link>https://dernasherbrezon.com/en/posts/programming-esp32/</link>
      <pubDate>Fri, 31 Dec 2021 01:30:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/en/posts/programming-esp32/</guid>
      <description>Recently, the LoRa data transmission protocol has been gaining popularity. Several satellites actively use it, and there is a whole network for signal reception - tinyGS. Of course, I couldn&amp;rsquo;t miss such a trend, so I started exploring how to connect the LoRa protocol to r2cloud. Unfortunately, it&amp;rsquo;s a closed protocol, so you can&amp;rsquo;t demodulate it with the standard rtl-sdr. To receive the signal, you need to use a special chip that will output a ready-made packet.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Creating a project for ESP32</h1></header>
      		<div class='container entry-content'>
  <p>Recently, the <a href="https://en.wikipedia.org/wiki/LoRa">LoRa data transmission protocol</a> has been gaining popularity. Several satellites actively use it, and there is a whole network for signal reception - <a href="https://tinygs.com">tinyGS</a>. Of course, I couldn&rsquo;t miss such a trend, so I started exploring how to connect the LoRa protocol to <a href="https://github.com/dernasherbrezon/r2cloud">r2cloud</a>. Unfortunately, it&rsquo;s a closed protocol, so you can&rsquo;t demodulate it with the standard rtl-sdr. To receive the signal, you need to use a special chip that will output a ready-made packet. This chip can be <a href="https://dernasherbrezon.com/en/posts/lora-raspberrypi/">directly connected to Raspberry Pi</a>, but it is usually used in conjunction with ESP32. To transmit data from ESP32 to Raspberry Pi, I created a separate project - <a href="https://github.com/dernasherbrezon/r2lora">r2lora</a>.</p>
<h2 id="problem-statement">Problem Statement</h2>
<p>So, the goal is to provide access to the LoRa chip from r2cloud. It is desirable that the access interface be universal and suitable not only for the r2cloud project. This will allow other projects unrelated to satellite signal reception to use, improve, and make changes to the project.</p>
<p>There are several options:</p>
<ul>
<li>Fully implement the r2cloud functionality on ESP32. This includes creating pass schedules, obtaining satellite parameters, auto-updating, and sending to the central server. This is a rather laborious process because a lot of ready and tested code will have to be rewritten. Moreover, it is unclear whether the ESP32 has enough power to calculate satellite orbits.</li>
<li>Write a minimal application to control the chip and monitor signal reception from r2cloud.</li>
</ul>
<p>I decided to go the second way. Firstly, r2cloud already supports getting data from external sources (plutosdr and sdr-server). Therefore, to add support for LoRa I will write yet another module. Secondly, there will be a minimum amount of logic on ESP32. The less code, the fewer errors. Thirdly, such a design will allow the project to be reused by non-satellite related projects.</p>
<h2 id="design">Design</h2>
<p>In general, the r2lora design looks like this:</p>
<div>
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" viewBox="-0.5 -0.5 503 282"><defs/><g><rect x="80" y="60" width="290" height="150" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="all"/><rect x="100" y="80" width="80" height="40" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 78px; height: 1px; padding-top: 100px; margin-left: 101px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">LoRa chip</div></div></div></foreignObject><text x="140" y="104" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">LoRa chip</text></switch></g><rect x="200" y="80" width="80" height="40" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 78px; height: 1px; padding-top: 100px; margin-left: 201px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">Web server</div></div></div></foreignObject><text x="240" y="104" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">Web server</text></switch></g><rect x="100" y="140" width="80" height="40" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 78px; height: 1px; padding-top: 160px; margin-left: 101px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">FOTA</div></div></div></foreignObject><text x="140" y="164" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">FOTA</text></switch></g><rect x="75" y="240" width="130" height="40" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 128px; height: 1px; padding-top: 260px; margin-left: 76px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">apt.leosatdata.com</div></div></div></foreignObject><text x="140" y="264" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">apt.leosatdata.com</text></switch></g><rect x="200" y="140" width="150" height="40" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 148px; height: 1px; padding-top: 160px; margin-left: 201px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">Configurator</div></div></div></foreignObject><text x="275" y="164" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">Configurator</text></switch></g><rect x="300" y="80" width="50" height="40" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 48px; height: 1px; padding-top: 100px; margin-left: 301px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">Wi-Fi</div></div></div></foreignObject><text x="325" y="104" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">Wi-Fi</text></switch></g><ellipse cx="475" cy="77.5" rx="7.5" ry="7.5" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="all"/><path d="M 475 85 L 475 110 M 475 90 L 460 90 M 475 90 L 490 90 M 475 110 L 460 130 M 475 110 L 490 130" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe flex-start; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 137px; margin-left: 475px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: nowrap;">REST API</div></div></div></foreignObject><text x="475" y="149" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">REST...</text></switch></g><path d="M 0 0 L 40 40 L 80 0 M 40 0 L 40 100" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><path d="M 350 110 L 443.63 110" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 448.88 110 L 441.88 113.5 L 443.63 110 L 441.88 106.5 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><path d="M 450 90 L 356.37 90" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 351.12 90 L 358.12 86.5 L 356.37 90 L 358.12 93.5 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><path d="M 280 100 L 300 100" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 180 100 L 200 100" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 40 100 L 100 100" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 140 233.63 L 140 186.37" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 140 238.88 L 136.5 231.88 L 140 233.63 L 143.5 231.88 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><path d="M 140 181.12 L 143.5 188.12 L 140 186.37 L 136.5 188.12 Z" fill="rgb(0, 0, 0)" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="all"/><rect x="310" y="30" width="60" height="30" fill="none" stroke="none" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-end; width: 58px; height: 1px; padding-top: 45px; margin-left: 310px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: right;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;"><font style="font-size: 18px;">r2lora</font></div></div></div></foreignObject><text x="368" y="49" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="end">r2lora</text></switch></g></g><switch><g requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"/><a transform="translate(0,-5)" xlink:href="https://www.diagrams.net/doc/faq/svg-export-text-problems" target="_blank"><text text-anchor="middle" font-size="10px" x="50%" y="100%">Text is not SVG - cannot display</text></a></switch></svg>
</div>
<p>Clients interact with the service through a REST API, which includes several methods:</p>
<ul>
<li>Start receiving data.</li>
<li>Get all received data packets. This needs to be run periodically to download received packets.</li>
<li>Finish receiving data.</li>
<li>Transmit data.</li>
<li>Get application status.</li>
</ul>
<p>I chose polling data instead of websockets because it is easy to implement on ESP32. And it is very reliable. When using websockets, it would be necessary to implement reconnection and data deduplication algorithms.</p>
<p>In addition to the main functionality, auxiliary functionality needs to be implemented. The &ldquo;Configurator&rdquo; component is designed to create the initial device configuration. It works as follows:</p>
<ul>
<li>If the device is not yet configured, you need to set up your own access point.</li>
<li>To perform the initial configuration, the user must connect to this access point, set the login, password for the local WiFi access point.</li>
<li>Disconnect.</li>
<li>After that, the device will disconnect its access point and try to connect to the local one.</li>
<li>If the connection is successful, the application starts the WebServer and begins to listen for user commands.</li>
</ul>
<p>If the device is already configured, it should immediately connect to the local access point. If the connection fails, it should return to the initial state and raise its access point.</p>
<p>Another mandatory component is <a href="https://en.wikipedia.org/wiki/Over-the-air_update">Firmware-Over-The-Air (FOTA)</a>. All applications have bugs, and one way to minimize their impact is automatic updating. FOTA allows you to automatically download firmware from a central server and update the device.</p>
<h2 id="tool-selection">Tool Selection</h2>
<p>There are several tools for developing on ESP32: <a href="https://www.arduino.cc/en/software">Arduino IDE</a>, <a href="https://platformio.org">PlatformIO</a>, and <a href="https://github.com/espressif/esp-idf">ESP-IDF</a>. PlatformIO has gradually become the most popular tool. It allows not only developing projects in C/C++ but also building projects, managing third-party libraries, running tests, analyzing code, and much more.</p>
<p>PlatformIO is just a plugin for Visual Studio Code. To install it, you just need to download VSCode and install the plugin.</p>
<p><img src="/img/programming-esp32/platformio.png" alt=""></p>
<p>In addition to the IDE, PlatformIO provides a CLI. With it, you can do everything the same as in the IDE but in the console. PlatformIO design is very similar to cmake, which only calls gcc with the necessary parameters, generates a makefile, builds the application, etc. PlatformIO downloads many Python dependencies and delegates assembly to the same ESP-IDF. At the same time, it integrates many unrelated tools perfectly, allowing you to focus on developing the application rather than configuring.</p>
<p>PlatformIO covers 100% of all my needs. Over several months of development, I did not experience any inconvenience, and everything was at hand.</p>
<p>In the next article, I will try to describe the project structure, the application development process, and reveal some features of programming for microcontrollers.</p>
<p>Next: <a href="https://dernasherbrezon.com/en/posts/configuring-platformio/">project setup</a></p>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>CPU-specific APT repositories</title>
      <link>https://dernasherbrezon.com/en/posts/apt-for-cpu/</link>
      <pubDate>Sat, 25 Sep 2021 13:17:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/en/posts/apt-for-cpu/</guid>
      <description>Interesting fact - all applications located in the standard Debian or Ubuntu repositories are compiled with default options. This leads to interesting consequences. For example, programmers do not use SIMD instructions and rely on the compiler. The compiler cannot always optimize the code for a specific processor. As a result, all the super-fast capabilities of processors and incredible SIMD operations are not used.
Debian developers explain this feature by stating that enabling support for extended registers does not provide significant acceleration.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>CPU-specific APT repositories</h1></header>
      		<div class='container entry-content'>
  <p>Interesting fact - all applications located in the standard Debian or Ubuntu repositories are compiled with default options. This leads to interesting consequences. For example, programmers do not use SIMD instructions and rely on the compiler. The compiler cannot always optimize the code for a specific processor. As a result, all the super-fast capabilities of processors and incredible SIMD operations are not used.</p>
<p>Debian developers explain this feature by stating that <a href="https://wiki.debian.org/ArmHardFloatPort/VfpComparison#NEON">enabling support for extended registers does not provide significant acceleration</a>. And often, this is true. Developers will not write assembly code to optimize applications for a specific processor. Moreover, not many applications need it. And even if you write more optimized code, it&rsquo;s unclear how to deliver it to the user. It becomes a vicious circle: operating systems have no incentive to maintain binary package infrastructure to improve performance by 5-10%. And developers will not write optimized code because there is no infrastructure.</p>
<p>Nevertheless, there are separate libraries that are optimized specifically for different processor versions and make the most of their capabilities. For example, <a href="https://www.libvolk.org">volk</a> provides a set of functions optimized for digital signal processing. If the processor supports an optimized implementation and such an implementation is written, volk chooses it. If not, a simple C implementation is used. So, there is no need to write code for each type of processor. This is good, but there remains another problem - the distribution of such libraries.</p>
<p>I solved this problem last week. However, before moving on to the solution, it is necessary to understand &ldquo;how does the distribution of APT packages work?&rdquo;</p>
<h2 id="apt-repositories">APT Repositories</h2>
<p><img src="/img/apt-for-cpu/1.png" alt=""></p>
<p>I will try to describe the Debian repository scheme, but this works exactly the same for Ubuntu. So, each distribution has a code name. This code name is given to different versions of the operating system. In the context of compilation, this means that different versions will have different versions of GCC and different versions of libc. This often implies that a package compiled in one version of the operating system may not work in another. Sometimes this is not the case, but generally, it is advisable to build the package for each OS version.</p>
<p>Each OS version has a list of architectures it supports. In the diagram above, I only listed two: armhf and amd64. In reality, Debian supports many more. The architecture in the context of application compilation is an averaged processor type. For example, amd64 includes all 64-bit processors, not just those from AMD. The same goes for armhf. armhf is a &ldquo;regular&rdquo; 32-bit processor on the ARM architecture.</p>
<p>To have binary applications for each processor, you need to go even further and add another level.</p>
<p><img src="/img/apt-for-cpu/2.png" alt=""></p>
<p>Separate repositories can be created for different versions of ARM processors: cortex-a7, cortex-a53, etc. You also need to have some common &ldquo;generic&rdquo; version. This is in case the CPU is not supported. Each package must be built for different processors and with default parameters for the &ldquo;generic&rdquo; version. On the client side, connecting a CPU-specific repository could be done like this (pseudocode):</p>
<pre><code>deb http://s3.amazonaws.com/r2cloud/cpu-$(lscpu model or generic if not supported) $(lsb_release --codename --short) main
</code></pre><p>Unfortunately, standard APT repositories do not support such detailed logical separation, so it can be done at the physical level. It&rsquo;s enough to create several different repositories under different URLs. It could look like this:</p>
<p><img src="/img/apt-for-cpu/3.png" alt=""></p>
<p>So, there are several physical repositories, each of which contains:</p>
<ul>
<li>several OS versions</li>
<li>several architectures</li>
<li>only one type of processor</li>
</ul>
<p>The good news is that there are not so many types of processors. The doubly good news is that there are not so many applications optimized for multiple processors. It turns out that such repositories would be relatively small.</p>
<h2 id="gcc-flags">GCC Flags</h2>
<p>In <a href="https://dernasherbrezon.com/en/posts/compare-compile-flags-raspberrypi/">my previous article</a>, I described the compilation options for the very first Raspberry Pi, which has the ARM arm1176jzf-s processor. However, other versions of Raspberry Pi contain different processors. That&rsquo;s why code compiled for one processor will not run on another:</p>
<p><img src="/img/apt-for-cpu/4.png" alt=""></p>
<p>By the way, compilation flags for ARM processors must be specified because GCC does not include support for NEON extended registers by default. However, for Intel x86_64, it&rsquo;s not necessary to include them because they are available by default. Here is a list of flags that need to be included for different versions of Raspberry Pi.</p>
<table>
	<thead>
		<tr>
			<th>Raspberry pi</th>
			<th>Flags</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td>Raspberry pi 1B</td>
			<td>-mcpu=arm1176jzf-s -mfpu=vfp -mfloat-abi=hard</td>
		</tr>
		<tr>
			<td>Raspberry pi 2 model B</td>
			<td>-mcpu=cortex-a7 -mfpu=neon-vfpv4 -mfloat-abi=hard</td>
		</tr>
		<tr>
			<td>Raspberry pi 3</td>
			<td>-mcpu=cortex-a53 -mfpu=neon-fp-armv8 -mfloat-abi=hard</td>
		</tr>
		<tr>
			<td>Raspberry pi 4</td>
			<td>-mcpu=cortex-a72 -mfpu=neon-fp-armv8 -mfloat-abi=hard</td>
		</tr>
	</tbody>
</table>
<h2 id="implementation">Implementation</h2>
<p>After figuring out how to build and distribute binaries across different repositories, the next step was to implement it. For different APT repositories, I created several S3 buckets. Each of them contains only binaries specific to a particular processor. As a result, the <a href="https://leosatdata.com/apt">r2cloud</a> project now has two types of repositories:</p>
<ul>
<li><a href="http://s3.amazonaws.com/r2cloud">http://s3.amazonaws.com/r2cloud</a> - contains applications that are not critical to the processor type. There is still a division into armhf and amd64.</li>
<li><a href="http://s3.amazonaws.com/r2cloud/cpu-">http://s3.amazonaws.com/r2cloud/cpu-</a>* - these repositories contain applications compiled for specific processors.</li>
</ul>
<p>To build applications for a specific processor type, I wrote a small bash script. In it, the processor architecture is determined (armhf or amd64):</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">CURRENT_ARCH<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>dpkg --print-architecture<span style="color:#66d9ef">)</span>
</code></pre></div><p>After that, the list of supported processors:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#66d9ef">if</span> <span style="color:#f92672">[</span> <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>CURRENT_ARCH<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;armhf&#34;</span> <span style="color:#f92672">]</span>; <span style="color:#66d9ef">then</span>
	supported_cores<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;arm1176jzf-s cortex-a53 cortex-a7 cortex-a72 generic&#34;</span>
<span style="color:#66d9ef">elif</span> <span style="color:#f92672">[</span> <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>CURRENT_ARCH<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;amd64&#34;</span> <span style="color:#f92672">]</span>; <span style="color:#66d9ef">then</span>
	supported_cores<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;generic&#34;</span>
<span style="color:#66d9ef">else</span>
	echo <span style="color:#e6db74">&#34;unknown arch: </span><span style="color:#e6db74">${</span>CURRENT_ARCH<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>
	exit <span style="color:#ae81ff">1</span>
<span style="color:#66d9ef">fi</span>
</code></pre></div><p>If the application needs to be built depending on the processor (all), the build is started for each of the processors. If not (one), the application is built for the standard repository:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#66d9ef">if</span> <span style="color:#f92672">[</span> <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>CORE_BUILD<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;all&#34;</span> <span style="color:#f92672">]</span>; <span style="color:#66d9ef">then</span>
	<span style="color:#66d9ef">for</span> i in <span style="color:#e6db74">${</span>supported_cores<span style="color:#e6db74">}</span>; <span style="color:#66d9ef">do</span>
		build_core $i
	<span style="color:#66d9ef">done</span>
<span style="color:#66d9ef">elif</span> <span style="color:#f92672">[</span> <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>CORE_BUILD<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;one&#34;</span> <span style="color:#f92672">]</span>; <span style="color:#66d9ef">then</span>
	build_core
<span style="color:#66d9ef">else</span>
	echo <span style="color:#e6db74">&#34;unknown core_build: </span><span style="color:#e6db74">${</span>CORE_BUILD<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>
	exit <span style="color:#ae81ff">1</span>
<span style="color:#66d9ef">fi</span>
</code></pre></div><h2 id="results">Results</h2>
<p>As a result, the build process takes a little more time. To scale further, something more serious than a regular bash script is needed. This is sufficient for my needs and allows for a significant simplification and acceleration of applications on the Raspberry Pi. The board itself is not very fast, so such optimization is extremely important.</p>
<p>Now I have infrastructure for delivering applications depending on the processor. Potentially I can extends this even further to support such exotic things GPU. Raspberry Pi contains VideoCore IV graphics core, which can multiply matrices and vectors very quickly. And this is extremely useful for digital signal processing.</p>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Compare different compilation flags for RaspberryPi</title>
      <link>https://dernasherbrezon.com/en/posts/compare-compile-flags-raspberrypi/</link>
      <pubDate>Thu, 23 Sep 2021 21:20:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/en/posts/compare-compile-flags-raspberrypi/</guid>
      <description>Recently, I came across the very first version of the RaspberryPi, and I decided to experiment a bit with this old hardware.
I was curious about how the performance of the volk library would differ depending on various compilation flags.
arm1176jzf-s Firstly, it is necessary to determine the processor. As known, RaspberryPi uses a system-on-the-chip (SoC) from Broadcom. It is even written on the processor itself: Broadcom BCM2835. Inside this chip, there are several logical components:</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Compare different compilation flags for RaspberryPi</h1></header>
      		<div class='container entry-content'>
  <p>Recently, I came across the very first version of the RaspberryPi, and I decided to experiment a bit with this old hardware.</p>
<p><img src="/img/compare-compile-flags-raspberrypi/rpi.jpg" alt=""></p>
<p>I was curious about how the performance of the <a href="https://github.com/gnuradio/volk">volk library</a> would differ depending on various compilation flags.</p>
<h2 id="arm1176jzf-s">arm1176jzf-s</h2>
<p>Firstly, it is necessary to determine the processor. As known, RaspberryPi uses a system-on-the-chip (SoC) from Broadcom. It is even written on the processor itself: Broadcom BCM2835. Inside this chip, there are several logical components:</p>
<ul>
<li>CPU core - ARM arm1176jzf-s</li>
<li>GPU core - VideoCore 4</li>
</ul>
<p>Unfortunately, standard Linux tools provide completely incorrect information about the processor, so you have to look at the markings directly on the board and search for information on the Internet.</p>
<p>According to the <a href="https://developer.arm.com/documentation/ddi0360/f/introduction-to-vfp">arm1176jzf-s specification</a>, it does not support NEON. Therefore, there is little reason to expect significant differences in the performance of volk. Nevertheless, I wanted to dig into the numbers and try a couple of ideas.</p>
<h2 id="compilation-flags">Compilation flags</h2>
<p>So, based on the information about the core, I created two different sets of flags:</p>
<ul>
<li>export CXXFLAGS=&quot;-mcpu=arm1176jzf-s -mfpu=vfp -mfloat-abi=hard&quot;. By default, in Debian, all &ldquo;-mfpu&rdquo; flags are turned off. However, arm1176jzf-s contains the most basic extension for working with floating-point numbers - vfp. It makes sense to enable it and see how the program&rsquo;s speed changes.</li>
<li>export CXXFLAGS=&quot;&quot;. Default flags.</li>
</ul>
<p>In addition to compiling volk with these groups of flags, I decided to test:</p>
<ul>
<li>the result in Debian stretch (gcc 6.3.0)</li>
<li>the result in Debian buster (gcc 8.3.0)</li>
<li>the result compiled on RaspberryPi 3 but run it on RaspberryPi 1</li>
</ul>
<p>As a test program, I chose complex number multiplication. NEON can increase speed of such test by 5 times. In this test, I did not expect any acceleration. Perhaps the only reason I chose it was that it is the most common operation in digital signal processing.</p>
<pre><code>volk_profile -R volk_32fc_x2_dot_prod_32fc
</code></pre><h2 id="results">Results</h2>
<p>I placed the test results in a table:</p>
<table>
	<thead>
		<tr>
			<td>Flags</td>
			<td>Stretch</td>
			<td>Stretch RPi3</td>
			<td>Buster</td>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td>"-mcpu=arm1176jzf-s -mfpu=vfp -mfloat-abi=hard"</td>
			<td>28548.9 ms</td>
			<td>28515.9 ms</td>
			<td>28669 ms</td>
		</tr>
		<tr>
			<td>""</td>
			<td><strong>28088 ms</strong></td>
			<td><strong>28022 ms</strong></td>
			<td><strong>28095.8 ms</strong></td>
		</tr>
	</tbody>
</table>
<p>As seen from the table, there is no significant difference in execution speed. However, there is a slight acceleration when compiling without any flags, on average, by 500 ms. Perhaps the operating system has some default flags that slightly help.</p>
<p>Another interesting finding is that different versions of GCC give approximately the same result. Apparently, the code in both cases contains the same compiler optimizations. Or none at all.</p>
<p>The third finding is that the application&rsquo;s speed does not depend on the device on which it was compiled. This is quite an obvious conclusion, but I am glad that it was confirmed once again. This indicates that there are no hidden options and optimizations in the device firmware.</p>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Monitor Mikrotik routers using Prometheus</title>
      <link>https://dernasherbrezon.com/en/posts/prometheus-monitoring-mikrotik/</link>
      <pubDate>Sat, 07 Aug 2021 06:50:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/en/posts/prometheus-monitoring-mikrotik/</guid>
      <description>To begin with, a few words about why it is necessary to monitor routers. A router, like any other device, has hardware resources that can become depleted. For example, the browser may become slower in opening pages or videos may take longer to load. This can be caused by either the internet service provider or the router. It&amp;rsquo;s possible that too many devices are connected to the router, causing it to slow down, or someone may be downloading excessively in parallel - all of this can be the reason for the slowdown.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Monitor Mikrotik routers using Prometheus</h1></header>
      		<div class='container entry-content'>
  <p>To begin with, a few words about why it is necessary to monitor routers. A router, like any other device, has hardware resources that can become depleted. For example, the browser may become slower in opening pages or videos may take longer to load. This can be caused by either the internet service provider or the router. It&rsquo;s possible that too many devices are connected to the router, causing it to slow down, or someone may be downloading excessively in parallel - all of this can be the reason for the slowdown.</p>
<p>So that&rsquo;s why I decided to monitor my Mikrotik router in the realtime.</p>
<h2 id="the-concept">The concept</h2>
<p>I have <a href="https://mikrotik.com/product/RBwAPR-2nD">Mikrotik waP R</a> that can use a SIM card to connect to a cellular network and provide Wi-Fi.</p>
<p><img src="/img/prometheus-monitoring-mikrotik/mikrotik_wap_r.jpg" alt="mikrotik_wap_r"></p>
<p>The general monitoring scheme looks like this:</p>
<p><img src="/img/prometheus-monitoring-mikrotik/schema.png" alt=""></p>
<h2 id="mikrotik">Mikrotik</h2>
<p>To monitor Mikrotik with Prometheus, you need to use a special exporter that converts Mikrotik&rsquo;s <a href="https://ru.wikipedia.org/wiki/SNMP">SNMP</a> metrics into a format that can be read by Prometheus. By default, SNMP is not enabled on Mikrotik, so you will need to enable it first with the following command:</p>
<pre><code>[admin@MikroTik] /snmp
[admin@MikroTik] /snmp&gt;  set enabled yes
</code></pre><h2 id="snmp-exporter">SNMP-exporter</h2>
<p><a href="https://github.com/prometheus/snmp_exporter">SNMP-exporter</a> is needed to convert metrics from SNMP format into a special format that Prometheus understands. It is installed quite simply:</p>
<pre><code>wget https://github.com/prometheus/snmp_exporter/releases/download/v0.20.0/snmp_exporter-0.20.0.linux-armv7.tar.gz
tar xzf snmp_exporter-0.20.0.linux-armv7.tar.gz
</code></pre><p>The next step will be to create a systemd service that will automatically start on boot. To do this, create the following file:</p>
<pre><code>sudo vi /etc/systemd/system/snmp_exporter.service
</code></pre><p>With the following contents:</p>
<pre><code>[Unit]
Description=SNMP Exporter
After=network-online.target

[Service]
User=pi
Restart=on-failure
ExecStart=/usr/local/bin/snmp_exporter --config.file='&lt;path to&gt;/snmp_exporter-0.20.0.linux-armv7/snmp.yml'

[Install]
WantedBy=multi-user.target
</code></pre><p>Next, you need to copy snmp_exporter:</p>
<pre><code>sudo cp ./snmp_exporter-0.20.0.linux-armv7/snmp_exporter /usr/local/bin/snmp_exporter
</code></pre><p>And start the service:</p>
<pre><code>sudo systemctl enable snmp_exporter
sudo systemctl start snmp_exporter
</code></pre><p>Check the status using the command below:</p>
<pre><code>sudo systemctl status snmp_exporter
</code></pre><p>If the service started successfully, the output will be as follows:</p>
<p><img src="/img/prometheus-monitoring-mikrotik/snmp_exporter.png" alt=""></p>
<h2 id="prometheus">Prometheus</h2>
<p>All metrics will be stored in <a href="https://prometheus.io">Prometheus</a>, a special database for storing metrics that can be run locally or in the cloud.</p>
<p>I won&rsquo;t go into detail on how to configure and start Prometheus, as there are <a href="https://prometheus.io/docs/prometheus/latest/getting_started/">comprehensive instructions</a> available.</p>
<p>For now, it&rsquo;s enough to configure the connection to the exporter, which is done through the main config file, prometheus.yaml.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml">  - <span style="color:#f92672">job_name</span>: <span style="color:#ae81ff">mikrotik</span>
    <span style="color:#f92672">static_configs</span>:
      - <span style="color:#f92672">targets</span>:
        - <span style="color:#ae81ff">192.168.1.1</span>  <span style="color:#75715e"># SNMP device.</span>
    <span style="color:#f92672">metrics_path</span>: <span style="color:#ae81ff">/snmp</span>
    <span style="color:#f92672">params</span>:
      <span style="color:#f92672">module</span>: [<span style="color:#ae81ff">mikrotik]</span>
    <span style="color:#f92672">relabel_configs</span>:
      - <span style="color:#f92672">source_labels</span>: [<span style="color:#ae81ff">__address__]</span>
        <span style="color:#f92672">target_label</span>: <span style="color:#ae81ff">__param_target</span>
      - <span style="color:#f92672">source_labels</span>: [<span style="color:#ae81ff">__param_target]</span>
        <span style="color:#f92672">target_label</span>: <span style="color:#ae81ff">instance</span>
      - <span style="color:#f92672">target_label</span>: <span style="color:#ae81ff">__address__</span>
        <span style="color:#f92672">replacement</span>: <span style="color:#ae81ff">raspberrypi.local:9116</span>
</code></pre></div><h2 id="grafana">Grafana</h2>
<p>You can use <a href="https://grafana.com/grafana/dashboards/14420">pre-configured dashboards</a> and instantly import them into Grafana.</p>
<p><img src="/img/prometheus-monitoring-mikrotik/image.png" alt=""></p>
<p>However each device is different and most of these dashboards don&rsquo;t work for my device model. For <a href="https://mikrotik.com/product/RBwAPR-2nD">Mikrotik waP R</a> I manually selected the following parameters:</p>
<ul>
<li>Uptime - <code>sysUpTime{instance='$instance'}/100</code></li>
<li>Load CPU - <code>avg(hrProcessorLoad{instance='$instance'})</code></li>
<li>Load RAM - <code>(hrStorageUsed{hrStorageIndex='65536',instance='$instance'} * 100 )/(hrStorageSize{hrStorageIndex='65536',instance='$instance'})</code></li>
<li>Load system disk - <code>(hrStorageUsed{hrStorageIndex='131072',instance='$instance'} * 100 )/(hrStorageSize{hrStorageIndex='131072',instance='$instance'})</code></li>
<li>In/Out bit/sec - <code>irate(ifHCInOctets{job='mikrotik',ifName=~'$Interface',instance='$instance'}[20s])*8</code></li>
<li>RSRP (Reference Signal Received Power) level of TLE signal - <code>mtxrLTEModemSignalRSRP</code></li>
</ul>
<p>And added them to Grafana panels:</p>
<p><img src="/img/prometheus-monitoring-mikrotik/grafana.png" alt=""></p>
<p>It is possible to add any other custom metrics using SNMP. Firstly you need to find their oid (SNMP identifier) using the command below:</p>
<pre><code>[admin@MikroTik] /interface lte print oid
</code></pre><p>Then add oid into snmp.yaml:</p>
<pre><code>pi@rasp-buster:~ $ grep 1.3.6.1.4.1.14988.1.1.16.1.1.4 snmp.yml -B 1
  - name: mtxrLTEModemSignalRSRP
    oid: 1.3.6.1.4.1.14988.1.1.16.1.1.4
</code></pre><p>Once added <code>mtxrLTEModemSignalRSRP</code> metric should be available in Prometheus and Grafana.</p>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Dynamic libraries, RPATH and Conan</title>
      <link>https://dernasherbrezon.com/en/posts/dynamic-libraries-rpath/</link>
      <pubDate>Thu, 18 Feb 2021 23:11:18 +0000</pubDate>
      
      <guid>https://dernasherbrezon.com/en/posts/dynamic-libraries-rpath/</guid>
      <description>This article is more of a summary of what I learned in the last week about dynamic libraries, RPATH, and Conan.
Introduction No one in their right mind would start learning how libraries are linked in MacOS. So, first, I&amp;rsquo;ll try to outline the problem I was trying to solve.
So, back in the old days when computer hard drives were small, computer memory was scarce, people came up with the idea of reusing libraries.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Dynamic libraries, RPATH and Conan</h1></header>
      		<div class='container entry-content'>
  <p>This article is more of a summary of what I learned in the last week about dynamic libraries, RPATH, and Conan.</p>
<h2 id="introduction">Introduction</h2>
<p>No one in their right mind would start learning how libraries are linked in MacOS. So, first, I&rsquo;ll try to outline the problem I was trying to solve.</p>
<p>So, back in the old days when computer hard drives were small, computer memory was scarce, people came up with the idea of reusing libraries. How does it work? Suppose we have 2 applications:</p>
<ul>
<li>A calculator depending on libraries:
<ul>
<li>math</li>
<li>ncurses</li>
</ul>
</li>
<li>A task scheduler depending on libraries:
<ul>
<li>pthread</li>
<li>ncurses</li>
</ul>
</li>
</ul>
<p>Upon launch of these two applications, the operating system would load the necessary libraries into memory. However, since the <code>ncurses</code> library would be loaded once, the operating system wouldn&rsquo;t load it again. Instead, the &ldquo;task scheduler&rdquo; application would get a reference to the memory of the already loaded library. This is safe enough because the library cannot change (I intentionally simplify the situation with global variables and thread-safe guarantees). So application loaded two libraries, but operating system loaded only one (Resident memory vs Shared memory). The more applications use the same libraries, the faster the application startup and the lower the memory consumption.</p>
<p>In addition to saving memory, such reuse improved the maintainability of the operating system. Suppose a vulnerability is found in one of the libraries (ncurses). To fix it, you only need to update the library in one place. All applications using that library would automatically receive the security update. This is particularly important if some applications (e.g., &ldquo;task scheduler&rdquo;) are infrequently updated or abandoned by their creators.</p>
<p>An alternative to this approach is thick distributions. I&rsquo;ve already written about the pros and cons of <a href="https://dernasherbrezon.com/en/posts/thin-and-fat-distributives/">thin and fat distributions</a> for Java. In general, for C/C++, the arguments are quite similar. However, historically, operating system applications have been thin distributions. <a href="https://fedoraproject.org/wiki/Bundled_Libraries?rd=Packaging:Bundled_Libraries">Many operating systems</a> still <a href="https://www.debian.org/doc/debian-policy/ch-source.html#s-embeddedfiles">require applications to be delivered</a> as thin distributions.</p>
<p>Most arguments for and against thin distributions made sense 20 years ago. Now, when memory and disk size are not as critical, new arguments against thin distributions are emerging:</p>
<ul>
<li>The number of libraries and applications has become so large that maintainers of popular systems are no longer able to deliver packages with the latest library versions. Often they freeze a stable version and release small security updates.</li>
<li>Again, due to the number of libraries and dependencies between them, it has become more difficult to find a list of versions that would suit most applications. If the calculator uses ncurses version 1.0, and the &ldquo;task scheduler&rdquo; uses ncurses version 2.0, it&rsquo;s unclear which version of ncurses to install. apt, rpm, yum allow installing only one version of a library. You can&rsquo;t install versions 1.0 and 2.0 simultaneously. If these versions are incompatible, you&rsquo;ll have to choose which application to include in the operating system.</li>
<li>Constantly updating the version of the entire operating system is necessary. After all, new versions of libraries will not appear. And writing code, half of which is adorned with <code>#if NCURSES = 1.0 ... #else if NCURSES = 2.0 ... #endif</code>  is not something anyone wants.</li>
</ul>
<p>All of this flashed through my mind in a matter of seconds when I was thinking about how to fix &ldquo;<a href="https://github.com/dernasherbrezon/sdr-server/issues/3">Compiling issue - rtlsdr_set_bias_tee</a>&rdquo; in sdr-server.</p>
<h2 id="conanhttpsconanio"><a href="https://conan.io">Conan</a></h2>
<p>Weighing all the pros and cons, I decided to go the route of thick distributions. For this, I decided to delve into the trendy technology that everyone is talking about - <a href="https://conan.io">Conan</a> by JFrog.</p>
<p><img src="/img/dynamic-libraries-rpath/conan-install_flow.png" alt="conan-install_flow"></p>
<p>The main idea of the project is that the compiled libraries are already on a central server. To use them, you just need to connect them to the project. Conan will download them and correctly substitute the paths. This is done with a small config:</p>
<pre><code>[requires]
rtlsdr/0.6.4
volk/2.4.1

[build_requires]
check/0.15.2@r2cloud/stable

[generators]
cmake
</code></pre><p>After that, include Conan in CMakeLists.txt:</p>
<pre><code>include(${CMAKE_BINARY_DIR}/conanbuildinfo.cmake)
conan_basic_setup()
</code></pre><p>Then, in the <code>build</code> Then, in the <code>install</code> command:</p>
<pre><code>#: conan install ..
</code></pre><p>This command will download dependencies, put them in the local repository, and generate a CMake config that includes all dependent libraries. After that, all that remains is to link these libraries to the executable file:</p>
<pre><code>target_link_libraries(sdr_server ${CONAN_LIBS})
</code></pre><p>And build the project:</p>
<pre><code>cmake ..
</code></pre><p>That was all in theory. In practice, everything is completely different.</p>
<h2 id="practice">Practice</h2>
<p>In practice, there are very few libraries in <a href="https://conan.io/center/">conan-center</a> Moreover, those that exist are, for some reason, <a href="https://github.com/conan-io/conan-center-index/pull/4582">incorrectly built</a>. I was, in general, prepared for this, so I gathered my thoughts and began to delve into all the nuances of linking libraries, their distribution, and how it is implemented in Conan.</p>
<p>So, to understand how to correctly build a library, it is necessary to understand how it is linked with the program. To do this, you need to take a couple of steps back.</p>
<p>In CMake, there are two completely different concepts: build and install. I even drew a picture to reinforce this important knowledge:</p>
<div>
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" viewBox="-0.5 -0.5 401 262"><defs/><g><path d="M 160 260 L 160 20" fill="none" stroke="rgb(0, 0, 0)" stroke-miterlimit="10" pointer-events="stroke"/><rect x="0" y="0" width="120" height="20" fill="none" stroke="none" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 10px; margin-left: 1px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">Build</div></div></div></foreignObject><text x="60" y="14" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">Build</text></switch></g><rect x="200" y="0" width="200" height="20" fill="none" stroke="none" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 198px; height: 1px; padding-top: 10px; margin-left: 201px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">Install</div></div></div></foreignObject><text x="300" y="14" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">Install</text></switch></g><rect x="0" y="60" width="120" height="40" fill="#ffe6cc" stroke="#d79b00" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 80px; margin-left: 1px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">app/build/</div></div></div></foreignObject><text x="60" y="84" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">app/build/</text></switch></g><rect x="0" y="100" width="120" height="160" fill="rgb(255, 255, 255)" stroke="rgb(0, 0, 0)" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 180px; margin-left: 1px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">app<br />app_sharedLib.dylib<br />configs</div></div></div></foreignObject><text x="60" y="184" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">app...</text></switch></g><rect x="200" y="60" width="200" height="40" fill="#ffe6cc" stroke="#d79b00" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 198px; height: 1px; padding-top: 80px; margin-left: 201px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">/usr/bin/app</div></div></div></foreignObject><text x="300" y="84" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">/usr/bin/app</text></switch></g><rect x="200" y="140" width="200" height="40" fill="#ffe6cc" stroke="#d79b00" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 198px; height: 1px; padding-top: 160px; margin-left: 201px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">/usr/local/lib/app_sharedLib.dylib</div></div></div></foreignObject><text x="300" y="164" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">/usr/local/lib/app_sharedLib.dylib</text></switch></g><rect x="200" y="220" width="200" height="40" fill="#ffe6cc" stroke="#d79b00" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 198px; height: 1px; padding-top: 240px; margin-left: 201px;"><div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: center;"><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;">/usr/local/include/app</div></div></div></foreignObject><text x="300" y="244" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px" text-anchor="middle">/usr/local/include/app</text></switch></g></g><switch><g requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"/><a transform="translate(0,-5)" xlink:href="https://www.diagrams.net/doc/faq/svg-export-text-problems" target="_blank"><text text-anchor="middle" font-size="10px" x="50%" y="100%">Text is not SVG - cannot display</text></a></switch></svg>
</div>
<p>During the &ldquo;build&rdquo; phase, the application is compiled, and artifacts are generated from it. During the &ldquo;install&rdquo; phase, these artifacts are copied to the correct location within the operating system. There is a very important thing here: the separation into two phases is quite conditional. It&rsquo;s not Maven, where there are clear rules for when and what should be executed. In most cases, the build folder after compilation is a dump of various files scattered across folders. Some libraries even <a href="https://github.com/gnuradio/volk/blob/master/CMakeLists.txt#L283">tidy up</a> public header files and libraries only during the &ldquo;install&rdquo; phase. Despite such disorder during the &ldquo;build&rdquo; phase, any developer expects that the application can be run on success. This is a very important point to understand the correct linking of dynamic libraries.</p>
<p>Next, I will try to describe how Conan embeds dependencies in different phases.</p>
<h3 id="compilation">Compilation</h3>
<p>The simplest step. Conan uses paths from the local cache and passes them to the compiler:</p>
<pre><code>[ 37%] Building C object CMakeFiles/perf_xlating.dir/test/perf_xlating.c.o
/Library/Developer/CommandLineTools/usr/bin/cc \
 -I/Users/dernasherbrezon/.conan/data/check/0.15.2/r2cloud/stable/package/6a83d7f783e7ee89a83cf2fe72b5f5f67538e2a6/include \
 -I/Users/dernasherbrezon/.conan/data/rtlsdr/0.6.4/_/_/package/6a83d7f783e7ee89a83cf2fe72b5f5f67538e2a6/include \
 -I/Users/dernasherbrezon/.conan/data/volk/2.4.1/_/_/package/6a83d7f783e7ee89a83cf2fe72b5f5f67538e2a6/include \
 -I/usr/local/include -std=c99 -O3 -DNDEBUG  -isysroot /Library/Developer/CommandLineTools/SDKs/MacOSX11.0.sdk -std=gnu99 -o CMakeFiles/perf_xlating.dir/test/perf_xlating.c.o -c /Users/dernasherbrezon/git/sdr-server/test/perf_xlating.c
</code></pre><p>In this case, the cache is located at <code>/Users/dernasherbrezon/.conan/data/</code> and the libraries <code>rtlsdr, volk &amp; check</code> are used.</p>
<h3 id="linking">Linking</h3>
<p>Linking is the same: paths from the local cache are used during linking.</p>
<pre><code>[ 40%] Linking C executable bin/perf_xlating
/usr/local/Cellar/cmake/3.19.4/bin/cmake -E cmake_link_script CMakeFiles/perf_xlating.dir/link.txt --verbose=1
/Library/Developer/CommandLineTools/usr/bin/cc -std=c99 -O3 -DNDEBUG  -isysroot /Library/Developer/CommandLineTools/SDKs/MacOSX11.0.sdk -Wl,-search_paths_first -Wl,-headerpad_max_install_names CMakeFiles/perf_xlating.dir/test/perf_xlating.c.o -o bin/perf_xlating  \
 -L/Users/dernasherbrezon/.conan/data/check/0.15.2/r2cloud/stable/package/6a83d7f783e7ee89a83cf2fe72b5f5f67538e2a6/lib \
 -L/Users/dernasherbrezon/.conan/data/rtlsdr/0.6.4/_/_/package/6a83d7f783e7ee89a83cf2fe72b5f5f67538e2a6/lib \
 -L/Users/dernasherbrezon/.conan/data/volk/2.4.1/_/_/package/6a83d7f783e7ee89a83cf2fe72b5f5f67538e2a6/lib \
 lib/libsdr_serverLib.a \
 -lcheck -lrtlsdr -lvolk /Library/Developer/CommandLineTools/SDKs/MacOSX11.0.sdk/usr/lib/libz.tbd /usr/local/lib/libconfig.dylib -lpthread -lm 
</code></pre><h3 id="running-after-build">Running after build</h3>
<p>The application will run without any problems, but here, a surprise awaits: absolute paths to dependent libraries. During linking, paths to libraries are specified in the executable file.</p>
<pre><code>otool -l bin/perf_xlating|grep -B 2 volk
          cmd LC_LOAD_DYLIB
      cmdsize 152
         name /Users/dernasherbrezon/.conan/data/volk/2.4.1/_/_/package/6a83d7f783e7ee89a83cf2fe72b5f5f67538e2a6/lib/libvolk.2.4.dylib (offset 24)
</code></pre><p>Such programs simply won&rsquo;t work on another computer due to absolute paths.</p>
<h3 id="running-after-install">Running after install</h3>
<p>The application simply won&rsquo;t run. To make it run, you need to place all dependent libraries next to the binary. In Conan, this is done easily. Just add the following to the  <code>conanfile.txt</code> file:</p>
<pre><code>[imports]
bin, *.dll -&gt; ./bin 
lib, *.dylib* -&gt; ./lib
lib, *.so* -&gt; ./lib
</code></pre><p>This section will be executed during the <code>conan import ..</code> command and will copy all libraries from the local cache to the application directory. For example, <code>/Users/dernasherbrezon/.conan/data/volk/2.4.1/_/_/package/6a83d7f783e7ee89a83cf2fe72b5f5f67538e2a6/lib/libvolk.2.4.dylib</code> -&gt; <code>sdr-server/build/lib/libvolk.2.4.dylib</code>.</p>
<p>The next step is to change absolute paths to relative ones inside the executable file. And here is where RPATH comes into play. This is a special section in the executable file that contains directories in which to search for dynamic libraries. In this section, you can place a value with a special variable <code>@executable_path</code> to make the linker start searching for libraries relative to the executable file. The algorithm will be as follows:</p>
<ol>
<li>Load the executable file.</li>
<li>For each library name, take its path. If it contains the keyword @rpath, then</li>
<li>Find the RPATH section in the executable file. If it exists, then</li>
<li>Check the value of the section. If it contains @executable_path, then substitute the current path to the binary</li>
<li>In the obtained path, look for the library.</li>
</ol>
<p>In MacOS, things are a bit more complicated. The library contains inside it the path where it is located:</p>
<pre><code>otool -l /Users/dernasherbrezon/.conan/data/volk/2.4.1/_/_/package/6a83d7f783e7ee89a83cf2fe72b5f5f67538e2a6/lib/libvolk.2.4.dylib|grep -A 2 LC_ID_DYLIB
          cmd LC_ID_DYLIB
      cmdsize 152
         name /Users/dernasherbrezon/.conan/data/volk/2.4.1/_/_/package/6a83d7f783e7ee89a83cf2fe72b5f5f67538e2a6/lib/libvolk.2.4.dylib (offset 24)
</code></pre><p>This looks very strange. Apparently, during linking, this path is copied from the library to the executable file. Of course, in such libraries, you also need to replace absolute paths with relative ones. This can be done with a special program:</p>
<pre><code>install_name_tool -id @rpath/libvolk.2.4.dylib /Users/dernasherbrezon/.conan/data/volk/2.4.1/_/_/package/6a83d7f783e7ee89a83cf2fe72b5f5f67538e2a6/lib/libvolk.2.4.dylib
</code></pre><p>Now the path contains the special label @rpath:</p>
<pre><code>otool -l /Users/dernasherbrezon/.conan/data/volk/2.4.1/_/_/package/6a83d7f783e7ee89a83cf2fe72b5f5f67538e2a6/lib/libvolk.2.4.dylib|grep -A 2 LC_ID_DYLIB
          cmd LC_ID_DYLIB
      cmdsize 56
         name @rpath/libvolk.2.4.dylib (offset 24)
</code></pre><p>This label will be substituted from the RPATH section of the executable file. Now the dependencies look like this:</p>
<pre><code>otool -L bin/perf_xlating 
bin/perf_xlating:
	@rpath/libcheck.0.dylib (compatibility version 0.0.0, current version 0.15.2)
	@rpath/librtlsdr.0.dylib (compatibility version 0.0.0, current version 0.6.4)
	@rpath/libvolk.2.4.dylib (compatibility version 2.4.0, current version 0.0.0)
</code></pre><p>The last step is to set the RPATH section to start using relative paths to libraries.</p>
<pre><code>install_name_tool -add_rpath @executable_path/../lib bin/perf_xlating
</code></pre><p>After all these manipulations, you can check the result. Since library search occurs at runtime, to find out the resulting paths, you need to run the program:</p>
<pre><code>DYLD_PRINT_LIBRARIES=YES bin/perf_xlating 
dyld: loaded: &lt;7AB49406-C965-3CD7-99E5-398BC69A6567&gt; /&lt;edited&gt;/sdr-server/build/bin/perf_xlating
dyld: loaded: &lt;26F34288-9251-3468-9ED9-10A595F04DED&gt; /&lt;edited&gt;/sdr-server/build/bin/../lib/libcheck.0.dylib
dyld: loaded: &lt;C8BA4B0A-EE3A-3322-9B14-1C68CFCF977B&gt; /&lt;edited&gt;/sdr-server/build/bin/../lib/librtlsdr.0.dylib
dyld: loaded: &lt;24DC8413-C299-3CD5-ADDD-5785C39B6084&gt; /&lt;edited&gt;/sdr-server/build/bin/../lib/libvolk.2.4.dylib
...
</code></pre><p>Perfect.</p>
<p>For Linux, the steps are roughly the same, just simpler. You don&rsquo;t need to specify paths inside the libraries themselves.</p>
<p>A few words about CMake. The <code>install_name_tool</code> program can be replaced with CMake commands. Unfortunately, CMake has a dozen different parameters that implicitly affect the result.</p>
<pre><code>CMAKE_INSTALL_RPATH
CMAKE_BUILD_WITH_INSTALL_RPATH
CMAKE_INSTALL_RPATH_USE_LINK_PATH
CMAKE_BUILD_RPATH
CMAKE_SKIP_BUILD_RPATH
INSTALL_RPATH
BUILD_RPATH
</code></pre><p>I couldn&rsquo;t get CMake to set the correct RPATH in the executable file. Perhaps Conan <a href="https://docs.conan.io/en/latest/howtos/manage_shared_libraries/rpaths.html">implicitly overwrites</a> certain variables, thereby breaking the algorithm.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Spending a week on learning, creating a pull request in Conan, volk, and libcheck, I ultimately decided to do everything the old-fashioned way. The idea of thick distributions is good, but the infrastructure is not ready for it yet. Whether the infrastructure for C/C++ projects with its CMake, Make, pkgconf, autotools, Conan will ever be ready is a big question.</p>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Fat and thin distributions</title>
      <link>https://dernasherbrezon.com/en/posts/thin-and-fat-distributives/</link>
      <pubDate>Wed, 26 Aug 2020 22:31:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/en/posts/thin-and-fat-distributives/</guid>
      <description>This week, I finally migrated all my projects to Ubuntu 18.04 and thin .deb distributions. I started this project at the beginning of the year and completed it only now, almost 8 months later. The migration itself deserves a separate article with complaints and rhetorical questions. Here, I want to briefly describe the confrontation between thin and fat distributions, share my perspective on this story, and provide some analysis. Let&amp;rsquo;s dive in!</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Fat and thin distributions</h1></header>
      		<div class='container entry-content'>
  <p>This week, I finally migrated all my projects to Ubuntu 18.04 and thin .deb distributions. I started this project at the beginning of the year and completed it only now, almost 8 months later. The migration itself deserves a separate article with complaints and rhetorical questions. Here, I want to briefly describe the confrontation between thin and fat distributions, share my perspective on this story, and provide some analysis. Let&rsquo;s dive in!</p>
<h2 id="distributions">Distributions</h2>
<p>Almost immediately after writing the first version of any program, the question arises of how to distribute it. In 2020, there are several fairly standard ways:</p>
<ul>
<li>Docker image. The program is compiled, and all dependent libraries are placed in the <a href="https://docs.docker.com/storage/storagedriver/">storage layer</a></li>
<li>Zip file. All necessary files are simply placed in an archive.</li>
<li>Debian package. I wrote a bit about how to build it in <a href="https://dernasherbrezon.com/en/posts/java-dist/">one of my articles</a></li>
</ul>
<p>While Docker images are straightforward, deciding what to include in a zip file or Debian package is not always obvious. There are two diametrically opposed strategies.</p>
<h2 id="fat-distributions">Fat Distributions</h2>
<p>The idea is quite simple: let&rsquo;s put all the necessary files and dependent libraries needed for the application to run into the archive. The advantages of this approach include:</p>
<ul>
<li>Almost no dependency on the external environment. It doesn&rsquo;t matter what libraries are already installed in the operating system; the application will bring its own libraries with the required versions.</li>
<li>No dependency on other applications. This follows from the fact that all dependencies are inside the fat distribution.</li>
<li>Simplicity. Just download one distribution and run it with <code>java -jar fatApp.jar</code>.</li>
</ul>
<p>The disadvantages include:</p>
<ul>
<li>The distribution is very heavy. Because all dependencies are included, the distribution size significantly increases. This affects installation speed (you need to download the distribution from the apt repository or artifactory) and build speed, as well as repository upload speed.</li>
<li>As a result, the binary repository size increases significantly. You need to plan a strategy for cleaning up old versions. For example, Docker recently faced the problem of a bloated Docker Hub repository and <a href="https://www.docker.com/pricing/retentionfaq">decided to delete unused Docker images</a>. Deleting old and unused dependencies is a complex and non-trivial task.</li>
</ul>
<p>A prominent supporter of fat distributions is the <a href="https://docs.spring.io/spring-boot/docs/2.1.5.RELEASE/reference/html/build-tool-plugins-maven-plugin.html">spring boot</a> project. During the  <code>package</code> phase, they build a fat distribution that can be run with a single command:</p>
<pre><code>$ mvn package
$ java -jar target/mymodule-0.0.1-SNAPSHOT.jar
</code></pre><h2 id="thin-distributions">Thin Distributions</h2>
<p>Thin distributions are intended to address the issues of fat distributions, but they have their own downsides:</p>
<ul>
<li>Relative complexity. There is no consensus on how to correctly build a slim distribution and deploy it for execution</li>
<li>Dependency on other applications. In a classic thin distribution, dependencies are installed in the operating system. But what if one application needs one version of a library, and another application needs a different version? Developers of Linux-like operating systems try to find the least common denominator for thousands of applications and libraries. This is a complex and labor-intensive procedure.</li>
</ul>
<p>The advantages are straightforward:</p>
<ul>
<li>Applications are very lightweight. They can be deployed quickly, and often there is no need to worry about the size of the binary repository.</li>
<li>Dependencies are reused between applications. While not very relevant for the Java world, it is in demand for the C/C++ world. The idea is that a library is loaded into memory only once and then used by different applications. This reduces memory consumption and application load time.</li>
</ul>
<p>As I mentioned before, strong advocates of thin distributions are operating systems. Despite the fact that the Ubuntu team decided to create fat distributions (snap packages), the community greeted this idea very coolly and with a dose of skepticism.</p>
<h2 id="thin-distributions-for-java">Thin Distributions for Java</h2>
<p>In all my projects, I gradually moved away from fat distributions and switched to slim ones. This was important for me for several reasons:</p>
<ul>
<li>Large binary repositories are expensive to maintain. For hobby projects that don&rsquo;t generate income, paying for gigabytes of distributions is costly.</li>
<li>Build and repository upload speed. I often work on trains, planes, hotels, where connection speed is limited. Downloading 100 MB of fat distributions can take hours. Meanwhile, downloading ~200 KB takes seconds. It is very convenient and increases productivity.</li>
</ul>
<p>Since there is no consensus on how to create slim distributions, I decided to create my own. To do this, I wrote a small Maven plugin - <a href="https://github.com/dernasherbrezon/deps-maven-plugin">deps-maven-plugin</a>. During the build, it creates three files:</p>
<ul>
<li>repositories.txt - a list of all Maven repositories available in the project.</li>
<li>dependencies.txt - a list of all project dependencies.</li>
<li>script.sh - a fixed script inside the plugin.</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-xml" data-lang="xml"><span style="color:#f92672">&lt;plugin&gt;</span>
	<span style="color:#f92672">&lt;groupId&gt;</span>com.aerse.maven<span style="color:#f92672">&lt;/groupId&gt;</span>
	<span style="color:#f92672">&lt;artifactId&gt;</span>deps-maven-plugin<span style="color:#f92672">&lt;/artifactId&gt;</span>
	<span style="color:#f92672">&lt;configuration&gt;</span>
		<span style="color:#f92672">&lt;repositories&gt;</span>${project.build.directory}/deps/repositories.txt<span style="color:#f92672">&lt;/repositories&gt;</span>
		<span style="color:#f92672">&lt;dependencies&gt;</span>${project.build.directory}/deps/dependencies.txt<span style="color:#f92672">&lt;/dependencies&gt;</span>
		<span style="color:#f92672">&lt;script&gt;</span>${project.build.directory}/deps/script.sh<span style="color:#f92672">&lt;/script&gt;</span>
		<span style="color:#f92672">&lt;excludes&gt;</span>
			<span style="color:#f92672">&lt;exclude&gt;</span>com.example:*:*<span style="color:#f92672">&lt;exclude&gt;</span>
		<span style="color:#f92672">&lt;/excludes&gt;</span>
	<span style="color:#f92672">&lt;/configuration&gt;</span>
<span style="color:#f92672">&lt;/plugin&gt;</span>
</code></pre></div><p>The idea is quite simple: after unpacking the thin distribution, you need to call script.sh and pass it the two generated files. It will download them and place them in the specified folder. This will be the folder with all the dependencies.</p>
<p>Keep in mind that all dependencies must be available in public Maven repositories. If not, you can exclude them in the <code>excludes</code> section and place them inside the thin artifact.</p>
<p>But what if the artifact changes its version or is removed from the list of dependencies? It&rsquo;s simple: script.sh builds the intersection of dependencies needed in the folder and those already present there. If dependencies have already been downloaded, they will not be downloaded again. If dependencies are no longer used (present in the folder but absent in dependencies.txt), they are deleted from the folder.</p>
<p>After the script finishes, you can run the application. For example, here are the paths for r2cloud:</p>
<pre><code>java -cp /home/pi/r2cloud/lib/*:/usr/share/java/r2cloud/* ru.r2cloud.R2Cloud
</code></pre><p>The <code>/home/pi/r2cloud/lib/</code> folder contains the application itself, while the  <code>/usr/share/java/r2cloud/</code> folder contains all the application&rsquo;s dependencies.</p>
<h2 id="results">Results</h2>
<p>In addition to the obvious advantages of thin distributions, there are some less obvious ones. For example, they significantly save traffic when updating r2cloud via a 3G modem. Also, over time, I accumulated about 564.11 MB of r2cloud distributions. This is <a href="https://travis-ci.org/github/dernasherbrezon/r2cloud">about 600</a> builds!</p>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Unit tests</title>
      <link>https://dernasherbrezon.com/en/posts/unit-tests/</link>
      <pubDate>Mon, 25 May 2020 17:27:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/en/posts/unit-tests/</guid>
      <description>15 years ago, nobody had even heard of unit tests. We just wrote the code once and then relied on manual QA and our sharp eyes to check for any issues. We all lived in perfect harmony and peace. But then came along those damn unit tests, and suddenly the world was split into two warring factions: those who write tests and those who don&amp;rsquo;t.
Spoiler alert: I&amp;rsquo;m on team auto-tests.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Unit tests</h1></header>
      		<div class='container entry-content'>
  <p>15 years ago, nobody had even heard of unit tests. We just wrote the code once and then relied on manual QA and our sharp eyes to check for any issues. We all lived in perfect harmony and peace. But then came along those damn unit tests, and suddenly the world was split into two warring factions: those who write tests and those who don&rsquo;t.</p>
<p>Spoiler alert: I&rsquo;m on team auto-tests.</p>
<p>There are so many arguments for and against unit tests out there on the internet. So, I decided to create my own list of arguments in favor of unit tests. Because who doesn&rsquo;t love spending extra time writing code just to make sure it works? It&rsquo;s not like we have better things to do, right?</p>
<h2 id="1">1</h2>
<p>Unit tests aren&rsquo;t meant to test every logical condition and possible combination of inputs and outputs. They&rsquo;re just meant to make sure the code runs at least once.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#a6e22e">@Test</span>
<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">testSuccess</span><span style="color:#f92672">()</span> <span style="color:#66d9ef">throws</span> Exception <span style="color:#f92672">{</span>
	ObservationRequest req <span style="color:#f92672">=</span> createRequest<span style="color:#f92672">();</span>
	<span style="color:#66d9ef">int</span> times <span style="color:#f92672">=</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">int</span><span style="color:#f92672">)</span> <span style="color:#f92672">((</span>req<span style="color:#f92672">.</span><span style="color:#a6e22e">getEndTimeMillis</span><span style="color:#f92672">()</span> <span style="color:#f92672">-</span> req<span style="color:#f92672">.</span><span style="color:#a6e22e">getStartTimeMillis</span><span style="color:#f92672">())</span> <span style="color:#f92672">/</span> 1000<span style="color:#f92672">);</span>
	config<span style="color:#f92672">.</span><span style="color:#a6e22e">setProperty</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;rotator.enabled&#34;</span><span style="color:#f92672">,</span> <span style="color:#66d9ef">true</span><span style="color:#f92672">);</span>
	service <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> RotatorService<span style="color:#f92672">(</span>config<span style="color:#f92672">,</span> predict<span style="color:#f92672">,</span> <span style="color:#66d9ef">new</span> ScheduleFixedTimesTheadPoolFactory<span style="color:#f92672">(</span>times<span style="color:#f92672">),</span> <span style="color:#66d9ef">new</span> SteppingClock<span style="color:#f92672">(</span>req<span style="color:#f92672">.</span><span style="color:#a6e22e">getStartTimeMillis</span><span style="color:#f92672">(),</span> 1000<span style="color:#f92672">));</span>
	service<span style="color:#f92672">.</span><span style="color:#a6e22e">start</span><span style="color:#f92672">();</span>
	assertNotNull<span style="color:#f92672">(</span>service<span style="color:#f92672">.</span><span style="color:#a6e22e">schedule</span><span style="color:#f92672">(</span>req<span style="color:#f92672">,</span> req<span style="color:#f92672">.</span><span style="color:#a6e22e">getStartTimeMillis</span><span style="color:#f92672">()));</span>
	<span style="color:#66d9ef">try</span> <span style="color:#f92672">(</span>BufferedReader r <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> BufferedReader<span style="color:#f92672">(</span><span style="color:#66d9ef">new</span> InputStreamReader<span style="color:#f92672">(</span>RotatorService<span style="color:#f92672">.</span><span style="color:#a6e22e">class</span><span style="color:#f92672">.</span><span style="color:#a6e22e">getClassLoader</span><span style="color:#f92672">().</span><span style="color:#a6e22e">getResourceAsStream</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;expected/rotctrld-requests.txt&#34;</span><span style="color:#f92672">),</span> StandardCharsets<span style="color:#f92672">.</span><span style="color:#a6e22e">UTF_8</span><span style="color:#f92672">)))</span> <span style="color:#f92672">{</span>
		String curLine <span style="color:#f92672">=</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">;</span>
		<span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> 0<span style="color:#f92672">;</span>
		<span style="color:#66d9ef">while</span> <span style="color:#f92672">((</span>curLine <span style="color:#f92672">=</span> r<span style="color:#f92672">.</span><span style="color:#a6e22e">readLine</span><span style="color:#f92672">())</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
			assertPosition<span style="color:#f92672">(</span>curLine<span style="color:#f92672">,</span> requestHandler<span style="color:#f92672">.</span><span style="color:#a6e22e">getRequests</span><span style="color:#f92672">().</span><span style="color:#a6e22e">get</span><span style="color:#f92672">(</span>i<span style="color:#f92672">));</span>
			i<span style="color:#f92672">++;</span>
		<span style="color:#f92672">}</span>
		assertEquals<span style="color:#f92672">(</span>i<span style="color:#f92672">,</span> requestHandler<span style="color:#f92672">.</span><span style="color:#a6e22e">getRequests</span><span style="color:#f92672">().</span><span style="color:#a6e22e">size</span><span style="color:#f92672">());</span>
	<span style="color:#f92672">}</span>
<span style="color:#f92672">}</span>
</code></pre></div><p>I hear this conversation all the time:</p>
<ul>
<li>Let&rsquo;s write some unit tests here.</li>
<li>But we won&rsquo;t be able to cover cases A, B, and C!</li>
<li>Exactly, it&rsquo;s too complex and we don&rsquo;t have the infrastructure for it. Let&rsquo;s come back to it when we have more time.</li>
</ul>
<p>I strongly disagree with this approach. Tests aren&rsquo;t supposed to cover every possible case, A, B, and C. Their main purpose is just to run the code at least once. I&rsquo;ve seen so many cases where developers write code and never actually run it. Having a test is a great way to prove that the code ran at least once and that there aren&rsquo;t any ridiculously stupid mistakes in there.</p>
<h2 id="2">2</h2>
<p>Even small libraries should be tested, and in fact, testing them is especially important. Often, small libraries have a clearly defined interface that can be easily tested with unit tests. It&rsquo;s important to ensure that even small pieces of code work correctly and reliably, as they may be used by other programs or systems and any issues could cause unexpected problems downstream. By testing even small libraries, developers can catch and fix any issues early on, before they become bigger problems.</p>
<p><img src="/img/unit-tests/1.png" alt=""></p>
<h2 id="3">3</h2>
<p>Writing tests makes you think about how the code is structured. Usually, a developer is focused on making sure the code works as it should. However, writing tests allows you to understand how the code will be used. I&rsquo;m not a big fan of TDD, but there is some truth to this methodology - you should write code and tests at the same time. This can greatly save time on integrating the code with other components.</p>
<p><img src="/img/unit-tests/2.png" alt=""></p>
<p>Also, when writing tests, you start to think: &ldquo;What else can I check?&rdquo; &ldquo;Did I forget anything?&rdquo; This allows you to look at the code from a different angle and come up with a couple of strange usage scenarios that are worth testing. This also includes all kinds of checks for input parameters and boundary conditions.</p>
<h2 id="4">4</h2>
<p>Tests allow fixing implementation errors. Suppose all tests pass successfully, but it turns out that the code still works incorrectly. In this case, its implementation is changed, and the tests are run again. There should be no errors.</p>
<p>This point can be expanded: tests allow updating dependent libraries. Let&rsquo;s say you have the situation: the code depends on a third-party library. A security flaw was found in this library. If there are tests, then you can simply update the version of the dependent library and run the tests. There should be no errors. This is very convenient to use in conjunction with automatic pull request generation systems. For example, GitHub recently learned to scan dependent libraries for various vulnerabilities and automatically create pull requests with updated library versions. If there are tests, such pull requests are automatically built and tested. If there are no errors, then you can update safely.</p>
<p><img src="/img/unit-tests/3.png" alt=""></p>
<h2 id="conclusion">Conclusion</h2>
<p>Write tests. And if you don&rsquo;t know how, ask me. I know.</p>

</div>

      	]]>
      </turbo:content>
    </item>
    
    <item turbo="true">
      <title>Distributing Java application</title>
      <link>https://dernasherbrezon.com/en/posts/java-dist/</link>
      <pubDate>Tue, 18 Aug 2015 13:55:18 +0100</pubDate>
      
      <guid>https://dernasherbrezon.com/en/posts/java-dist/</guid>
      <description>Surprisingly, but a fact - distributing Java applications in the 21st century is still a huge hassle. Developers still come up with methods like rsync/copy-paste/wget to install Java applications on servers. And only monstrous enterprise production-ready platforms sometimes allow a bit more - rolling back the application to a previous version. In this article, I would like to talk about an accessible and straightforward way of organizing distribution.
deb и apt In the world, there are many truly gigantic repositories of applications and tools for their distribution.</description>
      <turbo:content>
      	<![CDATA[
      		<header>
      			<h1>Distributing Java application</h1></header>
      		<div class='container entry-content'>
  <p><img src="/img/java-dist/75bbd9f6074d4cb8a46ad705051aa8e0.png" alt=""></p>
<p>Surprisingly, but a fact - distributing Java applications in the 21st century is still a huge hassle. Developers still come up with methods like rsync/copy-paste/wget to install Java applications on servers. And only monstrous enterprise production-ready platforms sometimes allow a bit more - rolling back the application to a previous version. In this article, I would like to talk about an accessible and straightforward way of organizing distribution.</p>
<h2 id="deb-и-apt">deb и apt</h2>
<p>In the world, there are many truly gigantic repositories of applications and tools for their distribution. The largest, by perception, are AppStore, Google Play, Debian/Ubuntu repositories, and CentOS/Fedora YUM repositories. For example, in the Ubuntu repositories for version 15.04, there are about 90,000 applications (excluding various versions). Why not use a time-tested system for distributing Java applications? Especially considering that:</p>
<ul>
<li><a href="http://w3techs.com/technologies/details/os-linux/all/all">Most</a> servers already use Debian/Ubuntu.</li>
<li>It&rsquo;s a time-tested tool: the first release was <a href="https://en.wikipedia.org/wiki/Advanced_Packaging_Tool">16 years</a> ago</li>
<li>Native support in the operating system.</li>
</ul>
<p>To begin with, let&rsquo;s talk a bit about the application distribution system in Debian/Ubuntu. It consists of two main parts:</p>
<ul>
<li>deb packages</li>
<li>apt (Advanced Package Tool) tools</li>
</ul>
<h2 id="deb-пакеты">deb пакеты</h2>
<p>deb is a binary distribution of an application. It consists of three main parts:</p>
<ul>
<li>metadata. Manufacturer, version, dependencies on other packages (very similar to Maven), description, etc.</li>
<li>the application itself. .tar.gz archive</li>
<li>(optional) scripts that will be executed during installation</li>
</ul>
<p>The structure of the .tar.gz archive can be completely custom. However, for your application to resemble all other applications on the system, it must follow the Debian/Ubuntu directory structure:</p>
<ul>
<li>/etc - configs</li>
<li>/etc/init.d/ - daemon startup scripts</li>
<li>/usr/bin - executable files</li>
<li>/usr/lib - libraries</li>
<li>/var/log - logs</li>
</ul>
<p>Depending on your application, the directories may differ slightly, but the overall structure should be pretty clear.</p>
<p>Another important feature of deb packages is the ability to run scripts during installation. These scripts are also stored in the deb package and have standard naming. Each script can be executed in a specific installation phase. The installation of a package is divided into several phases:</p>
<ul>
<li>preinst</li>
<li>inst</li>
<li>postinst</li>
<li>prerm</li>
<li>rm</li>
<li>postrm</li>
</ul>
<p>There are many different intermediate phases and different combinations of installation states. We are not very interested in them, but for those who want to understand, you can read the <a href="https://www.debian.org/doc/debian-policy/ch-maintainerscripts.html">official documentation</a>. Typically, these scripts configure log rotation and archiving, set initial configuration values (e.g., root password for MySQL). If you have a final business application, it&rsquo;s better to use a proper automation tool like <a href="http://www.ansible.com/home">Ansible</a>, <a href="https://www.chef.io/chef/">Chief</a>, <a href="https://puppetlabs.com">Puppet</a>.</p>
<h2 id="apt">apt</h2>
<p>apt is a set of tools for working with deb packages. It allows you to:</p>
<ul>
<li>configure repositories and work with them: add, remove, change, update the index</li>
<li>manage packages: install, remove, update, search</li>
</ul>
<p>In a simplified form, an apt repository is an HTTP server that distributes deb packages. It has an index (file) that is available at the standard path, and binaries.</p>
<h2 id="bringing-it-all-together">Bringing It All Together</h2>
<p>Once clear what deb and apt are and how to use them, let&rsquo;s try to do something:</p>
<ul>
<li>create a deb package in the package phase</li>
<li>publish the resulting package in the deploy phase</li>
</ul>
<p>To archive we can choose one of the existing plugins.</p>
<h2 id="jdebhttpsgithubcomtcurdtjdeb"><a href="https://github.com/tcurdt/jdeb">jdeb</a></h2>
<p>The scheme of its work is <a href="https://github.com/tcurdt/jdeb/blob/master/src/examples/maven/pom.xml">quite simple</a>:</p>
<ul>
<li>list the files and directories that will go into the resulting .tar.gz archive</li>
<li>specify permissions</li>
</ul>
<p>More detailed documentation on the capabilities of the plugin can be found on the official <a href="https://github.com/tcurdt/jdeb/blob/master/docs/maven.md">page</a>.</p>
<h2 id="apt-maven-pluginhttpsgithubcomdernasherbrezonapt-maven-plugin"><a href="https://github.com/dernasherbrezon/apt-maven-plugin">apt-maven-plugin</a></h2>
<p>It works with the repository specified in distributionManagement as an apt repository, not a Maven repository. Although there is nothing stopping them from being used simultaneously under one URL. Their layouts are compatible with each other.</p>
<p>The example configuration looks like this:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-xml" data-lang="xml"><span style="color:#f92672">&lt;plugin&gt;</span>
	<span style="color:#f92672">&lt;groupId&gt;</span>com.aerse.maven<span style="color:#f92672">&lt;/groupId&gt;</span>
	<span style="color:#f92672">&lt;artifactId&gt;</span>apt-maven-plugin<span style="color:#f92672">&lt;/artifactId&gt;</span>
	<span style="color:#f92672">&lt;version&gt;</span>1.5<span style="color:#f92672">&lt;/version&gt;</span>
	<span style="color:#f92672">&lt;executions&gt;</span>
		<span style="color:#f92672">&lt;execution&gt;</span>
			<span style="color:#f92672">&lt;id&gt;</span>deploy<span style="color:#f92672">&lt;/id&gt;</span>
			<span style="color:#f92672">&lt;goals&gt;</span>
				<span style="color:#f92672">&lt;goal&gt;</span>deploy<span style="color:#f92672">&lt;/goal&gt;</span>
			<span style="color:#f92672">&lt;/goals&gt;</span>
		<span style="color:#f92672">&lt;/execution&gt;</span>
	<span style="color:#f92672">&lt;/executions&gt;</span>
	<span style="color:#f92672">&lt;configuration&gt;</span>
		<span style="color:#f92672">&lt;component&gt;</span>main<span style="color:#f92672">&lt;/component&gt;</span>
		<span style="color:#f92672">&lt;codename&gt;</span>strepo<span style="color:#f92672">&lt;/codename&gt;</span>
	<span style="color:#f92672">&lt;/configuration&gt;</span>
<span style="color:#f92672">&lt;/plugin&gt;</span>
</code></pre></div><p>And the distributionManagement section (nothing <a href="https://maven.apache.org/plugins/maven-deploy-plugin/usage.html">unusual</a>):</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-xml" data-lang="xml"><span style="color:#f92672">&lt;distributionManagement&gt;</span>
	<span style="color:#f92672">&lt;repository&gt;</span>
		<span style="color:#f92672">&lt;id&gt;</span>maven-release-repo<span style="color:#f92672">&lt;/id&gt;</span>
		<span style="color:#f92672">&lt;url&gt;</span>http://example.com/maven<span style="color:#f92672">&lt;/url&gt;</span>
	<span style="color:#f92672">&lt;/repository&gt;</span>
<span style="color:#f92672">&lt;/distributionManagement&gt;</span>
</code></pre></div><p>After the deploy phase is executed, <a href="http://example.com/maven">http://example.com/maven</a> will become both a Maven and an apt repository. And you can confidently write:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">sudo add-apt-repository <span style="color:#e6db74">&#34;deb http://example.com/maven strepo main&#34;</span>
sudo apt-get update
sudo apt-get install &lt;artifactId&gt;
</code></pre></div><h2 id="and-a-pinch-of-enterprise">And a pinch of Enterprise</h2>
<p>The mantra of every Java enterprise developer sounds like this:</p>
<ul>
<li>security</li>
<li>stability</li>
<li>high availability production ready platform</li>
</ul>
<p>All of this is perfectly solved by creating an apt repository from the most popular hosting for developers: <a href="https://aws.amazon.com/s3/">s3</a>. Together with CloudFront, it guarantees <a href="https://aws.amazon.com/s3/sla/">99.9%</a> reliability and geographical <a href="https://www.google.com/maps/d/viewer?mid=zq41xmfbtRfA.kUKJZcl-4O7k&amp;hl=en">distribution</a>.</p>
<p>This is also quite simple to do. You need to connect the plugin for working with S3:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-xml" data-lang="xml"><span style="color:#f92672">&lt;build&gt;</span>
	<span style="color:#f92672">&lt;extensions&gt;</span>
		<span style="color:#f92672">&lt;extension&gt;</span>
			<span style="color:#f92672">&lt;groupId&gt;</span>org.springframework.build<span style="color:#f92672">&lt;/groupId&gt;</span>
			<span style="color:#f92672">&lt;artifactId&gt;</span>aws-maven<span style="color:#f92672">&lt;/artifactId&gt;</span>
			<span style="color:#f92672">&lt;version&gt;</span>5.0.0.RELEASE<span style="color:#f92672">&lt;/version&gt;</span>
		<span style="color:#f92672">&lt;/extension&gt;</span>
	<span style="color:#f92672">&lt;/extensions&gt;</span>
<span style="color:#f92672">&lt;/build&gt;</span>
</code></pre></div><p>Change the URL in the distributionManagement section to the bucket&rsquo;s name:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-xml" data-lang="xml"><span style="color:#f92672">&lt;distributionManagement&gt;</span>
	<span style="color:#f92672">&lt;repository&gt;</span>
		<span style="color:#f92672">&lt;id&gt;</span>maven-release-repo<span style="color:#f92672">&lt;/id&gt;</span>
		<span style="color:#f92672">&lt;url&gt;</span>s3://example.bucket<span style="color:#f92672">&lt;/url&gt;</span>
	<span style="color:#f92672">&lt;/repository&gt;</span>
<span style="color:#f92672">&lt;/distributionManagement&gt;</span>
</code></pre></div><p>And configure access to your bucket:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-xml" data-lang="xml"><span style="color:#f92672">&lt;servers&gt;</span>
	<span style="color:#f92672">&lt;server&gt;</span>  
		<span style="color:#f92672">&lt;id&gt;</span>maven-release-repo<span style="color:#f92672">&lt;/id&gt;</span>  
		<span style="color:#f92672">&lt;username&gt;</span>apikey<span style="color:#f92672">&lt;/username&gt;</span>  
		<span style="color:#f92672">&lt;password&gt;</span>apisecret<span style="color:#f92672">&lt;/password&gt;</span>  
	<span style="color:#f92672">&lt;/server&gt;</span>
<span style="color:#f92672">&lt;/servers&gt;</span>
</code></pre></div><p>On the end servers to access such a repository, there is a special plugin: <a href="https://launchpad.net/~leonard-ehrenfried/+archive/ubuntu/apt-transport-s3">apt-transport-s3</a>. Unfortunately, it is not yet in the official repositories, so you need to manually add one of the repositories where it is contained:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">sudo add-apt-repository ppa:leonard-ehrenfried/apt-transport-s3
sudo apt-get install apt-transport-s3
</code></pre></div><p>After that, you can point to S3 repository:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">sudo add-apt-repository <span style="color:#e6db74">&#34;deb s3://apikey:apisecret@s3.amazonaws.com/example.bucket strepo main&#34;</span>
</code></pre></div><h2 id="conclusion">Conclusion</h2>
<p>After all the manipulations, installing the application is as simple as:</p>
<ul>
<li>mvn clean deploy</li>
</ul>
<p>On any Debian/Ubuntu server anywhere in the world:</p>
<ul>
<li>apt-get update</li>
<li>apt-get install artifactId</li>
</ul>

</div>

      	]]>
      </turbo:content>
    </item>
    
  </channel>
</rss>